// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* MyFantasyName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyFantasyName_reflection_ = NULL;
const ::google::protobuf::Descriptor* FantasyPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FantasyPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Secret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Secret_reflection_ = NULL;
const ::google::protobuf::Descriptor* Secret2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Secret2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Secret3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Secret3_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OutData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NameProof_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameProof_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NameProof_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TweetProof_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TweetProof_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterProof_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterProof_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignedTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockHeader_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SignedBlockHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedBlockHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NodeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FantasyPlayerPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FantasyPlayerPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjectionTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjectionTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjectionTransBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjectionTransBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Data_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScheduleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScheduleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataTransition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataTransition_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamState_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DeltaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeltaData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeltaData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MessageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StampedTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StampedTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeOrder_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExchangeOrder_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OrderUnique_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderUnique_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderDeets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderDeets_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsideUnique_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsideUnique_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeTransition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeTransition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeTransition_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Bitcoin_UTXO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bitcoin_UTXO_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bitcoin_UTXOS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bitcoin_UTXOS_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapFill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapFill_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapSent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapSent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProofOfDoubleSpend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProofOfDoubleSpend_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapSentAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapSentAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TrType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoData_2eproto() {
  protobuf_AddDesc_ProtoData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoData.proto");
  GOOGLE_CHECK(file != NULL);
  MyFantasyName_descriptor_ = file->message_type(0);
  static const int MyFantasyName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, status_),
  };
  MyFantasyName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyFantasyName_descriptor_,
      MyFantasyName::default_instance_,
      MyFantasyName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyFantasyName));
  FantasyPlayer_descriptor_ = file->message_type(1);
  static const int FantasyPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, bits_),
  };
  FantasyPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FantasyPlayer_descriptor_,
      FantasyPlayer::default_instance_,
      FantasyPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyPlayer));
  Secret_descriptor_ = file->message_type(2);
  static const int Secret_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, myfantasyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, nametran_),
  };
  Secret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Secret_descriptor_,
      Secret::default_instance_,
      Secret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Secret));
  Secret2_descriptor_ = file->message_type(3);
  static const int Secret2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, fantasy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, public_key_),
  };
  Secret2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Secret2_descriptor_,
      Secret2::default_instance_,
      Secret2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Secret2));
  Secret3_descriptor_ = file->message_type(4);
  static const int Secret3_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret3, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret3, mnemonic_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret3, fantasy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret3, public_key_),
  };
  Secret3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Secret3_descriptor_,
      Secret3::default_instance_,
      Secret3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Secret3));
  OutData_descriptor_ = file->message_type(5);
  static const int OutData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, myfantasyname_),
  };
  OutData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutData_descriptor_,
      OutData::default_instance_,
      OutData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutData));
  OutData_Type_descriptor_ = OutData_descriptor_->enum_type(0);
  InData_descriptor_ = file->message_type(6);
  static const int InData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, data2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, data_trans_),
  };
  InData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InData_descriptor_,
      InData::default_instance_,
      InData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InData));
  InData_Type_descriptor_ = InData_descriptor_->enum_type(0);
  NameProof_descriptor_ = file->message_type(7);
  static const int NameProof_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, type_),
  };
  NameProof_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameProof_descriptor_,
      NameProof::default_instance_,
      NameProof_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameProof));
  NameProof_Type_descriptor_ = NameProof_descriptor_->enum_type(0);
  TweetProof_descriptor_ = file->message_type(8);
  static const int TweetProof_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetProof, tweet_),
  };
  TweetProof_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TweetProof_descriptor_,
      TweetProof::default_instance_,
      TweetProof_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetProof, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetProof, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TweetProof));
  MasterProof_descriptor_ = file->message_type(9);
  static const int MasterProof_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterProof, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterProof, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterProof, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterProof, new_oracle_name_),
  };
  MasterProof_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterProof_descriptor_,
      MasterProof::default_instance_,
      MasterProof_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterProof, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterProof, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterProof));
  Transaction_descriptor_ = file->message_type(10);
  static const int Transaction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, nonce_),
  };
  Transaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transaction));
  NameTrans_descriptor_ = file->message_type(11);
  static const int NameTrans_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, fantasy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, proof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, recovery_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, am_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, my_agent_),
  };
  NameTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameTrans_descriptor_,
      NameTrans::default_instance_,
      NameTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameTrans));
  TransferTrans_descriptor_ = file->message_type(12);
  static const int TransferTrans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferTrans, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferTrans, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferTrans, amount_),
  };
  TransferTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferTrans_descriptor_,
      TransferTrans::default_instance_,
      TransferTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferTrans));
  SignedTransaction_descriptor_ = file->message_type(13);
  static const int SignedTransaction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, trans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, sig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, fantasy_name_),
  };
  SignedTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedTransaction_descriptor_,
      SignedTransaction::default_instance_,
      SignedTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedTransaction));
  BlockHeader_descriptor_ = file->message_type(14);
  static const int BlockHeader_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, prev_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, generator_pk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, generating_sig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, basetarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, blocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, transaction_id_),
  };
  BlockHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockHeader_descriptor_,
      BlockHeader::default_instance_,
      BlockHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockHeader));
  BlockHeader_Type_descriptor_ = BlockHeader_descriptor_->enum_type(0);
  SignedBlockHeader_descriptor_ = file->message_type(15);
  static const int SignedBlockHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, sig_),
  };
  SignedBlockHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedBlockHeader_descriptor_,
      SignedBlockHeader::default_instance_,
      SignedBlockHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedBlockHeader));
  Block_descriptor_ = file->message_type(16);
  static const int Block_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, signedhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, signed_transactions_),
  };
  Block_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Block));
  NodeRequest_descriptor_ = file->message_type(17);
  static const int NodeRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, myip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, myhost_),
  };
  NodeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeRequest_descriptor_,
      NodeRequest::default_instance_,
      NodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeRequest));
  NodeRequest_Type_descriptor_ = NodeRequest_descriptor_->enum_type(0);
  NodeReply_descriptor_ = file->message_type(18);
  static const int NodeReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, hight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, ips_),
  };
  NodeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeReply_descriptor_,
      NodeReply::default_instance_,
      NodeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeReply));
  FantasyPlayerPoints_descriptor_ = file->message_type(19);
  static const int FantasyPlayerPoints_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, result_),
  };
  FantasyPlayerPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FantasyPlayerPoints_descriptor_,
      FantasyPlayerPoints::default_instance_,
      FantasyPlayerPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyPlayerPoints));
  ProjectionTrans_descriptor_ = file->message_type(20);
  static const int ProjectionTrans_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, points_),
  };
  ProjectionTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProjectionTrans_descriptor_,
      ProjectionTrans::default_instance_,
      ProjectionTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProjectionTrans));
  PlayerPoints_descriptor_ = file->message_type(21);
  static const int PlayerPoints_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPoints, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPoints, points_),
  };
  PlayerPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPoints_descriptor_,
      PlayerPoints::default_instance_,
      PlayerPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPoints));
  ProjectionTransBlock_descriptor_ = file->message_type(22);
  static const int ProjectionTransBlock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTransBlock, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTransBlock, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTransBlock, player_points_),
  };
  ProjectionTransBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProjectionTransBlock_descriptor_,
      ProjectionTransBlock::default_instance_,
      ProjectionTransBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTransBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTransBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProjectionTransBlock));
  Data_descriptor_ = file->message_type(23);
  static const int Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, type_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
  Data_Type_descriptor_ = Data_descriptor_->enum_type(0);
  PlayerData_descriptor_ = file->message_type(24);
  static const int PlayerData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, player_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, player_game_status_),
  };
  PlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerData_descriptor_,
      PlayerData::default_instance_,
      PlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerData));
  GameData_descriptor_ = file->message_type(25);
  static const int GameData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, status_),
  };
  GameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameData_descriptor_,
      GameData::default_instance_,
      GameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameData));
  ResultData_descriptor_ = file->message_type(26);
  static const int ResultData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, game_result_),
  };
  ResultData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultData_descriptor_,
      ResultData::default_instance_,
      ResultData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultData));
  ScheduleData_descriptor_ = file->message_type(27);
  static const int ScheduleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleData, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleData, weekly_),
  };
  ScheduleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScheduleData_descriptor_,
      ScheduleData::default_instance_,
      ScheduleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScheduleData));
  DataTransition_descriptor_ = file->message_type(28);
  static const int DataTransition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, gamedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, data_),
  };
  DataTransition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataTransition_descriptor_,
      DataTransition::default_instance_,
      DataTransition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataTransition));
  TeamState_descriptor_ = file->message_type(29);
  static const int TeamState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, teamid_),
  };
  TeamState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamState_descriptor_,
      TeamState::default_instance_,
      TeamState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamState));
  TeamState_State_descriptor_ = TeamState_descriptor_->enum_type(0);
  DeltaData_descriptor_ = file->message_type(30);
  static const int DeltaData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, myfantasyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, globalstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, teamstates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, players_),
  };
  DeltaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeltaData_descriptor_,
      DeltaData::default_instance_,
      DeltaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeltaData));
  DeltaData_Type_descriptor_ = DeltaData_descriptor_->enum_type(0);
  MessageData_descriptor_ = file->message_type(31);
  static const int MessageData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, gt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, lt_),
  };
  MessageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageData_descriptor_,
      MessageData::default_instance_,
      MessageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageData));
  StampedTrans_descriptor_ = file->message_type(32);
  static const int StampedTrans_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StampedTrans, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StampedTrans, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StampedTrans, prevseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StampedTrans, signed_orig_),
  };
  StampedTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StampedTrans_descriptor_,
      StampedTrans::default_instance_,
      StampedTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StampedTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StampedTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StampedTrans));
  ExchangeOrder_descriptor_ = file->message_type(33);
  static const int ExchangeOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, core_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, cancel_oref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, futcontract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, symbol_),
  };
  ExchangeOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeOrder_descriptor_,
      ExchangeOrder::default_instance_,
      ExchangeOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeOrder));
  ExchangeOrder_Type_descriptor_ = ExchangeOrder_descriptor_->enum_type(0);
  OrderUnique_descriptor_ = file->message_type(34);
  static const int OrderUnique_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUnique, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUnique, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUnique, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUnique, buyside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUnique, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUnique, price_),
  };
  OrderUnique_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderUnique_descriptor_,
      OrderUnique::default_instance_,
      OrderUnique_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUnique, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUnique, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderUnique));
  OrderDeets_descriptor_ = file->message_type(35);
  static const int OrderDeets_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDeets, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDeets, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDeets, size_),
  };
  OrderDeets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderDeets_descriptor_,
      OrderDeets::default_instance_,
      OrderDeets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDeets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDeets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderDeets));
  InsideUnique_descriptor_ = file->message_type(36);
  static const int InsideUnique_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsideUnique, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsideUnique, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsideUnique, buyside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsideUnique, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsideUnique, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsideUnique, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsideUnique, size_),
  };
  InsideUnique_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsideUnique_descriptor_,
      InsideUnique::default_instance_,
      InsideUnique_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsideUnique, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsideUnique, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsideUnique));
  TimeTransition_descriptor_ = file->message_type(37);
  static const int TimeTransition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTransition, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTransition, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTransition, week_),
  };
  TimeTransition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeTransition_descriptor_,
      TimeTransition::default_instance_,
      TimeTransition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTransition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTransition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeTransition));
  TimeTransition_Type_descriptor_ = TimeTransition_descriptor_->enum_type(0);
  Bitcoin_UTXO_descriptor_ = file->message_type(38);
  static const int Bitcoin_UTXO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitcoin_UTXO, txid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitcoin_UTXO, tx_output_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitcoin_UTXO, in_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitcoin_UTXO, locking_script_),
  };
  Bitcoin_UTXO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bitcoin_UTXO_descriptor_,
      Bitcoin_UTXO::default_instance_,
      Bitcoin_UTXO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitcoin_UTXO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitcoin_UTXO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bitcoin_UTXO));
  Bitcoin_UTXOS_descriptor_ = file->message_type(39);
  static const int Bitcoin_UTXOS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitcoin_UTXOS, total_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitcoin_UTXOS, utxo_),
  };
  Bitcoin_UTXOS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bitcoin_UTXOS_descriptor_,
      Bitcoin_UTXOS::default_instance_,
      Bitcoin_UTXOS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitcoin_UTXOS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitcoin_UTXOS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bitcoin_UTXOS));
  SwapAsk_descriptor_ = file->message_type(40);
  static const int SwapAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapAsk, satoshi_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapAsk, satoshi_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapAsk, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapAsk, fb_qty_),
  };
  SwapAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapAsk_descriptor_,
      SwapAsk::default_instance_,
      SwapAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapAsk));
  SwapBid_descriptor_ = file->message_type(41);
  static const int SwapBid_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapBid, satoshi_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapBid, satoshi_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapBid, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapBid, utxos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapBid, change_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapBid, this_offer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapBid, counteroffer_),
  };
  SwapBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapBid_descriptor_,
      SwapBid::default_instance_,
      SwapBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapBid));
  SwapFill_descriptor_ = file->message_type(42);
  static const int SwapFill_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapFill, swapbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapFill, hash_to_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapFill, satoshi_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapFill, fb_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapFill, counterparty_),
  };
  SwapFill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapFill_descriptor_,
      SwapFill::default_instance_,
      SwapFill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapFill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapFill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapFill));
  SwapSent_descriptor_ = file->message_type(43);
  static const int SwapSent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSent, swapfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSent, sig_),
  };
  SwapSent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapSent_descriptor_,
      SwapSent::default_instance_,
      SwapSent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapSent));
  ProofOfDoubleSpend_descriptor_ = file->message_type(44);
  static const int ProofOfDoubleSpend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProofOfDoubleSpend, swapsent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProofOfDoubleSpend, utxo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProofOfDoubleSpend, pre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProofOfDoubleSpend, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProofOfDoubleSpend, sig_),
  };
  ProofOfDoubleSpend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProofOfDoubleSpend_descriptor_,
      ProofOfDoubleSpend::default_instance_,
      ProofOfDoubleSpend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProofOfDoubleSpend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProofOfDoubleSpend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProofOfDoubleSpend));
  SwapSentAck_descriptor_ = file->message_type(45);
  static const int SwapSentAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSentAck, swapsent_),
  };
  SwapSentAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapSentAck_descriptor_,
      SwapSentAck::default_instance_,
      SwapSentAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSentAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSentAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapSentAck));
  MyNameStatus_descriptor_ = file->enum_type(0);
  TransType_descriptor_ = file->enum_type(1);
  TrType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyFantasyName_descriptor_, &MyFantasyName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyPlayer_descriptor_, &FantasyPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Secret_descriptor_, &Secret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Secret2_descriptor_, &Secret2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Secret3_descriptor_, &Secret3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutData_descriptor_, &OutData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InData_descriptor_, &InData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameProof_descriptor_, &NameProof::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TweetProof_descriptor_, &TweetProof::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterProof_descriptor_, &MasterProof::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameTrans_descriptor_, &NameTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferTrans_descriptor_, &TransferTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedTransaction_descriptor_, &SignedTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockHeader_descriptor_, &BlockHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedBlockHeader_descriptor_, &SignedBlockHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeRequest_descriptor_, &NodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeReply_descriptor_, &NodeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyPlayerPoints_descriptor_, &FantasyPlayerPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProjectionTrans_descriptor_, &ProjectionTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPoints_descriptor_, &PlayerPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProjectionTransBlock_descriptor_, &ProjectionTransBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerData_descriptor_, &PlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameData_descriptor_, &GameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultData_descriptor_, &ResultData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScheduleData_descriptor_, &ScheduleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataTransition_descriptor_, &DataTransition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamState_descriptor_, &TeamState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeltaData_descriptor_, &DeltaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageData_descriptor_, &MessageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StampedTrans_descriptor_, &StampedTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeOrder_descriptor_, &ExchangeOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderUnique_descriptor_, &OrderUnique::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderDeets_descriptor_, &OrderDeets::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsideUnique_descriptor_, &InsideUnique::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeTransition_descriptor_, &TimeTransition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bitcoin_UTXO_descriptor_, &Bitcoin_UTXO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bitcoin_UTXOS_descriptor_, &Bitcoin_UTXOS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapAsk_descriptor_, &SwapAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapBid_descriptor_, &SwapBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapFill_descriptor_, &SwapFill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapSent_descriptor_, &SwapSent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProofOfDoubleSpend_descriptor_, &ProofOfDoubleSpend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapSentAck_descriptor_, &SwapSentAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoData_2eproto() {
  delete MyFantasyName::default_instance_;
  delete MyFantasyName_reflection_;
  delete FantasyPlayer::default_instance_;
  delete FantasyPlayer_reflection_;
  delete Secret::default_instance_;
  delete Secret_reflection_;
  delete Secret2::default_instance_;
  delete Secret2_reflection_;
  delete Secret3::default_instance_;
  delete Secret3_reflection_;
  delete OutData::default_instance_;
  delete OutData_reflection_;
  delete InData::default_instance_;
  delete InData_reflection_;
  delete NameProof::default_instance_;
  delete NameProof_reflection_;
  delete TweetProof::default_instance_;
  delete TweetProof_reflection_;
  delete MasterProof::default_instance_;
  delete MasterProof_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete NameTrans::default_instance_;
  delete NameTrans_reflection_;
  delete TransferTrans::default_instance_;
  delete TransferTrans_reflection_;
  delete SignedTransaction::default_instance_;
  delete SignedTransaction_reflection_;
  delete BlockHeader::default_instance_;
  delete BlockHeader_reflection_;
  delete SignedBlockHeader::default_instance_;
  delete SignedBlockHeader_reflection_;
  delete Block::default_instance_;
  delete Block_reflection_;
  delete NodeRequest::default_instance_;
  delete NodeRequest_reflection_;
  delete NodeReply::default_instance_;
  delete NodeReply_reflection_;
  delete FantasyPlayerPoints::default_instance_;
  delete FantasyPlayerPoints_reflection_;
  delete ProjectionTrans::default_instance_;
  delete ProjectionTrans_reflection_;
  delete PlayerPoints::default_instance_;
  delete PlayerPoints_reflection_;
  delete ProjectionTransBlock::default_instance_;
  delete ProjectionTransBlock_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
  delete PlayerData::default_instance_;
  delete PlayerData_reflection_;
  delete GameData::default_instance_;
  delete GameData_reflection_;
  delete ResultData::default_instance_;
  delete ResultData_reflection_;
  delete ScheduleData::default_instance_;
  delete ScheduleData_reflection_;
  delete DataTransition::default_instance_;
  delete DataTransition_reflection_;
  delete TeamState::default_instance_;
  delete TeamState_reflection_;
  delete DeltaData::default_instance_;
  delete DeltaData_reflection_;
  delete MessageData::default_instance_;
  delete MessageData_reflection_;
  delete StampedTrans::default_instance_;
  delete StampedTrans_reflection_;
  delete ExchangeOrder::default_instance_;
  delete ExchangeOrder_reflection_;
  delete OrderUnique::default_instance_;
  delete OrderUnique_reflection_;
  delete OrderDeets::default_instance_;
  delete OrderDeets_reflection_;
  delete InsideUnique::default_instance_;
  delete InsideUnique_reflection_;
  delete TimeTransition::default_instance_;
  delete TimeTransition_reflection_;
  delete Bitcoin_UTXO::default_instance_;
  delete Bitcoin_UTXO_reflection_;
  delete Bitcoin_UTXOS::default_instance_;
  delete Bitcoin_UTXOS_reflection_;
  delete SwapAsk::default_instance_;
  delete SwapAsk_reflection_;
  delete SwapBid::default_instance_;
  delete SwapBid_reflection_;
  delete SwapFill::default_instance_;
  delete SwapFill_reflection_;
  delete SwapSent::default_instance_;
  delete SwapSent_reflection_;
  delete ProofOfDoubleSpend::default_instance_;
  delete ProofOfDoubleSpend_reflection_;
  delete SwapSentAck::default_instance_;
  delete SwapSentAck_reflection_;
}

void protobuf_AddDesc_ProtoData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fantasybit::protobuf_AddDesc_StaticData_2eproto();
  ::fantasybit::protobuf_AddDesc_StatusData_2eproto();
  ::fantasybit::protobuf_AddDesc_ExData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoData.proto\022\nfantasybit\032\020StaticDat"
    "a.proto\032\020StatusData.proto\032\014ExData.proto\""
    "G\n\rMyFantasyName\022\014\n\004name\030\001 \001(\t\022(\n\006status"
    "\030\002 \001(\0162\030.fantasybit.MyNameStatus\"+\n\rFant"
    "asyPlayer\022\014\n\004name\030\n \001(\t\022\014\n\004bits\030\024 \001(\004\"x\n"
    "\006Secret\022\023\n\013private_key\030\001 \002(\t\0220\n\rmyfantas"
    "yname\030\002 \001(\0132\031.fantasybit.MyFantasyName\022\'"
    "\n\010nametran\030\n \001(\0132\025.fantasybit.NameTrans\""
    "H\n\007Secret2\022\023\n\013private_key\030\001 \001(\t\022\024\n\014fanta"
    "sy_name\030\024 \001(\t\022\022\n\npublic_key\030\036 \001(\t\"^\n\007Sec"
    "ret3\022\023\n\013private_key\030\001 \001(\t\022\024\n\014mnemonic_ke"
    "y\030\003 \001(\t\022\024\n\014fantasy_name\030\024 \001(\t\022\022\n\npublic_"
    "key\030\036 \001(\t\"\245\001\n\007OutData\022&\n\004type\030\001 \002(\0162\030.fa"
    "ntasybit.OutData.Type\0220\n\rmyfantasyname\030\002"
    " \001(\0132\031.fantasybit.MyFantasyName\"6\n\004Type\022"
    "\021\n\rMYFANTASYNAME\020\001\022\014\n\010SNAPSHOT\020\002\022\r\n\tHEAR"
    "TBEAT\020\003*\010\010d\020\200\200\200\200\002\"\200\002\n\006InData\022%\n\004type\030\001 \002"
    "(\0162\027.fantasybit.InData.Type\022\014\n\004data\030\002 \001("
    "\t\022\r\n\005data2\030\003 \001(\t\022\013\n\003num\030\004 \001(\005\022.\n\ndata_tr"
    "ans\030\005 \001(\0132\032.fantasybit.DataTransition\"k\n"
    "\004Type\022\014\n\010MINENAME\020\001\022\010\n\004QUIT\020\002\022\r\n\tHEARTBE"
    "AT\020\003\022\013\n\007CONNECT\020\004\022\016\n\nMAKE_BLOCK\020\005\022\013\n\007NEW"
    "NAME\020\006\022\010\n\004PROJ\020\007\022\010\n\004DATA\020\010*\010\010d\020\200\200\200\200\002\"t\n\t"
    "NameProof\022(\n\004type\030\001 \001(\0162\032.fantasybit.Nam"
    "eProof.Type\"2\n\004Type\022\007\n\003POW\020\001\022\t\n\005TWEET\020\002\022"
    "\n\n\006ORACLE\020\003\022\n\n\006MASTER\020\004*\t\010\310\001\020\200\200\200\200\002\"`\n\nTw"
    "eetProof\022\r\n\005tweet\030\n \001(\t2C\n\013tweet_proof\022\025"
    ".fantasybit.NameProof\030\311\001 \001(\0132\026.fantasybi"
    "t.TweetProof\"\275\001\n\013MasterProof\022\016\n\006season\030\n"
    " \001(\t\022\014\n\004week\030\024 \001(\005\022\021\n\ttimestamp\030\025 \001(\005\0226\n"
    "\017new_oracle_name\030B \001(\0132\035.fantasybit.Sign"
    "edTransaction2E\n\014master_proof\022\025.fantasyb"
    "it.NameProof\030\221\003 \001(\0132\027.fantasybit.MasterP"
    "roof\"\\\n\013Transaction\022\017\n\007version\030\001 \001(\005\022#\n\004"
    "type\030\002 \001(\0162\025.fantasybit.TransType\022\r\n\005non"
    "ce\030\n \001(\004*\010\010d\020\200\200\200\200\002\"\332\001\n\tNameTrans\022\024\n\014fant"
    "asy_name\030\n \001(\t\022\022\n\npublic_key\030\024 \001(\014\022$\n\005pr"
    "oof\030\036 \001(\0132\025.fantasybit.NameProof\022\024\n\014reco"
    "very_key\030( \001(\014\022\020\n\010am_agent\0302 \001(\010\022\020\n\010my_a"
    "gent\030< \001(\t2C\n\nname_trans\022\027.fantasybit.Tr"
    "ansaction\030\310\001 \001(\0132\025.fantasybit.NameTrans\""
    "\205\001\n\rTransferTrans\022\014\n\004from\030\n \001(\t\022\n\n\002to\030\024 "
    "\001(\t\022\016\n\006amount\030\036 \001(\0042J\n\rtransfer_tran\022\027.f"
    "antasybit.Transaction\030\220\003 \001(\0132\031.fantasybi"
    "t.TransferTrans\"j\n\021SignedTransaction\022&\n\005"
    "trans\030\n \001(\0132\027.fantasybit.Transaction\022\n\n\002"
    "id\030\024 \001(\014\022\013\n\003sig\030\036 \001(\014\022\024\n\014fantasy_name\030( "
    "\001(\t\"\370\001\n\013BlockHeader\022\017\n\007version\030\001 \001(\005\022\013\n\003"
    "num\030\n \001(\005\022\017\n\007prev_id\030\024 \001(\014\022\021\n\ttimestamp\030"
    "\025 \001(\005\022\024\n\014generator_pk\030\036 \001(\014\022\026\n\016generatin"
    "g_sig\030( \001(\014\022\022\n\nbasetarget\0302 \001(\004\022/\n\tblock"
    "type\030< \001(\0162\034.fantasybit.BlockHeader.Type"
    "\022\026\n\016transaction_id\030F \001(\014\"\034\n\004Type\022\n\n\006NORM"
    "AL\020\001\022\010\n\004DATA\020\002\"G\n\021SignedBlockHeader\022%\n\004h"
    "ead\030\n \001(\0132\027.fantasybit.BlockHeader\022\013\n\003si"
    "g\030\036 \001(\t\"\201\001\n\005Block\0221\n\nsignedhead\030\n \001(\0132\035."
    "fantasybit.SignedBlockHeader\022:\n\023signed_t"
    "ransactions\030\024 \003(\0132\035.fantasybit.SignedTra"
    "nsaction*\t\010\350\007\020\200\200\200\200\002\"\257\001\n\013NodeRequest\022*\n\004t"
    "ype\030\n \001(\0162\034.fantasybit.NodeRequest.Type\022"
    "\014\n\004myip\030\024 \001(\t\022\013\n\003num\030\036 \001(\005\022\016\n\006myhost\030( \001"
    "(\t\"I\n\004Type\022\r\n\tHANDSHAKE\020\001\022\021\n\rBLOCK_REQUE"
    "ST\020\002\022\021\n\rHIGHT_REQUEST\020\003\022\014\n\010NAT_TEST\020\004\"\'\n"
    "\tNodeReply\022\r\n\005hight\030\n \001(\005\022\013\n\003ips\030\024 \003(\t\"e"
    "\n\023FantasyPlayerPoints\022\016\n\006season\030\n \001(\r\022\014\n"
    "\004week\030\024 \001(\r\022\020\n\010playerid\030\036 \001(\t\022\016\n\006points\030"
    "( \001(\005\022\016\n\006result\0302 \001(\002\"\234\001\n\017ProjectionTran"
    "s\022\016\n\006season\030\n \001(\r\022\014\n\004week\030\024 \001(\r\022\020\n\010playe"
    "rid\030\036 \001(\t\022\016\n\006points\030( \001(\0052I\n\nproj_trans\022"
    "\027.fantasybit.Transaction\030\311\001 \001(\0132\033.fantas"
    "ybit.ProjectionTrans\"0\n\014PlayerPoints\022\020\n\010"
    "playerid\030\036 \001(\t\022\016\n\006points\030( \001(\005\"\273\001\n\024Proje"
    "ctionTransBlock\022\016\n\006season\030\n \001(\r\022\014\n\004week\030"
    "\024 \001(\r\022/\n\rplayer_points\030\036 \003(\0132\030.fantasybi"
    "t.PlayerPoints2T\n\020proj_trans_block\022\027.fan"
    "tasybit.Transaction\030\323\001 \001(\0132 .fantasybit."
    "ProjectionTransBlock\"\213\001\n\004Data\022\017\n\007version"
    "\030\n \001(\005\022#\n\004type\030\024 \001(\0162\025.fantasybit.Data.T"
    "ype\"C\n\004Type\022\014\n\010SCHEDULE\020\000\022\n\n\006PLAYER\020\001\022\010\n"
    "\004GAME\020\002\022\n\n\006RESULT\020\003\022\013\n\007MESSAGE\020\004*\010\010d\020\200\200\200"
    "\200\002\"\365\001\n\nPlayerData\022\020\n\010playerid\030\n \001(\t\022+\n\013p"
    "layer_base\030\024 \001(\0132\026.fantasybit.PlayerBase"
    "\022/\n\rplayer_status\030\036 \001(\0132\030.fantasybit.Pla"
    "yerStatus\0228\n\022player_game_status\030( \001(\0162\034."
    "fantasybit.PlayerGameStatus2=\n\013player_da"
    "ta\022\020.fantasybit.Data\030e \001(\0132\026.fantasybit."
    "PlayerData\"}\n\010GameData\022\016\n\006gameid\030\n \001(\t\022&"
    "\n\006status\030\024 \001(\0132\026.fantasybit.GameStatus29"
    "\n\tgame_data\022\020.fantasybit.Data\030o \001(\0132\024.fa"
    "ntasybit.GameData\"y\n\nResultData\022+\n\013game_"
    "result\030\n \001(\0132\026.fantasybit.GameResult2>\n\013"
    "result_data\022\020.fantasybit.Data\030\312\001 \001(\0132\026.f"
    "antasybit.ResultData\"\214\001\n\014ScheduleData\022\014\n"
    "\004week\030\001 \001(\005\022*\n\006weekly\030\n \001(\0132\032.fantasybit"
    ".WeeklySchedule2B\n\rschedule_data\022\020.fanta"
    "sybit.Data\030\256\002 \001(\0132\030.fantasybit.ScheduleD"
    "ata\"\342\001\n\016DataTransition\022 \n\004type\030\001 \001(\0162\022.f"
    "antasybit.TrType\022\016\n\006season\030\n \001(\r\022\014\n\004week"
    "\030\024 \001(\r\022&\n\010gamedata\030\036 \003(\0132\024.fantasybit.Ga"
    "meData\022\036\n\004data\030( \003(\0132\020.fantasybit.Data2H"
    "\n\ndata_trans\022\027.fantasybit.Transaction\030\313\001"
    " \001(\0132\032.fantasybit.DataTransition\"w\n\tTeam"
    "State\022*\n\005state\030\001 \001(\0162\033.fantasybit.TeamSt"
    "ate.State\022\014\n\004week\030\n \001(\r\022\016\n\006teamid\030\024 \001(\t\""
    " \n\005State\022\013\n\007PREGAME\020\001\022\n\n\006INGAME\020\002\"\275\002\n\tDe"
    "ltaData\022(\n\004type\030\001 \001(\0162\032.fantasybit.Delta"
    "Data.Type\0220\n\rmyfantasyname\030\002 \003(\0132\031.fanta"
    "sybit.MyFantasyName\022,\n\013globalstate\030\n \001(\013"
    "2\027.fantasybit.GlobalState\022)\n\nteamstates\030"
    "\024 \003(\0132\025.fantasybit.TeamState\022\037\n\005datas\030\036 "
    "\003(\0132\020.fantasybit.Data\022*\n\007players\030( \003(\0132\031"
    ".fantasybit.FantasyPlayer\"#\n\004Type\022\014\n\010SNA"
    "PSHOT\020\002\022\r\n\tHEARTBEAT\020\003*\t\010\350\007\020\200\200\200\200\002\"t\n\013Mes"
    "sageData\022\013\n\003msg\030\n \001(\t\022\n\n\002gt\030\024 \001(\005\022\n\n\002lt\030"
    "\036 \001(\0052@\n\014message_data\022\020.fantasybit.Data\030"
    "\224\003 \001(\0132\027.fantasybit.MessageData\"\301\001\n\014Stam"
    "pedTrans\022\021\n\ttimestamp\030\n \001(\004\022\016\n\006seqnum\030\024 "
    "\001(\005\022\017\n\007prevseq\030\025 \001(\005\0222\n\013signed_orig\030\036 \001("
    "\0132\035.fantasybit.SignedTransaction2I\n\rstam"
    "ped_trans\022\027.fantasybit.Transaction\030\254\002 \001("
    "\0132\030.fantasybit.StampedTrans\"\311\002\n\rExchange"
    "Order\022,\n\004type\030\n \001(\0162\036.fantasybit.Exchang"
    "eOrder.Type\022\020\n\010playerid\030( \001(\t\022#\n\004core\0302 "
    "\001(\0132\025.fantasybit.OrderCore\022\023\n\013cancel_ore"
    "f\030d \001(\005\022,\n\013futcontract\030n \001(\0132\027.fantasybi"
    "t.FutContract\022\016\n\006symbol\030x \001(\t\"(\n\004Type\022\007\n"
    "\003NEW\020\001\022\n\n\006CANCEL\020\002\022\013\n\007REPLACE\020\003*\t\010\364\003\020\200\200\200"
    "\200\0022K\n\016exchange_order\022\027.fantasybit.Transa"
    "ction\030\266\002 \001(\0132\031.fantasybit.ExchangeOrder\""
    "q\n\013OrderUnique\022\022\n\npublic_key\030\n \001(\t\022\016\n\006se"
    "ason\030\024 \001(\r\022\014\n\004week\030\036 \001(\r\022\017\n\007buyside\030( \001("
    "\010\022\020\n\010playerid\0302 \001(\t\022\r\n\005price\030F \001(\005\"O\n\nOr"
    "derDeets\022\013\n\003oid\030\n \001(\014\022&\n\005order\030\024 \001(\0132\027.f"
    "antasybit.OrderUnique\022\014\n\004size\030\036 \001(\005\"\227\001\n\014"
    "InsideUnique\022\020\n\010playerid\0302 \001(\t\022\022\n\npublic"
    "_key\030\n \001(\t\022\017\n\007buyside\030( \001(\010\022\r\n\005price\030F \001"
    "(\005\022\013\n\003oid\030\013 \001(\014\022&\n\005order\030\024 \001(\0132\027.fantasy"
    "bit.OrderUnique\022\014\n\004size\030\036 \001(\005\"\316\001\n\016TimeTr"
    "ansition\022-\n\004type\030\001 \001(\0162\037.fantasybit.Time"
    "Transition.Type\022\016\n\006season\030\n \001(\r\022\014\n\004week\030"
    "\024 \001(\r\"%\n\004Type\022\r\n\tTRADEOPEN\020\002\022\016\n\nTRADECLO"
    "SE\020\0032H\n\ntime_trans\022\027.fantasybit.Transact"
    "ion\030\257\002 \001(\0132\032.fantasybit.TimeTransition\"["
    "\n\014Bitcoin_UTXO\022\014\n\004txid\030\n \001(\014\022\023\n\013tx_outpu"
    "t_n\030\024 \001(\r\022\020\n\010in_value\030\036 \001(\004\022\026\n\016locking_s"
    "cript\030( \001(\014\"L\n\rBitcoin_UTXOS\022\023\n\013total_va"
    "lue\030\n \001(\004\022&\n\004utxo\030\024 \003(\0132\030.fantasybit.Bit"
    "coin_UTXO\"\226\001\n\007SwapAsk\022\023\n\013satoshi_min\030\n \001"
    "(\004\022\023\n\013satoshi_max\030\013 \001(\004\022\014\n\004rate\030\024 \001(\004\022\016\n"
    "\006fb_qty\030\036 \001(\0042C\n\014swapask_tran\022\027.fantasyb"
    "it.Transaction\030\302\003 \001(\0132\023.fantasybit.SwapA"
    "sk\"\204\002\n\007SwapBid\022\023\n\013satoshi_min\030\n \001(\004\022\023\n\013s"
    "atoshi_max\030\013 \001(\004\022\014\n\004rate\030\024 \001(\004\022(\n\005utxos\030"
    "\036 \001(\0132\031.fantasybit.Bitcoin_UTXOS\022\023\n\013chan"
    "ge_addr\030( \001(\014\022\'\n\nthis_offer\0302 \001(\0132\023.fant"
    "asybit.SwapAsk\022\024\n\014counteroffer\030< \001(\t2C\n\014"
    "swapbid_tran\022\027.fantasybit.Transaction\030\364\003"
    " \001(\0132\023.fantasybit.SwapBid\"\307\001\n\010SwapFill\022$"
    "\n\007swapbid\030\n \001(\0132\023.fantasybit.SwapBid\022\024\n\014"
    "hash_to_sign\030\024 \001(\014\022\023\n\013satoshi_fee\030\036 \001(\004\022"
    "\016\n\006fb_qty\030( \001(\004\022\024\n\014counterparty\0302 \001(\t2D\n"
    "\014swapfil_tran\022\027.fantasybit.Transaction\030\330"
    "\004 \001(\0132\024.fantasybit.SwapFill\"\206\001\n\010SwapSent"
    "\022&\n\010swapfill\030\n \001(\0132\024.fantasybit.SwapFill"
    "\022\013\n\003sig\030\024 \001(\0142E\n\rswapsent_tran\022\027.fantasy"
    "bit.Transaction\030\274\005 \001(\0132\024.fantasybit.Swap"
    "Sent\"\331\001\n\022ProofOfDoubleSpend\022&\n\010swapsent\030"
    "\n \001(\0132\024.fantasybit.SwapSent\022&\n\004utxo\030\024 \001("
    "\0132\030.fantasybit.Bitcoin_UTXO\022\013\n\003pre\030\036 \001(\014"
    "\022\014\n\004post\030( \001(\014\022\013\n\003sig\0302 \001(\0142K\n\tpodp_tran"
    "\022\027.fantasybit.Transaction\030\240\006 \001(\0132\036.fanta"
    "sybit.ProofOfDoubleSpend\"\202\001\n\013SwapSentAck"
    "\022&\n\010swapsent\030\n \001(\0132\024.fantasybit.SwapSent"
    "2K\n\020swapsentack_tran\022\027.fantasybit.Transa"
    "ction\030\252\006 \001(\0132\027.fantasybit.SwapSentAck*Y\n"
    "\014MyNameStatus\022\010\n\004none\020\001\022\013\n\007notavil\020\002\022\r\n\t"
    "requested\020\005\022\024\n\020transaction_sent\020\017\022\r\n\tcon"
    "firmed\020\024*\371\001\n\tTransType\022\010\n\004NAME\020\000\022\016\n\nPROJ"
    "ECTION\020\001\022\n\n\006RESULT\020\002\022\010\n\004DATA\020\003\022\024\n\020PROJEC"
    "TION_BLOCK\020\004\022\017\n\013MASTER_NAME\020\005\022\010\n\004TIME\020\006\022"
    "\013\n\007STAMPED\020\007\022\014\n\010EXCHANGE\020\010\022\022\n\016EXCHANGE_B"
    "LOCK\020\t\022\014\n\010TRANSFER\020\n\022\013\n\007SWAPASK\020\013\022\013\n\007SWA"
    "PBID\020\014\022\013\n\007SWAPFIL\020\r\022\014\n\010SWAPSENT\020\016\022\010\n\004POD"
    "P\020\017\022\017\n\013SWAPSENTACK\020\020*\260\001\n\006TrType\022\017\n\013SEASO"
    "NSTART\020\002\022\r\n\tSEASONEND\020\003\022\r\n\tHEARTBEAT\020\005\022\r"
    "\n\tGAMESTART\020\006\022\014\n\010WEEKOVER\020\007\022\025\n\021TRADESESS"
    "IONSTART\020\010\022\037\n\033TRADESESSIONCLOSEANDPREOPE"
    "N\020\t\022\020\n\014PLAYOFFSTART\020\n\022\020\n\014SUPERBOWLEND\020\014", 7519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoData.proto", &protobuf_RegisterTypes);
  MyFantasyName::default_instance_ = new MyFantasyName();
  FantasyPlayer::default_instance_ = new FantasyPlayer();
  Secret::default_instance_ = new Secret();
  Secret2::default_instance_ = new Secret2();
  Secret3::default_instance_ = new Secret3();
  OutData::default_instance_ = new OutData();
  InData::default_instance_ = new InData();
  NameProof::default_instance_ = new NameProof();
  TweetProof::default_instance_ = new TweetProof();
  MasterProof::default_instance_ = new MasterProof();
  Transaction::default_instance_ = new Transaction();
  NameTrans::default_instance_ = new NameTrans();
  TransferTrans::default_instance_ = new TransferTrans();
  SignedTransaction::default_instance_ = new SignedTransaction();
  BlockHeader::default_instance_ = new BlockHeader();
  SignedBlockHeader::default_instance_ = new SignedBlockHeader();
  Block::default_instance_ = new Block();
  NodeRequest::default_instance_ = new NodeRequest();
  NodeReply::default_instance_ = new NodeReply();
  FantasyPlayerPoints::default_instance_ = new FantasyPlayerPoints();
  ProjectionTrans::default_instance_ = new ProjectionTrans();
  PlayerPoints::default_instance_ = new PlayerPoints();
  ProjectionTransBlock::default_instance_ = new ProjectionTransBlock();
  Data::default_instance_ = new Data();
  PlayerData::default_instance_ = new PlayerData();
  GameData::default_instance_ = new GameData();
  ResultData::default_instance_ = new ResultData();
  ScheduleData::default_instance_ = new ScheduleData();
  DataTransition::default_instance_ = new DataTransition();
  TeamState::default_instance_ = new TeamState();
  DeltaData::default_instance_ = new DeltaData();
  MessageData::default_instance_ = new MessageData();
  StampedTrans::default_instance_ = new StampedTrans();
  ExchangeOrder::default_instance_ = new ExchangeOrder();
  OrderUnique::default_instance_ = new OrderUnique();
  OrderDeets::default_instance_ = new OrderDeets();
  InsideUnique::default_instance_ = new InsideUnique();
  TimeTransition::default_instance_ = new TimeTransition();
  Bitcoin_UTXO::default_instance_ = new Bitcoin_UTXO();
  Bitcoin_UTXOS::default_instance_ = new Bitcoin_UTXOS();
  SwapAsk::default_instance_ = new SwapAsk();
  SwapBid::default_instance_ = new SwapBid();
  SwapFill::default_instance_ = new SwapFill();
  SwapSent::default_instance_ = new SwapSent();
  ProofOfDoubleSpend::default_instance_ = new ProofOfDoubleSpend();
  SwapSentAck::default_instance_ = new SwapSentAck();
  MyFantasyName::default_instance_->InitAsDefaultInstance();
  FantasyPlayer::default_instance_->InitAsDefaultInstance();
  Secret::default_instance_->InitAsDefaultInstance();
  Secret2::default_instance_->InitAsDefaultInstance();
  Secret3::default_instance_->InitAsDefaultInstance();
  OutData::default_instance_->InitAsDefaultInstance();
  InData::default_instance_->InitAsDefaultInstance();
  NameProof::default_instance_->InitAsDefaultInstance();
  TweetProof::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::NameProof::default_instance(),
    201, 11, false, false,
    &::fantasybit::TweetProof::default_instance());
  MasterProof::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::NameProof::default_instance(),
    401, 11, false, false,
    &::fantasybit::MasterProof::default_instance());
  Transaction::default_instance_->InitAsDefaultInstance();
  NameTrans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    200, 11, false, false,
    &::fantasybit::NameTrans::default_instance());
  TransferTrans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    400, 11, false, false,
    &::fantasybit::TransferTrans::default_instance());
  SignedTransaction::default_instance_->InitAsDefaultInstance();
  BlockHeader::default_instance_->InitAsDefaultInstance();
  SignedBlockHeader::default_instance_->InitAsDefaultInstance();
  Block::default_instance_->InitAsDefaultInstance();
  NodeRequest::default_instance_->InitAsDefaultInstance();
  NodeReply::default_instance_->InitAsDefaultInstance();
  FantasyPlayerPoints::default_instance_->InitAsDefaultInstance();
  ProjectionTrans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    201, 11, false, false,
    &::fantasybit::ProjectionTrans::default_instance());
  PlayerPoints::default_instance_->InitAsDefaultInstance();
  ProjectionTransBlock::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    211, 11, false, false,
    &::fantasybit::ProjectionTransBlock::default_instance());
  Data::default_instance_->InitAsDefaultInstance();
  PlayerData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    101, 11, false, false,
    &::fantasybit::PlayerData::default_instance());
  GameData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    111, 11, false, false,
    &::fantasybit::GameData::default_instance());
  ResultData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    202, 11, false, false,
    &::fantasybit::ResultData::default_instance());
  ScheduleData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    302, 11, false, false,
    &::fantasybit::ScheduleData::default_instance());
  DataTransition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    203, 11, false, false,
    &::fantasybit::DataTransition::default_instance());
  TeamState::default_instance_->InitAsDefaultInstance();
  DeltaData::default_instance_->InitAsDefaultInstance();
  MessageData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    404, 11, false, false,
    &::fantasybit::MessageData::default_instance());
  StampedTrans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    300, 11, false, false,
    &::fantasybit::StampedTrans::default_instance());
  ExchangeOrder::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    310, 11, false, false,
    &::fantasybit::ExchangeOrder::default_instance());
  OrderUnique::default_instance_->InitAsDefaultInstance();
  OrderDeets::default_instance_->InitAsDefaultInstance();
  InsideUnique::default_instance_->InitAsDefaultInstance();
  TimeTransition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    303, 11, false, false,
    &::fantasybit::TimeTransition::default_instance());
  Bitcoin_UTXO::default_instance_->InitAsDefaultInstance();
  Bitcoin_UTXOS::default_instance_->InitAsDefaultInstance();
  SwapAsk::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    450, 11, false, false,
    &::fantasybit::SwapAsk::default_instance());
  SwapBid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    500, 11, false, false,
    &::fantasybit::SwapBid::default_instance());
  SwapFill::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    600, 11, false, false,
    &::fantasybit::SwapFill::default_instance());
  SwapSent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    700, 11, false, false,
    &::fantasybit::SwapSent::default_instance());
  ProofOfDoubleSpend::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    800, 11, false, false,
    &::fantasybit::ProofOfDoubleSpend::default_instance());
  SwapSentAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    810, 11, false, false,
    &::fantasybit::SwapSentAck::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoData_2eproto {
  StaticDescriptorInitializer_ProtoData_2eproto() {
    protobuf_AddDesc_ProtoData_2eproto();
  }
} static_descriptor_initializer_ProtoData_2eproto_;
const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyNameStatus_descriptor_;
}
bool MyNameStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 5:
    case 15:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransType_descriptor_;
}
bool TransType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrType_descriptor_;
}
bool TrType_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MyFantasyName::kNameFieldNumber;
const int MyFantasyName::kStatusFieldNumber;
#endif  // !_MSC_VER

MyFantasyName::MyFantasyName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyFantasyName::InitAsDefaultInstance() {
}

MyFantasyName::MyFantasyName(const MyFantasyName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyFantasyName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyFantasyName::~MyFantasyName() {
  SharedDtor();
}

void MyFantasyName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MyFantasyName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyFantasyName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyFantasyName_descriptor_;
}

const MyFantasyName& MyFantasyName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

MyFantasyName* MyFantasyName::default_instance_ = NULL;

MyFantasyName* MyFantasyName::New() const {
  return new MyFantasyName;
}

void MyFantasyName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyFantasyName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .fantasybit.MyNameStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::MyNameStatus_IsValid(value)) {
            set_status(static_cast< ::fantasybit::MyNameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyFantasyName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .fantasybit.MyNameStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyFantasyName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .fantasybit.MyNameStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyFantasyName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .fantasybit.MyNameStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyFantasyName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyFantasyName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyFantasyName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyFantasyName::MergeFrom(const MyFantasyName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyFantasyName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyFantasyName::CopyFrom(const MyFantasyName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyFantasyName::IsInitialized() const {

  return true;
}

void MyFantasyName::Swap(MyFantasyName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyFantasyName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyFantasyName_descriptor_;
  metadata.reflection = MyFantasyName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FantasyPlayer::kNameFieldNumber;
const int FantasyPlayer::kBitsFieldNumber;
#endif  // !_MSC_VER

FantasyPlayer::FantasyPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FantasyPlayer::InitAsDefaultInstance() {
}

FantasyPlayer::FantasyPlayer(const FantasyPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FantasyPlayer::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bits_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyPlayer::~FantasyPlayer() {
  SharedDtor();
}

void FantasyPlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FantasyPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyPlayer_descriptor_;
}

const FantasyPlayer& FantasyPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

FantasyPlayer* FantasyPlayer::default_instance_ = NULL;

FantasyPlayer* FantasyPlayer::New() const {
  return new FantasyPlayer;
}

void FantasyPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    bits_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bits;
        break;
      }

      // optional uint64 bits = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FantasyPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional uint64 bits = 20;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->bits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FantasyPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional uint64 bits = 20;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->bits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FantasyPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 bits = 20;
    if (has_bits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bits());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FantasyPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyPlayer::MergeFrom(const FantasyPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyPlayer::CopyFrom(const FantasyPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyPlayer::IsInitialized() const {

  return true;
}

void FantasyPlayer::Swap(FantasyPlayer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(bits_, other->bits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FantasyPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FantasyPlayer_descriptor_;
  metadata.reflection = FantasyPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Secret::kPrivateKeyFieldNumber;
const int Secret::kMyfantasynameFieldNumber;
const int Secret::kNametranFieldNumber;
#endif  // !_MSC_VER

Secret::Secret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Secret::InitAsDefaultInstance() {
  myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(&::fantasybit::MyFantasyName::default_instance());
  nametran_ = const_cast< ::fantasybit::NameTrans*>(&::fantasybit::NameTrans::default_instance());
}

Secret::Secret(const Secret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Secret::SharedCtor() {
  _cached_size_ = 0;
  private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  myfantasyname_ = NULL;
  nametran_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Secret::~Secret() {
  SharedDtor();
}

void Secret::SharedDtor() {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_;
  }
  if (this != default_instance_) {
    delete myfantasyname_;
    delete nametran_;
  }
}

void Secret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Secret_descriptor_;
}

const Secret& Secret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Secret* Secret::default_instance_ = NULL;

Secret* Secret::New() const {
  return new Secret;
}

void Secret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_private_key()) {
      if (private_key_ != &::google::protobuf::internal::kEmptyString) {
        private_key_->clear();
      }
    }
    if (has_myfantasyname()) {
      if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
    }
    if (has_nametran()) {
      if (nametran_ != NULL) nametran_->::fantasybit::NameTrans::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Secret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string private_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->private_key().data(), this->private_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_myfantasyname;
        break;
      }

      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myfantasyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myfantasyname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_nametran;
        break;
      }

      // optional .fantasybit.NameTrans nametran = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nametran:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nametran()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Secret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->private_key(), output);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myfantasyname(), output);
  }

  // optional .fantasybit.NameTrans nametran = 10;
  if (has_nametran()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->nametran(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Secret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_key(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myfantasyname(), target);
  }

  // optional .fantasybit.NameTrans nametran = 10;
  if (has_nametran()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->nametran(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Secret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string private_key = 1;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_key());
    }

    // optional .fantasybit.MyFantasyName myfantasyname = 2;
    if (has_myfantasyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myfantasyname());
    }

    // optional .fantasybit.NameTrans nametran = 10;
    if (has_nametran()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nametran());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Secret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Secret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Secret::MergeFrom(const Secret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_key()) {
      set_private_key(from.private_key());
    }
    if (from.has_myfantasyname()) {
      mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from.myfantasyname());
    }
    if (from.has_nametran()) {
      mutable_nametran()->::fantasybit::NameTrans::MergeFrom(from.nametran());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Secret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret::CopyFrom(const Secret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_nametran()) {
    if (!this->nametran().IsInitialized()) return false;
  }
  return true;
}

void Secret::Swap(Secret* other) {
  if (other != this) {
    std::swap(private_key_, other->private_key_);
    std::swap(myfantasyname_, other->myfantasyname_);
    std::swap(nametran_, other->nametran_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Secret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Secret_descriptor_;
  metadata.reflection = Secret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Secret2::kPrivateKeyFieldNumber;
const int Secret2::kFantasyNameFieldNumber;
const int Secret2::kPublicKeyFieldNumber;
#endif  // !_MSC_VER

Secret2::Secret2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Secret2::InitAsDefaultInstance() {
}

Secret2::Secret2(const Secret2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Secret2::SharedCtor() {
  _cached_size_ = 0;
  private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Secret2::~Secret2() {
  SharedDtor();
}

void Secret2::SharedDtor() {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_;
  }
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (this != default_instance_) {
  }
}

void Secret2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Secret2_descriptor_;
}

const Secret2& Secret2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Secret2* Secret2::default_instance_ = NULL;

Secret2* Secret2::New() const {
  return new Secret2;
}

void Secret2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_private_key()) {
      if (private_key_ != &::google::protobuf::internal::kEmptyString) {
        private_key_->clear();
      }
    }
    if (has_fantasy_name()) {
      if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
        fantasy_name_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Secret2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->private_key().data(), this->private_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_fantasy_name;
        break;
      }

      // optional string fantasy_name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_public_key;
        break;
      }

      // optional string public_key = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Secret2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->private_key(), output);
  }

  // optional string fantasy_name = 20;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->fantasy_name(), output);
  }

  // optional string public_key = 30;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->public_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Secret2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_key(), target);
  }

  // optional string fantasy_name = 20;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->fantasy_name(), target);
  }

  // optional string public_key = 30;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->public_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Secret2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string private_key = 1;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_key());
    }

    // optional string fantasy_name = 20;
    if (has_fantasy_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional string public_key = 30;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Secret2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Secret2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Secret2::MergeFrom(const Secret2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_key()) {
      set_private_key(from.private_key());
    }
    if (from.has_fantasy_name()) {
      set_fantasy_name(from.fantasy_name());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Secret2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret2::CopyFrom(const Secret2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret2::IsInitialized() const {

  return true;
}

void Secret2::Swap(Secret2* other) {
  if (other != this) {
    std::swap(private_key_, other->private_key_);
    std::swap(fantasy_name_, other->fantasy_name_);
    std::swap(public_key_, other->public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Secret2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Secret2_descriptor_;
  metadata.reflection = Secret2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Secret3::kPrivateKeyFieldNumber;
const int Secret3::kMnemonicKeyFieldNumber;
const int Secret3::kFantasyNameFieldNumber;
const int Secret3::kPublicKeyFieldNumber;
#endif  // !_MSC_VER

Secret3::Secret3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Secret3::InitAsDefaultInstance() {
}

Secret3::Secret3(const Secret3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Secret3::SharedCtor() {
  _cached_size_ = 0;
  private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mnemonic_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Secret3::~Secret3() {
  SharedDtor();
}

void Secret3::SharedDtor() {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_;
  }
  if (mnemonic_key_ != &::google::protobuf::internal::kEmptyString) {
    delete mnemonic_key_;
  }
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (this != default_instance_) {
  }
}

void Secret3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Secret3_descriptor_;
}

const Secret3& Secret3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Secret3* Secret3::default_instance_ = NULL;

Secret3* Secret3::New() const {
  return new Secret3;
}

void Secret3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_private_key()) {
      if (private_key_ != &::google::protobuf::internal::kEmptyString) {
        private_key_->clear();
      }
    }
    if (has_mnemonic_key()) {
      if (mnemonic_key_ != &::google::protobuf::internal::kEmptyString) {
        mnemonic_key_->clear();
      }
    }
    if (has_fantasy_name()) {
      if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
        fantasy_name_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Secret3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->private_key().data(), this->private_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mnemonic_key;
        break;
      }

      // optional string mnemonic_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mnemonic_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mnemonic_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mnemonic_key().data(), this->mnemonic_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_fantasy_name;
        break;
      }

      // optional string fantasy_name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_public_key;
        break;
      }

      // optional string public_key = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Secret3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->private_key(), output);
  }

  // optional string mnemonic_key = 3;
  if (has_mnemonic_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mnemonic_key().data(), this->mnemonic_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mnemonic_key(), output);
  }

  // optional string fantasy_name = 20;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->fantasy_name(), output);
  }

  // optional string public_key = 30;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->public_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Secret3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_key(), target);
  }

  // optional string mnemonic_key = 3;
  if (has_mnemonic_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mnemonic_key().data(), this->mnemonic_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mnemonic_key(), target);
  }

  // optional string fantasy_name = 20;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->fantasy_name(), target);
  }

  // optional string public_key = 30;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->public_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Secret3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string private_key = 1;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_key());
    }

    // optional string mnemonic_key = 3;
    if (has_mnemonic_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mnemonic_key());
    }

    // optional string fantasy_name = 20;
    if (has_fantasy_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional string public_key = 30;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Secret3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Secret3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Secret3::MergeFrom(const Secret3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_key()) {
      set_private_key(from.private_key());
    }
    if (from.has_mnemonic_key()) {
      set_mnemonic_key(from.mnemonic_key());
    }
    if (from.has_fantasy_name()) {
      set_fantasy_name(from.fantasy_name());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Secret3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret3::CopyFrom(const Secret3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret3::IsInitialized() const {

  return true;
}

void Secret3::Swap(Secret3* other) {
  if (other != this) {
    std::swap(private_key_, other->private_key_);
    std::swap(mnemonic_key_, other->mnemonic_key_);
    std::swap(fantasy_name_, other->fantasy_name_);
    std::swap(public_key_, other->public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Secret3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Secret3_descriptor_;
  metadata.reflection = Secret3_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OutData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutData_Type_descriptor_;
}
bool OutData_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OutData_Type OutData::MYFANTASYNAME;
const OutData_Type OutData::SNAPSHOT;
const OutData_Type OutData::HEARTBEAT;
const OutData_Type OutData::Type_MIN;
const OutData_Type OutData::Type_MAX;
const int OutData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OutData::kTypeFieldNumber;
const int OutData::kMyfantasynameFieldNumber;
#endif  // !_MSC_VER

OutData::OutData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OutData::InitAsDefaultInstance() {
  myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(&::fantasybit::MyFantasyName::default_instance());
}

OutData::OutData(const OutData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OutData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  myfantasyname_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutData::~OutData() {
  SharedDtor();
}

void OutData::SharedDtor() {
  if (this != default_instance_) {
    delete myfantasyname_;
  }
}

void OutData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutData_descriptor_;
}

const OutData& OutData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

OutData* OutData::default_instance_ = NULL;

OutData* OutData::New() const {
  return new OutData;
}

void OutData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_myfantasyname()) {
      if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fantasybit.OutData.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::OutData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::OutData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_myfantasyname;
        break;
      }

      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myfantasyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myfantasyname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OutData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fantasybit.OutData.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myfantasyname(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OutData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fantasybit.OutData.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myfantasyname(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OutData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fantasybit.OutData.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .fantasybit.MyFantasyName myfantasyname = 2;
    if (has_myfantasyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myfantasyname());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutData::MergeFrom(const OutData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_myfantasyname()) {
      mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from.myfantasyname());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutData::CopyFrom(const OutData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void OutData::Swap(OutData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(myfantasyname_, other->myfantasyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata OutData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutData_descriptor_;
  metadata.reflection = OutData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InData_Type_descriptor_;
}
bool InData_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InData_Type InData::MINENAME;
const InData_Type InData::QUIT;
const InData_Type InData::HEARTBEAT;
const InData_Type InData::CONNECT;
const InData_Type InData::MAKE_BLOCK;
const InData_Type InData::NEWNAME;
const InData_Type InData::PROJ;
const InData_Type InData::DATA;
const InData_Type InData::Type_MIN;
const InData_Type InData::Type_MAX;
const int InData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InData::kTypeFieldNumber;
const int InData::kDataFieldNumber;
const int InData::kData2FieldNumber;
const int InData::kNumFieldNumber;
const int InData::kDataTransFieldNumber;
#endif  // !_MSC_VER

InData::InData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InData::InitAsDefaultInstance() {
  data_trans_ = const_cast< ::fantasybit::DataTransition*>(&::fantasybit::DataTransition::default_instance());
}

InData::InData(const InData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  data_trans_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InData::~InData() {
  SharedDtor();
}

void InData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data2_ != &::google::protobuf::internal::kEmptyString) {
    delete data2_;
  }
  if (this != default_instance_) {
    delete data_trans_;
  }
}

void InData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InData_descriptor_;
}

const InData& InData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

InData* InData::default_instance_ = NULL;

InData* InData::New() const {
  return new InData;
}

void InData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_data2()) {
      if (data2_ != &::google::protobuf::internal::kEmptyString) {
        data2_->clear();
      }
    }
    num_ = 0;
    if (has_data_trans()) {
      if (data_trans_ != NULL) data_trans_->::fantasybit::DataTransition::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fantasybit.InData.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::InData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::InData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data2;
        break;
      }

      // optional string data2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data2().data(), this->data2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data_trans;
        break;
      }

      // optional .fantasybit.DataTransition data_trans = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_trans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_trans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fantasybit.InData.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(), output);
  }

  // optional string data2 = 3;
  if (has_data2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data2().data(), this->data2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data2(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional .fantasybit.DataTransition data_trans = 5;
  if (has_data_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data_trans(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fantasybit.InData.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // optional string data2 = 3;
  if (has_data2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data2().data(), this->data2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data2(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional .fantasybit.DataTransition data_trans = 5;
  if (has_data_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data_trans(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fantasybit.InData.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional string data2 = 3;
    if (has_data2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data2());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional .fantasybit.DataTransition data_trans = 5;
    if (has_data_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_trans());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InData::MergeFrom(const InData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_data2()) {
      set_data2(from.data2());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data_trans()) {
      mutable_data_trans()->::fantasybit::DataTransition::MergeFrom(from.data_trans());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InData::CopyFrom(const InData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data_trans()) {
    if (!this->data_trans().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void InData::Swap(InData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(data2_, other->data2_);
    std::swap(num_, other->num_);
    std::swap(data_trans_, other->data_trans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata InData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InData_descriptor_;
  metadata.reflection = InData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NameProof_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameProof_Type_descriptor_;
}
bool NameProof_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NameProof_Type NameProof::POW;
const NameProof_Type NameProof::TWEET;
const NameProof_Type NameProof::ORACLE;
const NameProof_Type NameProof::MASTER;
const NameProof_Type NameProof::Type_MIN;
const NameProof_Type NameProof::Type_MAX;
const int NameProof::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NameProof::kTypeFieldNumber;
#endif  // !_MSC_VER

NameProof::NameProof()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameProof::InitAsDefaultInstance() {
}

NameProof::NameProof(const NameProof& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameProof::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameProof::~NameProof() {
  SharedDtor();
}

void NameProof::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NameProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameProof::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameProof_descriptor_;
}

const NameProof& NameProof::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NameProof* NameProof::default_instance_ = NULL;

NameProof* NameProof::New() const {
  return new NameProof;
}

void NameProof::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.NameProof.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::NameProof_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::NameProof_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((1600u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.NameProof.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // Extension range [200, 536870912)
  _extensions_.SerializeWithCachedSizes(
      200, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameProof::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.NameProof.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // Extension range [200, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      200, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameProof::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.NameProof.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameProof::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameProof* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameProof*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameProof::MergeFrom(const NameProof& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameProof::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameProof::CopyFrom(const NameProof& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameProof::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NameProof::Swap(NameProof* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NameProof::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameProof_descriptor_;
  metadata.reflection = NameProof_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TweetProof::kTweetFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TweetProof::kTweetProofFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::NameProof,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TweetProof >, 11, false >
  TweetProof::tweet_proof(kTweetProofFieldNumber, ::fantasybit::TweetProof::default_instance());
TweetProof::TweetProof()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TweetProof::InitAsDefaultInstance() {
}

TweetProof::TweetProof(const TweetProof& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TweetProof::SharedCtor() {
  _cached_size_ = 0;
  tweet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TweetProof::~TweetProof() {
  SharedDtor();
}

void TweetProof::SharedDtor() {
  if (tweet_ != &::google::protobuf::internal::kEmptyString) {
    delete tweet_;
  }
  if (this != default_instance_) {
  }
}

void TweetProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TweetProof::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TweetProof_descriptor_;
}

const TweetProof& TweetProof::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

TweetProof* TweetProof::default_instance_ = NULL;

TweetProof* TweetProof::New() const {
  return new TweetProof;
}

void TweetProof::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tweet()) {
      if (tweet_ != &::google::protobuf::internal::kEmptyString) {
        tweet_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TweetProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tweet = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tweet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tweet().data(), this->tweet().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TweetProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tweet = 10;
  if (has_tweet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tweet().data(), this->tweet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->tweet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TweetProof::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tweet = 10;
  if (has_tweet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tweet().data(), this->tweet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tweet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TweetProof::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tweet = 10;
    if (has_tweet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tweet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TweetProof::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TweetProof* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TweetProof*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TweetProof::MergeFrom(const TweetProof& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tweet()) {
      set_tweet(from.tweet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TweetProof::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetProof::CopyFrom(const TweetProof& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetProof::IsInitialized() const {

  return true;
}

void TweetProof::Swap(TweetProof* other) {
  if (other != this) {
    std::swap(tweet_, other->tweet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TweetProof::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TweetProof_descriptor_;
  metadata.reflection = TweetProof_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MasterProof::kSeasonFieldNumber;
const int MasterProof::kWeekFieldNumber;
const int MasterProof::kTimestampFieldNumber;
const int MasterProof::kNewOracleNameFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int MasterProof::kMasterProofFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::NameProof,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::MasterProof >, 11, false >
  MasterProof::master_proof(kMasterProofFieldNumber, ::fantasybit::MasterProof::default_instance());
MasterProof::MasterProof()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterProof::InitAsDefaultInstance() {
  new_oracle_name_ = const_cast< ::fantasybit::SignedTransaction*>(&::fantasybit::SignedTransaction::default_instance());
}

MasterProof::MasterProof(const MasterProof& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterProof::SharedCtor() {
  _cached_size_ = 0;
  season_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  week_ = 0;
  timestamp_ = 0;
  new_oracle_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterProof::~MasterProof() {
  SharedDtor();
}

void MasterProof::SharedDtor() {
  if (season_ != &::google::protobuf::internal::kEmptyString) {
    delete season_;
  }
  if (this != default_instance_) {
    delete new_oracle_name_;
  }
}

void MasterProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterProof::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterProof_descriptor_;
}

const MasterProof& MasterProof::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

MasterProof* MasterProof::default_instance_ = NULL;

MasterProof* MasterProof::New() const {
  return new MasterProof;
}

void MasterProof::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_season()) {
      if (season_ != &::google::protobuf::internal::kEmptyString) {
        season_->clear();
      }
    }
    week_ = 0;
    timestamp_ = 0;
    if (has_new_oracle_name()) {
      if (new_oracle_name_ != NULL) new_oracle_name_->::fantasybit::SignedTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string season = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_season()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->season().data(), this->season().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional int32 week = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_new_oracle_name;
        break;
      }

      // optional .fantasybit.SignedTransaction new_oracle_name = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_oracle_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_oracle_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->season().data(), this->season().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->season(), output);
  }

  // optional int32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->week(), output);
  }

  // optional int32 timestamp = 21;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->timestamp(), output);
  }

  // optional .fantasybit.SignedTransaction new_oracle_name = 66;
  if (has_new_oracle_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->new_oracle_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterProof::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->season().data(), this->season().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->season(), target);
  }

  // optional int32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->week(), target);
  }

  // optional int32 timestamp = 21;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->timestamp(), target);
  }

  // optional .fantasybit.SignedTransaction new_oracle_name = 66;
  if (has_new_oracle_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->new_oracle_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterProof::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->season());
    }

    // optional int32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // optional int32 timestamp = 21;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional .fantasybit.SignedTransaction new_oracle_name = 66;
    if (has_new_oracle_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_oracle_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterProof::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterProof* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterProof*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterProof::MergeFrom(const MasterProof& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_new_oracle_name()) {
      mutable_new_oracle_name()->::fantasybit::SignedTransaction::MergeFrom(from.new_oracle_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterProof::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterProof::CopyFrom(const MasterProof& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterProof::IsInitialized() const {

  if (has_new_oracle_name()) {
    if (!this->new_oracle_name().IsInitialized()) return false;
  }
  return true;
}

void MasterProof::Swap(MasterProof* other) {
  if (other != this) {
    std::swap(season_, other->season_);
    std::swap(week_, other->week_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(new_oracle_name_, other->new_oracle_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterProof::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterProof_descriptor_;
  metadata.reflection = MasterProof_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Transaction::kVersionFieldNumber;
const int Transaction::kTypeFieldNumber;
const int Transaction::kNonceFieldNumber;
#endif  // !_MSC_VER

Transaction::Transaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transaction::InitAsDefaultInstance() {
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transaction::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  type_ = 0;
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transaction::~Transaction() {
  SharedDtor();
}

void Transaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New() const {
  return new Transaction;
}

void Transaction::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    type_ = 0;
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .fantasybit.TransType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TransType_IsValid(value)) {
            set_type(static_cast< ::fantasybit::TransType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional .fantasybit.TransType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 nonce = 10;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->nonce(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional .fantasybit.TransType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 nonce = 10;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->nonce(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .fantasybit.TransType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 nonce = 10;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(type_, other->type_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameTrans::kFantasyNameFieldNumber;
const int NameTrans::kPublicKeyFieldNumber;
const int NameTrans::kProofFieldNumber;
const int NameTrans::kRecoveryKeyFieldNumber;
const int NameTrans::kAmAgentFieldNumber;
const int NameTrans::kMyAgentFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int NameTrans::kNameTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NameTrans >, 11, false >
  NameTrans::name_trans(kNameTransFieldNumber, ::fantasybit::NameTrans::default_instance());
NameTrans::NameTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameTrans::InitAsDefaultInstance() {
  proof_ = const_cast< ::fantasybit::NameProof*>(&::fantasybit::NameProof::default_instance());
}

NameTrans::NameTrans(const NameTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameTrans::SharedCtor() {
  _cached_size_ = 0;
  fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proof_ = NULL;
  recovery_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  am_agent_ = false;
  my_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameTrans::~NameTrans() {
  SharedDtor();
}

void NameTrans::SharedDtor() {
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (recovery_key_ != &::google::protobuf::internal::kEmptyString) {
    delete recovery_key_;
  }
  if (my_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete my_agent_;
  }
  if (this != default_instance_) {
    delete proof_;
  }
}

void NameTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameTrans_descriptor_;
}

const NameTrans& NameTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NameTrans* NameTrans::default_instance_ = NULL;

NameTrans* NameTrans::New() const {
  return new NameTrans;
}

void NameTrans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fantasy_name()) {
      if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
        fantasy_name_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
    if (has_proof()) {
      if (proof_ != NULL) proof_->::fantasybit::NameProof::Clear();
    }
    if (has_recovery_key()) {
      if (recovery_key_ != &::google::protobuf::internal::kEmptyString) {
        recovery_key_->clear();
      }
    }
    am_agent_ = false;
    if (has_my_agent()) {
      if (my_agent_ != &::google::protobuf::internal::kEmptyString) {
        my_agent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fantasy_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_public_key;
        break;
      }

      // optional bytes public_key = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_proof;
        break;
      }

      // optional .fantasybit.NameProof proof = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proof:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proof()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_recovery_key;
        break;
      }

      // optional bytes recovery_key = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recovery_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recovery_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_am_agent;
        break;
      }

      // optional bool am_agent = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_am_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &am_agent_)));
          set_has_am_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_my_agent;
        break;
      }

      // optional string my_agent = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_my_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->my_agent().data(), this->my_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fantasy_name(), output);
  }

  // optional bytes public_key = 20;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->public_key(), output);
  }

  // optional .fantasybit.NameProof proof = 30;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->proof(), output);
  }

  // optional bytes recovery_key = 40;
  if (has_recovery_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->recovery_key(), output);
  }

  // optional bool am_agent = 50;
  if (has_am_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->am_agent(), output);
  }

  // optional string my_agent = 60;
  if (has_my_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->my_agent().data(), this->my_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->my_agent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fantasy_name(), target);
  }

  // optional bytes public_key = 20;
  if (has_public_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->public_key(), target);
  }

  // optional .fantasybit.NameProof proof = 30;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->proof(), target);
  }

  // optional bytes recovery_key = 40;
  if (has_recovery_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->recovery_key(), target);
  }

  // optional bool am_agent = 50;
  if (has_am_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->am_agent(), target);
  }

  // optional string my_agent = 60;
  if (has_my_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->my_agent().data(), this->my_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->my_agent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fantasy_name = 10;
    if (has_fantasy_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional bytes public_key = 20;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

    // optional .fantasybit.NameProof proof = 30;
    if (has_proof()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proof());
    }

    // optional bytes recovery_key = 40;
    if (has_recovery_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->recovery_key());
    }

    // optional bool am_agent = 50;
    if (has_am_agent()) {
      total_size += 2 + 1;
    }

    // optional string my_agent = 60;
    if (has_my_agent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->my_agent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameTrans::MergeFrom(const NameTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_name()) {
      set_fantasy_name(from.fantasy_name());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_proof()) {
      mutable_proof()->::fantasybit::NameProof::MergeFrom(from.proof());
    }
    if (from.has_recovery_key()) {
      set_recovery_key(from.recovery_key());
    }
    if (from.has_am_agent()) {
      set_am_agent(from.am_agent());
    }
    if (from.has_my_agent()) {
      set_my_agent(from.my_agent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameTrans::CopyFrom(const NameTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameTrans::IsInitialized() const {

  if (has_proof()) {
    if (!this->proof().IsInitialized()) return false;
  }
  return true;
}

void NameTrans::Swap(NameTrans* other) {
  if (other != this) {
    std::swap(fantasy_name_, other->fantasy_name_);
    std::swap(public_key_, other->public_key_);
    std::swap(proof_, other->proof_);
    std::swap(recovery_key_, other->recovery_key_);
    std::swap(am_agent_, other->am_agent_);
    std::swap(my_agent_, other->my_agent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameTrans_descriptor_;
  metadata.reflection = NameTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferTrans::kFromFieldNumber;
const int TransferTrans::kToFieldNumber;
const int TransferTrans::kAmountFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TransferTrans::kTransferTranFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TransferTrans >, 11, false >
  TransferTrans::transfer_tran(kTransferTranFieldNumber, ::fantasybit::TransferTrans::default_instance());
TransferTrans::TransferTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferTrans::InitAsDefaultInstance() {
}

TransferTrans::TransferTrans(const TransferTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferTrans::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferTrans::~TransferTrans() {
  SharedDtor();
}

void TransferTrans::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
  }
}

void TransferTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferTrans_descriptor_;
}

const TransferTrans& TransferTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

TransferTrans* TransferTrans::default_instance_ = NULL;

TransferTrans* TransferTrans::New() const {
  return new TransferTrans;
}

void TransferTrans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_to;
        break;
      }

      // optional string to = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string from = 10;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->from(), output);
  }

  // optional string to = 20;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->to(), output);
  }

  // optional uint64 amount = 30;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string from = 10;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->from(), target);
  }

  // optional string to = 20;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->to(), target);
  }

  // optional uint64 amount = 30;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string from = 10;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // optional string to = 20;
    if (has_to()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

    // optional uint64 amount = 30;
    if (has_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferTrans::MergeFrom(const TransferTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferTrans::CopyFrom(const TransferTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferTrans::IsInitialized() const {

  return true;
}

void TransferTrans::Swap(TransferTrans* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferTrans_descriptor_;
  metadata.reflection = TransferTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignedTransaction::kTransFieldNumber;
const int SignedTransaction::kIdFieldNumber;
const int SignedTransaction::kSigFieldNumber;
const int SignedTransaction::kFantasyNameFieldNumber;
#endif  // !_MSC_VER

SignedTransaction::SignedTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignedTransaction::InitAsDefaultInstance() {
  trans_ = const_cast< ::fantasybit::Transaction*>(&::fantasybit::Transaction::default_instance());
}

SignedTransaction::SignedTransaction(const SignedTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignedTransaction::SharedCtor() {
  _cached_size_ = 0;
  trans_ = NULL;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedTransaction::~SignedTransaction() {
  SharedDtor();
}

void SignedTransaction::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (this != default_instance_) {
    delete trans_;
  }
}

void SignedTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedTransaction_descriptor_;
}

const SignedTransaction& SignedTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

SignedTransaction* SignedTransaction::default_instance_ = NULL;

SignedTransaction* SignedTransaction::New() const {
  return new SignedTransaction;
}

void SignedTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trans()) {
      if (trans_ != NULL) trans_->::fantasybit::Transaction::Clear();
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
    if (has_fantasy_name()) {
      if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
        fantasy_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.Transaction trans = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_id;
        break;
      }

      // optional bytes id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_sig;
        break;
      }

      // optional bytes sig = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_fantasy_name;
        break;
      }

      // optional string fantasy_name = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.Transaction trans = 10;
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->trans(), output);
  }

  // optional bytes id = 20;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->id(), output);
  }

  // optional bytes sig = 30;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->sig(), output);
  }

  // optional string fantasy_name = 40;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->fantasy_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignedTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.Transaction trans = 10;
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->trans(), target);
  }

  // optional bytes id = 20;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->id(), target);
  }

  // optional bytes sig = 30;
  if (has_sig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->sig(), target);
  }

  // optional string fantasy_name = 40;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->fantasy_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignedTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.Transaction trans = 10;
    if (has_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trans());
    }

    // optional bytes id = 20;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes sig = 30;
    if (has_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sig());
    }

    // optional string fantasy_name = 40;
    if (has_fantasy_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedTransaction::MergeFrom(const SignedTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trans()) {
      mutable_trans()->::fantasybit::Transaction::MergeFrom(from.trans());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
    if (from.has_fantasy_name()) {
      set_fantasy_name(from.fantasy_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedTransaction::CopyFrom(const SignedTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedTransaction::IsInitialized() const {

  if (has_trans()) {
    if (!this->trans().IsInitialized()) return false;
  }
  return true;
}

void SignedTransaction::Swap(SignedTransaction* other) {
  if (other != this) {
    std::swap(trans_, other->trans_);
    std::swap(id_, other->id_);
    std::swap(sig_, other->sig_);
    std::swap(fantasy_name_, other->fantasy_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedTransaction_descriptor_;
  metadata.reflection = SignedTransaction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BlockHeader_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockHeader_Type_descriptor_;
}
bool BlockHeader_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BlockHeader_Type BlockHeader::NORMAL;
const BlockHeader_Type BlockHeader::DATA;
const BlockHeader_Type BlockHeader::Type_MIN;
const BlockHeader_Type BlockHeader::Type_MAX;
const int BlockHeader::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BlockHeader::kVersionFieldNumber;
const int BlockHeader::kNumFieldNumber;
const int BlockHeader::kPrevIdFieldNumber;
const int BlockHeader::kTimestampFieldNumber;
const int BlockHeader::kGeneratorPkFieldNumber;
const int BlockHeader::kGeneratingSigFieldNumber;
const int BlockHeader::kBasetargetFieldNumber;
const int BlockHeader::kBlocktypeFieldNumber;
const int BlockHeader::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

BlockHeader::BlockHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockHeader::InitAsDefaultInstance() {
}

BlockHeader::BlockHeader(const BlockHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockHeader::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  num_ = 0;
  prev_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = 0;
  generator_pk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  generating_sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  basetarget_ = GOOGLE_ULONGLONG(0);
  blocktype_ = 1;
  transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockHeader::~BlockHeader() {
  SharedDtor();
}

void BlockHeader::SharedDtor() {
  if (prev_id_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_id_;
  }
  if (generator_pk_ != &::google::protobuf::internal::kEmptyString) {
    delete generator_pk_;
  }
  if (generating_sig_ != &::google::protobuf::internal::kEmptyString) {
    delete generating_sig_;
  }
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (this != default_instance_) {
  }
}

void BlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockHeader_descriptor_;
}

const BlockHeader& BlockHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

BlockHeader* BlockHeader::default_instance_ = NULL;

BlockHeader* BlockHeader::New() const {
  return new BlockHeader;
}

void BlockHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    num_ = 0;
    if (has_prev_id()) {
      if (prev_id_ != &::google::protobuf::internal::kEmptyString) {
        prev_id_->clear();
      }
    }
    timestamp_ = 0;
    if (has_generator_pk()) {
      if (generator_pk_ != &::google::protobuf::internal::kEmptyString) {
        generator_pk_->clear();
      }
    }
    if (has_generating_sig()) {
      if (generating_sig_ != &::google::protobuf::internal::kEmptyString) {
        generating_sig_->clear();
      }
    }
    basetarget_ = GOOGLE_ULONGLONG(0);
    blocktype_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_transaction_id()) {
      if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        transaction_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_num;
        break;
      }

      // optional int32 num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_prev_id;
        break;
      }

      // optional bytes prev_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_generator_pk;
        break;
      }

      // optional bytes generator_pk = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator_pk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generator_pk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_generating_sig;
        break;
      }

      // optional bytes generating_sig = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generating_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generating_sig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_basetarget;
        break;
      }

      // optional uint64 basetarget = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basetarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &basetarget_)));
          set_has_basetarget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_blocktype;
        break;
      }

      // optional .fantasybit.BlockHeader.Type blocktype = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocktype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::BlockHeader_Type_IsValid(value)) {
            set_blocktype(static_cast< ::fantasybit::BlockHeader_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(60, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_transaction_id;
        break;
      }

      // optional bytes transaction_id = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 num = 10;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num(), output);
  }

  // optional bytes prev_id = 20;
  if (has_prev_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->prev_id(), output);
  }

  // optional int32 timestamp = 21;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->timestamp(), output);
  }

  // optional bytes generator_pk = 30;
  if (has_generator_pk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->generator_pk(), output);
  }

  // optional bytes generating_sig = 40;
  if (has_generating_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->generating_sig(), output);
  }

  // optional uint64 basetarget = 50;
  if (has_basetarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->basetarget(), output);
  }

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      60, this->blocktype(), output);
  }

  // optional bytes transaction_id = 70;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->transaction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 num = 10;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num(), target);
  }

  // optional bytes prev_id = 20;
  if (has_prev_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->prev_id(), target);
  }

  // optional int32 timestamp = 21;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->timestamp(), target);
  }

  // optional bytes generator_pk = 30;
  if (has_generator_pk()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->generator_pk(), target);
  }

  // optional bytes generating_sig = 40;
  if (has_generating_sig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->generating_sig(), target);
  }

  // optional uint64 basetarget = 50;
  if (has_basetarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->basetarget(), target);
  }

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  if (has_blocktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      60, this->blocktype(), target);
  }

  // optional bytes transaction_id = 70;
  if (has_transaction_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->transaction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 num = 10;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional bytes prev_id = 20;
    if (has_prev_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev_id());
    }

    // optional int32 timestamp = 21;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional bytes generator_pk = 30;
    if (has_generator_pk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generator_pk());
    }

    // optional bytes generating_sig = 40;
    if (has_generating_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generating_sig());
    }

    // optional uint64 basetarget = 50;
    if (has_basetarget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->basetarget());
    }

    // optional .fantasybit.BlockHeader.Type blocktype = 60;
    if (has_blocktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blocktype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes transaction_id = 70;
    if (has_transaction_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_prev_id()) {
      set_prev_id(from.prev_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_generator_pk()) {
      set_generator_pk(from.generator_pk());
    }
    if (from.has_generating_sig()) {
      set_generating_sig(from.generating_sig());
    }
    if (from.has_basetarget()) {
      set_basetarget(from.basetarget());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {

  return true;
}

void BlockHeader::Swap(BlockHeader* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(num_, other->num_);
    std::swap(prev_id_, other->prev_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(generator_pk_, other->generator_pk_);
    std::swap(generating_sig_, other->generating_sig_);
    std::swap(basetarget_, other->basetarget_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockHeader_descriptor_;
  metadata.reflection = BlockHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignedBlockHeader::kHeadFieldNumber;
const int SignedBlockHeader::kSigFieldNumber;
#endif  // !_MSC_VER

SignedBlockHeader::SignedBlockHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignedBlockHeader::InitAsDefaultInstance() {
  head_ = const_cast< ::fantasybit::BlockHeader*>(&::fantasybit::BlockHeader::default_instance());
}

SignedBlockHeader::SignedBlockHeader(const SignedBlockHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignedBlockHeader::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedBlockHeader::~SignedBlockHeader() {
  SharedDtor();
}

void SignedBlockHeader::SharedDtor() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void SignedBlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedBlockHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedBlockHeader_descriptor_;
}

const SignedBlockHeader& SignedBlockHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

SignedBlockHeader* SignedBlockHeader::default_instance_ = NULL;

SignedBlockHeader* SignedBlockHeader::New() const {
  return new SignedBlockHeader;
}

void SignedBlockHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::fantasybit::BlockHeader::Clear();
    }
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedBlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.BlockHeader head = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_sig;
        break;
      }

      // optional string sig = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedBlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.BlockHeader head = 10;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->head(), output);
  }

  // optional string sig = 30;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->sig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignedBlockHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.BlockHeader head = 10;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->head(), target);
  }

  // optional string sig = 30;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->sig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignedBlockHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.BlockHeader head = 10;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional string sig = 30;
    if (has_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedBlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedBlockHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedBlockHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedBlockHeader::MergeFrom(const SignedBlockHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::fantasybit::BlockHeader::MergeFrom(from.head());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedBlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedBlockHeader::CopyFrom(const SignedBlockHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedBlockHeader::IsInitialized() const {

  return true;
}

void SignedBlockHeader::Swap(SignedBlockHeader* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(sig_, other->sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedBlockHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedBlockHeader_descriptor_;
  metadata.reflection = SignedBlockHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Block::kSignedheadFieldNumber;
const int Block::kSignedTransactionsFieldNumber;
#endif  // !_MSC_VER

Block::Block()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Block::InitAsDefaultInstance() {
  signedhead_ = const_cast< ::fantasybit::SignedBlockHeader*>(&::fantasybit::SignedBlockHeader::default_instance());
}

Block::Block(const Block& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Block::SharedCtor() {
  _cached_size_ = 0;
  signedhead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block::~Block() {
  SharedDtor();
}

void Block::SharedDtor() {
  if (this != default_instance_) {
    delete signedhead_;
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New() const {
  return new Block;
}

void Block::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedhead()) {
      if (signedhead_ != NULL) signedhead_->::fantasybit::SignedBlockHeader::Clear();
    }
  }
  signed_transactions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.SignedBlockHeader signedhead = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_signed_transactions;
        break;
      }

      // repeated .fantasybit.SignedTransaction signed_transactions = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signed_transactions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signed_transactions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_signed_transactions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  if (has_signedhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->signedhead(), output);
  }

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  for (int i = 0; i < this->signed_transactions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->signed_transactions(i), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  if (has_signedhead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->signedhead(), target);
  }

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  for (int i = 0; i < this->signed_transactions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->signed_transactions(i), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Block::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.SignedBlockHeader signedhead = 10;
    if (has_signedhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedhead());
    }

  }
  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  total_size += 2 * this->signed_transactions_size();
  for (int i = 0; i < this->signed_transactions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signed_transactions(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Block* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Block*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
  GOOGLE_CHECK_NE(&from, this);
  signed_transactions_.MergeFrom(from.signed_transactions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedhead()) {
      mutable_signedhead()->::fantasybit::SignedBlockHeader::MergeFrom(from.signedhead());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {

  for (int i = 0; i < signed_transactions_size(); i++) {
    if (!this->signed_transactions(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Block::Swap(Block* other) {
  if (other != this) {
    std::swap(signedhead_, other->signedhead_);
    signed_transactions_.Swap(&other->signed_transactions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NodeRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRequest_Type_descriptor_;
}
bool NodeRequest_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NodeRequest_Type NodeRequest::HANDSHAKE;
const NodeRequest_Type NodeRequest::BLOCK_REQUEST;
const NodeRequest_Type NodeRequest::HIGHT_REQUEST;
const NodeRequest_Type NodeRequest::NAT_TEST;
const NodeRequest_Type NodeRequest::Type_MIN;
const NodeRequest_Type NodeRequest::Type_MAX;
const int NodeRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NodeRequest::kTypeFieldNumber;
const int NodeRequest::kMyipFieldNumber;
const int NodeRequest::kNumFieldNumber;
const int NodeRequest::kMyhostFieldNumber;
#endif  // !_MSC_VER

NodeRequest::NodeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeRequest::InitAsDefaultInstance() {
}

NodeRequest::NodeRequest(const NodeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  myip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  myhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeRequest::~NodeRequest() {
  SharedDtor();
}

void NodeRequest::SharedDtor() {
  if (myip_ != &::google::protobuf::internal::kEmptyString) {
    delete myip_;
  }
  if (myhost_ != &::google::protobuf::internal::kEmptyString) {
    delete myhost_;
  }
  if (this != default_instance_) {
  }
}

void NodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRequest_descriptor_;
}

const NodeRequest& NodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NodeRequest* NodeRequest::default_instance_ = NULL;

NodeRequest* NodeRequest::New() const {
  return new NodeRequest;
}

void NodeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_myip()) {
      if (myip_ != &::google::protobuf::internal::kEmptyString) {
        myip_->clear();
      }
    }
    num_ = 0;
    if (has_myhost()) {
      if (myhost_ != &::google::protobuf::internal::kEmptyString) {
        myhost_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.NodeRequest.Type type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::NodeRequest_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::NodeRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_myip;
        break;
      }

      // optional string myip = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->myip().data(), this->myip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_num;
        break;
      }

      // optional int32 num = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_myhost;
        break;
      }

      // optional string myhost = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myhost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->myhost().data(), this->myhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.NodeRequest.Type type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional string myip = 20;
  if (has_myip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myip().data(), this->myip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->myip(), output);
  }

  // optional int32 num = 30;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->num(), output);
  }

  // optional string myhost = 40;
  if (has_myhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myhost().data(), this->myhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->myhost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.NodeRequest.Type type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional string myip = 20;
  if (has_myip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myip().data(), this->myip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->myip(), target);
  }

  // optional int32 num = 30;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->num(), target);
  }

  // optional string myhost = 40;
  if (has_myhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myhost().data(), this->myhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->myhost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.NodeRequest.Type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string myip = 20;
    if (has_myip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myip());
    }

    // optional int32 num = 30;
    if (has_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string myhost = 40;
    if (has_myhost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myhost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeRequest::MergeFrom(const NodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_myip()) {
      set_myip(from.myip());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_myhost()) {
      set_myhost(from.myhost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRequest::CopyFrom(const NodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRequest::IsInitialized() const {

  return true;
}

void NodeRequest::Swap(NodeRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(myip_, other->myip_);
    std::swap(num_, other->num_);
    std::swap(myhost_, other->myhost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeRequest_descriptor_;
  metadata.reflection = NodeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeReply::kHightFieldNumber;
const int NodeReply::kIpsFieldNumber;
#endif  // !_MSC_VER

NodeReply::NodeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeReply::InitAsDefaultInstance() {
}

NodeReply::NodeReply(const NodeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeReply::SharedCtor() {
  _cached_size_ = 0;
  hight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeReply::~NodeReply() {
  SharedDtor();
}

void NodeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeReply_descriptor_;
}

const NodeReply& NodeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NodeReply* NodeReply::default_instance_ = NULL;

NodeReply* NodeReply::New() const {
  return new NodeReply;
}

void NodeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hight_ = 0;
  }
  ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hight = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hight_)));
          set_has_hight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ips;
        break;
      }

      // repeated string ips = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ips(this->ips_size() - 1).data(),
            this->ips(this->ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ips;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hight = 10;
  if (has_hight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hight(), output);
  }

  // repeated string ips = 20;
  for (int i = 0; i < this->ips_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ips(i).data(), this->ips(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->ips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hight = 10;
  if (has_hight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hight(), target);
  }

  // repeated string ips = 20;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ips(i).data(), this->ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->ips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hight = 10;
    if (has_hight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hight());
    }

  }
  // repeated string ips = 20;
  total_size += 2 * this->ips_size();
  for (int i = 0; i < this->ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeReply::MergeFrom(const NodeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  ips_.MergeFrom(from.ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hight()) {
      set_hight(from.hight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeReply::CopyFrom(const NodeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeReply::IsInitialized() const {

  return true;
}

void NodeReply::Swap(NodeReply* other) {
  if (other != this) {
    std::swap(hight_, other->hight_);
    ips_.Swap(&other->ips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeReply_descriptor_;
  metadata.reflection = NodeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FantasyPlayerPoints::kSeasonFieldNumber;
const int FantasyPlayerPoints::kWeekFieldNumber;
const int FantasyPlayerPoints::kPlayeridFieldNumber;
const int FantasyPlayerPoints::kPointsFieldNumber;
const int FantasyPlayerPoints::kResultFieldNumber;
#endif  // !_MSC_VER

FantasyPlayerPoints::FantasyPlayerPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FantasyPlayerPoints::InitAsDefaultInstance() {
}

FantasyPlayerPoints::FantasyPlayerPoints(const FantasyPlayerPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FantasyPlayerPoints::SharedCtor() {
  _cached_size_ = 0;
  season_ = 0u;
  week_ = 0u;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  points_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyPlayerPoints::~FantasyPlayerPoints() {
  SharedDtor();
}

void FantasyPlayerPoints::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void FantasyPlayerPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyPlayerPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyPlayerPoints_descriptor_;
}

const FantasyPlayerPoints& FantasyPlayerPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

FantasyPlayerPoints* FantasyPlayerPoints::default_instance_ = NULL;

FantasyPlayerPoints* FantasyPlayerPoints::New() const {
  return new FantasyPlayerPoints;
}

void FantasyPlayerPoints::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    season_ = 0u;
    week_ = 0u;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    points_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyPlayerPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_playerid;
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_points;
        break;
      }

      // optional int32 points = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(405)) goto parse_result;
        break;
      }

      // optional float result = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FantasyPlayerPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->playerid(), output);
  }

  // optional int32 points = 40;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->points(), output);
  }

  // optional float result = 50;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FantasyPlayerPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional int32 points = 40;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->points(), target);
  }

  // optional float result = 50;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FantasyPlayerPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 points = 40;
    if (has_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional float result = 50;
    if (has_result()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyPlayerPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyPlayerPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FantasyPlayerPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyPlayerPoints::MergeFrom(const FantasyPlayerPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyPlayerPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyPlayerPoints::CopyFrom(const FantasyPlayerPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyPlayerPoints::IsInitialized() const {

  return true;
}

void FantasyPlayerPoints::Swap(FantasyPlayerPoints* other) {
  if (other != this) {
    std::swap(season_, other->season_);
    std::swap(week_, other->week_);
    std::swap(playerid_, other->playerid_);
    std::swap(points_, other->points_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FantasyPlayerPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FantasyPlayerPoints_descriptor_;
  metadata.reflection = FantasyPlayerPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProjectionTrans::kSeasonFieldNumber;
const int ProjectionTrans::kWeekFieldNumber;
const int ProjectionTrans::kPlayeridFieldNumber;
const int ProjectionTrans::kPointsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ProjectionTrans::kProjTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ProjectionTrans >, 11, false >
  ProjectionTrans::proj_trans(kProjTransFieldNumber, ::fantasybit::ProjectionTrans::default_instance());
ProjectionTrans::ProjectionTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProjectionTrans::InitAsDefaultInstance() {
}

ProjectionTrans::ProjectionTrans(const ProjectionTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProjectionTrans::SharedCtor() {
  _cached_size_ = 0;
  season_ = 0u;
  week_ = 0u;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjectionTrans::~ProjectionTrans() {
  SharedDtor();
}

void ProjectionTrans::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void ProjectionTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectionTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjectionTrans_descriptor_;
}

const ProjectionTrans& ProjectionTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

ProjectionTrans* ProjectionTrans::default_instance_ = NULL;

ProjectionTrans* ProjectionTrans::New() const {
  return new ProjectionTrans;
}

void ProjectionTrans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    season_ = 0u;
    week_ = 0u;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    points_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProjectionTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_playerid;
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_points;
        break;
      }

      // optional int32 points = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProjectionTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->playerid(), output);
  }

  // optional int32 points = 40;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProjectionTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional int32 points = 40;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProjectionTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 points = 40;
    if (has_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectionTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProjectionTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProjectionTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjectionTrans::MergeFrom(const ProjectionTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProjectionTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionTrans::CopyFrom(const ProjectionTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionTrans::IsInitialized() const {

  return true;
}

void ProjectionTrans::Swap(ProjectionTrans* other) {
  if (other != this) {
    std::swap(season_, other->season_);
    std::swap(week_, other->week_);
    std::swap(playerid_, other->playerid_);
    std::swap(points_, other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProjectionTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjectionTrans_descriptor_;
  metadata.reflection = ProjectionTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPoints::kPlayeridFieldNumber;
const int PlayerPoints::kPointsFieldNumber;
#endif  // !_MSC_VER

PlayerPoints::PlayerPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPoints::InitAsDefaultInstance() {
}

PlayerPoints::PlayerPoints(const PlayerPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPoints::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPoints::~PlayerPoints() {
  SharedDtor();
}

void PlayerPoints::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void PlayerPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPoints_descriptor_;
}

const PlayerPoints& PlayerPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

PlayerPoints* PlayerPoints::default_instance_ = NULL;

PlayerPoints* PlayerPoints::New() const {
  return new PlayerPoints;
}

void PlayerPoints::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    points_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_points;
        break;
      }

      // optional int32 points = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->playerid(), output);
  }

  // optional int32 points = 40;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional int32 points = 40;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 points = 40;
    if (has_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPoints::MergeFrom(const PlayerPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPoints::CopyFrom(const PlayerPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPoints::IsInitialized() const {

  return true;
}

void PlayerPoints::Swap(PlayerPoints* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(points_, other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPoints_descriptor_;
  metadata.reflection = PlayerPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProjectionTransBlock::kSeasonFieldNumber;
const int ProjectionTransBlock::kWeekFieldNumber;
const int ProjectionTransBlock::kPlayerPointsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ProjectionTransBlock::kProjTransBlockFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ProjectionTransBlock >, 11, false >
  ProjectionTransBlock::proj_trans_block(kProjTransBlockFieldNumber, ::fantasybit::ProjectionTransBlock::default_instance());
ProjectionTransBlock::ProjectionTransBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProjectionTransBlock::InitAsDefaultInstance() {
}

ProjectionTransBlock::ProjectionTransBlock(const ProjectionTransBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProjectionTransBlock::SharedCtor() {
  _cached_size_ = 0;
  season_ = 0u;
  week_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjectionTransBlock::~ProjectionTransBlock() {
  SharedDtor();
}

void ProjectionTransBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProjectionTransBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectionTransBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjectionTransBlock_descriptor_;
}

const ProjectionTransBlock& ProjectionTransBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

ProjectionTransBlock* ProjectionTransBlock::default_instance_ = NULL;

ProjectionTransBlock* ProjectionTransBlock::New() const {
  return new ProjectionTransBlock;
}

void ProjectionTransBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    season_ = 0u;
    week_ = 0u;
  }
  player_points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProjectionTransBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_player_points;
        break;
      }

      // repeated .fantasybit.PlayerPoints player_points = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_player_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProjectionTransBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // repeated .fantasybit.PlayerPoints player_points = 30;
  for (int i = 0; i < this->player_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->player_points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProjectionTransBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // repeated .fantasybit.PlayerPoints player_points = 30;
  for (int i = 0; i < this->player_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->player_points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProjectionTransBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

  }
  // repeated .fantasybit.PlayerPoints player_points = 30;
  total_size += 2 * this->player_points_size();
  for (int i = 0; i < this->player_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectionTransBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProjectionTransBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProjectionTransBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjectionTransBlock::MergeFrom(const ProjectionTransBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_points_.MergeFrom(from.player_points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProjectionTransBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionTransBlock::CopyFrom(const ProjectionTransBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionTransBlock::IsInitialized() const {

  return true;
}

void ProjectionTransBlock::Swap(ProjectionTransBlock* other) {
  if (other != this) {
    std::swap(season_, other->season_);
    std::swap(week_, other->week_);
    player_points_.Swap(&other->player_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProjectionTransBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjectionTransBlock_descriptor_;
  metadata.reflection = ProjectionTransBlock_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Data_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_Type_descriptor_;
}
bool Data_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Data_Type Data::SCHEDULE;
const Data_Type Data::PLAYER;
const Data_Type Data::GAME;
const Data_Type Data::RESULT;
const Data_Type Data::MESSAGE;
const Data_Type Data::Type_MIN;
const Data_Type Data::Type_MAX;
const int Data::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Data::kVersionFieldNumber;
const int Data::kTypeFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_type;
        break;
      }

      // optional .fantasybit.Data.Type type = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::Data_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::Data_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->version(), output);
  }

  // optional .fantasybit.Data.Type type = 20;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->type(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 10;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->version(), target);
  }

  // optional .fantasybit.Data.Type type = 20;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->type(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .fantasybit.Data.Type type = 20;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerData::kPlayeridFieldNumber;
const int PlayerData::kPlayerBaseFieldNumber;
const int PlayerData::kPlayerStatusFieldNumber;
const int PlayerData::kPlayerGameStatusFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PlayerData::kPlayerDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::PlayerData >, 11, false >
  PlayerData::player_data(kPlayerDataFieldNumber, ::fantasybit::PlayerData::default_instance());
PlayerData::PlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerData::InitAsDefaultInstance() {
  player_base_ = const_cast< ::fantasybit::PlayerBase*>(&::fantasybit::PlayerBase::default_instance());
  player_status_ = const_cast< ::fantasybit::PlayerStatus*>(&::fantasybit::PlayerStatus::default_instance());
}

PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_base_ = NULL;
  player_status_ = NULL;
  player_game_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerData::~PlayerData() {
  SharedDtor();
}

void PlayerData::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete player_base_;
    delete player_status_;
  }
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerData_descriptor_;
}

const PlayerData& PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

PlayerData* PlayerData::default_instance_ = NULL;

PlayerData* PlayerData::New() const {
  return new PlayerData;
}

void PlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::fantasybit::PlayerBase::Clear();
    }
    if (has_player_status()) {
      if (player_status_ != NULL) player_status_->::fantasybit::PlayerStatus::Clear();
    }
    player_game_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_player_base;
        break;
      }

      // optional .fantasybit.PlayerBase player_base = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_player_status;
        break;
      }

      // optional .fantasybit.PlayerStatus player_status = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_player_game_status;
        break;
      }

      // optional .fantasybit.PlayerGameStatus player_game_status = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_game_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::PlayerGameStatus_IsValid(value)) {
            set_player_game_status(static_cast< ::fantasybit::PlayerGameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playerid = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->playerid(), output);
  }

  // optional .fantasybit.PlayerBase player_base = 20;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->player_base(), output);
  }

  // optional .fantasybit.PlayerStatus player_status = 30;
  if (has_player_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->player_status(), output);
  }

  // optional .fantasybit.PlayerGameStatus player_game_status = 40;
  if (has_player_game_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->player_game_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerid = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->playerid(), target);
  }

  // optional .fantasybit.PlayerBase player_base = 20;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->player_base(), target);
  }

  // optional .fantasybit.PlayerStatus player_status = 30;
  if (has_player_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->player_status(), target);
  }

  // optional .fantasybit.PlayerGameStatus player_game_status = 40;
  if (has_player_game_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->player_game_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 10;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional .fantasybit.PlayerBase player_base = 20;
    if (has_player_base()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

    // optional .fantasybit.PlayerStatus player_status = 30;
    if (has_player_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_status());
    }

    // optional .fantasybit.PlayerGameStatus player_game_status = 40;
    if (has_player_game_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->player_game_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_player_base()) {
      mutable_player_base()->::fantasybit::PlayerBase::MergeFrom(from.player_base());
    }
    if (from.has_player_status()) {
      mutable_player_status()->::fantasybit::PlayerStatus::MergeFrom(from.player_status());
    }
    if (from.has_player_game_status()) {
      set_player_game_status(from.player_game_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {

  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(player_base_, other->player_base_);
    std::swap(player_status_, other->player_status_);
    std::swap(player_game_status_, other->player_game_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerData_descriptor_;
  metadata.reflection = PlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameData::kGameidFieldNumber;
const int GameData::kStatusFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GameData::kGameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GameData >, 11, false >
  GameData::game_data(kGameDataFieldNumber, ::fantasybit::GameData::default_instance());
GameData::GameData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameData::InitAsDefaultInstance() {
  status_ = const_cast< ::fantasybit::GameStatus*>(&::fantasybit::GameStatus::default_instance());
}

GameData::GameData(const GameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameData::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameData::~GameData() {
  SharedDtor();
}

void GameData::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void GameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameData_descriptor_;
}

const GameData& GameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

GameData* GameData::default_instance_ = NULL;

GameData* GameData::New() const {
  return new GameData;
}

void GameData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::kEmptyString) {
        gameid_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::fantasybit::GameStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_status;
        break;
      }

      // optional .fantasybit.GameStatus status = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gameid = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->gameid(), output);
  }

  // optional .fantasybit.GameStatus status = 20;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gameid = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gameid(), target);
  }

  // optional .fantasybit.GameStatus status = 20;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gameid = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional .fantasybit.GameStatus status = 20;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameData::MergeFrom(const GameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_status()) {
      mutable_status()->::fantasybit::GameStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameData::CopyFrom(const GameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameData::IsInitialized() const {

  return true;
}

void GameData::Swap(GameData* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameData_descriptor_;
  metadata.reflection = GameData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultData::kGameResultFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ResultData::kResultDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ResultData >, 11, false >
  ResultData::result_data(kResultDataFieldNumber, ::fantasybit::ResultData::default_instance());
ResultData::ResultData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultData::InitAsDefaultInstance() {
  game_result_ = const_cast< ::fantasybit::GameResult*>(&::fantasybit::GameResult::default_instance());
}

ResultData::ResultData(const ResultData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultData::SharedCtor() {
  _cached_size_ = 0;
  game_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultData::~ResultData() {
  SharedDtor();
}

void ResultData::SharedDtor() {
  if (this != default_instance_) {
    delete game_result_;
  }
}

void ResultData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultData_descriptor_;
}

const ResultData& ResultData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

ResultData* ResultData::default_instance_ = NULL;

ResultData* ResultData::New() const {
  return new ResultData;
}

void ResultData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_result()) {
      if (game_result_ != NULL) game_result_->::fantasybit::GameResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GameResult game_result = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.GameResult game_result = 10;
  if (has_game_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->game_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.GameResult game_result = 10;
  if (has_game_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->game_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.GameResult game_result = 10;
    if (has_game_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultData::MergeFrom(const ResultData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_result()) {
      mutable_game_result()->::fantasybit::GameResult::MergeFrom(from.game_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultData::CopyFrom(const ResultData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultData::IsInitialized() const {

  return true;
}

void ResultData::Swap(ResultData* other) {
  if (other != this) {
    std::swap(game_result_, other->game_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultData_descriptor_;
  metadata.reflection = ResultData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScheduleData::kWeekFieldNumber;
const int ScheduleData::kWeeklyFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ScheduleData::kScheduleDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ScheduleData >, 11, false >
  ScheduleData::schedule_data(kScheduleDataFieldNumber, ::fantasybit::ScheduleData::default_instance());
ScheduleData::ScheduleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScheduleData::InitAsDefaultInstance() {
  weekly_ = const_cast< ::fantasybit::WeeklySchedule*>(&::fantasybit::WeeklySchedule::default_instance());
}

ScheduleData::ScheduleData(const ScheduleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScheduleData::SharedCtor() {
  _cached_size_ = 0;
  week_ = 0;
  weekly_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScheduleData::~ScheduleData() {
  SharedDtor();
}

void ScheduleData::SharedDtor() {
  if (this != default_instance_) {
    delete weekly_;
  }
}

void ScheduleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScheduleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScheduleData_descriptor_;
}

const ScheduleData& ScheduleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

ScheduleData* ScheduleData::default_instance_ = NULL;

ScheduleData* ScheduleData::New() const {
  return new ScheduleData;
}

void ScheduleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    week_ = 0;
    if (has_weekly()) {
      if (weekly_ != NULL) weekly_->::fantasybit::WeeklySchedule::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScheduleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 week = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_weekly;
        break;
      }

      // optional .fantasybit.WeeklySchedule weekly = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weekly:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weekly()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScheduleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 week = 1;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->week(), output);
  }

  // optional .fantasybit.WeeklySchedule weekly = 10;
  if (has_weekly()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->weekly(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScheduleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 week = 1;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->week(), target);
  }

  // optional .fantasybit.WeeklySchedule weekly = 10;
  if (has_weekly()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->weekly(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScheduleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 week = 1;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // optional .fantasybit.WeeklySchedule weekly = 10;
    if (has_weekly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weekly());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScheduleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScheduleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScheduleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScheduleData::MergeFrom(const ScheduleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_weekly()) {
      mutable_weekly()->::fantasybit::WeeklySchedule::MergeFrom(from.weekly());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScheduleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScheduleData::CopyFrom(const ScheduleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleData::IsInitialized() const {

  return true;
}

void ScheduleData::Swap(ScheduleData* other) {
  if (other != this) {
    std::swap(week_, other->week_);
    std::swap(weekly_, other->weekly_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScheduleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScheduleData_descriptor_;
  metadata.reflection = ScheduleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataTransition::kTypeFieldNumber;
const int DataTransition::kSeasonFieldNumber;
const int DataTransition::kWeekFieldNumber;
const int DataTransition::kGamedataFieldNumber;
const int DataTransition::kDataFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int DataTransition::kDataTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::DataTransition >, 11, false >
  DataTransition::data_trans(kDataTransFieldNumber, ::fantasybit::DataTransition::default_instance());
DataTransition::DataTransition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataTransition::InitAsDefaultInstance() {
}

DataTransition::DataTransition(const DataTransition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataTransition::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  season_ = 0u;
  week_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataTransition::~DataTransition() {
  SharedDtor();
}

void DataTransition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataTransition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataTransition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTransition_descriptor_;
}

const DataTransition& DataTransition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

DataTransition* DataTransition::default_instance_ = NULL;

DataTransition* DataTransition::New() const {
  return new DataTransition;
}

void DataTransition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 2;
    season_ = 0u;
    week_ = 0u;
  }
  gamedata_.Clear();
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.TrType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TrType_IsValid(value)) {
            set_type(static_cast< ::fantasybit::TrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_season;
        break;
      }

      // optional uint32 season = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_gamedata;
        break;
      }

      // repeated .fantasybit.GameData gamedata = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_gamedata;
        if (input->ExpectTag(322)) goto parse_data;
        break;
      }

      // repeated .fantasybit.Data data = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.TrType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // repeated .fantasybit.GameData gamedata = 30;
  for (int i = 0; i < this->gamedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->gamedata(i), output);
  }

  // repeated .fantasybit.Data data = 40;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataTransition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.TrType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // repeated .fantasybit.GameData gamedata = 30;
  for (int i = 0; i < this->gamedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->gamedata(i), target);
  }

  // repeated .fantasybit.Data data = 40;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataTransition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.TrType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

  }
  // repeated .fantasybit.GameData gamedata = 30;
  total_size += 2 * this->gamedata_size();
  for (int i = 0; i < this->gamedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamedata(i));
  }

  // repeated .fantasybit.Data data = 40;
  total_size += 2 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTransition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataTransition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataTransition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataTransition::MergeFrom(const DataTransition& from) {
  GOOGLE_CHECK_NE(&from, this);
  gamedata_.MergeFrom(from.gamedata_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataTransition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTransition::CopyFrom(const DataTransition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTransition::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void DataTransition::Swap(DataTransition* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(season_, other->season_);
    std::swap(week_, other->week_);
    gamedata_.Swap(&other->gamedata_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataTransition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataTransition_descriptor_;
  metadata.reflection = DataTransition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TeamState_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamState_State_descriptor_;
}
bool TeamState_State_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TeamState_State TeamState::PREGAME;
const TeamState_State TeamState::INGAME;
const TeamState_State TeamState::State_MIN;
const TeamState_State TeamState::State_MAX;
const int TeamState::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TeamState::kStateFieldNumber;
const int TeamState::kWeekFieldNumber;
const int TeamState::kTeamidFieldNumber;
#endif  // !_MSC_VER

TeamState::TeamState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamState::InitAsDefaultInstance() {
}

TeamState::TeamState(const TeamState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
  week_ = 0u;
  teamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamState::~TeamState() {
  SharedDtor();
}

void TeamState::SharedDtor() {
  if (teamid_ != &::google::protobuf::internal::kEmptyString) {
    delete teamid_;
  }
  if (this != default_instance_) {
  }
}

void TeamState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamState_descriptor_;
}

const TeamState& TeamState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

TeamState* TeamState::default_instance_ = NULL;

TeamState* TeamState::New() const {
  return new TeamState;
}

void TeamState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 1;
    week_ = 0u;
    if (has_teamid()) {
      if (teamid_ != &::google::protobuf::internal::kEmptyString) {
        teamid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.TeamState.State state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TeamState_State_IsValid(value)) {
            set_state(static_cast< ::fantasybit::TeamState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_week;
        break;
      }

      // optional uint32 week = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_teamid;
        break;
      }

      // optional string teamid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamid().data(), this->teamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.TeamState.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint32 week = 10;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->week(), output);
  }

  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.TeamState.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional uint32 week = 10;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->week(), target);
  }

  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.TeamState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 week = 10;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional string teamid = 20;
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamState::MergeFrom(const TeamState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamState::CopyFrom(const TeamState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamState::IsInitialized() const {

  return true;
}

void TeamState::Swap(TeamState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(week_, other->week_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamState_descriptor_;
  metadata.reflection = TeamState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DeltaData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeltaData_Type_descriptor_;
}
bool DeltaData_Type_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DeltaData_Type DeltaData::SNAPSHOT;
const DeltaData_Type DeltaData::HEARTBEAT;
const DeltaData_Type DeltaData::Type_MIN;
const DeltaData_Type DeltaData::Type_MAX;
const int DeltaData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DeltaData::kTypeFieldNumber;
const int DeltaData::kMyfantasynameFieldNumber;
const int DeltaData::kGlobalstateFieldNumber;
const int DeltaData::kTeamstatesFieldNumber;
const int DeltaData::kDatasFieldNumber;
const int DeltaData::kPlayersFieldNumber;
#endif  // !_MSC_VER

DeltaData::DeltaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeltaData::InitAsDefaultInstance() {
  globalstate_ = const_cast< ::fantasybit::GlobalState*>(&::fantasybit::GlobalState::default_instance());
}

DeltaData::DeltaData(const DeltaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeltaData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  globalstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeltaData::~DeltaData() {
  SharedDtor();
}

void DeltaData::SharedDtor() {
  if (this != default_instance_) {
    delete globalstate_;
  }
}

void DeltaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeltaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeltaData_descriptor_;
}

const DeltaData& DeltaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

DeltaData* DeltaData::default_instance_ = NULL;

DeltaData* DeltaData::New() const {
  return new DeltaData;
}

void DeltaData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 2;
    if (has_globalstate()) {
      if (globalstate_ != NULL) globalstate_->::fantasybit::GlobalState::Clear();
    }
  }
  myfantasyname_.Clear();
  teamstates_.Clear();
  datas_.Clear();
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeltaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.DeltaData.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::DeltaData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::DeltaData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_myfantasyname;
        break;
      }

      // repeated .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myfantasyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_myfantasyname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_myfantasyname;
        if (input->ExpectTag(82)) goto parse_globalstate;
        break;
      }

      // optional .fantasybit.GlobalState globalstate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_globalstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_teamstates;
        break;
      }

      // repeated .fantasybit.TeamState teamstates = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamstates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamstates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_teamstates;
        if (input->ExpectTag(242)) goto parse_datas;
        break;
      }

      // repeated .fantasybit.Data datas = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_datas;
        if (input->ExpectTag(322)) goto parse_players;
        break;
      }

      // repeated .fantasybit.FantasyPlayer players = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeltaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.DeltaData.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  for (int i = 0; i < this->myfantasyname_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myfantasyname(i), output);
  }

  // optional .fantasybit.GlobalState globalstate = 10;
  if (has_globalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->globalstate(), output);
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  for (int i = 0; i < this->teamstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->teamstates(i), output);
  }

  // repeated .fantasybit.Data datas = 30;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->datas(i), output);
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->players(i), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeltaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.DeltaData.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  for (int i = 0; i < this->myfantasyname_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myfantasyname(i), target);
  }

  // optional .fantasybit.GlobalState globalstate = 10;
  if (has_globalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->globalstate(), target);
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  for (int i = 0; i < this->teamstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->teamstates(i), target);
  }

  // repeated .fantasybit.Data datas = 30;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->datas(i), target);
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->players(i), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeltaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.DeltaData.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .fantasybit.GlobalState globalstate = 10;
    if (has_globalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->globalstate());
    }

  }
  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  total_size += 1 * this->myfantasyname_size();
  for (int i = 0; i < this->myfantasyname_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->myfantasyname(i));
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  total_size += 2 * this->teamstates_size();
  for (int i = 0; i < this->teamstates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamstates(i));
  }

  // repeated .fantasybit.Data datas = 30;
  total_size += 2 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  total_size += 2 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeltaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeltaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeltaData::MergeFrom(const DeltaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  myfantasyname_.MergeFrom(from.myfantasyname_);
  teamstates_.MergeFrom(from.teamstates_);
  datas_.MergeFrom(from.datas_);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_globalstate()) {
      mutable_globalstate()->::fantasybit::GlobalState::MergeFrom(from.globalstate());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeltaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaData::CopyFrom(const DeltaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaData::IsInitialized() const {

  for (int i = 0; i < datas_size(); i++) {
    if (!this->datas(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void DeltaData::Swap(DeltaData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    myfantasyname_.Swap(&other->myfantasyname_);
    std::swap(globalstate_, other->globalstate_);
    teamstates_.Swap(&other->teamstates_);
    datas_.Swap(&other->datas_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata DeltaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeltaData_descriptor_;
  metadata.reflection = DeltaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageData::kMsgFieldNumber;
const int MessageData::kGtFieldNumber;
const int MessageData::kLtFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int MessageData::kMessageDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::MessageData >, 11, false >
  MessageData::message_data(kMessageDataFieldNumber, ::fantasybit::MessageData::default_instance());
MessageData::MessageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageData::InitAsDefaultInstance() {
}

MessageData::MessageData(const MessageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageData::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gt_ = 0;
  lt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageData::~MessageData() {
  SharedDtor();
}

void MessageData::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void MessageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageData_descriptor_;
}

const MessageData& MessageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

MessageData* MessageData::default_instance_ = NULL;

MessageData* MessageData::New() const {
  return new MessageData;
}

void MessageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    gt_ = 0;
    lt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_gt;
        break;
      }

      // optional int32 gt = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gt_)));
          set_has_gt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_lt;
        break;
      }

      // optional int32 lt = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lt_)));
          set_has_lt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 10;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->msg(), output);
  }

  // optional int32 gt = 20;
  if (has_gt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->gt(), output);
  }

  // optional int32 lt = 30;
  if (has_lt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->lt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 10;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->msg(), target);
  }

  // optional int32 gt = 20;
  if (has_gt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->gt(), target);
  }

  // optional int32 lt = 30;
  if (has_lt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->lt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 10;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional int32 gt = 20;
    if (has_gt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gt());
    }

    // optional int32 lt = 30;
    if (has_lt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageData::MergeFrom(const MessageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_gt()) {
      set_gt(from.gt());
    }
    if (from.has_lt()) {
      set_lt(from.lt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageData::CopyFrom(const MessageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageData::IsInitialized() const {

  return true;
}

void MessageData::Swap(MessageData* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(gt_, other->gt_);
    std::swap(lt_, other->lt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageData_descriptor_;
  metadata.reflection = MessageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StampedTrans::kTimestampFieldNumber;
const int StampedTrans::kSeqnumFieldNumber;
const int StampedTrans::kPrevseqFieldNumber;
const int StampedTrans::kSignedOrigFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int StampedTrans::kStampedTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::StampedTrans >, 11, false >
  StampedTrans::stamped_trans(kStampedTransFieldNumber, ::fantasybit::StampedTrans::default_instance());
StampedTrans::StampedTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StampedTrans::InitAsDefaultInstance() {
  signed_orig_ = const_cast< ::fantasybit::SignedTransaction*>(&::fantasybit::SignedTransaction::default_instance());
}

StampedTrans::StampedTrans(const StampedTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StampedTrans::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  seqnum_ = 0;
  prevseq_ = 0;
  signed_orig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StampedTrans::~StampedTrans() {
  SharedDtor();
}

void StampedTrans::SharedDtor() {
  if (this != default_instance_) {
    delete signed_orig_;
  }
}

void StampedTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StampedTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StampedTrans_descriptor_;
}

const StampedTrans& StampedTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

StampedTrans* StampedTrans::default_instance_ = NULL;

StampedTrans* StampedTrans::New() const {
  return new StampedTrans;
}

void StampedTrans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    seqnum_ = 0;
    prevseq_ = 0;
    if (has_signed_orig()) {
      if (signed_orig_ != NULL) signed_orig_->::fantasybit::SignedTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StampedTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_seqnum;
        break;
      }

      // optional int32 seqnum = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_prevseq;
        break;
      }

      // optional int32 prevseq = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevseq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevseq_)));
          set_has_prevseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_signed_orig;
        break;
      }

      // optional .fantasybit.SignedTransaction signed_orig = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signed_orig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signed_orig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StampedTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 timestamp = 10;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->timestamp(), output);
  }

  // optional int32 seqnum = 20;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->seqnum(), output);
  }

  // optional int32 prevseq = 21;
  if (has_prevseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->prevseq(), output);
  }

  // optional .fantasybit.SignedTransaction signed_orig = 30;
  if (has_signed_orig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->signed_orig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StampedTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 timestamp = 10;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->timestamp(), target);
  }

  // optional int32 seqnum = 20;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->seqnum(), target);
  }

  // optional int32 prevseq = 21;
  if (has_prevseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->prevseq(), target);
  }

  // optional .fantasybit.SignedTransaction signed_orig = 30;
  if (has_signed_orig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->signed_orig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StampedTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 timestamp = 10;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional int32 seqnum = 20;
    if (has_seqnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqnum());
    }

    // optional int32 prevseq = 21;
    if (has_prevseq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevseq());
    }

    // optional .fantasybit.SignedTransaction signed_orig = 30;
    if (has_signed_orig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signed_orig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StampedTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StampedTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StampedTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StampedTrans::MergeFrom(const StampedTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_prevseq()) {
      set_prevseq(from.prevseq());
    }
    if (from.has_signed_orig()) {
      mutable_signed_orig()->::fantasybit::SignedTransaction::MergeFrom(from.signed_orig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StampedTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StampedTrans::CopyFrom(const StampedTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StampedTrans::IsInitialized() const {

  if (has_signed_orig()) {
    if (!this->signed_orig().IsInitialized()) return false;
  }
  return true;
}

void StampedTrans::Swap(StampedTrans* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(prevseq_, other->prevseq_);
    std::swap(signed_orig_, other->signed_orig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StampedTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StampedTrans_descriptor_;
  metadata.reflection = StampedTrans_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExchangeOrder_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeOrder_Type_descriptor_;
}
bool ExchangeOrder_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExchangeOrder_Type ExchangeOrder::NEW;
const ExchangeOrder_Type ExchangeOrder::CANCEL;
const ExchangeOrder_Type ExchangeOrder::REPLACE;
const ExchangeOrder_Type ExchangeOrder::Type_MIN;
const ExchangeOrder_Type ExchangeOrder::Type_MAX;
const int ExchangeOrder::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ExchangeOrder::kTypeFieldNumber;
const int ExchangeOrder::kPlayeridFieldNumber;
const int ExchangeOrder::kCoreFieldNumber;
const int ExchangeOrder::kCancelOrefFieldNumber;
const int ExchangeOrder::kFutcontractFieldNumber;
const int ExchangeOrder::kSymbolFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ExchangeOrder::kExchangeOrderFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ExchangeOrder >, 11, false >
  ExchangeOrder::exchange_order(kExchangeOrderFieldNumber, ::fantasybit::ExchangeOrder::default_instance());
ExchangeOrder::ExchangeOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeOrder::InitAsDefaultInstance() {
  core_ = const_cast< ::fantasybit::OrderCore*>(&::fantasybit::OrderCore::default_instance());
  futcontract_ = const_cast< ::fantasybit::FutContract*>(&::fantasybit::FutContract::default_instance());
}

ExchangeOrder::ExchangeOrder(const ExchangeOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeOrder::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  core_ = NULL;
  cancel_oref_ = 0;
  futcontract_ = NULL;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeOrder::~ExchangeOrder() {
  SharedDtor();
}

void ExchangeOrder::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
    delete core_;
    delete futcontract_;
  }
}

void ExchangeOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeOrder_descriptor_;
}

const ExchangeOrder& ExchangeOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

ExchangeOrder* ExchangeOrder::default_instance_ = NULL;

ExchangeOrder* ExchangeOrder::New() const {
  return new ExchangeOrder;
}

void ExchangeOrder::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_core()) {
      if (core_ != NULL) core_->::fantasybit::OrderCore::Clear();
    }
    cancel_oref_ = 0;
    if (has_futcontract()) {
      if (futcontract_ != NULL) futcontract_->::fantasybit::FutContract::Clear();
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.ExchangeOrder.Type type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::ExchangeOrder_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::ExchangeOrder_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_playerid;
        break;
      }

      // optional string playerid = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_core;
        break;
      }

      // optional .fantasybit.OrderCore core = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_core:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_core()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_cancel_oref;
        break;
      }

      // optional int32 cancel_oref = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancel_oref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancel_oref_)));
          set_has_cancel_oref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(882)) goto parse_futcontract;
        break;
      }

      // optional .fantasybit.FutContract futcontract = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_futcontract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_futcontract()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(962)) goto parse_symbol;
        break;
      }

      // optional string symbol = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((4000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.ExchangeOrder.Type type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional string playerid = 40;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->playerid(), output);
  }

  // optional .fantasybit.OrderCore core = 50;
  if (has_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->core(), output);
  }

  // optional int32 cancel_oref = 100;
  if (has_cancel_oref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->cancel_oref(), output);
  }

  // optional .fantasybit.FutContract futcontract = 110;
  if (has_futcontract()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, this->futcontract(), output);
  }

  // optional string symbol = 120;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      120, this->symbol(), output);
  }

  // Extension range [500, 536870912)
  _extensions_.SerializeWithCachedSizes(
      500, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.ExchangeOrder.Type type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional string playerid = 40;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->playerid(), target);
  }

  // optional .fantasybit.OrderCore core = 50;
  if (has_core()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->core(), target);
  }

  // optional int32 cancel_oref = 100;
  if (has_cancel_oref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->cancel_oref(), target);
  }

  // optional .fantasybit.FutContract futcontract = 110;
  if (has_futcontract()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->futcontract(), target);
  }

  // optional string symbol = 120;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->symbol(), target);
  }

  // Extension range [500, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      500, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.ExchangeOrder.Type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string playerid = 40;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional .fantasybit.OrderCore core = 50;
    if (has_core()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->core());
    }

    // optional int32 cancel_oref = 100;
    if (has_cancel_oref()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cancel_oref());
    }

    // optional .fantasybit.FutContract futcontract = 110;
    if (has_futcontract()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->futcontract());
    }

    // optional string symbol = 120;
    if (has_symbol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeOrder::MergeFrom(const ExchangeOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_core()) {
      mutable_core()->::fantasybit::OrderCore::MergeFrom(from.core());
    }
    if (from.has_cancel_oref()) {
      set_cancel_oref(from.cancel_oref());
    }
    if (from.has_futcontract()) {
      mutable_futcontract()->::fantasybit::FutContract::MergeFrom(from.futcontract());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeOrder::CopyFrom(const ExchangeOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeOrder::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ExchangeOrder::Swap(ExchangeOrder* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(playerid_, other->playerid_);
    std::swap(core_, other->core_);
    std::swap(cancel_oref_, other->cancel_oref_);
    std::swap(futcontract_, other->futcontract_);
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ExchangeOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeOrder_descriptor_;
  metadata.reflection = ExchangeOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderUnique::kPublicKeyFieldNumber;
const int OrderUnique::kSeasonFieldNumber;
const int OrderUnique::kWeekFieldNumber;
const int OrderUnique::kBuysideFieldNumber;
const int OrderUnique::kPlayeridFieldNumber;
const int OrderUnique::kPriceFieldNumber;
#endif  // !_MSC_VER

OrderUnique::OrderUnique()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderUnique::InitAsDefaultInstance() {
}

OrderUnique::OrderUnique(const OrderUnique& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderUnique::SharedCtor() {
  _cached_size_ = 0;
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  season_ = 0u;
  week_ = 0u;
  buyside_ = false;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderUnique::~OrderUnique() {
  SharedDtor();
}

void OrderUnique::SharedDtor() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void OrderUnique::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderUnique::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderUnique_descriptor_;
}

const OrderUnique& OrderUnique::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

OrderUnique* OrderUnique::default_instance_ = NULL;

OrderUnique* OrderUnique::New() const {
  return new OrderUnique;
}

void OrderUnique::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
    season_ = 0u;
    week_ = 0u;
    buyside_ = false;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderUnique::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string public_key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_season;
        break;
      }

      // optional uint32 season = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_week;
        break;
      }

      // optional uint32 week = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_buyside;
        break;
      }

      // optional bool buyside = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyside:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buyside_)));
          set_has_buyside();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_playerid;
        break;
      }

      // optional string playerid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_price;
        break;
      }

      // optional int32 price = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderUnique::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string public_key = 10;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->public_key(), output);
  }

  // optional uint32 season = 20;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->season(), output);
  }

  // optional uint32 week = 30;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->week(), output);
  }

  // optional bool buyside = 40;
  if (has_buyside()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->buyside(), output);
  }

  // optional string playerid = 50;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->playerid(), output);
  }

  // optional int32 price = 70;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderUnique::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string public_key = 10;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->public_key(), target);
  }

  // optional uint32 season = 20;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->season(), target);
  }

  // optional uint32 week = 30;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->week(), target);
  }

  // optional bool buyside = 40;
  if (has_buyside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->buyside(), target);
  }

  // optional string playerid = 50;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->playerid(), target);
  }

  // optional int32 price = 70;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderUnique::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string public_key = 10;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // optional uint32 season = 20;
    if (has_season()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 30;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional bool buyside = 40;
    if (has_buyside()) {
      total_size += 2 + 1;
    }

    // optional string playerid = 50;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 price = 70;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderUnique::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderUnique* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderUnique*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderUnique::MergeFrom(const OrderUnique& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_buyside()) {
      set_buyside(from.buyside());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderUnique::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderUnique::CopyFrom(const OrderUnique& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUnique::IsInitialized() const {

  return true;
}

void OrderUnique::Swap(OrderUnique* other) {
  if (other != this) {
    std::swap(public_key_, other->public_key_);
    std::swap(season_, other->season_);
    std::swap(week_, other->week_);
    std::swap(buyside_, other->buyside_);
    std::swap(playerid_, other->playerid_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderUnique::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderUnique_descriptor_;
  metadata.reflection = OrderUnique_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderDeets::kOidFieldNumber;
const int OrderDeets::kOrderFieldNumber;
const int OrderDeets::kSizeFieldNumber;
#endif  // !_MSC_VER

OrderDeets::OrderDeets()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderDeets::InitAsDefaultInstance() {
  order_ = const_cast< ::fantasybit::OrderUnique*>(&::fantasybit::OrderUnique::default_instance());
}

OrderDeets::OrderDeets(const OrderDeets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderDeets::SharedCtor() {
  _cached_size_ = 0;
  oid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_ = NULL;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderDeets::~OrderDeets() {
  SharedDtor();
}

void OrderDeets::SharedDtor() {
  if (oid_ != &::google::protobuf::internal::kEmptyString) {
    delete oid_;
  }
  if (this != default_instance_) {
    delete order_;
  }
}

void OrderDeets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderDeets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderDeets_descriptor_;
}

const OrderDeets& OrderDeets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

OrderDeets* OrderDeets::default_instance_ = NULL;

OrderDeets* OrderDeets::New() const {
  return new OrderDeets;
}

void OrderDeets::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_oid()) {
      if (oid_ != &::google::protobuf::internal::kEmptyString) {
        oid_->clear();
      }
    }
    if (has_order()) {
      if (order_ != NULL) order_->::fantasybit::OrderUnique::Clear();
    }
    size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderDeets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes oid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_order;
        break;
      }

      // optional .fantasybit.OrderUnique order = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_size;
        break;
      }

      // optional int32 size = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderDeets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes oid = 10;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->oid(), output);
  }

  // optional .fantasybit.OrderUnique order = 20;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->order(), output);
  }

  // optional int32 size = 30;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderDeets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes oid = 10;
  if (has_oid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->oid(), target);
  }

  // optional .fantasybit.OrderUnique order = 20;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->order(), target);
  }

  // optional int32 size = 30;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderDeets::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes oid = 10;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oid());
    }

    // optional .fantasybit.OrderUnique order = 20;
    if (has_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }

    // optional int32 size = 30;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderDeets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderDeets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderDeets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderDeets::MergeFrom(const OrderDeets& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oid()) {
      set_oid(from.oid());
    }
    if (from.has_order()) {
      mutable_order()->::fantasybit::OrderUnique::MergeFrom(from.order());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderDeets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderDeets::CopyFrom(const OrderDeets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDeets::IsInitialized() const {

  return true;
}

void OrderDeets::Swap(OrderDeets* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(order_, other->order_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderDeets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderDeets_descriptor_;
  metadata.reflection = OrderDeets_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsideUnique::kPlayeridFieldNumber;
const int InsideUnique::kPublicKeyFieldNumber;
const int InsideUnique::kBuysideFieldNumber;
const int InsideUnique::kPriceFieldNumber;
const int InsideUnique::kOidFieldNumber;
const int InsideUnique::kOrderFieldNumber;
const int InsideUnique::kSizeFieldNumber;
#endif  // !_MSC_VER

InsideUnique::InsideUnique()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InsideUnique::InitAsDefaultInstance() {
  order_ = const_cast< ::fantasybit::OrderUnique*>(&::fantasybit::OrderUnique::default_instance());
}

InsideUnique::InsideUnique(const InsideUnique& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InsideUnique::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buyside_ = false;
  price_ = 0;
  oid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_ = NULL;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsideUnique::~InsideUnique() {
  SharedDtor();
}

void InsideUnique::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (oid_ != &::google::protobuf::internal::kEmptyString) {
    delete oid_;
  }
  if (this != default_instance_) {
    delete order_;
  }
}

void InsideUnique::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsideUnique::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsideUnique_descriptor_;
}

const InsideUnique& InsideUnique::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

InsideUnique* InsideUnique::default_instance_ = NULL;

InsideUnique* InsideUnique::New() const {
  return new InsideUnique;
}

void InsideUnique::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
    buyside_ = false;
    price_ = 0;
    if (has_oid()) {
      if (oid_ != &::google::protobuf::internal::kEmptyString) {
        oid_->clear();
      }
    }
    if (has_order()) {
      if (order_ != NULL) order_->::fantasybit::OrderUnique::Clear();
    }
    size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsideUnique::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string public_key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_oid;
        break;
      }

      // optional bytes oid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_order;
        break;
      }

      // optional .fantasybit.OrderUnique order = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_size;
        break;
      }

      // optional int32 size = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_buyside;
        break;
      }

      // optional bool buyside = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyside:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buyside_)));
          set_has_buyside();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_playerid;
        break;
      }

      // optional string playerid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_price;
        break;
      }

      // optional int32 price = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InsideUnique::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string public_key = 10;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->public_key(), output);
  }

  // optional bytes oid = 11;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->oid(), output);
  }

  // optional .fantasybit.OrderUnique order = 20;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->order(), output);
  }

  // optional int32 size = 30;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->size(), output);
  }

  // optional bool buyside = 40;
  if (has_buyside()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->buyside(), output);
  }

  // optional string playerid = 50;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->playerid(), output);
  }

  // optional int32 price = 70;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InsideUnique::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string public_key = 10;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->public_key(), target);
  }

  // optional bytes oid = 11;
  if (has_oid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->oid(), target);
  }

  // optional .fantasybit.OrderUnique order = 20;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->order(), target);
  }

  // optional int32 size = 30;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->size(), target);
  }

  // optional bool buyside = 40;
  if (has_buyside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->buyside(), target);
  }

  // optional string playerid = 50;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->playerid(), target);
  }

  // optional int32 price = 70;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InsideUnique::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 50;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional string public_key = 10;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // optional bool buyside = 40;
    if (has_buyside()) {
      total_size += 2 + 1;
    }

    // optional int32 price = 70;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional bytes oid = 11;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oid());
    }

    // optional .fantasybit.OrderUnique order = 20;
    if (has_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }

    // optional int32 size = 30;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsideUnique::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsideUnique* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsideUnique*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsideUnique::MergeFrom(const InsideUnique& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_buyside()) {
      set_buyside(from.buyside());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
    if (from.has_order()) {
      mutable_order()->::fantasybit::OrderUnique::MergeFrom(from.order());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsideUnique::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsideUnique::CopyFrom(const InsideUnique& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsideUnique::IsInitialized() const {

  return true;
}

void InsideUnique::Swap(InsideUnique* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(public_key_, other->public_key_);
    std::swap(buyside_, other->buyside_);
    std::swap(price_, other->price_);
    std::swap(oid_, other->oid_);
    std::swap(order_, other->order_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsideUnique::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsideUnique_descriptor_;
  metadata.reflection = InsideUnique_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TimeTransition_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeTransition_Type_descriptor_;
}
bool TimeTransition_Type_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TimeTransition_Type TimeTransition::TRADEOPEN;
const TimeTransition_Type TimeTransition::TRADECLOSE;
const TimeTransition_Type TimeTransition::Type_MIN;
const TimeTransition_Type TimeTransition::Type_MAX;
const int TimeTransition::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TimeTransition::kTypeFieldNumber;
const int TimeTransition::kSeasonFieldNumber;
const int TimeTransition::kWeekFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TimeTransition::kTimeTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TimeTransition >, 11, false >
  TimeTransition::time_trans(kTimeTransFieldNumber, ::fantasybit::TimeTransition::default_instance());
TimeTransition::TimeTransition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeTransition::InitAsDefaultInstance() {
}

TimeTransition::TimeTransition(const TimeTransition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeTransition::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  season_ = 0u;
  week_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeTransition::~TimeTransition() {
  SharedDtor();
}

void TimeTransition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeTransition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeTransition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeTransition_descriptor_;
}

const TimeTransition& TimeTransition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

TimeTransition* TimeTransition::default_instance_ = NULL;

TimeTransition* TimeTransition::New() const {
  return new TimeTransition;
}

void TimeTransition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 2;
    season_ = 0u;
    week_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.TimeTransition.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TimeTransition_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::TimeTransition_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_season;
        break;
      }

      // optional uint32 season = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.TimeTransition.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeTransition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.TimeTransition.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeTransition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.TimeTransition.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeTransition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeTransition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeTransition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeTransition::MergeFrom(const TimeTransition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeTransition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeTransition::CopyFrom(const TimeTransition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeTransition::IsInitialized() const {

  return true;
}

void TimeTransition::Swap(TimeTransition* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(season_, other->season_);
    std::swap(week_, other->week_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeTransition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeTransition_descriptor_;
  metadata.reflection = TimeTransition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bitcoin_UTXO::kTxidFieldNumber;
const int Bitcoin_UTXO::kTxOutputNFieldNumber;
const int Bitcoin_UTXO::kInValueFieldNumber;
const int Bitcoin_UTXO::kLockingScriptFieldNumber;
#endif  // !_MSC_VER

Bitcoin_UTXO::Bitcoin_UTXO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bitcoin_UTXO::InitAsDefaultInstance() {
}

Bitcoin_UTXO::Bitcoin_UTXO(const Bitcoin_UTXO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bitcoin_UTXO::SharedCtor() {
  _cached_size_ = 0;
  txid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tx_output_n_ = 0u;
  in_value_ = GOOGLE_ULONGLONG(0);
  locking_script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bitcoin_UTXO::~Bitcoin_UTXO() {
  SharedDtor();
}

void Bitcoin_UTXO::SharedDtor() {
  if (txid_ != &::google::protobuf::internal::kEmptyString) {
    delete txid_;
  }
  if (locking_script_ != &::google::protobuf::internal::kEmptyString) {
    delete locking_script_;
  }
  if (this != default_instance_) {
  }
}

void Bitcoin_UTXO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bitcoin_UTXO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bitcoin_UTXO_descriptor_;
}

const Bitcoin_UTXO& Bitcoin_UTXO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Bitcoin_UTXO* Bitcoin_UTXO::default_instance_ = NULL;

Bitcoin_UTXO* Bitcoin_UTXO::New() const {
  return new Bitcoin_UTXO;
}

void Bitcoin_UTXO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_txid()) {
      if (txid_ != &::google::protobuf::internal::kEmptyString) {
        txid_->clear();
      }
    }
    tx_output_n_ = 0u;
    in_value_ = GOOGLE_ULONGLONG(0);
    if (has_locking_script()) {
      if (locking_script_ != &::google::protobuf::internal::kEmptyString) {
        locking_script_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bitcoin_UTXO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes txid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tx_output_n;
        break;
      }

      // optional uint32 tx_output_n = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tx_output_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_output_n_)));
          set_has_tx_output_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_in_value;
        break;
      }

      // optional uint64 in_value = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &in_value_)));
          set_has_in_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_locking_script;
        break;
      }

      // optional bytes locking_script = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locking_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_locking_script()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bitcoin_UTXO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes txid = 10;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->txid(), output);
  }

  // optional uint32 tx_output_n = 20;
  if (has_tx_output_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tx_output_n(), output);
  }

  // optional uint64 in_value = 30;
  if (has_in_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->in_value(), output);
  }

  // optional bytes locking_script = 40;
  if (has_locking_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->locking_script(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bitcoin_UTXO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes txid = 10;
  if (has_txid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->txid(), target);
  }

  // optional uint32 tx_output_n = 20;
  if (has_tx_output_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tx_output_n(), target);
  }

  // optional uint64 in_value = 30;
  if (has_in_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->in_value(), target);
  }

  // optional bytes locking_script = 40;
  if (has_locking_script()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->locking_script(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bitcoin_UTXO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes txid = 10;
    if (has_txid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txid());
    }

    // optional uint32 tx_output_n = 20;
    if (has_tx_output_n()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_output_n());
    }

    // optional uint64 in_value = 30;
    if (has_in_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->in_value());
    }

    // optional bytes locking_script = 40;
    if (has_locking_script()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->locking_script());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bitcoin_UTXO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bitcoin_UTXO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bitcoin_UTXO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bitcoin_UTXO::MergeFrom(const Bitcoin_UTXO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      set_txid(from.txid());
    }
    if (from.has_tx_output_n()) {
      set_tx_output_n(from.tx_output_n());
    }
    if (from.has_in_value()) {
      set_in_value(from.in_value());
    }
    if (from.has_locking_script()) {
      set_locking_script(from.locking_script());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bitcoin_UTXO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bitcoin_UTXO::CopyFrom(const Bitcoin_UTXO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bitcoin_UTXO::IsInitialized() const {

  return true;
}

void Bitcoin_UTXO::Swap(Bitcoin_UTXO* other) {
  if (other != this) {
    std::swap(txid_, other->txid_);
    std::swap(tx_output_n_, other->tx_output_n_);
    std::swap(in_value_, other->in_value_);
    std::swap(locking_script_, other->locking_script_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bitcoin_UTXO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bitcoin_UTXO_descriptor_;
  metadata.reflection = Bitcoin_UTXO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bitcoin_UTXOS::kTotalValueFieldNumber;
const int Bitcoin_UTXOS::kUtxoFieldNumber;
#endif  // !_MSC_VER

Bitcoin_UTXOS::Bitcoin_UTXOS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bitcoin_UTXOS::InitAsDefaultInstance() {
}

Bitcoin_UTXOS::Bitcoin_UTXOS(const Bitcoin_UTXOS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bitcoin_UTXOS::SharedCtor() {
  _cached_size_ = 0;
  total_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bitcoin_UTXOS::~Bitcoin_UTXOS() {
  SharedDtor();
}

void Bitcoin_UTXOS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bitcoin_UTXOS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bitcoin_UTXOS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bitcoin_UTXOS_descriptor_;
}

const Bitcoin_UTXOS& Bitcoin_UTXOS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Bitcoin_UTXOS* Bitcoin_UTXOS::default_instance_ = NULL;

Bitcoin_UTXOS* Bitcoin_UTXOS::New() const {
  return new Bitcoin_UTXOS;
}

void Bitcoin_UTXOS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_value_ = GOOGLE_ULONGLONG(0);
  }
  utxo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bitcoin_UTXOS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 total_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_value_)));
          set_has_total_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_utxo;
        break;
      }

      // repeated .fantasybit.Bitcoin_UTXO utxo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_utxo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_utxo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_utxo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bitcoin_UTXOS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 total_value = 10;
  if (has_total_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->total_value(), output);
  }

  // repeated .fantasybit.Bitcoin_UTXO utxo = 20;
  for (int i = 0; i < this->utxo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->utxo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bitcoin_UTXOS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 total_value = 10;
  if (has_total_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->total_value(), target);
  }

  // repeated .fantasybit.Bitcoin_UTXO utxo = 20;
  for (int i = 0; i < this->utxo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->utxo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bitcoin_UTXOS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 total_value = 10;
    if (has_total_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_value());
    }

  }
  // repeated .fantasybit.Bitcoin_UTXO utxo = 20;
  total_size += 2 * this->utxo_size();
  for (int i = 0; i < this->utxo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->utxo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bitcoin_UTXOS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bitcoin_UTXOS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bitcoin_UTXOS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bitcoin_UTXOS::MergeFrom(const Bitcoin_UTXOS& from) {
  GOOGLE_CHECK_NE(&from, this);
  utxo_.MergeFrom(from.utxo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_value()) {
      set_total_value(from.total_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bitcoin_UTXOS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bitcoin_UTXOS::CopyFrom(const Bitcoin_UTXOS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bitcoin_UTXOS::IsInitialized() const {

  return true;
}

void Bitcoin_UTXOS::Swap(Bitcoin_UTXOS* other) {
  if (other != this) {
    std::swap(total_value_, other->total_value_);
    utxo_.Swap(&other->utxo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bitcoin_UTXOS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bitcoin_UTXOS_descriptor_;
  metadata.reflection = Bitcoin_UTXOS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwapAsk::kSatoshiMinFieldNumber;
const int SwapAsk::kSatoshiMaxFieldNumber;
const int SwapAsk::kRateFieldNumber;
const int SwapAsk::kFbQtyFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int SwapAsk::kSwapaskTranFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::SwapAsk >, 11, false >
  SwapAsk::swapask_tran(kSwapaskTranFieldNumber, ::fantasybit::SwapAsk::default_instance());
SwapAsk::SwapAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapAsk::InitAsDefaultInstance() {
}

SwapAsk::SwapAsk(const SwapAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapAsk::SharedCtor() {
  _cached_size_ = 0;
  satoshi_min_ = GOOGLE_ULONGLONG(0);
  satoshi_max_ = GOOGLE_ULONGLONG(0);
  rate_ = GOOGLE_ULONGLONG(0);
  fb_qty_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapAsk::~SwapAsk() {
  SharedDtor();
}

void SwapAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SwapAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapAsk_descriptor_;
}

const SwapAsk& SwapAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

SwapAsk* SwapAsk::default_instance_ = NULL;

SwapAsk* SwapAsk::New() const {
  return new SwapAsk;
}

void SwapAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    satoshi_min_ = GOOGLE_ULONGLONG(0);
    satoshi_max_ = GOOGLE_ULONGLONG(0);
    rate_ = GOOGLE_ULONGLONG(0);
    fb_qty_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 satoshi_min = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &satoshi_min_)));
          set_has_satoshi_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_satoshi_max;
        break;
      }

      // optional uint64 satoshi_max = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_satoshi_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &satoshi_max_)));
          set_has_satoshi_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_rate;
        break;
      }

      // optional uint64 rate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_fb_qty;
        break;
      }

      // optional uint64 fb_qty = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fb_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fb_qty_)));
          set_has_fb_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 satoshi_min = 10;
  if (has_satoshi_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->satoshi_min(), output);
  }

  // optional uint64 satoshi_max = 11;
  if (has_satoshi_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->satoshi_max(), output);
  }

  // optional uint64 rate = 20;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->rate(), output);
  }

  // optional uint64 fb_qty = 30;
  if (has_fb_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->fb_qty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 satoshi_min = 10;
  if (has_satoshi_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->satoshi_min(), target);
  }

  // optional uint64 satoshi_max = 11;
  if (has_satoshi_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->satoshi_max(), target);
  }

  // optional uint64 rate = 20;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->rate(), target);
  }

  // optional uint64 fb_qty = 30;
  if (has_fb_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->fb_qty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 satoshi_min = 10;
    if (has_satoshi_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->satoshi_min());
    }

    // optional uint64 satoshi_max = 11;
    if (has_satoshi_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->satoshi_max());
    }

    // optional uint64 rate = 20;
    if (has_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rate());
    }

    // optional uint64 fb_qty = 30;
    if (has_fb_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fb_qty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapAsk::MergeFrom(const SwapAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_satoshi_min()) {
      set_satoshi_min(from.satoshi_min());
    }
    if (from.has_satoshi_max()) {
      set_satoshi_max(from.satoshi_max());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_fb_qty()) {
      set_fb_qty(from.fb_qty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapAsk::CopyFrom(const SwapAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapAsk::IsInitialized() const {

  return true;
}

void SwapAsk::Swap(SwapAsk* other) {
  if (other != this) {
    std::swap(satoshi_min_, other->satoshi_min_);
    std::swap(satoshi_max_, other->satoshi_max_);
    std::swap(rate_, other->rate_);
    std::swap(fb_qty_, other->fb_qty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapAsk_descriptor_;
  metadata.reflection = SwapAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwapBid::kSatoshiMinFieldNumber;
const int SwapBid::kSatoshiMaxFieldNumber;
const int SwapBid::kRateFieldNumber;
const int SwapBid::kUtxosFieldNumber;
const int SwapBid::kChangeAddrFieldNumber;
const int SwapBid::kThisOfferFieldNumber;
const int SwapBid::kCounterofferFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int SwapBid::kSwapbidTranFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::SwapBid >, 11, false >
  SwapBid::swapbid_tran(kSwapbidTranFieldNumber, ::fantasybit::SwapBid::default_instance());
SwapBid::SwapBid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapBid::InitAsDefaultInstance() {
  utxos_ = const_cast< ::fantasybit::Bitcoin_UTXOS*>(&::fantasybit::Bitcoin_UTXOS::default_instance());
  this_offer_ = const_cast< ::fantasybit::SwapAsk*>(&::fantasybit::SwapAsk::default_instance());
}

SwapBid::SwapBid(const SwapBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapBid::SharedCtor() {
  _cached_size_ = 0;
  satoshi_min_ = GOOGLE_ULONGLONG(0);
  satoshi_max_ = GOOGLE_ULONGLONG(0);
  rate_ = GOOGLE_ULONGLONG(0);
  utxos_ = NULL;
  change_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  this_offer_ = NULL;
  counteroffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapBid::~SwapBid() {
  SharedDtor();
}

void SwapBid::SharedDtor() {
  if (change_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete change_addr_;
  }
  if (counteroffer_ != &::google::protobuf::internal::kEmptyString) {
    delete counteroffer_;
  }
  if (this != default_instance_) {
    delete utxos_;
    delete this_offer_;
  }
}

void SwapBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapBid_descriptor_;
}

const SwapBid& SwapBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

SwapBid* SwapBid::default_instance_ = NULL;

SwapBid* SwapBid::New() const {
  return new SwapBid;
}

void SwapBid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    satoshi_min_ = GOOGLE_ULONGLONG(0);
    satoshi_max_ = GOOGLE_ULONGLONG(0);
    rate_ = GOOGLE_ULONGLONG(0);
    if (has_utxos()) {
      if (utxos_ != NULL) utxos_->::fantasybit::Bitcoin_UTXOS::Clear();
    }
    if (has_change_addr()) {
      if (change_addr_ != &::google::protobuf::internal::kEmptyString) {
        change_addr_->clear();
      }
    }
    if (has_this_offer()) {
      if (this_offer_ != NULL) this_offer_->::fantasybit::SwapAsk::Clear();
    }
    if (has_counteroffer()) {
      if (counteroffer_ != &::google::protobuf::internal::kEmptyString) {
        counteroffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 satoshi_min = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &satoshi_min_)));
          set_has_satoshi_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_satoshi_max;
        break;
      }

      // optional uint64 satoshi_max = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_satoshi_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &satoshi_max_)));
          set_has_satoshi_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_rate;
        break;
      }

      // optional uint64 rate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_utxos;
        break;
      }

      // optional .fantasybit.Bitcoin_UTXOS utxos = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_utxos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_utxos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_change_addr;
        break;
      }

      // optional bytes change_addr = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_change_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_this_offer;
        break;
      }

      // optional .fantasybit.SwapAsk this_offer = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_this_offer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_this_offer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_counteroffer;
        break;
      }

      // optional string counteroffer = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counteroffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counteroffer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->counteroffer().data(), this->counteroffer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 satoshi_min = 10;
  if (has_satoshi_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->satoshi_min(), output);
  }

  // optional uint64 satoshi_max = 11;
  if (has_satoshi_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->satoshi_max(), output);
  }

  // optional uint64 rate = 20;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->rate(), output);
  }

  // optional .fantasybit.Bitcoin_UTXOS utxos = 30;
  if (has_utxos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->utxos(), output);
  }

  // optional bytes change_addr = 40;
  if (has_change_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->change_addr(), output);
  }

  // optional .fantasybit.SwapAsk this_offer = 50;
  if (has_this_offer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->this_offer(), output);
  }

  // optional string counteroffer = 60;
  if (has_counteroffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counteroffer().data(), this->counteroffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->counteroffer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 satoshi_min = 10;
  if (has_satoshi_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->satoshi_min(), target);
  }

  // optional uint64 satoshi_max = 11;
  if (has_satoshi_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->satoshi_max(), target);
  }

  // optional uint64 rate = 20;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->rate(), target);
  }

  // optional .fantasybit.Bitcoin_UTXOS utxos = 30;
  if (has_utxos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->utxos(), target);
  }

  // optional bytes change_addr = 40;
  if (has_change_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->change_addr(), target);
  }

  // optional .fantasybit.SwapAsk this_offer = 50;
  if (has_this_offer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->this_offer(), target);
  }

  // optional string counteroffer = 60;
  if (has_counteroffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counteroffer().data(), this->counteroffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->counteroffer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 satoshi_min = 10;
    if (has_satoshi_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->satoshi_min());
    }

    // optional uint64 satoshi_max = 11;
    if (has_satoshi_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->satoshi_max());
    }

    // optional uint64 rate = 20;
    if (has_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rate());
    }

    // optional .fantasybit.Bitcoin_UTXOS utxos = 30;
    if (has_utxos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->utxos());
    }

    // optional bytes change_addr = 40;
    if (has_change_addr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->change_addr());
    }

    // optional .fantasybit.SwapAsk this_offer = 50;
    if (has_this_offer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->this_offer());
    }

    // optional string counteroffer = 60;
    if (has_counteroffer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->counteroffer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapBid::MergeFrom(const SwapBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_satoshi_min()) {
      set_satoshi_min(from.satoshi_min());
    }
    if (from.has_satoshi_max()) {
      set_satoshi_max(from.satoshi_max());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_utxos()) {
      mutable_utxos()->::fantasybit::Bitcoin_UTXOS::MergeFrom(from.utxos());
    }
    if (from.has_change_addr()) {
      set_change_addr(from.change_addr());
    }
    if (from.has_this_offer()) {
      mutable_this_offer()->::fantasybit::SwapAsk::MergeFrom(from.this_offer());
    }
    if (from.has_counteroffer()) {
      set_counteroffer(from.counteroffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapBid::CopyFrom(const SwapBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapBid::IsInitialized() const {

  return true;
}

void SwapBid::Swap(SwapBid* other) {
  if (other != this) {
    std::swap(satoshi_min_, other->satoshi_min_);
    std::swap(satoshi_max_, other->satoshi_max_);
    std::swap(rate_, other->rate_);
    std::swap(utxos_, other->utxos_);
    std::swap(change_addr_, other->change_addr_);
    std::swap(this_offer_, other->this_offer_);
    std::swap(counteroffer_, other->counteroffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapBid_descriptor_;
  metadata.reflection = SwapBid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwapFill::kSwapbidFieldNumber;
const int SwapFill::kHashToSignFieldNumber;
const int SwapFill::kSatoshiFeeFieldNumber;
const int SwapFill::kFbQtyFieldNumber;
const int SwapFill::kCounterpartyFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int SwapFill::kSwapfilTranFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::SwapFill >, 11, false >
  SwapFill::swapfil_tran(kSwapfilTranFieldNumber, ::fantasybit::SwapFill::default_instance());
SwapFill::SwapFill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapFill::InitAsDefaultInstance() {
  swapbid_ = const_cast< ::fantasybit::SwapBid*>(&::fantasybit::SwapBid::default_instance());
}

SwapFill::SwapFill(const SwapFill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapFill::SharedCtor() {
  _cached_size_ = 0;
  swapbid_ = NULL;
  hash_to_sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  satoshi_fee_ = GOOGLE_ULONGLONG(0);
  fb_qty_ = GOOGLE_ULONGLONG(0);
  counterparty_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapFill::~SwapFill() {
  SharedDtor();
}

void SwapFill::SharedDtor() {
  if (hash_to_sign_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_to_sign_;
  }
  if (counterparty_ != &::google::protobuf::internal::kEmptyString) {
    delete counterparty_;
  }
  if (this != default_instance_) {
    delete swapbid_;
  }
}

void SwapFill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapFill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapFill_descriptor_;
}

const SwapFill& SwapFill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

SwapFill* SwapFill::default_instance_ = NULL;

SwapFill* SwapFill::New() const {
  return new SwapFill;
}

void SwapFill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_swapbid()) {
      if (swapbid_ != NULL) swapbid_->::fantasybit::SwapBid::Clear();
    }
    if (has_hash_to_sign()) {
      if (hash_to_sign_ != &::google::protobuf::internal::kEmptyString) {
        hash_to_sign_->clear();
      }
    }
    satoshi_fee_ = GOOGLE_ULONGLONG(0);
    fb_qty_ = GOOGLE_ULONGLONG(0);
    if (has_counterparty()) {
      if (counterparty_ != &::google::protobuf::internal::kEmptyString) {
        counterparty_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapFill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.SwapBid swapbid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_swapbid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_hash_to_sign;
        break;
      }

      // optional bytes hash_to_sign = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash_to_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash_to_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_satoshi_fee;
        break;
      }

      // optional uint64 satoshi_fee = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_satoshi_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &satoshi_fee_)));
          set_has_satoshi_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_fb_qty;
        break;
      }

      // optional uint64 fb_qty = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fb_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fb_qty_)));
          set_has_fb_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_counterparty;
        break;
      }

      // optional string counterparty = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counterparty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counterparty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->counterparty().data(), this->counterparty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapFill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.SwapBid swapbid = 10;
  if (has_swapbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->swapbid(), output);
  }

  // optional bytes hash_to_sign = 20;
  if (has_hash_to_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->hash_to_sign(), output);
  }

  // optional uint64 satoshi_fee = 30;
  if (has_satoshi_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->satoshi_fee(), output);
  }

  // optional uint64 fb_qty = 40;
  if (has_fb_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->fb_qty(), output);
  }

  // optional string counterparty = 50;
  if (has_counterparty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counterparty().data(), this->counterparty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->counterparty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapFill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.SwapBid swapbid = 10;
  if (has_swapbid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->swapbid(), target);
  }

  // optional bytes hash_to_sign = 20;
  if (has_hash_to_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->hash_to_sign(), target);
  }

  // optional uint64 satoshi_fee = 30;
  if (has_satoshi_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->satoshi_fee(), target);
  }

  // optional uint64 fb_qty = 40;
  if (has_fb_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->fb_qty(), target);
  }

  // optional string counterparty = 50;
  if (has_counterparty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counterparty().data(), this->counterparty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->counterparty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapFill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.SwapBid swapbid = 10;
    if (has_swapbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->swapbid());
    }

    // optional bytes hash_to_sign = 20;
    if (has_hash_to_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash_to_sign());
    }

    // optional uint64 satoshi_fee = 30;
    if (has_satoshi_fee()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->satoshi_fee());
    }

    // optional uint64 fb_qty = 40;
    if (has_fb_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fb_qty());
    }

    // optional string counterparty = 50;
    if (has_counterparty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->counterparty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapFill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapFill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapFill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapFill::MergeFrom(const SwapFill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_swapbid()) {
      mutable_swapbid()->::fantasybit::SwapBid::MergeFrom(from.swapbid());
    }
    if (from.has_hash_to_sign()) {
      set_hash_to_sign(from.hash_to_sign());
    }
    if (from.has_satoshi_fee()) {
      set_satoshi_fee(from.satoshi_fee());
    }
    if (from.has_fb_qty()) {
      set_fb_qty(from.fb_qty());
    }
    if (from.has_counterparty()) {
      set_counterparty(from.counterparty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapFill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapFill::CopyFrom(const SwapFill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapFill::IsInitialized() const {

  return true;
}

void SwapFill::Swap(SwapFill* other) {
  if (other != this) {
    std::swap(swapbid_, other->swapbid_);
    std::swap(hash_to_sign_, other->hash_to_sign_);
    std::swap(satoshi_fee_, other->satoshi_fee_);
    std::swap(fb_qty_, other->fb_qty_);
    std::swap(counterparty_, other->counterparty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapFill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapFill_descriptor_;
  metadata.reflection = SwapFill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwapSent::kSwapfillFieldNumber;
const int SwapSent::kSigFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int SwapSent::kSwapsentTranFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::SwapSent >, 11, false >
  SwapSent::swapsent_tran(kSwapsentTranFieldNumber, ::fantasybit::SwapSent::default_instance());
SwapSent::SwapSent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapSent::InitAsDefaultInstance() {
  swapfill_ = const_cast< ::fantasybit::SwapFill*>(&::fantasybit::SwapFill::default_instance());
}

SwapSent::SwapSent(const SwapSent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapSent::SharedCtor() {
  _cached_size_ = 0;
  swapfill_ = NULL;
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapSent::~SwapSent() {
  SharedDtor();
}

void SwapSent::SharedDtor() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (this != default_instance_) {
    delete swapfill_;
  }
}

void SwapSent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapSent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapSent_descriptor_;
}

const SwapSent& SwapSent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

SwapSent* SwapSent::default_instance_ = NULL;

SwapSent* SwapSent::New() const {
  return new SwapSent;
}

void SwapSent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_swapfill()) {
      if (swapfill_ != NULL) swapfill_->::fantasybit::SwapFill::Clear();
    }
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapSent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.SwapFill swapfill = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_swapfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_sig;
        break;
      }

      // optional bytes sig = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapSent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.SwapFill swapfill = 10;
  if (has_swapfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->swapfill(), output);
  }

  // optional bytes sig = 20;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->sig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapSent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.SwapFill swapfill = 10;
  if (has_swapfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->swapfill(), target);
  }

  // optional bytes sig = 20;
  if (has_sig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->sig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapSent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.SwapFill swapfill = 10;
    if (has_swapfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->swapfill());
    }

    // optional bytes sig = 20;
    if (has_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapSent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapSent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapSent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapSent::MergeFrom(const SwapSent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_swapfill()) {
      mutable_swapfill()->::fantasybit::SwapFill::MergeFrom(from.swapfill());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapSent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapSent::CopyFrom(const SwapSent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapSent::IsInitialized() const {

  return true;
}

void SwapSent::Swap(SwapSent* other) {
  if (other != this) {
    std::swap(swapfill_, other->swapfill_);
    std::swap(sig_, other->sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapSent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapSent_descriptor_;
  metadata.reflection = SwapSent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProofOfDoubleSpend::kSwapsentFieldNumber;
const int ProofOfDoubleSpend::kUtxoFieldNumber;
const int ProofOfDoubleSpend::kPreFieldNumber;
const int ProofOfDoubleSpend::kPostFieldNumber;
const int ProofOfDoubleSpend::kSigFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ProofOfDoubleSpend::kPodpTranFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ProofOfDoubleSpend >, 11, false >
  ProofOfDoubleSpend::podp_tran(kPodpTranFieldNumber, ::fantasybit::ProofOfDoubleSpend::default_instance());
ProofOfDoubleSpend::ProofOfDoubleSpend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProofOfDoubleSpend::InitAsDefaultInstance() {
  swapsent_ = const_cast< ::fantasybit::SwapSent*>(&::fantasybit::SwapSent::default_instance());
  utxo_ = const_cast< ::fantasybit::Bitcoin_UTXO*>(&::fantasybit::Bitcoin_UTXO::default_instance());
}

ProofOfDoubleSpend::ProofOfDoubleSpend(const ProofOfDoubleSpend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProofOfDoubleSpend::SharedCtor() {
  _cached_size_ = 0;
  swapsent_ = NULL;
  utxo_ = NULL;
  pre_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProofOfDoubleSpend::~ProofOfDoubleSpend() {
  SharedDtor();
}

void ProofOfDoubleSpend::SharedDtor() {
  if (pre_ != &::google::protobuf::internal::kEmptyString) {
    delete pre_;
  }
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    delete post_;
  }
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (this != default_instance_) {
    delete swapsent_;
    delete utxo_;
  }
}

void ProofOfDoubleSpend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProofOfDoubleSpend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProofOfDoubleSpend_descriptor_;
}

const ProofOfDoubleSpend& ProofOfDoubleSpend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

ProofOfDoubleSpend* ProofOfDoubleSpend::default_instance_ = NULL;

ProofOfDoubleSpend* ProofOfDoubleSpend::New() const {
  return new ProofOfDoubleSpend;
}

void ProofOfDoubleSpend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_swapsent()) {
      if (swapsent_ != NULL) swapsent_->::fantasybit::SwapSent::Clear();
    }
    if (has_utxo()) {
      if (utxo_ != NULL) utxo_->::fantasybit::Bitcoin_UTXO::Clear();
    }
    if (has_pre()) {
      if (pre_ != &::google::protobuf::internal::kEmptyString) {
        pre_->clear();
      }
    }
    if (has_post()) {
      if (post_ != &::google::protobuf::internal::kEmptyString) {
        post_->clear();
      }
    }
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProofOfDoubleSpend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.SwapSent swapsent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_swapsent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_utxo;
        break;
      }

      // optional .fantasybit.Bitcoin_UTXO utxo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_utxo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_utxo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_pre;
        break;
      }

      // optional bytes pre = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pre()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_post;
        break;
      }

      // optional bytes post = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_post()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_sig;
        break;
      }

      // optional bytes sig = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProofOfDoubleSpend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.SwapSent swapsent = 10;
  if (has_swapsent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->swapsent(), output);
  }

  // optional .fantasybit.Bitcoin_UTXO utxo = 20;
  if (has_utxo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->utxo(), output);
  }

  // optional bytes pre = 30;
  if (has_pre()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->pre(), output);
  }

  // optional bytes post = 40;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->post(), output);
  }

  // optional bytes sig = 50;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->sig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProofOfDoubleSpend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.SwapSent swapsent = 10;
  if (has_swapsent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->swapsent(), target);
  }

  // optional .fantasybit.Bitcoin_UTXO utxo = 20;
  if (has_utxo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->utxo(), target);
  }

  // optional bytes pre = 30;
  if (has_pre()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->pre(), target);
  }

  // optional bytes post = 40;
  if (has_post()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->post(), target);
  }

  // optional bytes sig = 50;
  if (has_sig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->sig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProofOfDoubleSpend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.SwapSent swapsent = 10;
    if (has_swapsent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->swapsent());
    }

    // optional .fantasybit.Bitcoin_UTXO utxo = 20;
    if (has_utxo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->utxo());
    }

    // optional bytes pre = 30;
    if (has_pre()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pre());
    }

    // optional bytes post = 40;
    if (has_post()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->post());
    }

    // optional bytes sig = 50;
    if (has_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProofOfDoubleSpend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProofOfDoubleSpend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProofOfDoubleSpend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProofOfDoubleSpend::MergeFrom(const ProofOfDoubleSpend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_swapsent()) {
      mutable_swapsent()->::fantasybit::SwapSent::MergeFrom(from.swapsent());
    }
    if (from.has_utxo()) {
      mutable_utxo()->::fantasybit::Bitcoin_UTXO::MergeFrom(from.utxo());
    }
    if (from.has_pre()) {
      set_pre(from.pre());
    }
    if (from.has_post()) {
      set_post(from.post());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProofOfDoubleSpend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProofOfDoubleSpend::CopyFrom(const ProofOfDoubleSpend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProofOfDoubleSpend::IsInitialized() const {

  return true;
}

void ProofOfDoubleSpend::Swap(ProofOfDoubleSpend* other) {
  if (other != this) {
    std::swap(swapsent_, other->swapsent_);
    std::swap(utxo_, other->utxo_);
    std::swap(pre_, other->pre_);
    std::swap(post_, other->post_);
    std::swap(sig_, other->sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProofOfDoubleSpend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProofOfDoubleSpend_descriptor_;
  metadata.reflection = ProofOfDoubleSpend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwapSentAck::kSwapsentFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int SwapSentAck::kSwapsentackTranFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::SwapSentAck >, 11, false >
  SwapSentAck::swapsentack_tran(kSwapsentackTranFieldNumber, ::fantasybit::SwapSentAck::default_instance());
SwapSentAck::SwapSentAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapSentAck::InitAsDefaultInstance() {
  swapsent_ = const_cast< ::fantasybit::SwapSent*>(&::fantasybit::SwapSent::default_instance());
}

SwapSentAck::SwapSentAck(const SwapSentAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapSentAck::SharedCtor() {
  _cached_size_ = 0;
  swapsent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapSentAck::~SwapSentAck() {
  SharedDtor();
}

void SwapSentAck::SharedDtor() {
  if (this != default_instance_) {
    delete swapsent_;
  }
}

void SwapSentAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapSentAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapSentAck_descriptor_;
}

const SwapSentAck& SwapSentAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

SwapSentAck* SwapSentAck::default_instance_ = NULL;

SwapSentAck* SwapSentAck::New() const {
  return new SwapSentAck;
}

void SwapSentAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_swapsent()) {
      if (swapsent_ != NULL) swapsent_->::fantasybit::SwapSent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapSentAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.SwapSent swapsent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_swapsent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapSentAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.SwapSent swapsent = 10;
  if (has_swapsent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->swapsent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapSentAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.SwapSent swapsent = 10;
  if (has_swapsent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->swapsent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapSentAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.SwapSent swapsent = 10;
    if (has_swapsent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->swapsent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapSentAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapSentAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapSentAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapSentAck::MergeFrom(const SwapSentAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_swapsent()) {
      mutable_swapsent()->::fantasybit::SwapSent::MergeFrom(from.swapsent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapSentAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapSentAck::CopyFrom(const SwapSentAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapSentAck::IsInitialized() const {

  return true;
}

void SwapSentAck::Swap(SwapSentAck* other) {
  if (other != this) {
    std::swap(swapsent_, other->swapsent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapSentAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapSentAck_descriptor_;
  metadata.reflection = SwapSentAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
