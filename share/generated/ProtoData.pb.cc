// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#include "ProtoData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bitcoin_UTXO_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Bitcoin_UTXOS_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockHeader_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Data_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataTransition_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExchangeOrder_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyPlayer_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FutContract_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameData_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameResult_StaticData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StatusData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStatus_StatusData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StatusData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GlobalState_StatusData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MasterProof_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageData_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyFantasyName_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NameProof_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NameTrans_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderCore_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderUnique_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerBase_StaticData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlayerData_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerPoints_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StatusData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerStatus_StatusData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjectionTrans_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProjectionTransBlock_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProofOfDoubleSpend_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResultData_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScheduleData_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignedBlockHeader_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignedTransaction_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StampedTrans_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapAsk_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SwapBid_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapFill_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapSent_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapSentAck_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamState_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeTransition_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferTrans_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TweetProof_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WeeklySchedule_StaticData_2eproto;
namespace fantasybit {
class MyFantasyNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyFantasyName> _instance;
} _MyFantasyName_default_instance_;
class FantasyPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FantasyPlayer> _instance;
} _FantasyPlayer_default_instance_;
class SecretDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Secret> _instance;
} _Secret_default_instance_;
class Secret2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Secret2> _instance;
} _Secret2_default_instance_;
class Secret3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Secret3> _instance;
} _Secret3_default_instance_;
class OutDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutData> _instance;
} _OutData_default_instance_;
class InDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InData> _instance;
} _InData_default_instance_;
class NameProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NameProof> _instance;
} _NameProof_default_instance_;
class TweetProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TweetProof> _instance;
} _TweetProof_default_instance_;
class MasterProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MasterProof> _instance;
} _MasterProof_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class NameTransDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NameTrans> _instance;
} _NameTrans_default_instance_;
class TransferTransDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferTrans> _instance;
} _TransferTrans_default_instance_;
class SignedTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignedTransaction> _instance;
} _SignedTransaction_default_instance_;
class BlockHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockHeader> _instance;
} _BlockHeader_default_instance_;
class SignedBlockHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignedBlockHeader> _instance;
} _SignedBlockHeader_default_instance_;
class BlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
class NodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeRequest> _instance;
} _NodeRequest_default_instance_;
class NodeReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeReply> _instance;
} _NodeReply_default_instance_;
class FantasyPlayerPointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FantasyPlayerPoints> _instance;
} _FantasyPlayerPoints_default_instance_;
class ProjectionTransDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectionTrans> _instance;
} _ProjectionTrans_default_instance_;
class PlayerPointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerPoints> _instance;
} _PlayerPoints_default_instance_;
class ProjectionTransBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectionTransBlock> _instance;
} _ProjectionTransBlock_default_instance_;
class DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Data> _instance;
} _Data_default_instance_;
class PlayerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerData> _instance;
} _PlayerData_default_instance_;
class GameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameData> _instance;
} _GameData_default_instance_;
class ResultDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultData> _instance;
} _ResultData_default_instance_;
class ScheduleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScheduleData> _instance;
} _ScheduleData_default_instance_;
class DataTransitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataTransition> _instance;
} _DataTransition_default_instance_;
class TeamStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamState> _instance;
} _TeamState_default_instance_;
class DeltaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeltaData> _instance;
} _DeltaData_default_instance_;
class MessageDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageData> _instance;
} _MessageData_default_instance_;
class StampedTransDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StampedTrans> _instance;
} _StampedTrans_default_instance_;
class ExchangeOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangeOrder> _instance;
} _ExchangeOrder_default_instance_;
class OrderUniqueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderUnique> _instance;
} _OrderUnique_default_instance_;
class OrderDeetsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderDeets> _instance;
} _OrderDeets_default_instance_;
class InsideUniqueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsideUnique> _instance;
} _InsideUnique_default_instance_;
class TimeTransitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeTransition> _instance;
} _TimeTransition_default_instance_;
class Bitcoin_UTXODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bitcoin_UTXO> _instance;
} _Bitcoin_UTXO_default_instance_;
class Bitcoin_UTXOSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bitcoin_UTXOS> _instance;
} _Bitcoin_UTXOS_default_instance_;
class SwapAskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapAsk> _instance;
} _SwapAsk_default_instance_;
class SwapBidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapBid> _instance;
} _SwapBid_default_instance_;
class SwapFillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapFill> _instance;
} _SwapFill_default_instance_;
class SwapSentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapSent> _instance;
} _SwapSent_default_instance_;
class ProofOfDoubleSpendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProofOfDoubleSpend> _instance;
} _ProofOfDoubleSpend_default_instance_;
class SwapSentAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapSentAck> _instance;
} _SwapSentAck_default_instance_;
}  // namespace fantasybit
static void InitDefaultsscc_info_Bitcoin_UTXO_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Bitcoin_UTXO_default_instance_;
    new (ptr) ::fantasybit::Bitcoin_UTXO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Bitcoin_UTXO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bitcoin_UTXO_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Bitcoin_UTXO_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_Bitcoin_UTXOS_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Bitcoin_UTXOS_default_instance_;
    new (ptr) ::fantasybit::Bitcoin_UTXOS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Bitcoin_UTXOS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Bitcoin_UTXOS_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Bitcoin_UTXOS_ProtoData_2eproto}, {
      &scc_info_Bitcoin_UTXO_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_Block_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Block_default_instance_;
    new (ptr) ::fantasybit::Block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Block::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Block_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Block_ProtoData_2eproto}, {
      &scc_info_SignedBlockHeader_ProtoData_2eproto.base,
      &scc_info_SignedTransaction_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_BlockHeader_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_BlockHeader_default_instance_;
    new (ptr) ::fantasybit::BlockHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::BlockHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockHeader_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockHeader_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_Data_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Data_default_instance_;
    new (ptr) ::fantasybit::Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Data_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Data_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_DataTransition_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_DataTransition_default_instance_;
    new (ptr) ::fantasybit::DataTransition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::DataTransition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataTransition_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DataTransition_ProtoData_2eproto}, {
      &scc_info_GameData_ProtoData_2eproto.base,
      &scc_info_Data_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_DeltaData_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_DeltaData_default_instance_;
    new (ptr) ::fantasybit::DeltaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::DeltaData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DeltaData_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_DeltaData_ProtoData_2eproto}, {
      &scc_info_MyFantasyName_ProtoData_2eproto.base,
      &scc_info_GlobalState_StatusData_2eproto.base,
      &scc_info_TeamState_ProtoData_2eproto.base,
      &scc_info_Data_ProtoData_2eproto.base,
      &scc_info_FantasyPlayer_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_ExchangeOrder_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ExchangeOrder_default_instance_;
    new (ptr) ::fantasybit::ExchangeOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ExchangeOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExchangeOrder_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ExchangeOrder_ProtoData_2eproto}, {
      &scc_info_OrderCore_ExData_2eproto.base,
      &scc_info_FutContract_ExData_2eproto.base,}};

static void InitDefaultsscc_info_FantasyPlayer_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_FantasyPlayer_default_instance_;
    new (ptr) ::fantasybit::FantasyPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyPlayer_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FantasyPlayer_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_FantasyPlayerPoints_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_FantasyPlayerPoints_default_instance_;
    new (ptr) ::fantasybit::FantasyPlayerPoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyPlayerPoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyPlayerPoints_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FantasyPlayerPoints_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_GameData_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GameData_default_instance_;
    new (ptr) ::fantasybit::GameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameData_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameData_ProtoData_2eproto}, {
      &scc_info_GameStatus_StatusData_2eproto.base,}};

static void InitDefaultsscc_info_InData_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_InData_default_instance_;
    new (ptr) ::fantasybit::InData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::InData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InData_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InData_ProtoData_2eproto}, {
      &scc_info_DataTransition_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_InsideUnique_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_InsideUnique_default_instance_;
    new (ptr) ::fantasybit::InsideUnique();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::InsideUnique::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsideUnique_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsideUnique_ProtoData_2eproto}, {
      &scc_info_OrderUnique_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_MasterProof_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_MasterProof_default_instance_;
    new (ptr) ::fantasybit::MasterProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MasterProof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MasterProof_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MasterProof_ProtoData_2eproto}, {
      &scc_info_SignedTransaction_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_MessageData_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_MessageData_default_instance_;
    new (ptr) ::fantasybit::MessageData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MessageData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageData_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageData_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_MyFantasyName_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_MyFantasyName_default_instance_;
    new (ptr) ::fantasybit::MyFantasyName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MyFantasyName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyFantasyName_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MyFantasyName_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_NameProof_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_NameProof_default_instance_;
    new (ptr) ::fantasybit::NameProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::NameProof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NameProof_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NameProof_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_NameTrans_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_NameTrans_default_instance_;
    new (ptr) ::fantasybit::NameTrans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::NameTrans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NameTrans_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NameTrans_ProtoData_2eproto}, {
      &scc_info_NameProof_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_NodeReply_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_NodeReply_default_instance_;
    new (ptr) ::fantasybit::NodeReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::NodeReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeReply_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeReply_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_NodeRequest_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_NodeRequest_default_instance_;
    new (ptr) ::fantasybit::NodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::NodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeRequest_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeRequest_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_OrderDeets_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_OrderDeets_default_instance_;
    new (ptr) ::fantasybit::OrderDeets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::OrderDeets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderDeets_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderDeets_ProtoData_2eproto}, {
      &scc_info_OrderUnique_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_OrderUnique_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_OrderUnique_default_instance_;
    new (ptr) ::fantasybit::OrderUnique();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::OrderUnique::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderUnique_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderUnique_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_OutData_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_OutData_default_instance_;
    new (ptr) ::fantasybit::OutData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::OutData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OutData_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OutData_ProtoData_2eproto}, {
      &scc_info_MyFantasyName_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_PlayerData_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PlayerData_default_instance_;
    new (ptr) ::fantasybit::PlayerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlayerData_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlayerData_ProtoData_2eproto}, {
      &scc_info_PlayerBase_StaticData_2eproto.base,
      &scc_info_PlayerStatus_StatusData_2eproto.base,}};

static void InitDefaultsscc_info_PlayerPoints_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PlayerPoints_default_instance_;
    new (ptr) ::fantasybit::PlayerPoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerPoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerPoints_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerPoints_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_ProjectionTrans_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ProjectionTrans_default_instance_;
    new (ptr) ::fantasybit::ProjectionTrans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjectionTrans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjectionTrans_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProjectionTrans_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_ProjectionTransBlock_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ProjectionTransBlock_default_instance_;
    new (ptr) ::fantasybit::ProjectionTransBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjectionTransBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProjectionTransBlock_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProjectionTransBlock_ProtoData_2eproto}, {
      &scc_info_PlayerPoints_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_ProofOfDoubleSpend_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ProofOfDoubleSpend_default_instance_;
    new (ptr) ::fantasybit::ProofOfDoubleSpend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProofOfDoubleSpend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProofOfDoubleSpend_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProofOfDoubleSpend_ProtoData_2eproto}, {
      &scc_info_SwapSent_ProtoData_2eproto.base,
      &scc_info_Bitcoin_UTXO_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_ResultData_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ResultData_default_instance_;
    new (ptr) ::fantasybit::ResultData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ResultData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResultData_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResultData_ProtoData_2eproto}, {
      &scc_info_GameResult_StaticData_2eproto.base,}};

static void InitDefaultsscc_info_ScheduleData_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ScheduleData_default_instance_;
    new (ptr) ::fantasybit::ScheduleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ScheduleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScheduleData_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScheduleData_ProtoData_2eproto}, {
      &scc_info_WeeklySchedule_StaticData_2eproto.base,}};

static void InitDefaultsscc_info_Secret_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Secret_default_instance_;
    new (ptr) ::fantasybit::Secret();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Secret::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Secret_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Secret_ProtoData_2eproto}, {
      &scc_info_MyFantasyName_ProtoData_2eproto.base,
      &scc_info_NameTrans_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_Secret2_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Secret2_default_instance_;
    new (ptr) ::fantasybit::Secret2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Secret2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Secret2_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Secret2_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_Secret3_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Secret3_default_instance_;
    new (ptr) ::fantasybit::Secret3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Secret3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Secret3_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Secret3_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_SignedBlockHeader_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_SignedBlockHeader_default_instance_;
    new (ptr) ::fantasybit::SignedBlockHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SignedBlockHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignedBlockHeader_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignedBlockHeader_ProtoData_2eproto}, {
      &scc_info_BlockHeader_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_SignedTransaction_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_SignedTransaction_default_instance_;
    new (ptr) ::fantasybit::SignedTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SignedTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignedTransaction_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignedTransaction_ProtoData_2eproto}, {
      &scc_info_Transaction_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_StampedTrans_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_StampedTrans_default_instance_;
    new (ptr) ::fantasybit::StampedTrans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::StampedTrans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StampedTrans_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StampedTrans_ProtoData_2eproto}, {
      &scc_info_SignedTransaction_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_SwapAsk_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_SwapAsk_default_instance_;
    new (ptr) ::fantasybit::SwapAsk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SwapAsk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapAsk_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwapAsk_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_SwapBid_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_SwapBid_default_instance_;
    new (ptr) ::fantasybit::SwapBid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SwapBid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SwapBid_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SwapBid_ProtoData_2eproto}, {
      &scc_info_Bitcoin_UTXOS_ProtoData_2eproto.base,
      &scc_info_SwapAsk_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_SwapFill_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_SwapFill_default_instance_;
    new (ptr) ::fantasybit::SwapFill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SwapFill::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapFill_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SwapFill_ProtoData_2eproto}, {
      &scc_info_SwapBid_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_SwapSent_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_SwapSent_default_instance_;
    new (ptr) ::fantasybit::SwapSent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SwapSent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapSent_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SwapSent_ProtoData_2eproto}, {
      &scc_info_SwapFill_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_SwapSentAck_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_SwapSentAck_default_instance_;
    new (ptr) ::fantasybit::SwapSentAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SwapSentAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapSentAck_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SwapSentAck_ProtoData_2eproto}, {
      &scc_info_SwapSent_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_TeamState_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_TeamState_default_instance_;
    new (ptr) ::fantasybit::TeamState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TeamState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamState_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamState_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_TimeTransition_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_TimeTransition_default_instance_;
    new (ptr) ::fantasybit::TimeTransition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TimeTransition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeTransition_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeTransition_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Transaction_default_instance_;
    new (ptr) ::fantasybit::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_TransferTrans_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_TransferTrans_default_instance_;
    new (ptr) ::fantasybit::TransferTrans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TransferTrans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferTrans_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferTrans_ProtoData_2eproto}, {}};

static void InitDefaultsscc_info_TweetProof_ProtoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_TweetProof_default_instance_;
    new (ptr) ::fantasybit::TweetProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TweetProof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TweetProof_ProtoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TweetProof_ProtoData_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProtoData_2eproto[46];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ProtoData_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProtoData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProtoData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fantasybit::MyFantasyName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MyFantasyName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::MyFantasyName, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MyFantasyName, status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyPlayer, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyPlayer, bits_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret, private_key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret, myfantasyname_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret, nametran_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret2, private_key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret2, fantasy_name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret2, public_key_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret3, private_key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret3, mnemonic_key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret3, fantasy_name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Secret3, public_key_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::fantasybit::OutData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OutData, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OutData, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::OutData, type_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OutData, myfantasyname_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::InData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InData, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InData, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::InData, type_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InData, data_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InData, data2_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InData, num_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InData, data_trans_),
  4,
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameProof, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameProof, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameProof, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameProof, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::TweetProof, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TweetProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::TweetProof, tweet_),
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::MasterProof, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MasterProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::MasterProof, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MasterProof, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MasterProof, timestamp_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MasterProof, new_oracle_name_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Transaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Transaction, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Transaction, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Transaction, version_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Transaction, type_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Transaction, nonce_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameTrans, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameTrans, fantasy_name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameTrans, public_key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameTrans, proof_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameTrans, recovery_key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameTrans, am_agent_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameTrans, my_agent_),
  0,
  1,
  4,
  2,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::fantasybit::TransferTrans, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TransferTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::TransferTrans, from_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TransferTrans, to_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TransferTrans, amount_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::SignedTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SignedTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::SignedTransaction, trans_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SignedTransaction, id_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SignedTransaction, sig_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SignedTransaction, fantasy_name_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockHeader, version_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockHeader, num_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockHeader, prev_id_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockHeader, timestamp_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockHeader, generator_pk_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockHeader, generating_sig_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockHeader, basetarget_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockHeader, blocktype_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockHeader, transaction_id_),
  4,
  5,
  0,
  6,
  1,
  2,
  7,
  8,
  3,
  PROTOBUF_FIELD_OFFSET(::fantasybit::SignedBlockHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SignedBlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::SignedBlockHeader, head_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SignedBlockHeader, sig_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Block, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Block, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Block, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Block, signedhead_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Block, signed_transactions_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::NodeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::NodeRequest, type_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NodeRequest, myip_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NodeRequest, num_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NodeRequest, myhost_),
  3,
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::NodeReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NodeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::NodeReply, hight_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NodeReply, ips_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, points_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, result_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjectionTrans, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjectionTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjectionTrans, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjectionTrans, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjectionTrans, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjectionTrans, points_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerPoints, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerPoints, points_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjectionTransBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjectionTransBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjectionTransBlock, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjectionTransBlock, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjectionTransBlock, player_points_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Data, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Data, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Data, version_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Data, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerData, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerData, player_base_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerData, player_status_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerData, player_game_status_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameData, gameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameData, status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ResultData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ResultData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ResultData, game_result_),
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ScheduleData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ScheduleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ScheduleData, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ScheduleData, weekly_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::DataTransition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DataTransition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::DataTransition, type_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DataTransition, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DataTransition, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DataTransition, gamedata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DataTransition, data_),
  2,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamState, state_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamState, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamState, teamid_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::DeltaData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DeltaData, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DeltaData, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::DeltaData, type_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DeltaData, myfantasyname_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DeltaData, globalstate_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DeltaData, teamstates_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DeltaData, datas_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DeltaData, players_),
  1,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::MessageData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MessageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::MessageData, msg_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MessageData, gt_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MessageData, lt_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::StampedTrans, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::StampedTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::StampedTrans, timestamp_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::StampedTrans, seqnum_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::StampedTrans, prevseq_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::StampedTrans, signed_orig_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ExchangeOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ExchangeOrder, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ExchangeOrder, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ExchangeOrder, type_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ExchangeOrder, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ExchangeOrder, core_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ExchangeOrder, cancel_oref_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ExchangeOrder, futcontract_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ExchangeOrder, symbol_),
  5,
  0,
  2,
  4,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderUnique, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderUnique, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderUnique, public_key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderUnique, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderUnique, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderUnique, buyside_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderUnique, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderUnique, price_),
  0,
  2,
  3,
  4,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderDeets, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderDeets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderDeets, oid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderDeets, order_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderDeets, size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::InsideUnique, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InsideUnique, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::InsideUnique, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InsideUnique, public_key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InsideUnique, buyside_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InsideUnique, price_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InsideUnique, oid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InsideUnique, order_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InsideUnique, size_),
  2,
  0,
  6,
  4,
  1,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::fantasybit::TimeTransition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TimeTransition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::TimeTransition, type_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TimeTransition, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TimeTransition, week_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bitcoin_UTXO, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bitcoin_UTXO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bitcoin_UTXO, txid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bitcoin_UTXO, tx_output_n_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bitcoin_UTXO, in_value_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bitcoin_UTXO, locking_script_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bitcoin_UTXOS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bitcoin_UTXOS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bitcoin_UTXOS, total_value_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bitcoin_UTXOS, utxo_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapAsk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapAsk, satoshi_min_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapAsk, satoshi_max_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapAsk, rate_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapAsk, fb_qty_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapBid, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapBid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapBid, satoshi_min_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapBid, satoshi_max_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapBid, rate_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapBid, utxos_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapBid, change_addr_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapBid, this_offer_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapBid, counteroffer_),
  4,
  5,
  6,
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapFill, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapFill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapFill, swapbid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapFill, hash_to_sign_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapFill, satoshi_fee_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapFill, fb_qty_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapFill, counterparty_),
  2,
  0,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapSent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapSent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapSent, swapfill_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapSent, sig_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProofOfDoubleSpend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProofOfDoubleSpend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProofOfDoubleSpend, swapsent_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProofOfDoubleSpend, utxo_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProofOfDoubleSpend, pre_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProofOfDoubleSpend, post_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProofOfDoubleSpend, sig_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapSentAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapSentAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapSentAck, swapsent_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::fantasybit::MyFantasyName)},
  { 9, 16, sizeof(::fantasybit::FantasyPlayer)},
  { 18, 26, sizeof(::fantasybit::Secret)},
  { 29, 37, sizeof(::fantasybit::Secret2)},
  { 40, 49, sizeof(::fantasybit::Secret3)},
  { 53, 60, sizeof(::fantasybit::OutData)},
  { 62, 72, sizeof(::fantasybit::InData)},
  { 77, 83, sizeof(::fantasybit::NameProof)},
  { 84, 90, sizeof(::fantasybit::TweetProof)},
  { 91, 100, sizeof(::fantasybit::MasterProof)},
  { 104, 112, sizeof(::fantasybit::Transaction)},
  { 115, 126, sizeof(::fantasybit::NameTrans)},
  { 132, 140, sizeof(::fantasybit::TransferTrans)},
  { 143, 152, sizeof(::fantasybit::SignedTransaction)},
  { 156, 170, sizeof(::fantasybit::BlockHeader)},
  { 179, 186, sizeof(::fantasybit::SignedBlockHeader)},
  { 188, 195, sizeof(::fantasybit::Block)},
  { 197, 206, sizeof(::fantasybit::NodeRequest)},
  { 210, 217, sizeof(::fantasybit::NodeReply)},
  { 219, 229, sizeof(::fantasybit::FantasyPlayerPoints)},
  { 234, 243, sizeof(::fantasybit::ProjectionTrans)},
  { 247, 254, sizeof(::fantasybit::PlayerPoints)},
  { 256, 264, sizeof(::fantasybit::ProjectionTransBlock)},
  { 267, 274, sizeof(::fantasybit::Data)},
  { 276, 285, sizeof(::fantasybit::PlayerData)},
  { 289, 296, sizeof(::fantasybit::GameData)},
  { 298, 304, sizeof(::fantasybit::ResultData)},
  { 305, 312, sizeof(::fantasybit::ScheduleData)},
  { 314, 324, sizeof(::fantasybit::DataTransition)},
  { 329, 337, sizeof(::fantasybit::TeamState)},
  { 340, 351, sizeof(::fantasybit::DeltaData)},
  { 357, 365, sizeof(::fantasybit::MessageData)},
  { 368, 377, sizeof(::fantasybit::StampedTrans)},
  { 381, 392, sizeof(::fantasybit::ExchangeOrder)},
  { 398, 409, sizeof(::fantasybit::OrderUnique)},
  { 415, 423, sizeof(::fantasybit::OrderDeets)},
  { 426, 438, sizeof(::fantasybit::InsideUnique)},
  { 445, 453, sizeof(::fantasybit::TimeTransition)},
  { 456, 465, sizeof(::fantasybit::Bitcoin_UTXO)},
  { 469, 476, sizeof(::fantasybit::Bitcoin_UTXOS)},
  { 478, 487, sizeof(::fantasybit::SwapAsk)},
  { 491, 503, sizeof(::fantasybit::SwapBid)},
  { 510, 520, sizeof(::fantasybit::SwapFill)},
  { 525, 532, sizeof(::fantasybit::SwapSent)},
  { 534, 544, sizeof(::fantasybit::ProofOfDoubleSpend)},
  { 549, 555, sizeof(::fantasybit::SwapSentAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_MyFantasyName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_FantasyPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Secret_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Secret2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Secret3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_OutData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_InData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_NameProof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_TweetProof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_MasterProof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_NameTrans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_TransferTrans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_SignedTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_BlockHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_SignedBlockHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_NodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_NodeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_FantasyPlayerPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ProjectionTrans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PlayerPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ProjectionTransBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PlayerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ResultData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ScheduleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_DataTransition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_TeamState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_DeltaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_MessageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_StampedTrans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ExchangeOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_OrderUnique_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_OrderDeets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_InsideUnique_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_TimeTransition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Bitcoin_UTXO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Bitcoin_UTXOS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_SwapAsk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_SwapBid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_SwapFill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_SwapSent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ProofOfDoubleSpend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_SwapSentAck_default_instance_),
};

const char descriptor_table_protodef_ProtoData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017ProtoData.proto\022\nfantasybit\032\020StaticDat"
  "a.proto\032\020StatusData.proto\032\014ExData.proto\""
  "G\n\rMyFantasyName\022\014\n\004name\030\001 \001(\t\022(\n\006status"
  "\030\002 \001(\0162\030.fantasybit.MyNameStatus\"+\n\rFant"
  "asyPlayer\022\014\n\004name\030\n \001(\t\022\014\n\004bits\030\024 \001(\004\"x\n"
  "\006Secret\022\023\n\013private_key\030\001 \002(\t\0220\n\rmyfantas"
  "yname\030\002 \001(\0132\031.fantasybit.MyFantasyName\022\'"
  "\n\010nametran\030\n \001(\0132\025.fantasybit.NameTrans\""
  "H\n\007Secret2\022\023\n\013private_key\030\001 \001(\t\022\024\n\014fanta"
  "sy_name\030\024 \001(\t\022\022\n\npublic_key\030\036 \001(\t\"^\n\007Sec"
  "ret3\022\023\n\013private_key\030\001 \001(\t\022\024\n\014mnemonic_ke"
  "y\030\003 \001(\t\022\024\n\014fantasy_name\030\024 \001(\t\022\022\n\npublic_"
  "key\030\036 \001(\t\"\245\001\n\007OutData\022&\n\004type\030\001 \002(\0162\030.fa"
  "ntasybit.OutData.Type\0220\n\rmyfantasyname\030\002"
  " \001(\0132\031.fantasybit.MyFantasyName\"6\n\004Type\022"
  "\021\n\rMYFANTASYNAME\020\001\022\014\n\010SNAPSHOT\020\002\022\r\n\tHEAR"
  "TBEAT\020\003*\010\010d\020\200\200\200\200\002\"\200\002\n\006InData\022%\n\004type\030\001 \002"
  "(\0162\027.fantasybit.InData.Type\022\014\n\004data\030\002 \001("
  "\t\022\r\n\005data2\030\003 \001(\t\022\013\n\003num\030\004 \001(\005\022.\n\ndata_tr"
  "ans\030\005 \001(\0132\032.fantasybit.DataTransition\"k\n"
  "\004Type\022\014\n\010MINENAME\020\001\022\010\n\004QUIT\020\002\022\r\n\tHEARTBE"
  "AT\020\003\022\013\n\007CONNECT\020\004\022\016\n\nMAKE_BLOCK\020\005\022\013\n\007NEW"
  "NAME\020\006\022\010\n\004PROJ\020\007\022\010\n\004DATA\020\010*\010\010d\020\200\200\200\200\002\"t\n\t"
  "NameProof\022(\n\004type\030\001 \001(\0162\032.fantasybit.Nam"
  "eProof.Type\"2\n\004Type\022\007\n\003POW\020\001\022\t\n\005TWEET\020\002\022"
  "\n\n\006ORACLE\020\003\022\n\n\006MASTER\020\004*\t\010\310\001\020\200\200\200\200\002\"`\n\nTw"
  "eetProof\022\r\n\005tweet\030\n \001(\t2C\n\013tweet_proof\022\025"
  ".fantasybit.NameProof\030\311\001 \001(\0132\026.fantasybi"
  "t.TweetProof\"\275\001\n\013MasterProof\022\016\n\006season\030\n"
  " \001(\t\022\014\n\004week\030\024 \001(\005\022\021\n\ttimestamp\030\025 \001(\005\0226\n"
  "\017new_oracle_name\030B \001(\0132\035.fantasybit.Sign"
  "edTransaction2E\n\014master_proof\022\025.fantasyb"
  "it.NameProof\030\221\003 \001(\0132\027.fantasybit.MasterP"
  "roof\"\\\n\013Transaction\022\017\n\007version\030\001 \001(\005\022#\n\004"
  "type\030\002 \001(\0162\025.fantasybit.TransType\022\r\n\005non"
  "ce\030\n \001(\004*\010\010d\020\200\200\200\200\002\"\332\001\n\tNameTrans\022\024\n\014fant"
  "asy_name\030\n \001(\t\022\022\n\npublic_key\030\024 \001(\014\022$\n\005pr"
  "oof\030\036 \001(\0132\025.fantasybit.NameProof\022\024\n\014reco"
  "very_key\030( \001(\014\022\020\n\010am_agent\0302 \001(\010\022\020\n\010my_a"
  "gent\030< \001(\t2C\n\nname_trans\022\027.fantasybit.Tr"
  "ansaction\030\310\001 \001(\0132\025.fantasybit.NameTrans\""
  "\205\001\n\rTransferTrans\022\014\n\004from\030\n \001(\t\022\n\n\002to\030\024 "
  "\001(\t\022\016\n\006amount\030\036 \001(\0042J\n\rtransfer_tran\022\027.f"
  "antasybit.Transaction\030\220\003 \001(\0132\031.fantasybi"
  "t.TransferTrans\"j\n\021SignedTransaction\022&\n\005"
  "trans\030\n \001(\0132\027.fantasybit.Transaction\022\n\n\002"
  "id\030\024 \001(\014\022\013\n\003sig\030\036 \001(\014\022\024\n\014fantasy_name\030( "
  "\001(\t\"\370\001\n\013BlockHeader\022\017\n\007version\030\001 \001(\005\022\013\n\003"
  "num\030\n \001(\005\022\017\n\007prev_id\030\024 \001(\014\022\021\n\ttimestamp\030"
  "\025 \001(\005\022\024\n\014generator_pk\030\036 \001(\014\022\026\n\016generatin"
  "g_sig\030( \001(\014\022\022\n\nbasetarget\0302 \001(\004\022/\n\tblock"
  "type\030< \001(\0162\034.fantasybit.BlockHeader.Type"
  "\022\026\n\016transaction_id\030F \001(\014\"\034\n\004Type\022\n\n\006NORM"
  "AL\020\001\022\010\n\004DATA\020\002\"G\n\021SignedBlockHeader\022%\n\004h"
  "ead\030\n \001(\0132\027.fantasybit.BlockHeader\022\013\n\003si"
  "g\030\036 \001(\t\"\201\001\n\005Block\0221\n\nsignedhead\030\n \001(\0132\035."
  "fantasybit.SignedBlockHeader\022:\n\023signed_t"
  "ransactions\030\024 \003(\0132\035.fantasybit.SignedTra"
  "nsaction*\t\010\350\007\020\200\200\200\200\002\"\257\001\n\013NodeRequest\022*\n\004t"
  "ype\030\n \001(\0162\034.fantasybit.NodeRequest.Type\022"
  "\014\n\004myip\030\024 \001(\t\022\013\n\003num\030\036 \001(\005\022\016\n\006myhost\030( \001"
  "(\t\"I\n\004Type\022\r\n\tHANDSHAKE\020\001\022\021\n\rBLOCK_REQUE"
  "ST\020\002\022\021\n\rHIGHT_REQUEST\020\003\022\014\n\010NAT_TEST\020\004\"\'\n"
  "\tNodeReply\022\r\n\005hight\030\n \001(\005\022\013\n\003ips\030\024 \003(\t\"e"
  "\n\023FantasyPlayerPoints\022\016\n\006season\030\n \001(\r\022\014\n"
  "\004week\030\024 \001(\r\022\020\n\010playerid\030\036 \001(\t\022\016\n\006points\030"
  "( \001(\005\022\016\n\006result\0302 \001(\002\"\234\001\n\017ProjectionTran"
  "s\022\016\n\006season\030\n \001(\r\022\014\n\004week\030\024 \001(\r\022\020\n\010playe"
  "rid\030\036 \001(\t\022\016\n\006points\030( \001(\0052I\n\nproj_trans\022"
  "\027.fantasybit.Transaction\030\311\001 \001(\0132\033.fantas"
  "ybit.ProjectionTrans\"0\n\014PlayerPoints\022\020\n\010"
  "playerid\030\036 \001(\t\022\016\n\006points\030( \001(\005\"\273\001\n\024Proje"
  "ctionTransBlock\022\016\n\006season\030\n \001(\r\022\014\n\004week\030"
  "\024 \001(\r\022/\n\rplayer_points\030\036 \003(\0132\030.fantasybi"
  "t.PlayerPoints2T\n\020proj_trans_block\022\027.fan"
  "tasybit.Transaction\030\323\001 \001(\0132 .fantasybit."
  "ProjectionTransBlock\"\213\001\n\004Data\022\017\n\007version"
  "\030\n \001(\005\022#\n\004type\030\024 \001(\0162\025.fantasybit.Data.T"
  "ype\"C\n\004Type\022\014\n\010SCHEDULE\020\000\022\n\n\006PLAYER\020\001\022\010\n"
  "\004GAME\020\002\022\n\n\006RESULT\020\003\022\013\n\007MESSAGE\020\004*\010\010d\020\200\200\200"
  "\200\002\"\365\001\n\nPlayerData\022\020\n\010playerid\030\n \001(\t\022+\n\013p"
  "layer_base\030\024 \001(\0132\026.fantasybit.PlayerBase"
  "\022/\n\rplayer_status\030\036 \001(\0132\030.fantasybit.Pla"
  "yerStatus\0228\n\022player_game_status\030( \001(\0162\034."
  "fantasybit.PlayerGameStatus2=\n\013player_da"
  "ta\022\020.fantasybit.Data\030e \001(\0132\026.fantasybit."
  "PlayerData\"}\n\010GameData\022\016\n\006gameid\030\n \001(\t\022&"
  "\n\006status\030\024 \001(\0132\026.fantasybit.GameStatus29"
  "\n\tgame_data\022\020.fantasybit.Data\030o \001(\0132\024.fa"
  "ntasybit.GameData\"y\n\nResultData\022+\n\013game_"
  "result\030\n \001(\0132\026.fantasybit.GameResult2>\n\013"
  "result_data\022\020.fantasybit.Data\030\312\001 \001(\0132\026.f"
  "antasybit.ResultData\"\214\001\n\014ScheduleData\022\014\n"
  "\004week\030\001 \001(\005\022*\n\006weekly\030\n \001(\0132\032.fantasybit"
  ".WeeklySchedule2B\n\rschedule_data\022\020.fanta"
  "sybit.Data\030\256\002 \001(\0132\030.fantasybit.ScheduleD"
  "ata\"\342\001\n\016DataTransition\022 \n\004type\030\001 \001(\0162\022.f"
  "antasybit.TrType\022\016\n\006season\030\n \001(\r\022\014\n\004week"
  "\030\024 \001(\r\022&\n\010gamedata\030\036 \003(\0132\024.fantasybit.Ga"
  "meData\022\036\n\004data\030( \003(\0132\020.fantasybit.Data2H"
  "\n\ndata_trans\022\027.fantasybit.Transaction\030\313\001"
  " \001(\0132\032.fantasybit.DataTransition\"w\n\tTeam"
  "State\022*\n\005state\030\001 \001(\0162\033.fantasybit.TeamSt"
  "ate.State\022\014\n\004week\030\n \001(\r\022\016\n\006teamid\030\024 \001(\t\""
  " \n\005State\022\013\n\007PREGAME\020\001\022\n\n\006INGAME\020\002\"\275\002\n\tDe"
  "ltaData\022(\n\004type\030\001 \001(\0162\032.fantasybit.Delta"
  "Data.Type\0220\n\rmyfantasyname\030\002 \003(\0132\031.fanta"
  "sybit.MyFantasyName\022,\n\013globalstate\030\n \001(\013"
  "2\027.fantasybit.GlobalState\022)\n\nteamstates\030"
  "\024 \003(\0132\025.fantasybit.TeamState\022\037\n\005datas\030\036 "
  "\003(\0132\020.fantasybit.Data\022*\n\007players\030( \003(\0132\031"
  ".fantasybit.FantasyPlayer\"#\n\004Type\022\014\n\010SNA"
  "PSHOT\020\002\022\r\n\tHEARTBEAT\020\003*\t\010\350\007\020\200\200\200\200\002\"t\n\013Mes"
  "sageData\022\013\n\003msg\030\n \001(\t\022\n\n\002gt\030\024 \001(\005\022\n\n\002lt\030"
  "\036 \001(\0052@\n\014message_data\022\020.fantasybit.Data\030"
  "\224\003 \001(\0132\027.fantasybit.MessageData\"\301\001\n\014Stam"
  "pedTrans\022\021\n\ttimestamp\030\n \001(\004\022\016\n\006seqnum\030\024 "
  "\001(\005\022\017\n\007prevseq\030\025 \001(\005\0222\n\013signed_orig\030\036 \001("
  "\0132\035.fantasybit.SignedTransaction2I\n\rstam"
  "ped_trans\022\027.fantasybit.Transaction\030\254\002 \001("
  "\0132\030.fantasybit.StampedTrans\"\311\002\n\rExchange"
  "Order\022,\n\004type\030\n \001(\0162\036.fantasybit.Exchang"
  "eOrder.Type\022\020\n\010playerid\030( \001(\t\022#\n\004core\0302 "
  "\001(\0132\025.fantasybit.OrderCore\022\023\n\013cancel_ore"
  "f\030d \001(\005\022,\n\013futcontract\030n \001(\0132\027.fantasybi"
  "t.FutContract\022\016\n\006symbol\030x \001(\t\"(\n\004Type\022\007\n"
  "\003NEW\020\001\022\n\n\006CANCEL\020\002\022\013\n\007REPLACE\020\003*\t\010\364\003\020\200\200\200"
  "\200\0022K\n\016exchange_order\022\027.fantasybit.Transa"
  "ction\030\266\002 \001(\0132\031.fantasybit.ExchangeOrder\""
  "q\n\013OrderUnique\022\022\n\npublic_key\030\n \001(\t\022\016\n\006se"
  "ason\030\024 \001(\r\022\014\n\004week\030\036 \001(\r\022\017\n\007buyside\030( \001("
  "\010\022\020\n\010playerid\0302 \001(\t\022\r\n\005price\030F \001(\005\"O\n\nOr"
  "derDeets\022\013\n\003oid\030\n \001(\014\022&\n\005order\030\024 \001(\0132\027.f"
  "antasybit.OrderUnique\022\014\n\004size\030\036 \001(\005\"\227\001\n\014"
  "InsideUnique\022\020\n\010playerid\0302 \001(\t\022\022\n\npublic"
  "_key\030\n \001(\t\022\017\n\007buyside\030( \001(\010\022\r\n\005price\030F \001"
  "(\005\022\013\n\003oid\030\013 \001(\014\022&\n\005order\030\024 \001(\0132\027.fantasy"
  "bit.OrderUnique\022\014\n\004size\030\036 \001(\005\"\316\001\n\016TimeTr"
  "ansition\022-\n\004type\030\001 \001(\0162\037.fantasybit.Time"
  "Transition.Type\022\016\n\006season\030\n \001(\r\022\014\n\004week\030"
  "\024 \001(\r\"%\n\004Type\022\r\n\tTRADEOPEN\020\002\022\016\n\nTRADECLO"
  "SE\020\0032H\n\ntime_trans\022\027.fantasybit.Transact"
  "ion\030\257\002 \001(\0132\032.fantasybit.TimeTransition\"["
  "\n\014Bitcoin_UTXO\022\014\n\004txid\030\n \001(\014\022\023\n\013tx_outpu"
  "t_n\030\024 \001(\r\022\020\n\010in_value\030\036 \001(\004\022\026\n\016locking_s"
  "cript\030( \001(\014\"L\n\rBitcoin_UTXOS\022\023\n\013total_va"
  "lue\030\n \001(\004\022&\n\004utxo\030\024 \003(\0132\030.fantasybit.Bit"
  "coin_UTXO\"\226\001\n\007SwapAsk\022\023\n\013satoshi_min\030\n \001"
  "(\004\022\023\n\013satoshi_max\030\013 \001(\004\022\014\n\004rate\030\024 \001(\004\022\016\n"
  "\006fb_qty\030\036 \001(\0042C\n\014swapask_tran\022\027.fantasyb"
  "it.Transaction\030\302\003 \001(\0132\023.fantasybit.SwapA"
  "sk\"\204\002\n\007SwapBid\022\023\n\013satoshi_min\030\n \001(\004\022\023\n\013s"
  "atoshi_max\030\013 \001(\004\022\014\n\004rate\030\024 \001(\004\022(\n\005utxos\030"
  "\036 \001(\0132\031.fantasybit.Bitcoin_UTXOS\022\023\n\013chan"
  "ge_addr\030( \001(\014\022\'\n\nthis_offer\0302 \001(\0132\023.fant"
  "asybit.SwapAsk\022\024\n\014counteroffer\030< \001(\t2C\n\014"
  "swapbid_tran\022\027.fantasybit.Transaction\030\364\003"
  " \001(\0132\023.fantasybit.SwapBid\"\307\001\n\010SwapFill\022$"
  "\n\007swapbid\030\n \001(\0132\023.fantasybit.SwapBid\022\024\n\014"
  "hash_to_sign\030\024 \001(\014\022\023\n\013satoshi_fee\030\036 \001(\004\022"
  "\016\n\006fb_qty\030( \001(\004\022\024\n\014counterparty\0302 \001(\t2D\n"
  "\014swapfil_tran\022\027.fantasybit.Transaction\030\330"
  "\004 \001(\0132\024.fantasybit.SwapFill\"\206\001\n\010SwapSent"
  "\022&\n\010swapfill\030\n \001(\0132\024.fantasybit.SwapFill"
  "\022\013\n\003sig\030\024 \001(\0142E\n\rswapsent_tran\022\027.fantasy"
  "bit.Transaction\030\274\005 \001(\0132\024.fantasybit.Swap"
  "Sent\"\331\001\n\022ProofOfDoubleSpend\022&\n\010swapsent\030"
  "\n \001(\0132\024.fantasybit.SwapSent\022&\n\004utxo\030\024 \001("
  "\0132\030.fantasybit.Bitcoin_UTXO\022\013\n\003pre\030\036 \001(\014"
  "\022\014\n\004post\030( \001(\014\022\013\n\003sig\0302 \001(\0142K\n\tpodp_tran"
  "\022\027.fantasybit.Transaction\030\240\006 \001(\0132\036.fanta"
  "sybit.ProofOfDoubleSpend\"\202\001\n\013SwapSentAck"
  "\022&\n\010swapsent\030\n \001(\0132\024.fantasybit.SwapSent"
  "2K\n\020swapsentack_tran\022\027.fantasybit.Transa"
  "ction\030\252\006 \001(\0132\027.fantasybit.SwapSentAck*Y\n"
  "\014MyNameStatus\022\010\n\004none\020\001\022\013\n\007notavil\020\002\022\r\n\t"
  "requested\020\005\022\024\n\020transaction_sent\020\017\022\r\n\tcon"
  "firmed\020\024*\371\001\n\tTransType\022\010\n\004NAME\020\000\022\016\n\nPROJ"
  "ECTION\020\001\022\n\n\006RESULT\020\002\022\010\n\004DATA\020\003\022\024\n\020PROJEC"
  "TION_BLOCK\020\004\022\017\n\013MASTER_NAME\020\005\022\010\n\004TIME\020\006\022"
  "\013\n\007STAMPED\020\007\022\014\n\010EXCHANGE\020\010\022\022\n\016EXCHANGE_B"
  "LOCK\020\t\022\014\n\010TRANSFER\020\n\022\013\n\007SWAPASK\020\013\022\013\n\007SWA"
  "PBID\020\014\022\013\n\007SWAPFIL\020\r\022\014\n\010SWAPSENT\020\016\022\010\n\004POD"
  "P\020\017\022\017\n\013SWAPSENTACK\020\020*\260\001\n\006TrType\022\017\n\013SEASO"
  "NSTART\020\002\022\r\n\tSEASONEND\020\003\022\r\n\tHEARTBEAT\020\005\022\r"
  "\n\tGAMESTART\020\006\022\014\n\010WEEKOVER\020\007\022\025\n\021TRADESESS"
  "IONSTART\020\010\022\037\n\033TRADESESSIONCLOSEANDPREOPE"
  "N\020\t\022\020\n\014PLAYOFFSTART\020\n\022\020\n\014SUPERBOWLEND\020\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ProtoData_2eproto_deps[3] = {
  &::descriptor_table_ExData_2eproto,
  &::descriptor_table_StaticData_2eproto,
  &::descriptor_table_StatusData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ProtoData_2eproto_sccs[46] = {
  &scc_info_Bitcoin_UTXO_ProtoData_2eproto.base,
  &scc_info_Bitcoin_UTXOS_ProtoData_2eproto.base,
  &scc_info_Block_ProtoData_2eproto.base,
  &scc_info_BlockHeader_ProtoData_2eproto.base,
  &scc_info_Data_ProtoData_2eproto.base,
  &scc_info_DataTransition_ProtoData_2eproto.base,
  &scc_info_DeltaData_ProtoData_2eproto.base,
  &scc_info_ExchangeOrder_ProtoData_2eproto.base,
  &scc_info_FantasyPlayer_ProtoData_2eproto.base,
  &scc_info_FantasyPlayerPoints_ProtoData_2eproto.base,
  &scc_info_GameData_ProtoData_2eproto.base,
  &scc_info_InData_ProtoData_2eproto.base,
  &scc_info_InsideUnique_ProtoData_2eproto.base,
  &scc_info_MasterProof_ProtoData_2eproto.base,
  &scc_info_MessageData_ProtoData_2eproto.base,
  &scc_info_MyFantasyName_ProtoData_2eproto.base,
  &scc_info_NameProof_ProtoData_2eproto.base,
  &scc_info_NameTrans_ProtoData_2eproto.base,
  &scc_info_NodeReply_ProtoData_2eproto.base,
  &scc_info_NodeRequest_ProtoData_2eproto.base,
  &scc_info_OrderDeets_ProtoData_2eproto.base,
  &scc_info_OrderUnique_ProtoData_2eproto.base,
  &scc_info_OutData_ProtoData_2eproto.base,
  &scc_info_PlayerData_ProtoData_2eproto.base,
  &scc_info_PlayerPoints_ProtoData_2eproto.base,
  &scc_info_ProjectionTrans_ProtoData_2eproto.base,
  &scc_info_ProjectionTransBlock_ProtoData_2eproto.base,
  &scc_info_ProofOfDoubleSpend_ProtoData_2eproto.base,
  &scc_info_ResultData_ProtoData_2eproto.base,
  &scc_info_ScheduleData_ProtoData_2eproto.base,
  &scc_info_Secret_ProtoData_2eproto.base,
  &scc_info_Secret2_ProtoData_2eproto.base,
  &scc_info_Secret3_ProtoData_2eproto.base,
  &scc_info_SignedBlockHeader_ProtoData_2eproto.base,
  &scc_info_SignedTransaction_ProtoData_2eproto.base,
  &scc_info_StampedTrans_ProtoData_2eproto.base,
  &scc_info_SwapAsk_ProtoData_2eproto.base,
  &scc_info_SwapBid_ProtoData_2eproto.base,
  &scc_info_SwapFill_ProtoData_2eproto.base,
  &scc_info_SwapSent_ProtoData_2eproto.base,
  &scc_info_SwapSentAck_ProtoData_2eproto.base,
  &scc_info_TeamState_ProtoData_2eproto.base,
  &scc_info_TimeTransition_ProtoData_2eproto.base,
  &scc_info_Transaction_ProtoData_2eproto.base,
  &scc_info_TransferTrans_ProtoData_2eproto.base,
  &scc_info_TweetProof_ProtoData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProtoData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtoData_2eproto = {
  false, false, descriptor_table_protodef_ProtoData_2eproto, "ProtoData.proto", 7519,
  &descriptor_table_ProtoData_2eproto_once, descriptor_table_ProtoData_2eproto_sccs, descriptor_table_ProtoData_2eproto_deps, 46, 3,
  schemas, file_default_instances, TableStruct_ProtoData_2eproto::offsets,
  file_level_metadata_ProtoData_2eproto, 46, file_level_enum_descriptors_ProtoData_2eproto, file_level_service_descriptors_ProtoData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ProtoData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ProtoData_2eproto)), true);
namespace fantasybit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutData_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[0];
}
bool OutData_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OutData_Type OutData::MYFANTASYNAME;
constexpr OutData_Type OutData::SNAPSHOT;
constexpr OutData_Type OutData::HEARTBEAT;
constexpr OutData_Type OutData::Type_MIN;
constexpr OutData_Type OutData::Type_MAX;
constexpr int OutData::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InData_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[1];
}
bool InData_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InData_Type InData::MINENAME;
constexpr InData_Type InData::QUIT;
constexpr InData_Type InData::HEARTBEAT;
constexpr InData_Type InData::CONNECT;
constexpr InData_Type InData::MAKE_BLOCK;
constexpr InData_Type InData::NEWNAME;
constexpr InData_Type InData::PROJ;
constexpr InData_Type InData::DATA;
constexpr InData_Type InData::Type_MIN;
constexpr InData_Type InData::Type_MAX;
constexpr int InData::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NameProof_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[2];
}
bool NameProof_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NameProof_Type NameProof::POW;
constexpr NameProof_Type NameProof::TWEET;
constexpr NameProof_Type NameProof::ORACLE;
constexpr NameProof_Type NameProof::MASTER;
constexpr NameProof_Type NameProof::Type_MIN;
constexpr NameProof_Type NameProof::Type_MAX;
constexpr int NameProof::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockHeader_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[3];
}
bool BlockHeader_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BlockHeader_Type BlockHeader::NORMAL;
constexpr BlockHeader_Type BlockHeader::DATA;
constexpr BlockHeader_Type BlockHeader::Type_MIN;
constexpr BlockHeader_Type BlockHeader::Type_MAX;
constexpr int BlockHeader::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeRequest_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[4];
}
bool NodeRequest_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NodeRequest_Type NodeRequest::HANDSHAKE;
constexpr NodeRequest_Type NodeRequest::BLOCK_REQUEST;
constexpr NodeRequest_Type NodeRequest::HIGHT_REQUEST;
constexpr NodeRequest_Type NodeRequest::NAT_TEST;
constexpr NodeRequest_Type NodeRequest::Type_MIN;
constexpr NodeRequest_Type NodeRequest::Type_MAX;
constexpr int NodeRequest::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Data_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[5];
}
bool Data_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Data_Type Data::SCHEDULE;
constexpr Data_Type Data::PLAYER;
constexpr Data_Type Data::GAME;
constexpr Data_Type Data::RESULT;
constexpr Data_Type Data::MESSAGE;
constexpr Data_Type Data::Type_MIN;
constexpr Data_Type Data::Type_MAX;
constexpr int Data::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[6];
}
bool TeamState_State_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TeamState_State TeamState::PREGAME;
constexpr TeamState_State TeamState::INGAME;
constexpr TeamState_State TeamState::State_MIN;
constexpr TeamState_State TeamState::State_MAX;
constexpr int TeamState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeltaData_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[7];
}
bool DeltaData_Type_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeltaData_Type DeltaData::SNAPSHOT;
constexpr DeltaData_Type DeltaData::HEARTBEAT;
constexpr DeltaData_Type DeltaData::Type_MIN;
constexpr DeltaData_Type DeltaData::Type_MAX;
constexpr int DeltaData::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExchangeOrder_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[8];
}
bool ExchangeOrder_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ExchangeOrder_Type ExchangeOrder::NEW;
constexpr ExchangeOrder_Type ExchangeOrder::CANCEL;
constexpr ExchangeOrder_Type ExchangeOrder::REPLACE;
constexpr ExchangeOrder_Type ExchangeOrder::Type_MIN;
constexpr ExchangeOrder_Type ExchangeOrder::Type_MAX;
constexpr int ExchangeOrder::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeTransition_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[9];
}
bool TimeTransition_Type_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TimeTransition_Type TimeTransition::TRADEOPEN;
constexpr TimeTransition_Type TimeTransition::TRADECLOSE;
constexpr TimeTransition_Type TimeTransition::Type_MIN;
constexpr TimeTransition_Type TimeTransition::Type_MAX;
constexpr int TimeTransition::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MyNameStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[10];
}
bool MyNameStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 5:
    case 15:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[11];
}
bool TransType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoData_2eproto);
  return file_level_enum_descriptors_ProtoData_2eproto[12];
}
bool TrType_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MyFantasyName::InitAsDefaultInstance() {
}
class MyFantasyName::_Internal {
 public:
  using HasBits = decltype(std::declval<MyFantasyName>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MyFantasyName::MyFantasyName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.MyFantasyName)
}
MyFantasyName::MyFantasyName(const MyFantasyName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.MyFantasyName)
}

void MyFantasyName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MyFantasyName_ProtoData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
}

MyFantasyName::~MyFantasyName() {
  // @@protoc_insertion_point(destructor:fantasybit.MyFantasyName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MyFantasyName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MyFantasyName::ArenaDtor(void* object) {
  MyFantasyName* _this = reinterpret_cast< MyFantasyName* >(object);
  (void)_this;
}
void MyFantasyName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MyFantasyName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyFantasyName& MyFantasyName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyFantasyName_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void MyFantasyName::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MyFantasyName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyFantasyName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.MyFantasyName.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.MyNameStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::MyNameStatus_IsValid(val))) {
            _internal_set_status(static_cast<::fantasybit::MyNameStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyFantasyName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MyFantasyName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.MyFantasyName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .fantasybit.MyNameStatus status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MyFantasyName)
  return target;
}

size_t MyFantasyName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MyFantasyName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .fantasybit.MyNameStatus status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyFantasyName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MyFantasyName)
  GOOGLE_DCHECK_NE(&from, this);
  const MyFantasyName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyFantasyName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MyFantasyName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MyFantasyName)
    MergeFrom(*source);
  }
}

void MyFantasyName::MergeFrom(const MyFantasyName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MyFantasyName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MyFantasyName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MyFantasyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyFantasyName::CopyFrom(const MyFantasyName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MyFantasyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyFantasyName::IsInitialized() const {
  return true;
}

void MyFantasyName::InternalSwap(MyFantasyName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyFantasyName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FantasyPlayer::InitAsDefaultInstance() {
}
class FantasyPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<FantasyPlayer>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FantasyPlayer::FantasyPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.FantasyPlayer)
}
FantasyPlayer::FantasyPlayer(const FantasyPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  bits_ = from.bits_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyPlayer)
}

void FantasyPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FantasyPlayer_ProtoData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bits_ = PROTOBUF_ULONGLONG(0);
}

FantasyPlayer::~FantasyPlayer() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FantasyPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FantasyPlayer::ArenaDtor(void* object) {
  FantasyPlayer* _this = reinterpret_cast< FantasyPlayer* >(object);
  (void)_this;
}
void FantasyPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FantasyPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FantasyPlayer& FantasyPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FantasyPlayer_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void FantasyPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  bits_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FantasyPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyPlayer.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bits = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_bits(&has_bits);
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FantasyPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyPlayer.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional uint64 bits = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_bits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyPlayer)
  return target;
}

size_t FantasyPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 bits = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bits());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FantasyPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FantasyPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyPlayer)
    MergeFrom(*source);
  }
}

void FantasyPlayer::MergeFrom(const FantasyPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      bits_ = from.bits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyPlayer::CopyFrom(const FantasyPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyPlayer::IsInitialized() const {
  return true;
}

void FantasyPlayer::InternalSwap(FantasyPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bits_, other->bits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FantasyPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Secret::InitAsDefaultInstance() {
  ::fantasybit::_Secret_default_instance_._instance.get_mutable()->myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(
      ::fantasybit::MyFantasyName::internal_default_instance());
  ::fantasybit::_Secret_default_instance_._instance.get_mutable()->nametran_ = const_cast< ::fantasybit::NameTrans*>(
      ::fantasybit::NameTrans::internal_default_instance());
}
class Secret::_Internal {
 public:
  using HasBits = decltype(std::declval<Secret>()._has_bits_);
  static void set_has_private_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::MyFantasyName& myfantasyname(const Secret* msg);
  static void set_has_myfantasyname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::NameTrans& nametran(const Secret* msg);
  static void set_has_nametran(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::fantasybit::MyFantasyName&
Secret::_Internal::myfantasyname(const Secret* msg) {
  return *msg->myfantasyname_;
}
const ::fantasybit::NameTrans&
Secret::_Internal::nametran(const Secret* msg) {
  return *msg->nametran_;
}
Secret::Secret(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Secret)
}
Secret::Secret(const Secret& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_key()) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_private_key(),
      GetArena());
  }
  if (from._internal_has_myfantasyname()) {
    myfantasyname_ = new ::fantasybit::MyFantasyName(*from.myfantasyname_);
  } else {
    myfantasyname_ = nullptr;
  }
  if (from._internal_has_nametran()) {
    nametran_ = new ::fantasybit::NameTrans(*from.nametran_);
  } else {
    nametran_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Secret)
}

void Secret::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Secret_ProtoData_2eproto.base);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&myfantasyname_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nametran_) -
      reinterpret_cast<char*>(&myfantasyname_)) + sizeof(nametran_));
}

Secret::~Secret() {
  // @@protoc_insertion_point(destructor:fantasybit.Secret)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Secret::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete myfantasyname_;
  if (this != internal_default_instance()) delete nametran_;
}

void Secret::ArenaDtor(void* object) {
  Secret* _this = reinterpret_cast< Secret* >(object);
  (void)_this;
}
void Secret::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Secret::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Secret& Secret::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Secret_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void Secret::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Secret)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      private_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(myfantasyname_ != nullptr);
      myfantasyname_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(nametran_ != nullptr);
      nametran_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Secret::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string private_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Secret.private_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_myfantasyname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.NameTrans nametran = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_nametran(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Secret::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Secret)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_key().data(), static_cast<int>(this->_internal_private_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret.private_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_key(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::myfantasyname(this), target, stream);
  }

  // optional .fantasybit.NameTrans nametran = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::nametran(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Secret)
  return target;
}

size_t Secret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Secret)
  size_t total_size = 0;

  // required string private_key = 1;
  if (_internal_has_private_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_private_key());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .fantasybit.MyFantasyName myfantasyname = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *myfantasyname_);
    }

    // optional .fantasybit.NameTrans nametran = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nametran_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Secret::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Secret)
  GOOGLE_DCHECK_NE(&from, this);
  const Secret* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Secret>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Secret)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Secret)
    MergeFrom(*source);
  }
}

void Secret::MergeFrom(const Secret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Secret)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_key(from._internal_private_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from._internal_myfantasyname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_nametran()->::fantasybit::NameTrans::MergeFrom(from._internal_nametran());
    }
  }
}

void Secret::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Secret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret::CopyFrom(const Secret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Secret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_nametran()) {
    if (!nametran_->IsInitialized()) return false;
  }
  return true;
}

void Secret::InternalSwap(Secret* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Secret, nametran_)
      + sizeof(Secret::nametran_)
      - PROTOBUF_FIELD_OFFSET(Secret, myfantasyname_)>(
          reinterpret_cast<char*>(&myfantasyname_),
          reinterpret_cast<char*>(&other->myfantasyname_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Secret::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Secret2::InitAsDefaultInstance() {
}
class Secret2::_Internal {
 public:
  using HasBits = decltype(std::declval<Secret2>()._has_bits_);
  static void set_has_private_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fantasy_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Secret2::Secret2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Secret2)
}
Secret2::Secret2(const Secret2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_key()) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_private_key(),
      GetArena());
  }
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasy_name()) {
    fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fantasy_name(),
      GetArena());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_key()) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Secret2)
}

void Secret2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Secret2_ProtoData_2eproto.base);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Secret2::~Secret2() {
  // @@protoc_insertion_point(destructor:fantasybit.Secret2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Secret2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Secret2::ArenaDtor(void* object) {
  Secret2* _this = reinterpret_cast< Secret2* >(object);
  (void)_this;
}
void Secret2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Secret2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Secret2& Secret2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Secret2_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void Secret2::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Secret2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      private_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      public_key_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Secret2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string private_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Secret2.private_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fantasy_name = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_fantasy_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Secret2.fantasy_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string public_key = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Secret2.public_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Secret2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Secret2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_key().data(), static_cast<int>(this->_internal_private_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.private_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_key(), target);
  }

  // optional string fantasy_name = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fantasy_name().data(), static_cast<int>(this->_internal_fantasy_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.fantasy_name");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_fantasy_name(), target);
  }

  // optional string public_key = 30;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.public_key");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Secret2)
  return target;
}

size_t Secret2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Secret2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string private_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_key());
    }

    // optional string fantasy_name = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fantasy_name());
    }

    // optional string public_key = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_public_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Secret2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Secret2)
  GOOGLE_DCHECK_NE(&from, this);
  const Secret2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Secret2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Secret2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Secret2)
    MergeFrom(*source);
  }
}

void Secret2::MergeFrom(const Secret2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Secret2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_key(from._internal_private_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_fantasy_name(from._internal_fantasy_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_public_key(from._internal_public_key());
    }
  }
}

void Secret2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Secret2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret2::CopyFrom(const Secret2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Secret2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret2::IsInitialized() const {
  return true;
}

void Secret2::InternalSwap(Secret2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fantasy_name_.Swap(&other->fantasy_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Secret2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Secret3::InitAsDefaultInstance() {
}
class Secret3::_Internal {
 public:
  using HasBits = decltype(std::declval<Secret3>()._has_bits_);
  static void set_has_private_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mnemonic_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fantasy_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Secret3::Secret3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Secret3)
}
Secret3::Secret3(const Secret3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_key()) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_private_key(),
      GetArena());
  }
  mnemonic_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mnemonic_key()) {
    mnemonic_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mnemonic_key(),
      GetArena());
  }
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasy_name()) {
    fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fantasy_name(),
      GetArena());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_key()) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Secret3)
}

void Secret3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Secret3_ProtoData_2eproto.base);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnemonic_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Secret3::~Secret3() {
  // @@protoc_insertion_point(destructor:fantasybit.Secret3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Secret3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnemonic_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Secret3::ArenaDtor(void* object) {
  Secret3* _this = reinterpret_cast< Secret3* >(object);
  (void)_this;
}
void Secret3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Secret3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Secret3& Secret3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Secret3_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void Secret3::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Secret3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      private_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mnemonic_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      fantasy_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      public_key_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Secret3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string private_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Secret3.private_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mnemonic_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mnemonic_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Secret3.mnemonic_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fantasy_name = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_fantasy_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Secret3.fantasy_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string public_key = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Secret3.public_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Secret3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Secret3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_key().data(), static_cast<int>(this->_internal_private_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.private_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_key(), target);
  }

  // optional string mnemonic_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mnemonic_key().data(), static_cast<int>(this->_internal_mnemonic_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.mnemonic_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mnemonic_key(), target);
  }

  // optional string fantasy_name = 20;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fantasy_name().data(), static_cast<int>(this->_internal_fantasy_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.fantasy_name");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_fantasy_name(), target);
  }

  // optional string public_key = 30;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.public_key");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Secret3)
  return target;
}

size_t Secret3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Secret3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string private_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_key());
    }

    // optional string mnemonic_key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mnemonic_key());
    }

    // optional string fantasy_name = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fantasy_name());
    }

    // optional string public_key = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_public_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Secret3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Secret3)
  GOOGLE_DCHECK_NE(&from, this);
  const Secret3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Secret3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Secret3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Secret3)
    MergeFrom(*source);
  }
}

void Secret3::MergeFrom(const Secret3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Secret3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_key(from._internal_private_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mnemonic_key(from._internal_mnemonic_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_fantasy_name(from._internal_fantasy_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_public_key(from._internal_public_key());
    }
  }
}

void Secret3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Secret3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret3::CopyFrom(const Secret3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Secret3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret3::IsInitialized() const {
  return true;
}

void Secret3::InternalSwap(Secret3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mnemonic_key_.Swap(&other->mnemonic_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fantasy_name_.Swap(&other->fantasy_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Secret3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutData::InitAsDefaultInstance() {
  ::fantasybit::_OutData_default_instance_._instance.get_mutable()->myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(
      ::fantasybit::MyFantasyName::internal_default_instance());
}
class OutData::_Internal {
 public:
  using HasBits = decltype(std::declval<OutData>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::MyFantasyName& myfantasyname(const OutData* msg);
  static void set_has_myfantasyname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::fantasybit::MyFantasyName&
OutData::_Internal::myfantasyname(const OutData* msg) {
  return *msg->myfantasyname_;
}
OutData::OutData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.OutData)
}
OutData::OutData(const OutData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_myfantasyname()) {
    myfantasyname_ = new ::fantasybit::MyFantasyName(*from.myfantasyname_);
  } else {
    myfantasyname_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.OutData)
}

void OutData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutData_ProtoData_2eproto.base);
  myfantasyname_ = nullptr;
  type_ = 1;
}

OutData::~OutData() {
  // @@protoc_insertion_point(destructor:fantasybit.OutData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete myfantasyname_;
}

void OutData::ArenaDtor(void* object) {
  OutData* _this = reinterpret_cast< OutData* >(object);
  (void)_this;
}
void OutData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutData& OutData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutData_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void OutData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.OutData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(myfantasyname_ != nullptr);
      myfantasyname_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .fantasybit.OutData.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::OutData_Type_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::OutData_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_myfantasyname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.OutData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .fantasybit.OutData.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::myfantasyname(this), target, stream);
  }

  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
      100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.OutData)
  return target;
}

size_t OutData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.OutData)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required .fantasybit.OutData.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *myfantasyname_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.OutData)
  GOOGLE_DCHECK_NE(&from, this);
  const OutData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.OutData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.OutData)
    MergeFrom(*source);
  }
}

void OutData::MergeFrom(const OutData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.OutData)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from._internal_myfantasyname());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OutData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.OutData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutData::CopyFrom(const OutData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.OutData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutData::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OutData::InternalSwap(OutData* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(myfantasyname_, other->myfantasyname_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InData::InitAsDefaultInstance() {
  ::fantasybit::_InData_default_instance_._instance.get_mutable()->data_trans_ = const_cast< ::fantasybit::DataTransition*>(
      ::fantasybit::DataTransition::internal_default_instance());
}
class InData::_Internal {
 public:
  using HasBits = decltype(std::declval<InData>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::fantasybit::DataTransition& data_trans(const InData* msg);
  static void set_has_data_trans(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::fantasybit::DataTransition&
InData::_Internal::data_trans(const InData* msg) {
  return *msg->data_trans_;
}
InData::InData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.InData)
}
InData::InData(const InData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data2()) {
    data2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data2(),
      GetArena());
  }
  if (from._internal_has_data_trans()) {
    data_trans_ = new ::fantasybit::DataTransition(*from.data_trans_);
  } else {
    data_trans_ = nullptr;
  }
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&num_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.InData)
}

void InData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InData_ProtoData_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_trans_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&data_trans_)) + sizeof(num_));
  type_ = 1;
}

InData::~InData() {
  // @@protoc_insertion_point(destructor:fantasybit.InData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_trans_;
}

void InData::ArenaDtor(void* object) {
  InData* _this = reinterpret_cast< InData* >(object);
  (void)_this;
}
void InData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InData& InData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InData_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void InData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.InData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_trans_ != nullptr);
      data_trans_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    num_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .fantasybit.InData.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::InData_Type_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::InData_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.InData.data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string data2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.InData.data2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.DataTransition data_trans = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_trans(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.InData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .fantasybit.InData.Type type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional string data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.InData.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  // optional string data2 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data2().data(), static_cast<int>(this->_internal_data2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.InData.data2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data2(), target);
  }

  // optional int32 num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num(), target);
  }

  // optional .fantasybit.DataTransition data_trans = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::data_trans(this), target, stream);
  }

  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
      100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.InData)
  return target;
}

size_t InData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.InData)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required .fantasybit.InData.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data());
    }

    // optional string data2 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data2());
    }

    // optional .fantasybit.DataTransition data_trans = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_trans_);
    }

    // optional int32 num = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.InData)
  GOOGLE_DCHECK_NE(&from, this);
  const InData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.InData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.InData)
    MergeFrom(*source);
  }
}

void InData::MergeFrom(const InData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.InData)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data2(from._internal_data2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data_trans()->::fantasybit::DataTransition::MergeFrom(from._internal_data_trans());
    }
    if (cached_has_bits & 0x00000008u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.InData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InData::CopyFrom(const InData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.InData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InData::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data_trans()) {
    if (!data_trans_->IsInitialized()) return false;
  }
  return true;
}

void InData::InternalSwap(InData* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data2_.Swap(&other->data2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InData, num_)
      + sizeof(InData::num_)
      - PROTOBUF_FIELD_OFFSET(InData, data_trans_)>(
          reinterpret_cast<char*>(&data_trans_),
          reinterpret_cast<char*>(&other->data_trans_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NameProof::InitAsDefaultInstance() {
}
class NameProof::_Internal {
 public:
  using HasBits = decltype(std::declval<NameProof>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NameProof::NameProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.NameProof)
}
NameProof::NameProof(const NameProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.NameProof)
}

void NameProof::SharedCtor() {
  type_ = 1;
}

NameProof::~NameProof() {
  // @@protoc_insertion_point(destructor:fantasybit.NameProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NameProof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NameProof::ArenaDtor(void* object) {
  NameProof* _this = reinterpret_cast< NameProof* >(object);
  (void)_this;
}
void NameProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NameProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NameProof& NameProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NameProof_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void NameProof::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.NameProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NameProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.NameProof.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::NameProof_Type_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::NameProof_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((1600u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NameProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NameProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.NameProof.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // Extension range [200, 536870912)
  target = _extensions_._InternalSerialize(
      200, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NameProof)
  return target;
}

size_t NameProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.NameProof)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .fantasybit.NameProof.Type type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NameProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.NameProof)
  GOOGLE_DCHECK_NE(&from, this);
  const NameProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NameProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.NameProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.NameProof)
    MergeFrom(*source);
  }
}

void NameProof::MergeFrom(const NameProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.NameProof)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void NameProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.NameProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameProof::CopyFrom(const NameProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.NameProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameProof::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void NameProof::InternalSwap(NameProof* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NameProof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TweetProof::InitAsDefaultInstance() {
}
class TweetProof::_Internal {
 public:
  using HasBits = decltype(std::declval<TweetProof>()._has_bits_);
  static void set_has_tweet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TweetProof::TweetProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.TweetProof)
}
TweetProof::TweetProof(const TweetProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tweet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tweet()) {
    tweet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tweet(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.TweetProof)
}

void TweetProof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TweetProof_ProtoData_2eproto.base);
  tweet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TweetProof::~TweetProof() {
  // @@protoc_insertion_point(destructor:fantasybit.TweetProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TweetProof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tweet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TweetProof::ArenaDtor(void* object) {
  TweetProof* _this = reinterpret_cast< TweetProof* >(object);
  (void)_this;
}
void TweetProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TweetProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TweetProof& TweetProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TweetProof_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void TweetProof::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TweetProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tweet_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TweetProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string tweet = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_tweet();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TweetProof.tweet");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TweetProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TweetProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tweet = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tweet().data(), static_cast<int>(this->_internal_tweet().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TweetProof.tweet");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_tweet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TweetProof)
  return target;
}

size_t TweetProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TweetProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tweet = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tweet());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TweetProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TweetProof)
  GOOGLE_DCHECK_NE(&from, this);
  const TweetProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TweetProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TweetProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TweetProof)
    MergeFrom(*source);
  }
}

void TweetProof::MergeFrom(const TweetProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TweetProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tweet()) {
    _internal_set_tweet(from._internal_tweet());
  }
}

void TweetProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TweetProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetProof::CopyFrom(const TweetProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TweetProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetProof::IsInitialized() const {
  return true;
}

void TweetProof::InternalSwap(TweetProof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tweet_.Swap(&other->tweet_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TweetProof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MasterProof::InitAsDefaultInstance() {
  ::fantasybit::_MasterProof_default_instance_._instance.get_mutable()->new_oracle_name_ = const_cast< ::fantasybit::SignedTransaction*>(
      ::fantasybit::SignedTransaction::internal_default_instance());
}
class MasterProof::_Internal {
 public:
  using HasBits = decltype(std::declval<MasterProof>()._has_bits_);
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::fantasybit::SignedTransaction& new_oracle_name(const MasterProof* msg);
  static void set_has_new_oracle_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::SignedTransaction&
MasterProof::_Internal::new_oracle_name(const MasterProof* msg) {
  return *msg->new_oracle_name_;
}
MasterProof::MasterProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.MasterProof)
}
MasterProof::MasterProof(const MasterProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  season_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_season()) {
    season_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_season(),
      GetArena());
  }
  if (from._internal_has_new_oracle_name()) {
    new_oracle_name_ = new ::fantasybit::SignedTransaction(*from.new_oracle_name_);
  } else {
    new_oracle_name_ = nullptr;
  }
  ::memcpy(&week_, &from.week_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&week_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.MasterProof)
}

void MasterProof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MasterProof_ProtoData_2eproto.base);
  season_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&new_oracle_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&new_oracle_name_)) + sizeof(timestamp_));
}

MasterProof::~MasterProof() {
  // @@protoc_insertion_point(destructor:fantasybit.MasterProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MasterProof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  season_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete new_oracle_name_;
}

void MasterProof::ArenaDtor(void* object) {
  MasterProof* _this = reinterpret_cast< MasterProof* >(object);
  (void)_this;
}
void MasterProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MasterProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MasterProof& MasterProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MasterProof_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void MasterProof::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MasterProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      season_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_oracle_name_ != nullptr);
      new_oracle_name_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&week_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&week_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MasterProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string season = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_season();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.MasterProof.season");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 week = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 timestamp = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.SignedTransaction new_oracle_name = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_oracle_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MasterProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MasterProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string season = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_season().data(), static_cast<int>(this->_internal_season().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.MasterProof.season");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_season(), target);
  }

  // optional int32 week = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_week(), target);
  }

  // optional int32 timestamp = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_timestamp(), target);
  }

  // optional .fantasybit.SignedTransaction new_oracle_name = 66;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        66, _Internal::new_oracle_name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MasterProof)
  return target;
}

size_t MasterProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MasterProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string season = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_season());
    }

    // optional .fantasybit.SignedTransaction new_oracle_name = 66;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_oracle_name_);
    }

    // optional int32 week = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_week());
    }

    // optional int32 timestamp = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MasterProof)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MasterProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MasterProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MasterProof)
    MergeFrom(*source);
  }
}

void MasterProof::MergeFrom(const MasterProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MasterProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_season(from._internal_season());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_oracle_name()->::fantasybit::SignedTransaction::MergeFrom(from._internal_new_oracle_name());
    }
    if (cached_has_bits & 0x00000004u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MasterProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MasterProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterProof::CopyFrom(const MasterProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MasterProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterProof::IsInitialized() const {
  if (_internal_has_new_oracle_name()) {
    if (!new_oracle_name_->IsInitialized()) return false;
  }
  return true;
}

void MasterProof::InternalSwap(MasterProof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  season_.Swap(&other->season_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MasterProof, timestamp_)
      + sizeof(MasterProof::timestamp_)
      - PROTOBUF_FIELD_OFFSET(MasterProof, new_oracle_name_)>(
          reinterpret_cast<char*>(&new_oracle_name_),
          reinterpret_cast<char*>(&other->new_oracle_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterProof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
}
class Transaction::_Internal {
 public:
  using HasBits = decltype(std::declval<Transaction>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Transaction)
}

void Transaction::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:fantasybit.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nonce_) -
        reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.TransType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::TransType_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::TransType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 nonce = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_nonce(&has_bits);
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // optional .fantasybit.TransType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional uint64 nonce = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_nonce(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
      100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Transaction)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

    // optional .fantasybit.TransType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint64 nonce = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_nonce());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      nonce_ = from.nonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction, nonce_)
      + sizeof(Transaction::nonce_)
      - PROTOBUF_FIELD_OFFSET(Transaction, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NameTrans::InitAsDefaultInstance() {
  ::fantasybit::_NameTrans_default_instance_._instance.get_mutable()->proof_ = const_cast< ::fantasybit::NameProof*>(
      ::fantasybit::NameProof::internal_default_instance());
}
class NameTrans::_Internal {
 public:
  using HasBits = decltype(std::declval<NameTrans>()._has_bits_);
  static void set_has_fantasy_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::NameProof& proof(const NameTrans* msg);
  static void set_has_proof(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_recovery_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_am_agent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_my_agent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::fantasybit::NameProof&
NameTrans::_Internal::proof(const NameTrans* msg) {
  return *msg->proof_;
}
NameTrans::NameTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.NameTrans)
}
NameTrans::NameTrans(const NameTrans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasy_name()) {
    fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fantasy_name(),
      GetArena());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_key()) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_key(),
      GetArena());
  }
  recovery_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recovery_key()) {
    recovery_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recovery_key(),
      GetArena());
  }
  my_agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_my_agent()) {
    my_agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_my_agent(),
      GetArena());
  }
  if (from._internal_has_proof()) {
    proof_ = new ::fantasybit::NameProof(*from.proof_);
  } else {
    proof_ = nullptr;
  }
  am_agent_ = from.am_agent_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.NameTrans)
}

void NameTrans::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NameTrans_ProtoData_2eproto.base);
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recovery_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  my_agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&am_agent_) -
      reinterpret_cast<char*>(&proof_)) + sizeof(am_agent_));
}

NameTrans::~NameTrans() {
  // @@protoc_insertion_point(destructor:fantasybit.NameTrans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NameTrans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fantasy_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recovery_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  my_agent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proof_;
}

void NameTrans::ArenaDtor(void* object) {
  NameTrans* _this = reinterpret_cast< NameTrans* >(object);
  (void)_this;
}
void NameTrans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NameTrans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NameTrans& NameTrans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NameTrans_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void NameTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.NameTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      public_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      recovery_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      my_agent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(proof_ != nullptr);
      proof_->Clear();
    }
  }
  am_agent_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NameTrans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string fantasy_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_fantasy_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.NameTrans.fantasy_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes public_key = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.NameProof proof = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes recovery_key = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_recovery_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool am_agent = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_am_agent(&has_bits);
          am_agent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string my_agent = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_my_agent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.NameTrans.my_agent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NameTrans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NameTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string fantasy_name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fantasy_name().data(), static_cast<int>(this->_internal_fantasy_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.NameTrans.fantasy_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_fantasy_name(), target);
  }

  // optional bytes public_key = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_public_key(), target);
  }

  // optional .fantasybit.NameProof proof = 30;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::proof(this), target, stream);
  }

  // optional bytes recovery_key = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_recovery_key(), target);
  }

  // optional bool am_agent = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_am_agent(), target);
  }

  // optional string my_agent = 60;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_my_agent().data(), static_cast<int>(this->_internal_my_agent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.NameTrans.my_agent");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_my_agent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NameTrans)
  return target;
}

size_t NameTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.NameTrans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string fantasy_name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fantasy_name());
    }

    // optional bytes public_key = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_key());
    }

    // optional bytes recovery_key = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_recovery_key());
    }

    // optional string my_agent = 60;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_my_agent());
    }

    // optional .fantasybit.NameProof proof = 30;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proof_);
    }

    // optional bool am_agent = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NameTrans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.NameTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const NameTrans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NameTrans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.NameTrans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.NameTrans)
    MergeFrom(*source);
  }
}

void NameTrans::MergeFrom(const NameTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.NameTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fantasy_name(from._internal_fantasy_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_public_key(from._internal_public_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_recovery_key(from._internal_recovery_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_my_agent(from._internal_my_agent());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_proof()->::fantasybit::NameProof::MergeFrom(from._internal_proof());
    }
    if (cached_has_bits & 0x00000020u) {
      am_agent_ = from.am_agent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NameTrans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.NameTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameTrans::CopyFrom(const NameTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.NameTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameTrans::IsInitialized() const {
  if (_internal_has_proof()) {
    if (!proof_->IsInitialized()) return false;
  }
  return true;
}

void NameTrans::InternalSwap(NameTrans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fantasy_name_.Swap(&other->fantasy_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recovery_key_.Swap(&other->recovery_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  my_agent_.Swap(&other->my_agent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NameTrans, am_agent_)
      + sizeof(NameTrans::am_agent_)
      - PROTOBUF_FIELD_OFFSET(NameTrans, proof_)>(
          reinterpret_cast<char*>(&proof_),
          reinterpret_cast<char*>(&other->proof_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NameTrans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferTrans::InitAsDefaultInstance() {
}
class TransferTrans::_Internal {
 public:
  using HasBits = decltype(std::declval<TransferTrans>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TransferTrans::TransferTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.TransferTrans)
}
TransferTrans::TransferTrans(const TransferTrans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from()) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from(),
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to()) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.TransferTrans)
}

void TransferTrans::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferTrans_ProtoData_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
}

TransferTrans::~TransferTrans() {
  // @@protoc_insertion_point(destructor:fantasybit.TransferTrans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferTrans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferTrans::ArenaDtor(void* object) {
  TransferTrans* _this = reinterpret_cast< TransferTrans* >(object);
  (void)_this;
}
void TransferTrans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferTrans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferTrans& TransferTrans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferTrans_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void TransferTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TransferTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      from_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_.ClearNonDefaultToEmpty();
    }
  }
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferTrans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string from = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TransferTrans.from");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TransferTrans.to");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 amount = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferTrans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TransferTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TransferTrans.from");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_from(), target);
  }

  // optional string to = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TransferTrans.to");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_to(), target);
  }

  // optional uint64 amount = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TransferTrans)
  return target;
}

size_t TransferTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TransferTrans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string from = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from());
    }

    // optional string to = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to());
    }

    // optional uint64 amount = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferTrans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TransferTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferTrans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferTrans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TransferTrans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TransferTrans)
    MergeFrom(*source);
  }
}

void TransferTrans::MergeFrom(const TransferTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TransferTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from(from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to(from._internal_to());
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransferTrans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TransferTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferTrans::CopyFrom(const TransferTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TransferTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferTrans::IsInitialized() const {
  return true;
}

void TransferTrans::InternalSwap(TransferTrans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferTrans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignedTransaction::InitAsDefaultInstance() {
  ::fantasybit::_SignedTransaction_default_instance_._instance.get_mutable()->trans_ = const_cast< ::fantasybit::Transaction*>(
      ::fantasybit::Transaction::internal_default_instance());
}
class SignedTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<SignedTransaction>()._has_bits_);
  static const ::fantasybit::Transaction& trans(const SignedTransaction* msg);
  static void set_has_trans(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sig(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fantasy_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::fantasybit::Transaction&
SignedTransaction::_Internal::trans(const SignedTransaction* msg) {
  return *msg->trans_;
}
SignedTransaction::SignedTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.SignedTransaction)
}
SignedTransaction::SignedTransaction(const SignedTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sig()) {
    sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sig(),
      GetArena());
  }
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasy_name()) {
    fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fantasy_name(),
      GetArena());
  }
  if (from._internal_has_trans()) {
    trans_ = new ::fantasybit::Transaction(*from.trans_);
  } else {
    trans_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.SignedTransaction)
}

void SignedTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignedTransaction_ProtoData_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_ = nullptr;
}

SignedTransaction::~SignedTransaction() {
  // @@protoc_insertion_point(destructor:fantasybit.SignedTransaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignedTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trans_;
}

void SignedTransaction::ArenaDtor(void* object) {
  SignedTransaction* _this = reinterpret_cast< SignedTransaction* >(object);
  (void)_this;
}
void SignedTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignedTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignedTransaction& SignedTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignedTransaction_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void SignedTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SignedTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sig_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      fantasy_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(trans_ != nullptr);
      trans_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.Transaction trans = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sig = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fantasy_name = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_fantasy_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.SignedTransaction.fantasy_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignedTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SignedTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.Transaction trans = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::trans(this), target, stream);
  }

  // optional bytes id = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_id(), target);
  }

  // optional bytes sig = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_sig(), target);
  }

  // optional string fantasy_name = 40;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fantasy_name().data(), static_cast<int>(this->_internal_fantasy_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.SignedTransaction.fantasy_name");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_fantasy_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SignedTransaction)
  return target;
}

size_t SignedTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SignedTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes id = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional bytes sig = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sig());
    }

    // optional string fantasy_name = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fantasy_name());
    }

    // optional .fantasybit.Transaction trans = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trans_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SignedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignedTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SignedTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SignedTransaction)
    MergeFrom(*source);
  }
}

void SignedTransaction::MergeFrom(const SignedTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SignedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sig(from._internal_sig());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_fantasy_name(from._internal_fantasy_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_trans()->::fantasybit::Transaction::MergeFrom(from._internal_trans());
    }
  }
}

void SignedTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SignedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedTransaction::CopyFrom(const SignedTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SignedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedTransaction::IsInitialized() const {
  if (_internal_has_trans()) {
    if (!trans_->IsInitialized()) return false;
  }
  return true;
}

void SignedTransaction::InternalSwap(SignedTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sig_.Swap(&other->sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fantasy_name_.Swap(&other->fantasy_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(trans_, other->trans_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockHeader::InitAsDefaultInstance() {
}
class BlockHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockHeader>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prev_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_generator_pk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_generating_sig(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_basetarget(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_blocktype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BlockHeader::BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prev_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev_id()) {
    prev_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev_id(),
      GetArena());
  }
  generator_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_generator_pk()) {
    generator_pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_generator_pk(),
      GetArena());
  }
  generating_sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_generating_sig()) {
    generating_sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_generating_sig(),
      GetArena());
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transaction_id()) {
    transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transaction_id(),
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocktype_) -
    reinterpret_cast<char*>(&version_)) + sizeof(blocktype_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.BlockHeader)
}

void BlockHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockHeader_ProtoData_2eproto.base);
  prev_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generator_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generating_sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basetarget_) -
      reinterpret_cast<char*>(&version_)) + sizeof(basetarget_));
  blocktype_ = 1;
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:fantasybit.BlockHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prev_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generator_pk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generating_sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockHeader::ArenaDtor(void* object) {
  BlockHeader* _this = reinterpret_cast< BlockHeader* >(object);
  (void)_this;
}
void BlockHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockHeader& BlockHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockHeader_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      prev_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      generator_pk_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      generating_sig_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      transaction_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&basetarget_) -
        reinterpret_cast<char*>(&version_)) + sizeof(basetarget_));
  }
  blocktype_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_prev_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 timestamp = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes generator_pk = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_generator_pk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes generating_sig = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_generating_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 basetarget = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_basetarget(&has_bits);
          basetarget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.BlockHeader.Type blocktype = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::BlockHeader_Type_IsValid(val))) {
            _internal_set_blocktype(static_cast<::fantasybit::BlockHeader_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(60, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes transaction_id = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // optional int32 num = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_num(), target);
  }

  // optional bytes prev_id = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_prev_id(), target);
  }

  // optional int32 timestamp = 21;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_timestamp(), target);
  }

  // optional bytes generator_pk = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_generator_pk(), target);
  }

  // optional bytes generating_sig = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_generating_sig(), target);
  }

  // optional uint64 basetarget = 50;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(50, this->_internal_basetarget(), target);
  }

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      60, this->_internal_blocktype(), target);
  }

  // optional bytes transaction_id = 70;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_transaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.BlockHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes prev_id = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev_id());
    }

    // optional bytes generator_pk = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_generator_pk());
    }

    // optional bytes generating_sig = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_generating_sig());
    }

    // optional bytes transaction_id = 70;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_transaction_id());
    }

    // optional int32 version = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

    // optional int32 num = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num());
    }

    // optional int32 timestamp = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_timestamp());
    }

    // optional uint64 basetarget = 50;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_basetarget());
    }

  }
  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blocktype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.BlockHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_prev_id(from._internal_prev_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_generator_pk(from._internal_generator_pk());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_generating_sig(from._internal_generating_sig());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_transaction_id(from._internal_transaction_id());
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      basetarget_ = from.basetarget_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_blocktype(from._internal_blocktype());
  }
}

void BlockHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  return true;
}

void BlockHeader::InternalSwap(BlockHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prev_id_.Swap(&other->prev_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  generator_pk_.Swap(&other->generator_pk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  generating_sig_.Swap(&other->generating_sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockHeader, basetarget_)
      + sizeof(BlockHeader::basetarget_)
      - PROTOBUF_FIELD_OFFSET(BlockHeader, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
  swap(blocktype_, other->blocktype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignedBlockHeader::InitAsDefaultInstance() {
  ::fantasybit::_SignedBlockHeader_default_instance_._instance.get_mutable()->head_ = const_cast< ::fantasybit::BlockHeader*>(
      ::fantasybit::BlockHeader::internal_default_instance());
}
class SignedBlockHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<SignedBlockHeader>()._has_bits_);
  static const ::fantasybit::BlockHeader& head(const SignedBlockHeader* msg);
  static void set_has_head(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sig(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::BlockHeader&
SignedBlockHeader::_Internal::head(const SignedBlockHeader* msg) {
  return *msg->head_;
}
SignedBlockHeader::SignedBlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.SignedBlockHeader)
}
SignedBlockHeader::SignedBlockHeader(const SignedBlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sig()) {
    sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sig(),
      GetArena());
  }
  if (from._internal_has_head()) {
    head_ = new ::fantasybit::BlockHeader(*from.head_);
  } else {
    head_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.SignedBlockHeader)
}

void SignedBlockHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignedBlockHeader_ProtoData_2eproto.base);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_ = nullptr;
}

SignedBlockHeader::~SignedBlockHeader() {
  // @@protoc_insertion_point(destructor:fantasybit.SignedBlockHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignedBlockHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete head_;
}

void SignedBlockHeader::ArenaDtor(void* object) {
  SignedBlockHeader* _this = reinterpret_cast< SignedBlockHeader* >(object);
  (void)_this;
}
void SignedBlockHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignedBlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignedBlockHeader& SignedBlockHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignedBlockHeader_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void SignedBlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SignedBlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sig_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(head_ != nullptr);
      head_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedBlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.BlockHeader head = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sig = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.SignedBlockHeader.sig");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignedBlockHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SignedBlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.BlockHeader head = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::head(this), target, stream);
  }

  // optional string sig = 30;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sig().data(), static_cast<int>(this->_internal_sig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.SignedBlockHeader.sig");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_sig(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SignedBlockHeader)
  return target;
}

size_t SignedBlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SignedBlockHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string sig = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sig());
    }

    // optional .fantasybit.BlockHeader head = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *head_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedBlockHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SignedBlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedBlockHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignedBlockHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SignedBlockHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SignedBlockHeader)
    MergeFrom(*source);
  }
}

void SignedBlockHeader::MergeFrom(const SignedBlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SignedBlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sig(from._internal_sig());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_head()->::fantasybit::BlockHeader::MergeFrom(from._internal_head());
    }
  }
}

void SignedBlockHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SignedBlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedBlockHeader::CopyFrom(const SignedBlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SignedBlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedBlockHeader::IsInitialized() const {
  return true;
}

void SignedBlockHeader::InternalSwap(SignedBlockHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sig_.Swap(&other->sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(head_, other->head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedBlockHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Block::InitAsDefaultInstance() {
  ::fantasybit::_Block_default_instance_._instance.get_mutable()->signedhead_ = const_cast< ::fantasybit::SignedBlockHeader*>(
      ::fantasybit::SignedBlockHeader::internal_default_instance());
}
class Block::_Internal {
 public:
  using HasBits = decltype(std::declval<Block>()._has_bits_);
  static const ::fantasybit::SignedBlockHeader& signedhead(const Block* msg);
  static void set_has_signedhead(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::SignedBlockHeader&
Block::_Internal::signedhead(const Block* msg) {
  return *msg->signedhead_;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  signed_transactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      signed_transactions_(from.signed_transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_signedhead()) {
    signedhead_ = new ::fantasybit::SignedBlockHeader(*from.signedhead_);
  } else {
    signedhead_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Block)
}

void Block::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Block_ProtoData_2eproto.base);
  signedhead_ = nullptr;
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:fantasybit.Block)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete signedhead_;
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Block_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  signed_transactions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signedhead_ != nullptr);
    signedhead_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.SignedBlockHeader signedhead = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_signedhead(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.SignedTransaction signed_transactions = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_signed_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::signedhead(this), target, stream);
  }

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signed_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_signed_transactions(i), target, stream);
  }

  // Extension range [1000, 536870912)
  target = _extensions_._InternalSerialize(
      1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Block)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  total_size += 2UL * this->_internal_signed_transactions_size();
  for (const auto& msg : this->signed_transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signedhead_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signed_transactions_.MergeFrom(from.signed_transactions_);
  if (from._internal_has_signedhead()) {
    _internal_mutable_signedhead()->::fantasybit::SignedBlockHeader::MergeFrom(from._internal_signedhead());
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(signed_transactions_)) return false;
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signed_transactions_.InternalSwap(&other->signed_transactions_);
  swap(signedhead_, other->signedhead_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeRequest::InitAsDefaultInstance() {
}
class NodeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<NodeRequest>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_myip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_myhost(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NodeRequest::NodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.NodeRequest)
}
NodeRequest::NodeRequest(const NodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  myip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_myip()) {
    myip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_myip(),
      GetArena());
  }
  myhost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_myhost()) {
    myhost_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_myhost(),
      GetArena());
  }
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&num_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.NodeRequest)
}

void NodeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeRequest_ProtoData_2eproto.base);
  myip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  myhost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
  type_ = 1;
}

NodeRequest::~NodeRequest() {
  // @@protoc_insertion_point(destructor:fantasybit.NodeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  myip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  myhost_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeRequest::ArenaDtor(void* object) {
  NodeRequest* _this = reinterpret_cast< NodeRequest* >(object);
  (void)_this;
}
void NodeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeRequest& NodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeRequest_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void NodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.NodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      myip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      myhost_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    num_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.NodeRequest.Type type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::NodeRequest_Type_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::NodeRequest_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string myip = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_myip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.NodeRequest.myip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string myhost = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_myhost();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.NodeRequest.myhost");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.NodeRequest.Type type = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // optional string myip = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_myip().data(), static_cast<int>(this->_internal_myip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeRequest.myip");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_myip(), target);
  }

  // optional int32 num = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_num(), target);
  }

  // optional string myhost = 40;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_myhost().data(), static_cast<int>(this->_internal_myhost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeRequest.myhost");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_myhost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NodeRequest)
  return target;
}

size_t NodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.NodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string myip = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_myip());
    }

    // optional string myhost = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_myhost());
    }

    // optional int32 num = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num());
    }

    // optional .fantasybit.NodeRequest.Type type = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.NodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.NodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.NodeRequest)
    MergeFrom(*source);
  }
}

void NodeRequest::MergeFrom(const NodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.NodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_myip(from._internal_myip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_myhost(from._internal_myhost());
    }
    if (cached_has_bits & 0x00000004u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.NodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRequest::CopyFrom(const NodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.NodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRequest::IsInitialized() const {
  return true;
}

void NodeRequest::InternalSwap(NodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  myip_.Swap(&other->myip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  myhost_.Swap(&other->myhost_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(num_, other->num_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeReply::InitAsDefaultInstance() {
}
class NodeReply::_Internal {
 public:
  using HasBits = decltype(std::declval<NodeReply>()._has_bits_);
  static void set_has_hight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NodeReply::NodeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.NodeReply)
}
NodeReply::NodeReply(const NodeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ips_(from.ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hight_ = from.hight_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.NodeReply)
}

void NodeReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeReply_ProtoData_2eproto.base);
  hight_ = 0;
}

NodeReply::~NodeReply() {
  // @@protoc_insertion_point(destructor:fantasybit.NodeReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeReply::ArenaDtor(void* object) {
  NodeReply* _this = reinterpret_cast< NodeReply* >(object);
  (void)_this;
}
void NodeReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeReply& NodeReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeReply_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void NodeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.NodeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ips_.Clear();
  hight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 hight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_hight(&has_bits);
          hight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ips = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_ips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.NodeReply.ips");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NodeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hight = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_hight(), target);
  }

  // repeated string ips = 20;
  for (int i = 0, n = this->_internal_ips_size(); i < n; i++) {
    const auto& s = this->_internal_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeReply.ips");
    target = stream->WriteString(20, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NodeReply)
  return target;
}

size_t NodeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.NodeReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ips = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ips_.size());
  for (int i = 0, n = ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ips_.Get(i));
  }

  // optional int32 hight = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.NodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.NodeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.NodeReply)
    MergeFrom(*source);
  }
}

void NodeReply::MergeFrom(const NodeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.NodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ips_.MergeFrom(from.ips_);
  if (from._internal_has_hight()) {
    _internal_set_hight(from._internal_hight());
  }
}

void NodeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.NodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeReply::CopyFrom(const NodeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.NodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeReply::IsInitialized() const {
  return true;
}

void NodeReply::InternalSwap(NodeReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ips_.InternalSwap(&other->ips_);
  swap(hight_, other->hight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FantasyPlayerPoints::InitAsDefaultInstance() {
}
class FantasyPlayerPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<FantasyPlayerPoints>()._has_bits_);
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

FantasyPlayerPoints::FantasyPlayerPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.FantasyPlayerPoints)
}
FantasyPlayerPoints::FantasyPlayerPoints(const FantasyPlayerPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&season_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyPlayerPoints)
}

void FantasyPlayerPoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FantasyPlayerPoints_ProtoData_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&season_)) + sizeof(result_));
}

FantasyPlayerPoints::~FantasyPlayerPoints() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyPlayerPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FantasyPlayerPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FantasyPlayerPoints::ArenaDtor(void* object) {
  FantasyPlayerPoints* _this = reinterpret_cast< FantasyPlayerPoints* >(object);
  (void)_this;
}
void FantasyPlayerPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FantasyPlayerPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FantasyPlayerPoints& FantasyPlayerPoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FantasyPlayerPoints_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void FantasyPlayerPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyPlayerPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playerid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&season_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FantasyPlayerPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 season = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 week = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyPlayerPoints.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 points = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_points(&has_bits);
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float result = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FantasyPlayerPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyPlayerPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_season(), target);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_week(), target);
  }

  // optional string playerid = 30;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyPlayerPoints.playerid");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_playerid(), target);
  }

  // optional int32 points = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_points(), target);
  }

  // optional float result = 50;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(50, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyPlayerPoints)
  return target;
}

size_t FantasyPlayerPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyPlayerPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string playerid = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional uint32 season = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season());
    }

    // optional uint32 week = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

    // optional int32 points = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_points());
    }

    // optional float result = 50;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FantasyPlayerPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyPlayerPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyPlayerPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FantasyPlayerPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyPlayerPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyPlayerPoints)
    MergeFrom(*source);
  }
}

void FantasyPlayerPoints::MergeFrom(const FantasyPlayerPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyPlayerPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000004u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000008u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000010u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyPlayerPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyPlayerPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyPlayerPoints::CopyFrom(const FantasyPlayerPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyPlayerPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyPlayerPoints::IsInitialized() const {
  return true;
}

void FantasyPlayerPoints::InternalSwap(FantasyPlayerPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FantasyPlayerPoints, result_)
      + sizeof(FantasyPlayerPoints::result_)
      - PROTOBUF_FIELD_OFFSET(FantasyPlayerPoints, season_)>(
          reinterpret_cast<char*>(&season_),
          reinterpret_cast<char*>(&other->season_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FantasyPlayerPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectionTrans::InitAsDefaultInstance() {
}
class ProjectionTrans::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjectionTrans>()._has_bits_);
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProjectionTrans::ProjectionTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ProjectionTrans)
}
ProjectionTrans::ProjectionTrans(const ProjectionTrans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  ::memcpy(&points_, &from.points_,
    static_cast<size_t>(reinterpret_cast<char*>(&week_) -
    reinterpret_cast<char*>(&points_)) + sizeof(week_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjectionTrans)
}

void ProjectionTrans::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectionTrans_ProtoData_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&points_)) + sizeof(week_));
}

ProjectionTrans::~ProjectionTrans() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjectionTrans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjectionTrans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProjectionTrans::ArenaDtor(void* object) {
  ProjectionTrans* _this = reinterpret_cast< ProjectionTrans* >(object);
  (void)_this;
}
void ProjectionTrans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectionTrans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectionTrans& ProjectionTrans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectionTrans_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void ProjectionTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjectionTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playerid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&points_)) + sizeof(week_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectionTrans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 season = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 week = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.ProjectionTrans.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 points = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_points(&has_bits);
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectionTrans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjectionTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_season(), target);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_week(), target);
  }

  // optional string playerid = 30;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.ProjectionTrans.playerid");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_playerid(), target);
  }

  // optional int32 points = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjectionTrans)
  return target;
}

size_t ProjectionTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjectionTrans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string playerid = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional int32 points = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_points());
    }

    // optional uint32 season = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season());
    }

    // optional uint32 week = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectionTrans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjectionTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectionTrans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectionTrans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjectionTrans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjectionTrans)
    MergeFrom(*source);
  }
}

void ProjectionTrans::MergeFrom(const ProjectionTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjectionTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000004u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000008u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjectionTrans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjectionTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionTrans::CopyFrom(const ProjectionTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjectionTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionTrans::IsInitialized() const {
  return true;
}

void ProjectionTrans::InternalSwap(ProjectionTrans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectionTrans, week_)
      + sizeof(ProjectionTrans::week_)
      - PROTOBUF_FIELD_OFFSET(ProjectionTrans, points_)>(
          reinterpret_cast<char*>(&points_),
          reinterpret_cast<char*>(&other->points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectionTrans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerPoints::InitAsDefaultInstance() {
}
class PlayerPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerPoints>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlayerPoints::PlayerPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PlayerPoints)
}
PlayerPoints::PlayerPoints(const PlayerPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  points_ = from.points_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerPoints)
}

void PlayerPoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerPoints_ProtoData_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  points_ = 0;
}

PlayerPoints::~PlayerPoints() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerPoints::ArenaDtor(void* object) {
  PlayerPoints* _this = reinterpret_cast< PlayerPoints* >(object);
  (void)_this;
}
void PlayerPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerPoints& PlayerPoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerPoints_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void PlayerPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playerid_.ClearNonDefaultToEmpty();
  }
  points_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string playerid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerPoints.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 points = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_points(&has_bits);
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 30;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerPoints.playerid");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_playerid(), target);
  }

  // optional int32 points = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerPoints)
  return target;
}

size_t PlayerPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string playerid = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional int32 points = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_points());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerPoints)
    MergeFrom(*source);
  }
}

void PlayerPoints::MergeFrom(const PlayerPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      points_ = from.points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPoints::CopyFrom(const PlayerPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPoints::IsInitialized() const {
  return true;
}

void PlayerPoints::InternalSwap(PlayerPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(points_, other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectionTransBlock::InitAsDefaultInstance() {
}
class ProjectionTransBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjectionTransBlock>()._has_bits_);
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProjectionTransBlock::ProjectionTransBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ProjectionTransBlock)
}
ProjectionTransBlock::ProjectionTransBlock(const ProjectionTransBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_points_(from.player_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&week_) -
    reinterpret_cast<char*>(&season_)) + sizeof(week_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjectionTransBlock)
}

void ProjectionTransBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectionTransBlock_ProtoData_2eproto.base);
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&season_)) + sizeof(week_));
}

ProjectionTransBlock::~ProjectionTransBlock() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjectionTransBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjectionTransBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProjectionTransBlock::ArenaDtor(void* object) {
  ProjectionTransBlock* _this = reinterpret_cast< ProjectionTransBlock* >(object);
  (void)_this;
}
void ProjectionTransBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectionTransBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectionTransBlock& ProjectionTransBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectionTransBlock_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void ProjectionTransBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjectionTransBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&season_)) + sizeof(week_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectionTransBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 season = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 week = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.PlayerPoints player_points = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_player_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectionTransBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjectionTransBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_season(), target);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_week(), target);
  }

  // repeated .fantasybit.PlayerPoints player_points = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_player_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjectionTransBlock)
  return target;
}

size_t ProjectionTransBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjectionTransBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.PlayerPoints player_points = 30;
  total_size += 2UL * this->_internal_player_points_size();
  for (const auto& msg : this->player_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 season = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season());
    }

    // optional uint32 week = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectionTransBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjectionTransBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectionTransBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectionTransBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjectionTransBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjectionTransBlock)
    MergeFrom(*source);
  }
}

void ProjectionTransBlock::MergeFrom(const ProjectionTransBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjectionTransBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_points_.MergeFrom(from.player_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000002u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjectionTransBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjectionTransBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionTransBlock::CopyFrom(const ProjectionTransBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjectionTransBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionTransBlock::IsInitialized() const {
  return true;
}

void ProjectionTransBlock::InternalSwap(ProjectionTransBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_points_.InternalSwap(&other->player_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectionTransBlock, week_)
      + sizeof(ProjectionTransBlock::week_)
      - PROTOBUF_FIELD_OFFSET(ProjectionTransBlock, season_)>(
          reinterpret_cast<char*>(&season_),
          reinterpret_cast<char*>(&other->season_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectionTransBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Data::InitAsDefaultInstance() {
}
class Data::_Internal {
 public:
  using HasBits = decltype(std::declval<Data>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Data)
}

void Data::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&version_)) + sizeof(type_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:fantasybit.Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Data::ArenaDtor(void* object) {
  Data* _this = reinterpret_cast< Data* >(object);
  (void)_this;
}
void Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Data& Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Data_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&version_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.Data.Type type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::Data_Type_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::Data_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_version(), target);
  }

  // optional .fantasybit.Data.Type type = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_type(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
      100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Data)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 version = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

    // optional .fantasybit.Data.Type type = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data, type_)
      + sizeof(Data::type_)
      - PROTOBUF_FIELD_OFFSET(Data, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerData::InitAsDefaultInstance() {
  ::fantasybit::_PlayerData_default_instance_._instance.get_mutable()->player_base_ = const_cast< ::fantasybit::PlayerBase*>(
      ::fantasybit::PlayerBase::internal_default_instance());
  ::fantasybit::_PlayerData_default_instance_._instance.get_mutable()->player_status_ = const_cast< ::fantasybit::PlayerStatus*>(
      ::fantasybit::PlayerStatus::internal_default_instance());
}
class PlayerData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerData>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::PlayerBase& player_base(const PlayerData* msg);
  static void set_has_player_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::PlayerStatus& player_status(const PlayerData* msg);
  static void set_has_player_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_game_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::fantasybit::PlayerBase&
PlayerData::_Internal::player_base(const PlayerData* msg) {
  return *msg->player_base_;
}
const ::fantasybit::PlayerStatus&
PlayerData::_Internal::player_status(const PlayerData* msg) {
  return *msg->player_status_;
}
void PlayerData::clear_player_base() {
  if (player_base_ != nullptr) player_base_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerData::clear_player_status() {
  if (player_status_ != nullptr) player_status_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PlayerData::PlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PlayerData)
}
PlayerData::PlayerData(const PlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  if (from._internal_has_player_base()) {
    player_base_ = new ::fantasybit::PlayerBase(*from.player_base_);
  } else {
    player_base_ = nullptr;
  }
  if (from._internal_has_player_status()) {
    player_status_ = new ::fantasybit::PlayerStatus(*from.player_status_);
  } else {
    player_status_ = nullptr;
  }
  player_game_status_ = from.player_game_status_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerData)
}

void PlayerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerData_ProtoData_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_game_status_) -
      reinterpret_cast<char*>(&player_base_)) + sizeof(player_game_status_));
}

PlayerData::~PlayerData() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_base_;
  if (this != internal_default_instance()) delete player_status_;
}

void PlayerData::ArenaDtor(void* object) {
  PlayerData* _this = reinterpret_cast< PlayerData* >(object);
  (void)_this;
}
void PlayerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerData& PlayerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerData_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void PlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_base_ != nullptr);
      player_base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(player_status_ != nullptr);
      player_status_->Clear();
    }
  }
  player_game_status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string playerid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerData.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.PlayerBase player_base = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.PlayerStatus player_status = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.PlayerGameStatus player_game_status = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::PlayerGameStatus_IsValid(val))) {
            _internal_set_player_game_status(static_cast<::fantasybit::PlayerGameStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerData.playerid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_playerid(), target);
  }

  // optional .fantasybit.PlayerBase player_base = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::player_base(this), target, stream);
  }

  // optional .fantasybit.PlayerStatus player_status = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::player_status(this), target, stream);
  }

  // optional .fantasybit.PlayerGameStatus player_game_status = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->_internal_player_game_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerData)
  return target;
}

size_t PlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string playerid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional .fantasybit.PlayerBase player_base = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_base_);
    }

    // optional .fantasybit.PlayerStatus player_status = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_status_);
    }

    // optional .fantasybit.PlayerGameStatus player_game_status = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_player_game_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerData)
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_player_base()->::fantasybit::PlayerBase::MergeFrom(from._internal_player_base());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_player_status()->::fantasybit::PlayerStatus::MergeFrom(from._internal_player_status());
    }
    if (cached_has_bits & 0x00000008u) {
      player_game_status_ = from.player_game_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {
  return true;
}

void PlayerData::InternalSwap(PlayerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerData, player_game_status_)
      + sizeof(PlayerData::player_game_status_)
      - PROTOBUF_FIELD_OFFSET(PlayerData, player_base_)>(
          reinterpret_cast<char*>(&player_base_),
          reinterpret_cast<char*>(&other->player_base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameData::InitAsDefaultInstance() {
  ::fantasybit::_GameData_default_instance_._instance.get_mutable()->status_ = const_cast< ::fantasybit::GameStatus*>(
      ::fantasybit::GameStatus::internal_default_instance());
}
class GameData::_Internal {
 public:
  using HasBits = decltype(std::declval<GameData>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::GameStatus& status(const GameData* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::GameStatus&
GameData::_Internal::status(const GameData* msg) {
  return *msg->status_;
}
void GameData::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameData::GameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GameData)
}
GameData::GameData(const GameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameid()) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameid(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::fantasybit::GameStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameData)
}

void GameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameData_ProtoData_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

GameData::~GameData() {
  // @@protoc_insertion_point(destructor:fantasybit.GameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GameData::ArenaDtor(void* object) {
  GameData* _this = reinterpret_cast< GameData* >(object);
  (void)_this;
}
void GameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameData& GameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameData_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void GameData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GameData.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.GameStatus status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GameData.gameid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gameid(), target);
  }

  // optional .fantasybit.GameStatus status = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameData)
  return target;
}

size_t GameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string gameid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameid());
    }

    // optional .fantasybit.GameStatus status = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameData)
  GOOGLE_DCHECK_NE(&from, this);
  const GameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameData)
    MergeFrom(*source);
  }
}

void GameData::MergeFrom(const GameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameid(from._internal_gameid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_status()->::fantasybit::GameStatus::MergeFrom(from._internal_status());
    }
  }
}

void GameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameData::CopyFrom(const GameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameData::IsInitialized() const {
  return true;
}

void GameData::InternalSwap(GameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResultData::InitAsDefaultInstance() {
  ::fantasybit::_ResultData_default_instance_._instance.get_mutable()->game_result_ = const_cast< ::fantasybit::GameResult*>(
      ::fantasybit::GameResult::internal_default_instance());
}
class ResultData::_Internal {
 public:
  using HasBits = decltype(std::declval<ResultData>()._has_bits_);
  static const ::fantasybit::GameResult& game_result(const ResultData* msg);
  static void set_has_game_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::GameResult&
ResultData::_Internal::game_result(const ResultData* msg) {
  return *msg->game_result_;
}
void ResultData::clear_game_result() {
  if (game_result_ != nullptr) game_result_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ResultData::ResultData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ResultData)
}
ResultData::ResultData(const ResultData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_result()) {
    game_result_ = new ::fantasybit::GameResult(*from.game_result_);
  } else {
    game_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.ResultData)
}

void ResultData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultData_ProtoData_2eproto.base);
  game_result_ = nullptr;
}

ResultData::~ResultData() {
  // @@protoc_insertion_point(destructor:fantasybit.ResultData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResultData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_result_;
}

void ResultData::ArenaDtor(void* object) {
  ResultData* _this = reinterpret_cast< ResultData* >(object);
  (void)_this;
}
void ResultData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultData& ResultData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultData_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void ResultData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ResultData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_result_ != nullptr);
    game_result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.GameResult game_result = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ResultData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.GameResult game_result = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::game_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ResultData)
  return target;
}

size_t ResultData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ResultData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .fantasybit.GameResult game_result = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ResultData)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ResultData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ResultData)
    MergeFrom(*source);
  }
}

void ResultData::MergeFrom(const ResultData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ResultData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_result()) {
    _internal_mutable_game_result()->::fantasybit::GameResult::MergeFrom(from._internal_game_result());
  }
}

void ResultData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ResultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultData::CopyFrom(const ResultData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ResultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultData::IsInitialized() const {
  return true;
}

void ResultData::InternalSwap(ResultData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_result_, other->game_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScheduleData::InitAsDefaultInstance() {
  ::fantasybit::_ScheduleData_default_instance_._instance.get_mutable()->weekly_ = const_cast< ::fantasybit::WeeklySchedule*>(
      ::fantasybit::WeeklySchedule::internal_default_instance());
}
class ScheduleData::_Internal {
 public:
  using HasBits = decltype(std::declval<ScheduleData>()._has_bits_);
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::WeeklySchedule& weekly(const ScheduleData* msg);
  static void set_has_weekly(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::WeeklySchedule&
ScheduleData::_Internal::weekly(const ScheduleData* msg) {
  return *msg->weekly_;
}
void ScheduleData::clear_weekly() {
  if (weekly_ != nullptr) weekly_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ScheduleData::ScheduleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ScheduleData)
}
ScheduleData::ScheduleData(const ScheduleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weekly()) {
    weekly_ = new ::fantasybit::WeeklySchedule(*from.weekly_);
  } else {
    weekly_ = nullptr;
  }
  week_ = from.week_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.ScheduleData)
}

void ScheduleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScheduleData_ProtoData_2eproto.base);
  ::memset(&weekly_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&weekly_)) + sizeof(week_));
}

ScheduleData::~ScheduleData() {
  // @@protoc_insertion_point(destructor:fantasybit.ScheduleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScheduleData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete weekly_;
}

void ScheduleData::ArenaDtor(void* object) {
  ScheduleData* _this = reinterpret_cast< ScheduleData* >(object);
  (void)_this;
}
void ScheduleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScheduleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScheduleData& ScheduleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScheduleData_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void ScheduleData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ScheduleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(weekly_ != nullptr);
    weekly_->Clear();
  }
  week_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 week = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.WeeklySchedule weekly = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_weekly(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScheduleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ScheduleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 week = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_week(), target);
  }

  // optional .fantasybit.WeeklySchedule weekly = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::weekly(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ScheduleData)
  return target;
}

size_t ScheduleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ScheduleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .fantasybit.WeeklySchedule weekly = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weekly_);
    }

    // optional int32 week = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_week());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScheduleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ScheduleData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScheduleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScheduleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ScheduleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ScheduleData)
    MergeFrom(*source);
  }
}

void ScheduleData::MergeFrom(const ScheduleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ScheduleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weekly()->::fantasybit::WeeklySchedule::MergeFrom(from._internal_weekly());
    }
    if (cached_has_bits & 0x00000002u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScheduleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ScheduleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScheduleData::CopyFrom(const ScheduleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ScheduleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleData::IsInitialized() const {
  return true;
}

void ScheduleData::InternalSwap(ScheduleData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleData, week_)
      + sizeof(ScheduleData::week_)
      - PROTOBUF_FIELD_OFFSET(ScheduleData, weekly_)>(
          reinterpret_cast<char*>(&weekly_),
          reinterpret_cast<char*>(&other->weekly_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataTransition::InitAsDefaultInstance() {
}
class DataTransition::_Internal {
 public:
  using HasBits = decltype(std::declval<DataTransition>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DataTransition::DataTransition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gamedata_(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.DataTransition)
}
DataTransition::DataTransition(const DataTransition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gamedata_(from.gamedata_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&season_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.DataTransition)
}

void DataTransition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataTransition_ProtoData_2eproto.base);
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&season_)) + sizeof(week_));
  type_ = 2;
}

DataTransition::~DataTransition() {
  // @@protoc_insertion_point(destructor:fantasybit.DataTransition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataTransition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataTransition::ArenaDtor(void* object) {
  DataTransition* _this = reinterpret_cast< DataTransition* >(object);
  (void)_this;
}
void DataTransition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataTransition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataTransition& DataTransition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataTransition_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void DataTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.DataTransition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamedata_.Clear();
  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&season_)) + sizeof(week_));
    type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataTransition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.TrType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::TrType_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::TrType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 season = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 week = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.GameData gamedata = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gamedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.Data data = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataTransition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.DataTransition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.TrType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_season(), target);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_week(), target);
  }

  // repeated .fantasybit.GameData gamedata = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gamedata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_gamedata(i), target, stream);
  }

  // repeated .fantasybit.Data data = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.DataTransition)
  return target;
}

size_t DataTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.DataTransition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.GameData gamedata = 30;
  total_size += 2UL * this->_internal_gamedata_size();
  for (const auto& msg : this->gamedata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fantasybit.Data data = 40;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 season = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season());
    }

    // optional uint32 week = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

    // optional .fantasybit.TrType type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataTransition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.DataTransition)
  GOOGLE_DCHECK_NE(&from, this);
  const DataTransition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataTransition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.DataTransition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.DataTransition)
    MergeFrom(*source);
  }
}

void DataTransition::MergeFrom(const DataTransition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.DataTransition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamedata_.MergeFrom(from.gamedata_);
  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000002u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataTransition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.DataTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTransition::CopyFrom(const DataTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.DataTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTransition::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(data_)) return false;
  return true;
}

void DataTransition::InternalSwap(DataTransition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamedata_.InternalSwap(&other->gamedata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataTransition, week_)
      + sizeof(DataTransition::week_)
      - PROTOBUF_FIELD_OFFSET(DataTransition, season_)>(
          reinterpret_cast<char*>(&season_),
          reinterpret_cast<char*>(&other->season_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataTransition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamState::InitAsDefaultInstance() {
}
class TeamState::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamState>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TeamState::TeamState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.TeamState)
}
TeamState::TeamState(const TeamState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_teamid()) {
    teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_teamid(),
      GetArena());
  }
  ::memcpy(&week_, &from.week_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&week_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.TeamState)
}

void TeamState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamState_ProtoData_2eproto.base);
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  week_ = 0u;
  state_ = 1;
}

TeamState::~TeamState() {
  // @@protoc_insertion_point(destructor:fantasybit.TeamState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  teamid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeamState::ArenaDtor(void* object) {
  TeamState* _this = reinterpret_cast< TeamState* >(object);
  (void)_this;
}
void TeamState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamState& TeamState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamState_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void TeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TeamState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    teamid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    week_ = 0u;
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.TeamState.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::TeamState_State_IsValid(val))) {
            _internal_set_state(static_cast<::fantasybit::TeamState_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 week = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string teamid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_teamid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TeamState.teamid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TeamState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.TeamState.State state = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // optional uint32 week = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_week(), target);
  }

  // optional string teamid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_teamid().data(), static_cast<int>(this->_internal_teamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamState.teamid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TeamState)
  return target;
}

size_t TeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TeamState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string teamid = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_teamid());
    }

    // optional uint32 week = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

    // optional .fantasybit.TeamState.State state = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TeamState)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TeamState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TeamState)
    MergeFrom(*source);
  }
}

void TeamState::MergeFrom(const TeamState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TeamState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_teamid(from._internal_teamid());
    }
    if (cached_has_bits & 0x00000002u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamState::CopyFrom(const TeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamState::IsInitialized() const {
  return true;
}

void TeamState::InternalSwap(TeamState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teamid_.Swap(&other->teamid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(week_, other->week_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeltaData::InitAsDefaultInstance() {
  ::fantasybit::_DeltaData_default_instance_._instance.get_mutable()->globalstate_ = const_cast< ::fantasybit::GlobalState*>(
      ::fantasybit::GlobalState::internal_default_instance());
}
class DeltaData::_Internal {
 public:
  using HasBits = decltype(std::declval<DeltaData>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::GlobalState& globalstate(const DeltaData* msg);
  static void set_has_globalstate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::GlobalState&
DeltaData::_Internal::globalstate(const DeltaData* msg) {
  return *msg->globalstate_;
}
void DeltaData::clear_globalstate() {
  if (globalstate_ != nullptr) globalstate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DeltaData::DeltaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  myfantasyname_(arena),
  teamstates_(arena),
  datas_(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.DeltaData)
}
DeltaData::DeltaData(const DeltaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      myfantasyname_(from.myfantasyname_),
      teamstates_(from.teamstates_),
      datas_(from.datas_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_globalstate()) {
    globalstate_ = new ::fantasybit::GlobalState(*from.globalstate_);
  } else {
    globalstate_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.DeltaData)
}

void DeltaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeltaData_ProtoData_2eproto.base);
  globalstate_ = nullptr;
  type_ = 2;
}

DeltaData::~DeltaData() {
  // @@protoc_insertion_point(destructor:fantasybit.DeltaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeltaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete globalstate_;
}

void DeltaData::ArenaDtor(void* object) {
  DeltaData* _this = reinterpret_cast< DeltaData* >(object);
  (void)_this;
}
void DeltaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeltaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeltaData& DeltaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeltaData_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void DeltaData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.DeltaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  myfantasyname_.Clear();
  teamstates_.Clear();
  datas_.Clear();
  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(globalstate_ != nullptr);
      globalstate_->Clear();
    }
    type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeltaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.DeltaData.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::DeltaData_Type_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::DeltaData_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.MyFantasyName myfantasyname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_myfantasyname(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.GlobalState globalstate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.TeamState teamstates = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_teamstates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.Data datas = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.FantasyPlayer players = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeltaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.DeltaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.DeltaData.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_myfantasyname_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_myfantasyname(i), target, stream);
  }

  // optional .fantasybit.GlobalState globalstate = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::globalstate(this), target, stream);
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teamstates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_teamstates(i), target, stream);
  }

  // repeated .fantasybit.Data datas = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_datas(i), target, stream);
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_players(i), target, stream);
  }

  // Extension range [1000, 536870912)
  target = _extensions_._InternalSerialize(
      1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.DeltaData)
  return target;
}

size_t DeltaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.DeltaData)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  total_size += 1UL * this->_internal_myfantasyname_size();
  for (const auto& msg : this->myfantasyname_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  total_size += 2UL * this->_internal_teamstates_size();
  for (const auto& msg : this->teamstates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fantasybit.Data datas = 30;
  total_size += 2UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  total_size += 2UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .fantasybit.GlobalState globalstate = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *globalstate_);
    }

    // optional .fantasybit.DeltaData.Type type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeltaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.DeltaData)
  GOOGLE_DCHECK_NE(&from, this);
  const DeltaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeltaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.DeltaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.DeltaData)
    MergeFrom(*source);
  }
}

void DeltaData::MergeFrom(const DeltaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.DeltaData)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  myfantasyname_.MergeFrom(from.myfantasyname_);
  teamstates_.MergeFrom(from.teamstates_);
  datas_.MergeFrom(from.datas_);
  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_globalstate()->::fantasybit::GlobalState::MergeFrom(from._internal_globalstate());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeltaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.DeltaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaData::CopyFrom(const DeltaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.DeltaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaData::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void DeltaData::InternalSwap(DeltaData* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  myfantasyname_.InternalSwap(&other->myfantasyname_);
  teamstates_.InternalSwap(&other->teamstates_);
  datas_.InternalSwap(&other->datas_);
  players_.InternalSwap(&other->players_);
  swap(globalstate_, other->globalstate_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeltaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageData::InitAsDefaultInstance() {
}
class MessageData::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageData>()._has_bits_);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MessageData::MessageData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.MessageData)
}
MessageData::MessageData(const MessageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  ::memcpy(&gt_, &from.gt_,
    static_cast<size_t>(reinterpret_cast<char*>(&lt_) -
    reinterpret_cast<char*>(&gt_)) + sizeof(lt_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.MessageData)
}

void MessageData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageData_ProtoData_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lt_) -
      reinterpret_cast<char*>(&gt_)) + sizeof(lt_));
}

MessageData::~MessageData() {
  // @@protoc_insertion_point(destructor:fantasybit.MessageData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageData::ArenaDtor(void* object) {
  MessageData* _this = reinterpret_cast< MessageData* >(object);
  (void)_this;
}
void MessageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageData& MessageData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageData_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void MessageData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MessageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&gt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lt_) -
        reinterpret_cast<char*>(&gt_)) + sizeof(lt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string msg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.MessageData.msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gt = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_gt(&has_bits);
          gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lt = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_lt(&has_bits);
          lt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MessageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.MessageData.msg");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_msg(), target);
  }

  // optional int32 gt = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_gt(), target);
  }

  // optional int32 lt = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_lt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MessageData)
  return target;
}

size_t MessageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MessageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string msg = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
    }

    // optional int32 gt = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gt());
    }

    // optional int32 lt = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lt());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MessageData)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MessageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MessageData)
    MergeFrom(*source);
  }
}

void MessageData::MergeFrom(const MessageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MessageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lt_ = from.lt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageData::CopyFrom(const MessageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageData::IsInitialized() const {
  return true;
}

void MessageData::InternalSwap(MessageData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageData, lt_)
      + sizeof(MessageData::lt_)
      - PROTOBUF_FIELD_OFFSET(MessageData, gt_)>(
          reinterpret_cast<char*>(&gt_),
          reinterpret_cast<char*>(&other->gt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StampedTrans::InitAsDefaultInstance() {
  ::fantasybit::_StampedTrans_default_instance_._instance.get_mutable()->signed_orig_ = const_cast< ::fantasybit::SignedTransaction*>(
      ::fantasybit::SignedTransaction::internal_default_instance());
}
class StampedTrans::_Internal {
 public:
  using HasBits = decltype(std::declval<StampedTrans>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prevseq(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::fantasybit::SignedTransaction& signed_orig(const StampedTrans* msg);
  static void set_has_signed_orig(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::SignedTransaction&
StampedTrans::_Internal::signed_orig(const StampedTrans* msg) {
  return *msg->signed_orig_;
}
StampedTrans::StampedTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.StampedTrans)
}
StampedTrans::StampedTrans(const StampedTrans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signed_orig()) {
    signed_orig_ = new ::fantasybit::SignedTransaction(*from.signed_orig_);
  } else {
    signed_orig_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&prevseq_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(prevseq_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.StampedTrans)
}

void StampedTrans::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StampedTrans_ProtoData_2eproto.base);
  ::memset(&signed_orig_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prevseq_) -
      reinterpret_cast<char*>(&signed_orig_)) + sizeof(prevseq_));
}

StampedTrans::~StampedTrans() {
  // @@protoc_insertion_point(destructor:fantasybit.StampedTrans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StampedTrans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete signed_orig_;
}

void StampedTrans::ArenaDtor(void* object) {
  StampedTrans* _this = reinterpret_cast< StampedTrans* >(object);
  (void)_this;
}
void StampedTrans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StampedTrans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StampedTrans& StampedTrans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StampedTrans_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void StampedTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.StampedTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signed_orig_ != nullptr);
    signed_orig_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prevseq_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(prevseq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StampedTrans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 seqnum = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 prevseq = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_prevseq(&has_bits);
          prevseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.SignedTransaction signed_orig = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_orig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StampedTrans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.StampedTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_timestamp(), target);
  }

  // optional int32 seqnum = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_seqnum(), target);
  }

  // optional int32 prevseq = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_prevseq(), target);
  }

  // optional .fantasybit.SignedTransaction signed_orig = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::signed_orig(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.StampedTrans)
  return target;
}

size_t StampedTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.StampedTrans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .fantasybit.SignedTransaction signed_orig = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signed_orig_);
    }

    // optional uint64 timestamp = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timestamp());
    }

    // optional int32 seqnum = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_seqnum());
    }

    // optional int32 prevseq = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_prevseq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StampedTrans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.StampedTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const StampedTrans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StampedTrans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.StampedTrans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.StampedTrans)
    MergeFrom(*source);
  }
}

void StampedTrans::MergeFrom(const StampedTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.StampedTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_signed_orig()->::fantasybit::SignedTransaction::MergeFrom(from._internal_signed_orig());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      prevseq_ = from.prevseq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StampedTrans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.StampedTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StampedTrans::CopyFrom(const StampedTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.StampedTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StampedTrans::IsInitialized() const {
  if (_internal_has_signed_orig()) {
    if (!signed_orig_->IsInitialized()) return false;
  }
  return true;
}

void StampedTrans::InternalSwap(StampedTrans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StampedTrans, prevseq_)
      + sizeof(StampedTrans::prevseq_)
      - PROTOBUF_FIELD_OFFSET(StampedTrans, signed_orig_)>(
          reinterpret_cast<char*>(&signed_orig_),
          reinterpret_cast<char*>(&other->signed_orig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StampedTrans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExchangeOrder::InitAsDefaultInstance() {
  ::fantasybit::_ExchangeOrder_default_instance_._instance.get_mutable()->core_ = const_cast< ::fantasybit::OrderCore*>(
      ::fantasybit::OrderCore::internal_default_instance());
  ::fantasybit::_ExchangeOrder_default_instance_._instance.get_mutable()->futcontract_ = const_cast< ::fantasybit::FutContract*>(
      ::fantasybit::FutContract::internal_default_instance());
}
class ExchangeOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<ExchangeOrder>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::OrderCore& core(const ExchangeOrder* msg);
  static void set_has_core(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cancel_oref(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::fantasybit::FutContract& futcontract(const ExchangeOrder* msg);
  static void set_has_futcontract(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::OrderCore&
ExchangeOrder::_Internal::core(const ExchangeOrder* msg) {
  return *msg->core_;
}
const ::fantasybit::FutContract&
ExchangeOrder::_Internal::futcontract(const ExchangeOrder* msg) {
  return *msg->futcontract_;
}
void ExchangeOrder::clear_core() {
  if (core_ != nullptr) core_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ExchangeOrder::clear_futcontract() {
  if (futcontract_ != nullptr) futcontract_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ExchangeOrder::ExchangeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ExchangeOrder)
}
ExchangeOrder::ExchangeOrder(const ExchangeOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  if (from._internal_has_core()) {
    core_ = new ::fantasybit::OrderCore(*from.core_);
  } else {
    core_ = nullptr;
  }
  if (from._internal_has_futcontract()) {
    futcontract_ = new ::fantasybit::FutContract(*from.futcontract_);
  } else {
    futcontract_ = nullptr;
  }
  ::memcpy(&cancel_oref_, &from.cancel_oref_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&cancel_oref_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ExchangeOrder)
}

void ExchangeOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExchangeOrder_ProtoData_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&core_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancel_oref_) -
      reinterpret_cast<char*>(&core_)) + sizeof(cancel_oref_));
  type_ = 1;
}

ExchangeOrder::~ExchangeOrder() {
  // @@protoc_insertion_point(destructor:fantasybit.ExchangeOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExchangeOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete core_;
  if (this != internal_default_instance()) delete futcontract_;
}

void ExchangeOrder::ArenaDtor(void* object) {
  ExchangeOrder* _this = reinterpret_cast< ExchangeOrder* >(object);
  (void)_this;
}
void ExchangeOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangeOrder& ExchangeOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExchangeOrder_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void ExchangeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ExchangeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(core_ != nullptr);
      core_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(futcontract_ != nullptr);
      futcontract_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    cancel_oref_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.ExchangeOrder.Type type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::ExchangeOrder_Type_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::ExchangeOrder_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string playerid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.ExchangeOrder.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.OrderCore core = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_core(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cancel_oref = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cancel_oref(&has_bits);
          cancel_oref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.FutContract futcontract = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_futcontract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string symbol = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.ExchangeOrder.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((4000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ExchangeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.ExchangeOrder.Type type = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // optional string playerid = 40;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.ExchangeOrder.playerid");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_playerid(), target);
  }

  // optional .fantasybit.OrderCore core = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::core(this), target, stream);
  }

  // optional int32 cancel_oref = 100;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_cancel_oref(), target);
  }

  // optional .fantasybit.FutContract futcontract = 110;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        110, _Internal::futcontract(this), target, stream);
  }

  // optional string symbol = 120;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.ExchangeOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        120, this->_internal_symbol(), target);
  }

  // Extension range [500, 536870912)
  target = _extensions_._InternalSerialize(
      500, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ExchangeOrder)
  return target;
}

size_t ExchangeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ExchangeOrder)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string playerid = 40;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional string symbol = 120;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional .fantasybit.OrderCore core = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *core_);
    }

    // optional .fantasybit.FutContract futcontract = 110;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *futcontract_);
    }

    // optional int32 cancel_oref = 100;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cancel_oref());
    }

    // optional .fantasybit.ExchangeOrder.Type type = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ExchangeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangeOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ExchangeOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ExchangeOrder)
    MergeFrom(*source);
  }
}

void ExchangeOrder::MergeFrom(const ExchangeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ExchangeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_core()->::fantasybit::OrderCore::MergeFrom(from._internal_core());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_futcontract()->::fantasybit::FutContract::MergeFrom(from._internal_futcontract());
    }
    if (cached_has_bits & 0x00000010u) {
      cancel_oref_ = from.cancel_oref_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExchangeOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ExchangeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeOrder::CopyFrom(const ExchangeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ExchangeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeOrder::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void ExchangeOrder::InternalSwap(ExchangeOrder* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeOrder, cancel_oref_)
      + sizeof(ExchangeOrder::cancel_oref_)
      - PROTOBUF_FIELD_OFFSET(ExchangeOrder, core_)>(
          reinterpret_cast<char*>(&core_),
          reinterpret_cast<char*>(&other->core_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderUnique::InitAsDefaultInstance() {
}
class OrderUnique::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderUnique>()._has_bits_);
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buyside(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

OrderUnique::OrderUnique(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.OrderUnique)
}
OrderUnique::OrderUnique(const OrderUnique& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_key()) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_key(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&season_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.OrderUnique)
}

void OrderUnique::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderUnique_ProtoData_2eproto.base);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&season_)) + sizeof(price_));
}

OrderUnique::~OrderUnique() {
  // @@protoc_insertion_point(destructor:fantasybit.OrderUnique)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderUnique::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderUnique::ArenaDtor(void* object) {
  OrderUnique* _this = reinterpret_cast< OrderUnique* >(object);
  (void)_this;
}
void OrderUnique::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderUnique::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderUnique& OrderUnique::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderUnique_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void OrderUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.OrderUnique)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      public_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&season_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderUnique::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string public_key = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.OrderUnique.public_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 week = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool buyside = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_buyside(&has_bits);
          buyside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.OrderUnique.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 price = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderUnique::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.OrderUnique)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string public_key = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.OrderUnique.public_key");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_public_key(), target);
  }

  // optional uint32 season = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_season(), target);
  }

  // optional uint32 week = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_week(), target);
  }

  // optional bool buyside = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_buyside(), target);
  }

  // optional string playerid = 50;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.OrderUnique.playerid");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_playerid(), target);
  }

  // optional int32 price = 70;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.OrderUnique)
  return target;
}

size_t OrderUnique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.OrderUnique)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string public_key = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_public_key());
    }

    // optional string playerid = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional uint32 season = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season());
    }

    // optional uint32 week = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

    // optional bool buyside = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional int32 price = 70;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderUnique::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.OrderUnique)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderUnique* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderUnique>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.OrderUnique)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.OrderUnique)
    MergeFrom(*source);
  }
}

void OrderUnique::MergeFrom(const OrderUnique& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.OrderUnique)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_public_key(from._internal_public_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000008u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000010u) {
      buyside_ = from.buyside_;
    }
    if (cached_has_bits & 0x00000020u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderUnique::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.OrderUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderUnique::CopyFrom(const OrderUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.OrderUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUnique::IsInitialized() const {
  return true;
}

void OrderUnique::InternalSwap(OrderUnique* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderUnique, price_)
      + sizeof(OrderUnique::price_)
      - PROTOBUF_FIELD_OFFSET(OrderUnique, season_)>(
          reinterpret_cast<char*>(&season_),
          reinterpret_cast<char*>(&other->season_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUnique::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderDeets::InitAsDefaultInstance() {
  ::fantasybit::_OrderDeets_default_instance_._instance.get_mutable()->order_ = const_cast< ::fantasybit::OrderUnique*>(
      ::fantasybit::OrderUnique::internal_default_instance());
}
class OrderDeets::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderDeets>()._has_bits_);
  static void set_has_oid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::OrderUnique& order(const OrderDeets* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::fantasybit::OrderUnique&
OrderDeets::_Internal::order(const OrderDeets* msg) {
  return *msg->order_;
}
OrderDeets::OrderDeets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.OrderDeets)
}
OrderDeets::OrderDeets(const OrderDeets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_oid()) {
    oid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_oid(),
      GetArena());
  }
  if (from._internal_has_order()) {
    order_ = new ::fantasybit::OrderUnique(*from.order_);
  } else {
    order_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.OrderDeets)
}

void OrderDeets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderDeets_ProtoData_2eproto.base);
  oid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&order_)) + sizeof(size_));
}

OrderDeets::~OrderDeets() {
  // @@protoc_insertion_point(destructor:fantasybit.OrderDeets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderDeets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  oid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_;
}

void OrderDeets::ArenaDtor(void* object) {
  OrderDeets* _this = reinterpret_cast< OrderDeets* >(object);
  (void)_this;
}
void OrderDeets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderDeets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderDeets& OrderDeets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderDeets_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void OrderDeets::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.OrderDeets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      oid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(order_ != nullptr);
      order_->Clear();
    }
  }
  size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderDeets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes oid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_oid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.OrderUnique order = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderDeets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.OrderDeets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes oid = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_oid(), target);
  }

  // optional .fantasybit.OrderUnique order = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::order(this), target, stream);
  }

  // optional int32 size = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.OrderDeets)
  return target;
}

size_t OrderDeets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.OrderDeets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes oid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oid());
    }

    // optional .fantasybit.OrderUnique order = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_);
    }

    // optional int32 size = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderDeets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.OrderDeets)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderDeets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderDeets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.OrderDeets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.OrderDeets)
    MergeFrom(*source);
  }
}

void OrderDeets::MergeFrom(const OrderDeets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.OrderDeets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_oid(from._internal_oid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_order()->::fantasybit::OrderUnique::MergeFrom(from._internal_order());
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderDeets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.OrderDeets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderDeets::CopyFrom(const OrderDeets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.OrderDeets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDeets::IsInitialized() const {
  return true;
}

void OrderDeets::InternalSwap(OrderDeets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  oid_.Swap(&other->oid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderDeets, size_)
      + sizeof(OrderDeets::size_)
      - PROTOBUF_FIELD_OFFSET(OrderDeets, order_)>(
          reinterpret_cast<char*>(&order_),
          reinterpret_cast<char*>(&other->order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderDeets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsideUnique::InitAsDefaultInstance() {
  ::fantasybit::_InsideUnique_default_instance_._instance.get_mutable()->order_ = const_cast< ::fantasybit::OrderUnique*>(
      ::fantasybit::OrderUnique::internal_default_instance());
}
class InsideUnique::_Internal {
 public:
  using HasBits = decltype(std::declval<InsideUnique>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_buyside(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_oid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::OrderUnique& order(const InsideUnique* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::fantasybit::OrderUnique&
InsideUnique::_Internal::order(const InsideUnique* msg) {
  return *msg->order_;
}
InsideUnique::InsideUnique(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.InsideUnique)
}
InsideUnique::InsideUnique(const InsideUnique& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_key()) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_key(),
      GetArena());
  }
  oid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_oid()) {
    oid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_oid(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  if (from._internal_has_order()) {
    order_ = new ::fantasybit::OrderUnique(*from.order_);
  } else {
    order_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&buyside_) -
    reinterpret_cast<char*>(&price_)) + sizeof(buyside_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.InsideUnique)
}

void InsideUnique::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsideUnique_ProtoData_2eproto.base);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buyside_) -
      reinterpret_cast<char*>(&order_)) + sizeof(buyside_));
}

InsideUnique::~InsideUnique() {
  // @@protoc_insertion_point(destructor:fantasybit.InsideUnique)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsideUnique::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_;
}

void InsideUnique::ArenaDtor(void* object) {
  InsideUnique* _this = reinterpret_cast< InsideUnique* >(object);
  (void)_this;
}
void InsideUnique::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsideUnique::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsideUnique& InsideUnique::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsideUnique_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void InsideUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.InsideUnique)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      public_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      oid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(order_ != nullptr);
      order_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buyside_) -
        reinterpret_cast<char*>(&price_)) + sizeof(buyside_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsideUnique::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string public_key = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.InsideUnique.public_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes oid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_oid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.OrderUnique order = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool buyside = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_buyside(&has_bits);
          buyside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.InsideUnique.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 price = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsideUnique::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.InsideUnique)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string public_key = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.InsideUnique.public_key");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_public_key(), target);
  }

  // optional bytes oid = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_oid(), target);
  }

  // optional .fantasybit.OrderUnique order = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::order(this), target, stream);
  }

  // optional int32 size = 30;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_size(), target);
  }

  // optional bool buyside = 40;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_buyside(), target);
  }

  // optional string playerid = 50;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.InsideUnique.playerid");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_playerid(), target);
  }

  // optional int32 price = 70;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.InsideUnique)
  return target;
}

size_t InsideUnique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.InsideUnique)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string public_key = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_public_key());
    }

    // optional bytes oid = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oid());
    }

    // optional string playerid = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional .fantasybit.OrderUnique order = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_);
    }

    // optional int32 price = 70;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

    // optional int32 size = 30;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

    // optional bool buyside = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsideUnique::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.InsideUnique)
  GOOGLE_DCHECK_NE(&from, this);
  const InsideUnique* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsideUnique>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.InsideUnique)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.InsideUnique)
    MergeFrom(*source);
  }
}

void InsideUnique::MergeFrom(const InsideUnique& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.InsideUnique)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_public_key(from._internal_public_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_oid(from._internal_oid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_order()->::fantasybit::OrderUnique::MergeFrom(from._internal_order());
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000040u) {
      buyside_ = from.buyside_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsideUnique::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.InsideUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsideUnique::CopyFrom(const InsideUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.InsideUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsideUnique::IsInitialized() const {
  return true;
}

void InsideUnique::InternalSwap(InsideUnique* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  oid_.Swap(&other->oid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsideUnique, buyside_)
      + sizeof(InsideUnique::buyside_)
      - PROTOBUF_FIELD_OFFSET(InsideUnique, order_)>(
          reinterpret_cast<char*>(&order_),
          reinterpret_cast<char*>(&other->order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsideUnique::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeTransition::InitAsDefaultInstance() {
}
class TimeTransition::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeTransition>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TimeTransition::TimeTransition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.TimeTransition)
}
TimeTransition::TimeTransition(const TimeTransition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&season_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.TimeTransition)
}

void TimeTransition::SharedCtor() {
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&season_)) + sizeof(week_));
  type_ = 2;
}

TimeTransition::~TimeTransition() {
  // @@protoc_insertion_point(destructor:fantasybit.TimeTransition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeTransition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimeTransition::ArenaDtor(void* object) {
  TimeTransition* _this = reinterpret_cast< TimeTransition* >(object);
  (void)_this;
}
void TimeTransition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeTransition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeTransition& TimeTransition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeTransition_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void TimeTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TimeTransition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&season_)) + sizeof(week_));
    type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeTransition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.TimeTransition.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::TimeTransition_Type_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::TimeTransition_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 season = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 week = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeTransition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TimeTransition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.TimeTransition.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_season(), target);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_week(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TimeTransition)
  return target;
}

size_t TimeTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TimeTransition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 season = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season());
    }

    // optional uint32 week = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

    // optional .fantasybit.TimeTransition.Type type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeTransition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TimeTransition)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeTransition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeTransition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TimeTransition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TimeTransition)
    MergeFrom(*source);
  }
}

void TimeTransition::MergeFrom(const TimeTransition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TimeTransition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000002u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeTransition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TimeTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeTransition::CopyFrom(const TimeTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TimeTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeTransition::IsInitialized() const {
  return true;
}

void TimeTransition::InternalSwap(TimeTransition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeTransition, week_)
      + sizeof(TimeTransition::week_)
      - PROTOBUF_FIELD_OFFSET(TimeTransition, season_)>(
          reinterpret_cast<char*>(&season_),
          reinterpret_cast<char*>(&other->season_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeTransition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Bitcoin_UTXO::InitAsDefaultInstance() {
}
class Bitcoin_UTXO::_Internal {
 public:
  using HasBits = decltype(std::declval<Bitcoin_UTXO>()._has_bits_);
  static void set_has_txid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tx_output_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_in_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_locking_script(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Bitcoin_UTXO::Bitcoin_UTXO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Bitcoin_UTXO)
}
Bitcoin_UTXO::Bitcoin_UTXO(const Bitcoin_UTXO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txid()) {
    txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txid(),
      GetArena());
  }
  locking_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_locking_script()) {
    locking_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_locking_script(),
      GetArena());
  }
  ::memcpy(&tx_output_n_, &from.tx_output_n_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_value_) -
    reinterpret_cast<char*>(&tx_output_n_)) + sizeof(in_value_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Bitcoin_UTXO)
}

void Bitcoin_UTXO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bitcoin_UTXO_ProtoData_2eproto.base);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locking_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tx_output_n_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_value_) -
      reinterpret_cast<char*>(&tx_output_n_)) + sizeof(in_value_));
}

Bitcoin_UTXO::~Bitcoin_UTXO() {
  // @@protoc_insertion_point(destructor:fantasybit.Bitcoin_UTXO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bitcoin_UTXO::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locking_script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Bitcoin_UTXO::ArenaDtor(void* object) {
  Bitcoin_UTXO* _this = reinterpret_cast< Bitcoin_UTXO* >(object);
  (void)_this;
}
void Bitcoin_UTXO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bitcoin_UTXO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bitcoin_UTXO& Bitcoin_UTXO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bitcoin_UTXO_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void Bitcoin_UTXO::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Bitcoin_UTXO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      txid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      locking_script_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&tx_output_n_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_value_) -
        reinterpret_cast<char*>(&tx_output_n_)) + sizeof(in_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bitcoin_UTXO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes txid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tx_output_n = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tx_output_n(&has_bits);
          tx_output_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 in_value = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_in_value(&has_bits);
          in_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes locking_script = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_locking_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bitcoin_UTXO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Bitcoin_UTXO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes txid = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_txid(), target);
  }

  // optional uint32 tx_output_n = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_tx_output_n(), target);
  }

  // optional uint64 in_value = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_in_value(), target);
  }

  // optional bytes locking_script = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_locking_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Bitcoin_UTXO)
  return target;
}

size_t Bitcoin_UTXO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Bitcoin_UTXO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes txid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txid());
    }

    // optional bytes locking_script = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_locking_script());
    }

    // optional uint32 tx_output_n = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tx_output_n());
    }

    // optional uint64 in_value = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_in_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bitcoin_UTXO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Bitcoin_UTXO)
  GOOGLE_DCHECK_NE(&from, this);
  const Bitcoin_UTXO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bitcoin_UTXO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Bitcoin_UTXO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Bitcoin_UTXO)
    MergeFrom(*source);
  }
}

void Bitcoin_UTXO::MergeFrom(const Bitcoin_UTXO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Bitcoin_UTXO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_txid(from._internal_txid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_locking_script(from._internal_locking_script());
    }
    if (cached_has_bits & 0x00000004u) {
      tx_output_n_ = from.tx_output_n_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_value_ = from.in_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Bitcoin_UTXO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Bitcoin_UTXO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bitcoin_UTXO::CopyFrom(const Bitcoin_UTXO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Bitcoin_UTXO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bitcoin_UTXO::IsInitialized() const {
  return true;
}

void Bitcoin_UTXO::InternalSwap(Bitcoin_UTXO* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  txid_.Swap(&other->txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  locking_script_.Swap(&other->locking_script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bitcoin_UTXO, in_value_)
      + sizeof(Bitcoin_UTXO::in_value_)
      - PROTOBUF_FIELD_OFFSET(Bitcoin_UTXO, tx_output_n_)>(
          reinterpret_cast<char*>(&tx_output_n_),
          reinterpret_cast<char*>(&other->tx_output_n_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bitcoin_UTXO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Bitcoin_UTXOS::InitAsDefaultInstance() {
}
class Bitcoin_UTXOS::_Internal {
 public:
  using HasBits = decltype(std::declval<Bitcoin_UTXOS>()._has_bits_);
  static void set_has_total_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Bitcoin_UTXOS::Bitcoin_UTXOS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  utxo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Bitcoin_UTXOS)
}
Bitcoin_UTXOS::Bitcoin_UTXOS(const Bitcoin_UTXOS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      utxo_(from.utxo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_value_ = from.total_value_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.Bitcoin_UTXOS)
}

void Bitcoin_UTXOS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bitcoin_UTXOS_ProtoData_2eproto.base);
  total_value_ = PROTOBUF_ULONGLONG(0);
}

Bitcoin_UTXOS::~Bitcoin_UTXOS() {
  // @@protoc_insertion_point(destructor:fantasybit.Bitcoin_UTXOS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bitcoin_UTXOS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Bitcoin_UTXOS::ArenaDtor(void* object) {
  Bitcoin_UTXOS* _this = reinterpret_cast< Bitcoin_UTXOS* >(object);
  (void)_this;
}
void Bitcoin_UTXOS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bitcoin_UTXOS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bitcoin_UTXOS& Bitcoin_UTXOS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bitcoin_UTXOS_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void Bitcoin_UTXOS::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Bitcoin_UTXOS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utxo_.Clear();
  total_value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bitcoin_UTXOS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 total_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_total_value(&has_bits);
          total_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.Bitcoin_UTXO utxo = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_utxo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bitcoin_UTXOS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Bitcoin_UTXOS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 total_value = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_total_value(), target);
  }

  // repeated .fantasybit.Bitcoin_UTXO utxo = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_utxo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_utxo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Bitcoin_UTXOS)
  return target;
}

size_t Bitcoin_UTXOS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Bitcoin_UTXOS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.Bitcoin_UTXO utxo = 20;
  total_size += 2UL * this->_internal_utxo_size();
  for (const auto& msg : this->utxo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 total_value = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bitcoin_UTXOS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Bitcoin_UTXOS)
  GOOGLE_DCHECK_NE(&from, this);
  const Bitcoin_UTXOS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bitcoin_UTXOS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Bitcoin_UTXOS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Bitcoin_UTXOS)
    MergeFrom(*source);
  }
}

void Bitcoin_UTXOS::MergeFrom(const Bitcoin_UTXOS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Bitcoin_UTXOS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  utxo_.MergeFrom(from.utxo_);
  if (from._internal_has_total_value()) {
    _internal_set_total_value(from._internal_total_value());
  }
}

void Bitcoin_UTXOS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Bitcoin_UTXOS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bitcoin_UTXOS::CopyFrom(const Bitcoin_UTXOS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Bitcoin_UTXOS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bitcoin_UTXOS::IsInitialized() const {
  return true;
}

void Bitcoin_UTXOS::InternalSwap(Bitcoin_UTXOS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  utxo_.InternalSwap(&other->utxo_);
  swap(total_value_, other->total_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bitcoin_UTXOS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapAsk::InitAsDefaultInstance() {
}
class SwapAsk::_Internal {
 public:
  using HasBits = decltype(std::declval<SwapAsk>()._has_bits_);
  static void set_has_satoshi_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_satoshi_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fb_qty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SwapAsk::SwapAsk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.SwapAsk)
}
SwapAsk::SwapAsk(const SwapAsk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&satoshi_min_, &from.satoshi_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&fb_qty_) -
    reinterpret_cast<char*>(&satoshi_min_)) + sizeof(fb_qty_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.SwapAsk)
}

void SwapAsk::SharedCtor() {
  ::memset(&satoshi_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fb_qty_) -
      reinterpret_cast<char*>(&satoshi_min_)) + sizeof(fb_qty_));
}

SwapAsk::~SwapAsk() {
  // @@protoc_insertion_point(destructor:fantasybit.SwapAsk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwapAsk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SwapAsk::ArenaDtor(void* object) {
  SwapAsk* _this = reinterpret_cast< SwapAsk* >(object);
  (void)_this;
}
void SwapAsk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapAsk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapAsk& SwapAsk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapAsk_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void SwapAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SwapAsk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&satoshi_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fb_qty_) -
        reinterpret_cast<char*>(&satoshi_min_)) + sizeof(fb_qty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapAsk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 satoshi_min = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_satoshi_min(&has_bits);
          satoshi_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 satoshi_max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_satoshi_max(&has_bits);
          satoshi_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rate = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_rate(&has_bits);
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fb_qty = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_fb_qty(&has_bits);
          fb_qty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapAsk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SwapAsk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 satoshi_min = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_satoshi_min(), target);
  }

  // optional uint64 satoshi_max = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_satoshi_max(), target);
  }

  // optional uint64 rate = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_rate(), target);
  }

  // optional uint64 fb_qty = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_fb_qty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SwapAsk)
  return target;
}

size_t SwapAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SwapAsk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 satoshi_min = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_satoshi_min());
    }

    // optional uint64 satoshi_max = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_satoshi_max());
    }

    // optional uint64 rate = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_rate());
    }

    // optional uint64 fb_qty = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_fb_qty());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapAsk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SwapAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapAsk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapAsk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SwapAsk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SwapAsk)
    MergeFrom(*source);
  }
}

void SwapAsk::MergeFrom(const SwapAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SwapAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      satoshi_min_ = from.satoshi_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      satoshi_max_ = from.satoshi_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      rate_ = from.rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      fb_qty_ = from.fb_qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SwapAsk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SwapAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapAsk::CopyFrom(const SwapAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SwapAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapAsk::IsInitialized() const {
  return true;
}

void SwapAsk::InternalSwap(SwapAsk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapAsk, fb_qty_)
      + sizeof(SwapAsk::fb_qty_)
      - PROTOBUF_FIELD_OFFSET(SwapAsk, satoshi_min_)>(
          reinterpret_cast<char*>(&satoshi_min_),
          reinterpret_cast<char*>(&other->satoshi_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapAsk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapBid::InitAsDefaultInstance() {
  ::fantasybit::_SwapBid_default_instance_._instance.get_mutable()->utxos_ = const_cast< ::fantasybit::Bitcoin_UTXOS*>(
      ::fantasybit::Bitcoin_UTXOS::internal_default_instance());
  ::fantasybit::_SwapBid_default_instance_._instance.get_mutable()->this_offer_ = const_cast< ::fantasybit::SwapAsk*>(
      ::fantasybit::SwapAsk::internal_default_instance());
}
class SwapBid::_Internal {
 public:
  using HasBits = decltype(std::declval<SwapBid>()._has_bits_);
  static void set_has_satoshi_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_satoshi_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::fantasybit::Bitcoin_UTXOS& utxos(const SwapBid* msg);
  static void set_has_utxos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_change_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::SwapAsk& this_offer(const SwapBid* msg);
  static void set_has_this_offer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_counteroffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::Bitcoin_UTXOS&
SwapBid::_Internal::utxos(const SwapBid* msg) {
  return *msg->utxos_;
}
const ::fantasybit::SwapAsk&
SwapBid::_Internal::this_offer(const SwapBid* msg) {
  return *msg->this_offer_;
}
SwapBid::SwapBid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.SwapBid)
}
SwapBid::SwapBid(const SwapBid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  change_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_change_addr()) {
    change_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_change_addr(),
      GetArena());
  }
  counteroffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_counteroffer()) {
    counteroffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_counteroffer(),
      GetArena());
  }
  if (from._internal_has_utxos()) {
    utxos_ = new ::fantasybit::Bitcoin_UTXOS(*from.utxos_);
  } else {
    utxos_ = nullptr;
  }
  if (from._internal_has_this_offer()) {
    this_offer_ = new ::fantasybit::SwapAsk(*from.this_offer_);
  } else {
    this_offer_ = nullptr;
  }
  ::memcpy(&satoshi_min_, &from.satoshi_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&satoshi_min_)) + sizeof(rate_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.SwapBid)
}

void SwapBid::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapBid_ProtoData_2eproto.base);
  change_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  counteroffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&utxos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&utxos_)) + sizeof(rate_));
}

SwapBid::~SwapBid() {
  // @@protoc_insertion_point(destructor:fantasybit.SwapBid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwapBid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  change_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  counteroffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete utxos_;
  if (this != internal_default_instance()) delete this_offer_;
}

void SwapBid::ArenaDtor(void* object) {
  SwapBid* _this = reinterpret_cast< SwapBid* >(object);
  (void)_this;
}
void SwapBid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapBid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapBid& SwapBid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapBid_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void SwapBid::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SwapBid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      change_addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      counteroffer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(utxos_ != nullptr);
      utxos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(this_offer_ != nullptr);
      this_offer_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&satoshi_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rate_) -
        reinterpret_cast<char*>(&satoshi_min_)) + sizeof(rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapBid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 satoshi_min = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_satoshi_min(&has_bits);
          satoshi_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 satoshi_max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_satoshi_max(&has_bits);
          satoshi_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rate = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_rate(&has_bits);
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.Bitcoin_UTXOS utxos = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_utxos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes change_addr = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_change_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.SwapAsk this_offer = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_this_offer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string counteroffer = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_counteroffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.SwapBid.counteroffer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapBid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SwapBid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 satoshi_min = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_satoshi_min(), target);
  }

  // optional uint64 satoshi_max = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_satoshi_max(), target);
  }

  // optional uint64 rate = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_rate(), target);
  }

  // optional .fantasybit.Bitcoin_UTXOS utxos = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::utxos(this), target, stream);
  }

  // optional bytes change_addr = 40;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_change_addr(), target);
  }

  // optional .fantasybit.SwapAsk this_offer = 50;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::this_offer(this), target, stream);
  }

  // optional string counteroffer = 60;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_counteroffer().data(), static_cast<int>(this->_internal_counteroffer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.SwapBid.counteroffer");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_counteroffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SwapBid)
  return target;
}

size_t SwapBid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SwapBid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes change_addr = 40;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_change_addr());
    }

    // optional string counteroffer = 60;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_counteroffer());
    }

    // optional .fantasybit.Bitcoin_UTXOS utxos = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *utxos_);
    }

    // optional .fantasybit.SwapAsk this_offer = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *this_offer_);
    }

    // optional uint64 satoshi_min = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_satoshi_min());
    }

    // optional uint64 satoshi_max = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_satoshi_max());
    }

    // optional uint64 rate = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_rate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapBid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SwapBid)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapBid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapBid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SwapBid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SwapBid)
    MergeFrom(*source);
  }
}

void SwapBid::MergeFrom(const SwapBid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SwapBid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_change_addr(from._internal_change_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_counteroffer(from._internal_counteroffer());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_utxos()->::fantasybit::Bitcoin_UTXOS::MergeFrom(from._internal_utxos());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_this_offer()->::fantasybit::SwapAsk::MergeFrom(from._internal_this_offer());
    }
    if (cached_has_bits & 0x00000010u) {
      satoshi_min_ = from.satoshi_min_;
    }
    if (cached_has_bits & 0x00000020u) {
      satoshi_max_ = from.satoshi_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      rate_ = from.rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SwapBid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SwapBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapBid::CopyFrom(const SwapBid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SwapBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapBid::IsInitialized() const {
  return true;
}

void SwapBid::InternalSwap(SwapBid* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  change_addr_.Swap(&other->change_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  counteroffer_.Swap(&other->counteroffer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapBid, rate_)
      + sizeof(SwapBid::rate_)
      - PROTOBUF_FIELD_OFFSET(SwapBid, utxos_)>(
          reinterpret_cast<char*>(&utxos_),
          reinterpret_cast<char*>(&other->utxos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapBid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapFill::InitAsDefaultInstance() {
  ::fantasybit::_SwapFill_default_instance_._instance.get_mutable()->swapbid_ = const_cast< ::fantasybit::SwapBid*>(
      ::fantasybit::SwapBid::internal_default_instance());
}
class SwapFill::_Internal {
 public:
  using HasBits = decltype(std::declval<SwapFill>()._has_bits_);
  static const ::fantasybit::SwapBid& swapbid(const SwapFill* msg);
  static void set_has_swapbid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hash_to_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_satoshi_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fb_qty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_counterparty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::SwapBid&
SwapFill::_Internal::swapbid(const SwapFill* msg) {
  return *msg->swapbid_;
}
SwapFill::SwapFill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.SwapFill)
}
SwapFill::SwapFill(const SwapFill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_to_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hash_to_sign()) {
    hash_to_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash_to_sign(),
      GetArena());
  }
  counterparty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_counterparty()) {
    counterparty_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_counterparty(),
      GetArena());
  }
  if (from._internal_has_swapbid()) {
    swapbid_ = new ::fantasybit::SwapBid(*from.swapbid_);
  } else {
    swapbid_ = nullptr;
  }
  ::memcpy(&satoshi_fee_, &from.satoshi_fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&fb_qty_) -
    reinterpret_cast<char*>(&satoshi_fee_)) + sizeof(fb_qty_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.SwapFill)
}

void SwapFill::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapFill_ProtoData_2eproto.base);
  hash_to_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  counterparty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&swapbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fb_qty_) -
      reinterpret_cast<char*>(&swapbid_)) + sizeof(fb_qty_));
}

SwapFill::~SwapFill() {
  // @@protoc_insertion_point(destructor:fantasybit.SwapFill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwapFill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_to_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  counterparty_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete swapbid_;
}

void SwapFill::ArenaDtor(void* object) {
  SwapFill* _this = reinterpret_cast< SwapFill* >(object);
  (void)_this;
}
void SwapFill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapFill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapFill& SwapFill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapFill_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void SwapFill::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SwapFill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hash_to_sign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      counterparty_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(swapbid_ != nullptr);
      swapbid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&satoshi_fee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fb_qty_) -
        reinterpret_cast<char*>(&satoshi_fee_)) + sizeof(fb_qty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapFill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.SwapBid swapbid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapbid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes hash_to_sign = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_hash_to_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 satoshi_fee = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_satoshi_fee(&has_bits);
          satoshi_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fb_qty = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fb_qty(&has_bits);
          fb_qty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string counterparty = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_counterparty();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.SwapFill.counterparty");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapFill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SwapFill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.SwapBid swapbid = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::swapbid(this), target, stream);
  }

  // optional bytes hash_to_sign = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_hash_to_sign(), target);
  }

  // optional uint64 satoshi_fee = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_satoshi_fee(), target);
  }

  // optional uint64 fb_qty = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(40, this->_internal_fb_qty(), target);
  }

  // optional string counterparty = 50;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_counterparty().data(), static_cast<int>(this->_internal_counterparty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.SwapFill.counterparty");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_counterparty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SwapFill)
  return target;
}

size_t SwapFill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SwapFill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes hash_to_sign = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash_to_sign());
    }

    // optional string counterparty = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_counterparty());
    }

    // optional .fantasybit.SwapBid swapbid = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swapbid_);
    }

    // optional uint64 satoshi_fee = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_satoshi_fee());
    }

    // optional uint64 fb_qty = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_fb_qty());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapFill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SwapFill)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapFill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapFill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SwapFill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SwapFill)
    MergeFrom(*source);
  }
}

void SwapFill::MergeFrom(const SwapFill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SwapFill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hash_to_sign(from._internal_hash_to_sign());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_counterparty(from._internal_counterparty());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_swapbid()->::fantasybit::SwapBid::MergeFrom(from._internal_swapbid());
    }
    if (cached_has_bits & 0x00000008u) {
      satoshi_fee_ = from.satoshi_fee_;
    }
    if (cached_has_bits & 0x00000010u) {
      fb_qty_ = from.fb_qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SwapFill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SwapFill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapFill::CopyFrom(const SwapFill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SwapFill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapFill::IsInitialized() const {
  return true;
}

void SwapFill::InternalSwap(SwapFill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hash_to_sign_.Swap(&other->hash_to_sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  counterparty_.Swap(&other->counterparty_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapFill, fb_qty_)
      + sizeof(SwapFill::fb_qty_)
      - PROTOBUF_FIELD_OFFSET(SwapFill, swapbid_)>(
          reinterpret_cast<char*>(&swapbid_),
          reinterpret_cast<char*>(&other->swapbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapFill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapSent::InitAsDefaultInstance() {
  ::fantasybit::_SwapSent_default_instance_._instance.get_mutable()->swapfill_ = const_cast< ::fantasybit::SwapFill*>(
      ::fantasybit::SwapFill::internal_default_instance());
}
class SwapSent::_Internal {
 public:
  using HasBits = decltype(std::declval<SwapSent>()._has_bits_);
  static const ::fantasybit::SwapFill& swapfill(const SwapSent* msg);
  static void set_has_swapfill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sig(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::SwapFill&
SwapSent::_Internal::swapfill(const SwapSent* msg) {
  return *msg->swapfill_;
}
SwapSent::SwapSent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.SwapSent)
}
SwapSent::SwapSent(const SwapSent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sig()) {
    sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sig(),
      GetArena());
  }
  if (from._internal_has_swapfill()) {
    swapfill_ = new ::fantasybit::SwapFill(*from.swapfill_);
  } else {
    swapfill_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.SwapSent)
}

void SwapSent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapSent_ProtoData_2eproto.base);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  swapfill_ = nullptr;
}

SwapSent::~SwapSent() {
  // @@protoc_insertion_point(destructor:fantasybit.SwapSent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwapSent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete swapfill_;
}

void SwapSent::ArenaDtor(void* object) {
  SwapSent* _this = reinterpret_cast< SwapSent* >(object);
  (void)_this;
}
void SwapSent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapSent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapSent& SwapSent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapSent_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void SwapSent::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SwapSent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sig_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(swapfill_ != nullptr);
      swapfill_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapSent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.SwapFill swapfill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sig = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapSent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SwapSent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.SwapFill swapfill = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::swapfill(this), target, stream);
  }

  // optional bytes sig = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_sig(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SwapSent)
  return target;
}

size_t SwapSent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SwapSent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes sig = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sig());
    }

    // optional .fantasybit.SwapFill swapfill = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swapfill_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapSent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SwapSent)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapSent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapSent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SwapSent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SwapSent)
    MergeFrom(*source);
  }
}

void SwapSent::MergeFrom(const SwapSent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SwapSent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sig(from._internal_sig());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_swapfill()->::fantasybit::SwapFill::MergeFrom(from._internal_swapfill());
    }
  }
}

void SwapSent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SwapSent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapSent::CopyFrom(const SwapSent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SwapSent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapSent::IsInitialized() const {
  return true;
}

void SwapSent::InternalSwap(SwapSent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sig_.Swap(&other->sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(swapfill_, other->swapfill_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapSent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProofOfDoubleSpend::InitAsDefaultInstance() {
  ::fantasybit::_ProofOfDoubleSpend_default_instance_._instance.get_mutable()->swapsent_ = const_cast< ::fantasybit::SwapSent*>(
      ::fantasybit::SwapSent::internal_default_instance());
  ::fantasybit::_ProofOfDoubleSpend_default_instance_._instance.get_mutable()->utxo_ = const_cast< ::fantasybit::Bitcoin_UTXO*>(
      ::fantasybit::Bitcoin_UTXO::internal_default_instance());
}
class ProofOfDoubleSpend::_Internal {
 public:
  using HasBits = decltype(std::declval<ProofOfDoubleSpend>()._has_bits_);
  static const ::fantasybit::SwapSent& swapsent(const ProofOfDoubleSpend* msg);
  static void set_has_swapsent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::fantasybit::Bitcoin_UTXO& utxo(const ProofOfDoubleSpend* msg);
  static void set_has_utxo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pre(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_post(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sig(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::fantasybit::SwapSent&
ProofOfDoubleSpend::_Internal::swapsent(const ProofOfDoubleSpend* msg) {
  return *msg->swapsent_;
}
const ::fantasybit::Bitcoin_UTXO&
ProofOfDoubleSpend::_Internal::utxo(const ProofOfDoubleSpend* msg) {
  return *msg->utxo_;
}
ProofOfDoubleSpend::ProofOfDoubleSpend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ProofOfDoubleSpend)
}
ProofOfDoubleSpend::ProofOfDoubleSpend(const ProofOfDoubleSpend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pre()) {
    pre_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pre(),
      GetArena());
  }
  post_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_post()) {
    post_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post(),
      GetArena());
  }
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sig()) {
    sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sig(),
      GetArena());
  }
  if (from._internal_has_swapsent()) {
    swapsent_ = new ::fantasybit::SwapSent(*from.swapsent_);
  } else {
    swapsent_ = nullptr;
  }
  if (from._internal_has_utxo()) {
    utxo_ = new ::fantasybit::Bitcoin_UTXO(*from.utxo_);
  } else {
    utxo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProofOfDoubleSpend)
}

void ProofOfDoubleSpend::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProofOfDoubleSpend_ProtoData_2eproto.base);
  pre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  post_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&swapsent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utxo_) -
      reinterpret_cast<char*>(&swapsent_)) + sizeof(utxo_));
}

ProofOfDoubleSpend::~ProofOfDoubleSpend() {
  // @@protoc_insertion_point(destructor:fantasybit.ProofOfDoubleSpend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProofOfDoubleSpend::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pre_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  post_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete swapsent_;
  if (this != internal_default_instance()) delete utxo_;
}

void ProofOfDoubleSpend::ArenaDtor(void* object) {
  ProofOfDoubleSpend* _this = reinterpret_cast< ProofOfDoubleSpend* >(object);
  (void)_this;
}
void ProofOfDoubleSpend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProofOfDoubleSpend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProofOfDoubleSpend& ProofOfDoubleSpend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProofOfDoubleSpend_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void ProofOfDoubleSpend::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProofOfDoubleSpend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pre_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      post_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sig_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(swapsent_ != nullptr);
      swapsent_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(utxo_ != nullptr);
      utxo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProofOfDoubleSpend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.SwapSent swapsent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapsent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.Bitcoin_UTXO utxo = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_utxo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pre = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_pre();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes post = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_post();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sig = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProofOfDoubleSpend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProofOfDoubleSpend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.SwapSent swapsent = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::swapsent(this), target, stream);
  }

  // optional .fantasybit.Bitcoin_UTXO utxo = 20;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::utxo(this), target, stream);
  }

  // optional bytes pre = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_pre(), target);
  }

  // optional bytes post = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_post(), target);
  }

  // optional bytes sig = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_sig(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProofOfDoubleSpend)
  return target;
}

size_t ProofOfDoubleSpend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProofOfDoubleSpend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes pre = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pre());
    }

    // optional bytes post = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_post());
    }

    // optional bytes sig = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sig());
    }

    // optional .fantasybit.SwapSent swapsent = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swapsent_);
    }

    // optional .fantasybit.Bitcoin_UTXO utxo = 20;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *utxo_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProofOfDoubleSpend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProofOfDoubleSpend)
  GOOGLE_DCHECK_NE(&from, this);
  const ProofOfDoubleSpend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProofOfDoubleSpend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProofOfDoubleSpend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProofOfDoubleSpend)
    MergeFrom(*source);
  }
}

void ProofOfDoubleSpend::MergeFrom(const ProofOfDoubleSpend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProofOfDoubleSpend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pre(from._internal_pre());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_post(from._internal_post());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sig(from._internal_sig());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_swapsent()->::fantasybit::SwapSent::MergeFrom(from._internal_swapsent());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_utxo()->::fantasybit::Bitcoin_UTXO::MergeFrom(from._internal_utxo());
    }
  }
}

void ProofOfDoubleSpend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProofOfDoubleSpend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProofOfDoubleSpend::CopyFrom(const ProofOfDoubleSpend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProofOfDoubleSpend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProofOfDoubleSpend::IsInitialized() const {
  return true;
}

void ProofOfDoubleSpend::InternalSwap(ProofOfDoubleSpend* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pre_.Swap(&other->pre_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  post_.Swap(&other->post_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sig_.Swap(&other->sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProofOfDoubleSpend, utxo_)
      + sizeof(ProofOfDoubleSpend::utxo_)
      - PROTOBUF_FIELD_OFFSET(ProofOfDoubleSpend, swapsent_)>(
          reinterpret_cast<char*>(&swapsent_),
          reinterpret_cast<char*>(&other->swapsent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProofOfDoubleSpend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapSentAck::InitAsDefaultInstance() {
  ::fantasybit::_SwapSentAck_default_instance_._instance.get_mutable()->swapsent_ = const_cast< ::fantasybit::SwapSent*>(
      ::fantasybit::SwapSent::internal_default_instance());
}
class SwapSentAck::_Internal {
 public:
  using HasBits = decltype(std::declval<SwapSentAck>()._has_bits_);
  static const ::fantasybit::SwapSent& swapsent(const SwapSentAck* msg);
  static void set_has_swapsent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::SwapSent&
SwapSentAck::_Internal::swapsent(const SwapSentAck* msg) {
  return *msg->swapsent_;
}
SwapSentAck::SwapSentAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.SwapSentAck)
}
SwapSentAck::SwapSentAck(const SwapSentAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_swapsent()) {
    swapsent_ = new ::fantasybit::SwapSent(*from.swapsent_);
  } else {
    swapsent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.SwapSentAck)
}

void SwapSentAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapSentAck_ProtoData_2eproto.base);
  swapsent_ = nullptr;
}

SwapSentAck::~SwapSentAck() {
  // @@protoc_insertion_point(destructor:fantasybit.SwapSentAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwapSentAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete swapsent_;
}

void SwapSentAck::ArenaDtor(void* object) {
  SwapSentAck* _this = reinterpret_cast< SwapSentAck* >(object);
  (void)_this;
}
void SwapSentAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapSentAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapSentAck& SwapSentAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapSentAck_ProtoData_2eproto.base);
  return *internal_default_instance();
}


void SwapSentAck::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SwapSentAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(swapsent_ != nullptr);
    swapsent_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapSentAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.SwapSent swapsent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapsent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapSentAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SwapSentAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.SwapSent swapsent = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::swapsent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SwapSentAck)
  return target;
}

size_t SwapSentAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SwapSentAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .fantasybit.SwapSent swapsent = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *swapsent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapSentAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SwapSentAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapSentAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapSentAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SwapSentAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SwapSentAck)
    MergeFrom(*source);
  }
}

void SwapSentAck::MergeFrom(const SwapSentAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SwapSentAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_swapsent()) {
    _internal_mutable_swapsent()->::fantasybit::SwapSent::MergeFrom(from._internal_swapsent());
  }
}

void SwapSentAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SwapSentAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapSentAck::CopyFrom(const SwapSentAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SwapSentAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapSentAck::IsInitialized() const {
  return true;
}

void SwapSentAck::InternalSwap(SwapSentAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(swapsent_, other->swapsent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapSentAck::GetMetadata() const {
  return GetMetadataStatic();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TweetProof::kTweetProofFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::NameProof,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::TweetProof >, 11, false >
  TweetProof::tweet_proof(kTweetProofFieldNumber, ::fantasybit::TweetProof::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterProof::kMasterProofFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::NameProof,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::MasterProof >, 11, false >
  MasterProof::master_proof(kMasterProofFieldNumber, ::fantasybit::MasterProof::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameTrans::kNameTransFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::NameTrans >, 11, false >
  NameTrans::name_trans(kNameTransFieldNumber, ::fantasybit::NameTrans::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferTrans::kTransferTranFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::TransferTrans >, 11, false >
  TransferTrans::transfer_tran(kTransferTranFieldNumber, ::fantasybit::TransferTrans::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectionTrans::kProjTransFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::ProjectionTrans >, 11, false >
  ProjectionTrans::proj_trans(kProjTransFieldNumber, ::fantasybit::ProjectionTrans::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectionTransBlock::kProjTransBlockFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::ProjectionTransBlock >, 11, false >
  ProjectionTransBlock::proj_trans_block(kProjTransBlockFieldNumber, ::fantasybit::ProjectionTransBlock::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerData::kPlayerDataFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::PlayerData >, 11, false >
  PlayerData::player_data(kPlayerDataFieldNumber, ::fantasybit::PlayerData::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameData::kGameDataFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GameData >, 11, false >
  GameData::game_data(kGameDataFieldNumber, ::fantasybit::GameData::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultData::kResultDataFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::ResultData >, 11, false >
  ResultData::result_data(kResultDataFieldNumber, ::fantasybit::ResultData::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScheduleData::kScheduleDataFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::ScheduleData >, 11, false >
  ScheduleData::schedule_data(kScheduleDataFieldNumber, ::fantasybit::ScheduleData::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataTransition::kDataTransFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::DataTransition >, 11, false >
  DataTransition::data_trans(kDataTransFieldNumber, ::fantasybit::DataTransition::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageData::kMessageDataFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::MessageData >, 11, false >
  MessageData::message_data(kMessageDataFieldNumber, ::fantasybit::MessageData::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StampedTrans::kStampedTransFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::StampedTrans >, 11, false >
  StampedTrans::stamped_trans(kStampedTransFieldNumber, ::fantasybit::StampedTrans::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeOrder::kExchangeOrderFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::ExchangeOrder >, 11, false >
  ExchangeOrder::exchange_order(kExchangeOrderFieldNumber, ::fantasybit::ExchangeOrder::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeTransition::kTimeTransFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::TimeTransition >, 11, false >
  TimeTransition::time_trans(kTimeTransFieldNumber, ::fantasybit::TimeTransition::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwapAsk::kSwapaskTranFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::SwapAsk >, 11, false >
  SwapAsk::swapask_tran(kSwapaskTranFieldNumber, ::fantasybit::SwapAsk::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwapBid::kSwapbidTranFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::SwapBid >, 11, false >
  SwapBid::swapbid_tran(kSwapbidTranFieldNumber, ::fantasybit::SwapBid::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwapFill::kSwapfilTranFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::SwapFill >, 11, false >
  SwapFill::swapfil_tran(kSwapfilTranFieldNumber, ::fantasybit::SwapFill::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwapSent::kSwapsentTranFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::SwapSent >, 11, false >
  SwapSent::swapsent_tran(kSwapsentTranFieldNumber, ::fantasybit::SwapSent::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProofOfDoubleSpend::kPodpTranFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::ProofOfDoubleSpend >, 11, false >
  ProofOfDoubleSpend::podp_tran(kPodpTranFieldNumber, ::fantasybit::ProofOfDoubleSpend::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwapSentAck::kSwapsentackTranFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::SwapSentAck >, 11, false >
  SwapSentAck::swapsentack_tran(kSwapsentackTranFieldNumber, ::fantasybit::SwapSentAck::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fantasybit::MyFantasyName* Arena::CreateMaybeMessage< ::fantasybit::MyFantasyName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::MyFantasyName >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::FantasyPlayer* Arena::CreateMaybeMessage< ::fantasybit::FantasyPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::FantasyPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Secret* Arena::CreateMaybeMessage< ::fantasybit::Secret >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Secret >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Secret2* Arena::CreateMaybeMessage< ::fantasybit::Secret2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Secret2 >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Secret3* Arena::CreateMaybeMessage< ::fantasybit::Secret3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Secret3 >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::OutData* Arena::CreateMaybeMessage< ::fantasybit::OutData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::OutData >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::InData* Arena::CreateMaybeMessage< ::fantasybit::InData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::InData >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::NameProof* Arena::CreateMaybeMessage< ::fantasybit::NameProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::NameProof >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::TweetProof* Arena::CreateMaybeMessage< ::fantasybit::TweetProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::TweetProof >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::MasterProof* Arena::CreateMaybeMessage< ::fantasybit::MasterProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::MasterProof >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Transaction* Arena::CreateMaybeMessage< ::fantasybit::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::NameTrans* Arena::CreateMaybeMessage< ::fantasybit::NameTrans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::NameTrans >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::TransferTrans* Arena::CreateMaybeMessage< ::fantasybit::TransferTrans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::TransferTrans >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::SignedTransaction* Arena::CreateMaybeMessage< ::fantasybit::SignedTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::SignedTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::BlockHeader* Arena::CreateMaybeMessage< ::fantasybit::BlockHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::BlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::SignedBlockHeader* Arena::CreateMaybeMessage< ::fantasybit::SignedBlockHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::SignedBlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Block* Arena::CreateMaybeMessage< ::fantasybit::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::NodeRequest* Arena::CreateMaybeMessage< ::fantasybit::NodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::NodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::NodeReply* Arena::CreateMaybeMessage< ::fantasybit::NodeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::NodeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::FantasyPlayerPoints* Arena::CreateMaybeMessage< ::fantasybit::FantasyPlayerPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::FantasyPlayerPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ProjectionTrans* Arena::CreateMaybeMessage< ::fantasybit::ProjectionTrans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ProjectionTrans >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::PlayerPoints* Arena::CreateMaybeMessage< ::fantasybit::PlayerPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PlayerPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ProjectionTransBlock* Arena::CreateMaybeMessage< ::fantasybit::ProjectionTransBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ProjectionTransBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Data* Arena::CreateMaybeMessage< ::fantasybit::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::PlayerData* Arena::CreateMaybeMessage< ::fantasybit::PlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GameData* Arena::CreateMaybeMessage< ::fantasybit::GameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GameData >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ResultData* Arena::CreateMaybeMessage< ::fantasybit::ResultData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ResultData >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ScheduleData* Arena::CreateMaybeMessage< ::fantasybit::ScheduleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ScheduleData >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::DataTransition* Arena::CreateMaybeMessage< ::fantasybit::DataTransition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::DataTransition >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::TeamState* Arena::CreateMaybeMessage< ::fantasybit::TeamState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::TeamState >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::DeltaData* Arena::CreateMaybeMessage< ::fantasybit::DeltaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::DeltaData >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::MessageData* Arena::CreateMaybeMessage< ::fantasybit::MessageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::MessageData >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::StampedTrans* Arena::CreateMaybeMessage< ::fantasybit::StampedTrans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::StampedTrans >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ExchangeOrder* Arena::CreateMaybeMessage< ::fantasybit::ExchangeOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ExchangeOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::OrderUnique* Arena::CreateMaybeMessage< ::fantasybit::OrderUnique >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::OrderUnique >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::OrderDeets* Arena::CreateMaybeMessage< ::fantasybit::OrderDeets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::OrderDeets >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::InsideUnique* Arena::CreateMaybeMessage< ::fantasybit::InsideUnique >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::InsideUnique >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::TimeTransition* Arena::CreateMaybeMessage< ::fantasybit::TimeTransition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::TimeTransition >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Bitcoin_UTXO* Arena::CreateMaybeMessage< ::fantasybit::Bitcoin_UTXO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Bitcoin_UTXO >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Bitcoin_UTXOS* Arena::CreateMaybeMessage< ::fantasybit::Bitcoin_UTXOS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Bitcoin_UTXOS >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::SwapAsk* Arena::CreateMaybeMessage< ::fantasybit::SwapAsk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::SwapAsk >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::SwapBid* Arena::CreateMaybeMessage< ::fantasybit::SwapBid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::SwapBid >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::SwapFill* Arena::CreateMaybeMessage< ::fantasybit::SwapFill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::SwapFill >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::SwapSent* Arena::CreateMaybeMessage< ::fantasybit::SwapSent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::SwapSent >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ProofOfDoubleSpend* Arena::CreateMaybeMessage< ::fantasybit::ProofOfDoubleSpend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ProofOfDoubleSpend >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::SwapSentAck* Arena::CreateMaybeMessage< ::fantasybit::SwapSentAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::SwapSentAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
