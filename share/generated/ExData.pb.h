// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ExData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ExData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ExData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ExData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ExData_2eproto;
namespace fantasybit {
class BookDelta;
class BookDeltaDefaultTypeInternal;
extern BookDeltaDefaultTypeInternal _BookDelta_default_instance_;
class BookPos;
class BookPosDefaultTypeInternal;
extern BookPosDefaultTypeInternal _BookPos_default_instance_;
class ContractOHLC;
class ContractOHLCDefaultTypeInternal;
extern ContractOHLCDefaultTypeInternal _ContractOHLC_default_instance_;
class DepthFeedDelta;
class DepthFeedDeltaDefaultTypeInternal;
extern DepthFeedDeltaDefaultTypeInternal _DepthFeedDelta_default_instance_;
class DepthItem;
class DepthItemDefaultTypeInternal;
extern DepthItemDefaultTypeInternal _DepthItem_default_instance_;
class FutContract;
class FutContractDefaultTypeInternal;
extern FutContractDefaultTypeInternal _FutContract_default_instance_;
class GameSettlePos;
class GameSettlePosDefaultTypeInternal;
extern GameSettlePosDefaultTypeInternal _GameSettlePos_default_instance_;
class MarketQuote;
class MarketQuoteDefaultTypeInternal;
extern MarketQuoteDefaultTypeInternal _MarketQuote_default_instance_;
class MarketSnapshot;
class MarketSnapshotDefaultTypeInternal;
extern MarketSnapshotDefaultTypeInternal _MarketSnapshot_default_instance_;
class MarketTicker;
class MarketTickerDefaultTypeInternal;
extern MarketTickerDefaultTypeInternal _MarketTicker_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderCore;
class OrderCoreDefaultTypeInternal;
extern OrderCoreDefaultTypeInternal _OrderCore_default_instance_;
class OrderFill;
class OrderFillDefaultTypeInternal;
extern OrderFillDefaultTypeInternal _OrderFill_default_instance_;
class SettlePos;
class SettlePosDefaultTypeInternal;
extern SettlePosDefaultTypeInternal _SettlePos_default_instance_;
class StorePos;
class StorePosDefaultTypeInternal;
extern StorePosDefaultTypeInternal _StorePos_default_instance_;
class TradeTic;
class TradeTicDefaultTypeInternal;
extern TradeTicDefaultTypeInternal _TradeTic_default_instance_;
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> ::fantasybit::BookDelta* Arena::CreateMaybeMessage<::fantasybit::BookDelta>(Arena*);
template<> ::fantasybit::BookPos* Arena::CreateMaybeMessage<::fantasybit::BookPos>(Arena*);
template<> ::fantasybit::ContractOHLC* Arena::CreateMaybeMessage<::fantasybit::ContractOHLC>(Arena*);
template<> ::fantasybit::DepthFeedDelta* Arena::CreateMaybeMessage<::fantasybit::DepthFeedDelta>(Arena*);
template<> ::fantasybit::DepthItem* Arena::CreateMaybeMessage<::fantasybit::DepthItem>(Arena*);
template<> ::fantasybit::FutContract* Arena::CreateMaybeMessage<::fantasybit::FutContract>(Arena*);
template<> ::fantasybit::GameSettlePos* Arena::CreateMaybeMessage<::fantasybit::GameSettlePos>(Arena*);
template<> ::fantasybit::MarketQuote* Arena::CreateMaybeMessage<::fantasybit::MarketQuote>(Arena*);
template<> ::fantasybit::MarketSnapshot* Arena::CreateMaybeMessage<::fantasybit::MarketSnapshot>(Arena*);
template<> ::fantasybit::MarketTicker* Arena::CreateMaybeMessage<::fantasybit::MarketTicker>(Arena*);
template<> ::fantasybit::Order* Arena::CreateMaybeMessage<::fantasybit::Order>(Arena*);
template<> ::fantasybit::OrderCore* Arena::CreateMaybeMessage<::fantasybit::OrderCore>(Arena*);
template<> ::fantasybit::OrderFill* Arena::CreateMaybeMessage<::fantasybit::OrderFill>(Arena*);
template<> ::fantasybit::SettlePos* Arena::CreateMaybeMessage<::fantasybit::SettlePos>(Arena*);
template<> ::fantasybit::StorePos* Arena::CreateMaybeMessage<::fantasybit::StorePos>(Arena*);
template<> ::fantasybit::TradeTic* Arena::CreateMaybeMessage<::fantasybit::TradeTic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fantasybit {

enum MarketTicker_Type : int {
  MarketTicker_Type_BID = 1,
  MarketTicker_Type_ASK = 2,
  MarketTicker_Type_LAST = 3
};
bool MarketTicker_Type_IsValid(int value);
constexpr MarketTicker_Type MarketTicker_Type_Type_MIN = MarketTicker_Type_BID;
constexpr MarketTicker_Type MarketTicker_Type_Type_MAX = MarketTicker_Type_LAST;
constexpr int MarketTicker_Type_Type_ARRAYSIZE = MarketTicker_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketTicker_Type_descriptor();
template<typename T>
inline const std::string& MarketTicker_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarketTicker_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarketTicker_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarketTicker_Type_descriptor(), enum_t_value);
}
inline bool MarketTicker_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MarketTicker_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarketTicker_Type>(
    MarketTicker_Type_descriptor(), name, value);
}
enum FutContract_Type : int {
  FutContract_Type_WEEKLY = 1,
  FutContract_Type_SEASON = 2,
  FutContract_Type_ROW = 3,
  FutContract_Type_OTHER = 4
};
bool FutContract_Type_IsValid(int value);
constexpr FutContract_Type FutContract_Type_Type_MIN = FutContract_Type_WEEKLY;
constexpr FutContract_Type FutContract_Type_Type_MAX = FutContract_Type_OTHER;
constexpr int FutContract_Type_Type_ARRAYSIZE = FutContract_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FutContract_Type_descriptor();
template<typename T>
inline const std::string& FutContract_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FutContract_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FutContract_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FutContract_Type_descriptor(), enum_t_value);
}
inline bool FutContract_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FutContract_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FutContract_Type>(
    FutContract_Type_descriptor(), name, value);
}
// ===================================================================

class SettlePos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.SettlePos) */ {
 public:
  inline SettlePos() : SettlePos(nullptr) {};
  virtual ~SettlePos();

  SettlePos(const SettlePos& from);
  SettlePos(SettlePos&& from) noexcept
    : SettlePos() {
    *this = ::std::move(from);
  }

  inline SettlePos& operator=(const SettlePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettlePos& operator=(SettlePos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettlePos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettlePos* internal_default_instance() {
    return reinterpret_cast<const SettlePos*>(
               &_SettlePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SettlePos& a, SettlePos& b) {
    a.Swap(&b);
  }
  inline void Swap(SettlePos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettlePos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettlePos* New() const final {
    return CreateMaybeMessage<SettlePos>(nullptr);
  }

  SettlePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettlePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettlePos& from);
  void MergeFrom(const SettlePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettlePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.SettlePos";
  }
  protected:
  explicit SettlePos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkFieldNumber = 10,
    kQtyFieldNumber = 20,
    kPriceFieldNumber = 25,
  };
  // optional string pk = 10;
  bool has_pk() const;
  private:
  bool _internal_has_pk() const;
  public:
  void clear_pk();
  const std::string& pk() const;
  void set_pk(const std::string& value);
  void set_pk(std::string&& value);
  void set_pk(const char* value);
  void set_pk(const char* value, size_t size);
  std::string* mutable_pk();
  std::string* release_pk();
  void set_allocated_pk(std::string* pk);
  private:
  const std::string& _internal_pk() const;
  void _internal_set_pk(const std::string& value);
  std::string* _internal_mutable_pk();
  public:

  // optional int32 qty = 20;
  bool has_qty() const;
  private:
  bool _internal_has_qty() const;
  public:
  void clear_qty();
  ::PROTOBUF_NAMESPACE_ID::int32 qty() const;
  void set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qty() const;
  void _internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 price = 25;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.SettlePos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pk_;
  ::PROTOBUF_NAMESPACE_ID::int32 qty_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class StorePos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.StorePos) */ {
 public:
  inline StorePos() : StorePos(nullptr) {};
  virtual ~StorePos();

  StorePos(const StorePos& from);
  StorePos(StorePos&& from) noexcept
    : StorePos() {
    *this = ::std::move(from);
  }

  inline StorePos& operator=(const StorePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorePos& operator=(StorePos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorePos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StorePos* internal_default_instance() {
    return reinterpret_cast<const StorePos*>(
               &_StorePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StorePos& a, StorePos& b) {
    a.Swap(&b);
  }
  inline void Swap(StorePos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorePos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorePos* New() const final {
    return CreateMaybeMessage<StorePos>(nullptr);
  }

  StorePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorePos& from);
  void MergeFrom(const StorePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.StorePos";
  }
  protected:
  explicit StorePos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQtyFieldNumber = 20,
    kPriceFieldNumber = 25,
  };
  // optional int32 qty = 20;
  bool has_qty() const;
  private:
  bool _internal_has_qty() const;
  public:
  void clear_qty();
  ::PROTOBUF_NAMESPACE_ID::int32 qty() const;
  void set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qty() const;
  void _internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 price = 25;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.StorePos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 qty_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class BookPos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.BookPos) */ {
 public:
  inline BookPos() : BookPos(nullptr) {};
  virtual ~BookPos();

  BookPos(const BookPos& from);
  BookPos(BookPos&& from) noexcept
    : BookPos() {
    *this = ::std::move(from);
  }

  inline BookPos& operator=(const BookPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookPos& operator=(BookPos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BookPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BookPos* internal_default_instance() {
    return reinterpret_cast<const BookPos*>(
               &_BookPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BookPos& a, BookPos& b) {
    a.Swap(&b);
  }
  inline void Swap(BookPos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BookPos* New() const final {
    return CreateMaybeMessage<BookPos>(nullptr);
  }

  BookPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BookPos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BookPos& from);
  void MergeFrom(const BookPos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookPos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.BookPos";
  }
  protected:
  explicit BookPos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 40,
    kPlayeridFieldNumber = 30,
    kSymbolFieldNumber = 50,
  };
  // repeated .fantasybit.SettlePos positions = 40;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::fantasybit::SettlePos* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::SettlePos >*
      mutable_positions();
  private:
  const ::fantasybit::SettlePos& _internal_positions(int index) const;
  ::fantasybit::SettlePos* _internal_add_positions();
  public:
  const ::fantasybit::SettlePos& positions(int index) const;
  ::fantasybit::SettlePos* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::SettlePos >&
      positions() const;

  // optional string playerid = 30;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional string symbol = 50;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.BookPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::SettlePos > positions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class GameSettlePos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameSettlePos) */ {
 public:
  inline GameSettlePos() : GameSettlePos(nullptr) {};
  virtual ~GameSettlePos();

  GameSettlePos(const GameSettlePos& from);
  GameSettlePos(GameSettlePos&& from) noexcept
    : GameSettlePos() {
    *this = ::std::move(from);
  }

  inline GameSettlePos& operator=(const GameSettlePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameSettlePos& operator=(GameSettlePos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameSettlePos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSettlePos* internal_default_instance() {
    return reinterpret_cast<const GameSettlePos*>(
               &_GameSettlePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameSettlePos& a, GameSettlePos& b) {
    a.Swap(&b);
  }
  inline void Swap(GameSettlePos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameSettlePos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameSettlePos* New() const final {
    return CreateMaybeMessage<GameSettlePos>(nullptr);
  }

  GameSettlePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameSettlePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameSettlePos& from);
  void MergeFrom(const GameSettlePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSettlePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GameSettlePos";
  }
  protected:
  explicit GameSettlePos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeFieldNumber = 20,
    kAwayFieldNumber = 30,
    kGameidFieldNumber = 10,
  };
  // repeated .fantasybit.BookPos home = 20;
  int home_size() const;
  private:
  int _internal_home_size() const;
  public:
  void clear_home();
  ::fantasybit::BookPos* mutable_home(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::BookPos >*
      mutable_home();
  private:
  const ::fantasybit::BookPos& _internal_home(int index) const;
  ::fantasybit::BookPos* _internal_add_home();
  public:
  const ::fantasybit::BookPos& home(int index) const;
  ::fantasybit::BookPos* add_home();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::BookPos >&
      home() const;

  // repeated .fantasybit.BookPos away = 30;
  int away_size() const;
  private:
  int _internal_away_size() const;
  public:
  void clear_away();
  ::fantasybit::BookPos* mutable_away(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::BookPos >*
      mutable_away();
  private:
  const ::fantasybit::BookPos& _internal_away(int index) const;
  ::fantasybit::BookPos* _internal_add_away();
  public:
  const ::fantasybit::BookPos& away(int index) const;
  ::fantasybit::BookPos* add_away();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::BookPos >&
      away() const;

  // optional string gameid = 10;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  const std::string& gameid() const;
  void set_gameid(const std::string& value);
  void set_gameid(std::string&& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  std::string* mutable_gameid();
  std::string* release_gameid();
  void set_allocated_gameid(std::string* gameid);
  private:
  const std::string& _internal_gameid() const;
  void _internal_set_gameid(const std::string& value);
  std::string* _internal_mutable_gameid();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.GameSettlePos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::BookPos > home_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::BookPos > away_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameid_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class OrderCore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.OrderCore) */ {
 public:
  inline OrderCore() : OrderCore(nullptr) {};
  virtual ~OrderCore();

  OrderCore(const OrderCore& from);
  OrderCore(OrderCore&& from) noexcept
    : OrderCore() {
    *this = ::std::move(from);
  }

  inline OrderCore& operator=(const OrderCore& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderCore& operator=(OrderCore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderCore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderCore* internal_default_instance() {
    return reinterpret_cast<const OrderCore*>(
               &_OrderCore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OrderCore& a, OrderCore& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderCore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderCore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderCore* New() const final {
    return CreateMaybeMessage<OrderCore>(nullptr);
  }

  OrderCore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderCore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderCore& from);
  void MergeFrom(const OrderCore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderCore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.OrderCore";
  }
  protected:
  explicit OrderCore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 30,
    kBuysideFieldNumber = 10,
    kSizeFieldNumber = 20,
  };
  // optional int32 price = 30;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool buyside = 10;
  bool has_buyside() const;
  private:
  bool _internal_has_buyside() const;
  public:
  void clear_buyside();
  bool buyside() const;
  void set_buyside(bool value);
  private:
  bool _internal_buyside() const;
  void _internal_set_buyside(bool value);
  public:

  // optional int32 size = 20;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.OrderCore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  bool buyside_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Order) */ {
 public:
  inline Order() : Order(nullptr) {};
  virtual ~Order();

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoreFieldNumber = 20,
    kRefnumFieldNumber = 10,
  };
  // optional .fantasybit.OrderCore core = 20;
  bool has_core() const;
  private:
  bool _internal_has_core() const;
  public:
  void clear_core();
  const ::fantasybit::OrderCore& core() const;
  ::fantasybit::OrderCore* release_core();
  ::fantasybit::OrderCore* mutable_core();
  void set_allocated_core(::fantasybit::OrderCore* core);
  private:
  const ::fantasybit::OrderCore& _internal_core() const;
  ::fantasybit::OrderCore* _internal_mutable_core();
  public:
  void unsafe_arena_set_allocated_core(
      ::fantasybit::OrderCore* core);
  ::fantasybit::OrderCore* unsafe_arena_release_core();

  // optional int32 refnum = 10;
  bool has_refnum() const;
  private:
  bool _internal_has_refnum() const;
  public:
  void clear_refnum();
  ::PROTOBUF_NAMESPACE_ID::int32 refnum() const;
  void set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refnum() const;
  void _internal_set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::OrderCore* core_;
  ::PROTOBUF_NAMESPACE_ID::int32 refnum_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class OrderFill PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.OrderFill) */ {
 public:
  inline OrderFill() : OrderFill(nullptr) {};
  virtual ~OrderFill();

  OrderFill(const OrderFill& from);
  OrderFill(OrderFill&& from) noexcept
    : OrderFill() {
    *this = ::std::move(from);
  }

  inline OrderFill& operator=(const OrderFill& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderFill& operator=(OrderFill&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderFill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderFill* internal_default_instance() {
    return reinterpret_cast<const OrderFill*>(
               &_OrderFill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OrderFill& a, OrderFill& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderFill* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderFill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderFill* New() const final {
    return CreateMaybeMessage<OrderFill>(nullptr);
  }

  OrderFill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderFill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderFill& from);
  void MergeFrom(const OrderFill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderFill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.OrderFill";
  }
  protected:
  explicit OrderFill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 10,
    kTimestampFieldNumber = 40,
    kFillpriceFieldNumber = 20,
    kFillsizeFieldNumber = 30,
  };
  // optional .fantasybit.Order left = 10;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::fantasybit::Order& left() const;
  ::fantasybit::Order* release_left();
  ::fantasybit::Order* mutable_left();
  void set_allocated_left(::fantasybit::Order* left);
  private:
  const ::fantasybit::Order& _internal_left() const;
  ::fantasybit::Order* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::fantasybit::Order* left);
  ::fantasybit::Order* unsafe_arena_release_left();

  // optional int32 timestamp = 40;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 fillprice = 20;
  bool has_fillprice() const;
  private:
  bool _internal_has_fillprice() const;
  public:
  void clear_fillprice();
  ::PROTOBUF_NAMESPACE_ID::int32 fillprice() const;
  void set_fillprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fillprice() const;
  void _internal_set_fillprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 fillsize = 30;
  bool has_fillsize() const;
  private:
  bool _internal_has_fillsize() const;
  public:
  void clear_fillsize();
  ::PROTOBUF_NAMESPACE_ID::int32 fillsize() const;
  void set_fillsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fillsize() const;
  void _internal_set_fillsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.OrderFill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::Order* left_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 fillprice_;
  ::PROTOBUF_NAMESPACE_ID::int32 fillsize_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class MarketTicker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.MarketTicker) */ {
 public:
  inline MarketTicker() : MarketTicker(nullptr) {};
  virtual ~MarketTicker();

  MarketTicker(const MarketTicker& from);
  MarketTicker(MarketTicker&& from) noexcept
    : MarketTicker() {
    *this = ::std::move(from);
  }

  inline MarketTicker& operator=(const MarketTicker& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketTicker& operator=(MarketTicker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketTicker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketTicker* internal_default_instance() {
    return reinterpret_cast<const MarketTicker*>(
               &_MarketTicker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MarketTicker& a, MarketTicker& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketTicker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketTicker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketTicker* New() const final {
    return CreateMaybeMessage<MarketTicker>(nullptr);
  }

  MarketTicker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketTicker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketTicker& from);
  void MergeFrom(const MarketTicker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketTicker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.MarketTicker";
  }
  protected:
  explicit MarketTicker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MarketTicker_Type Type;
  static constexpr Type BID =
    MarketTicker_Type_BID;
  static constexpr Type ASK =
    MarketTicker_Type_ASK;
  static constexpr Type LAST =
    MarketTicker_Type_LAST;
  static inline bool Type_IsValid(int value) {
    return MarketTicker_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    MarketTicker_Type_Type_MIN;
  static constexpr Type Type_MAX =
    MarketTicker_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    MarketTicker_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return MarketTicker_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return MarketTicker_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return MarketTicker_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kSizeFieldNumber = 20,
    kPriceFieldNumber = 30,
    kTypeFieldNumber = 1,
  };
  // optional string symbol = 2;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional int32 size = 20;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 price = 30;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .fantasybit.MarketTicker.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::fantasybit::MarketTicker_Type type() const;
  void set_type(::fantasybit::MarketTicker_Type value);
  private:
  ::fantasybit::MarketTicker_Type _internal_type() const;
  void _internal_set_type(::fantasybit::MarketTicker_Type value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.MarketTicker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  int type_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class TradeTic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.TradeTic) */ {
 public:
  inline TradeTic() : TradeTic(nullptr) {};
  virtual ~TradeTic();

  TradeTic(const TradeTic& from);
  TradeTic(TradeTic&& from) noexcept
    : TradeTic() {
    *this = ::std::move(from);
  }

  inline TradeTic& operator=(const TradeTic& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeTic& operator=(TradeTic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeTic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeTic* internal_default_instance() {
    return reinterpret_cast<const TradeTic*>(
               &_TradeTic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TradeTic& a, TradeTic& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeTic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeTic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeTic* New() const final {
    return CreateMaybeMessage<TradeTic>(nullptr);
  }

  TradeTic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeTic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeTic& from);
  void MergeFrom(const TradeTic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeTic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.TradeTic";
  }
  protected:
  explicit TradeTic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kSizeFieldNumber = 20,
    kPriceFieldNumber = 30,
    kIshighFieldNumber = 40,
    kIslowFieldNumber = 45,
    kChangeFieldNumber = 50,
    kTicFieldNumber = 60,
  };
  // optional string symbol = 2;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional int32 size = 20;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 price = 30;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ishigh = 40;
  bool has_ishigh() const;
  private:
  bool _internal_has_ishigh() const;
  public:
  void clear_ishigh();
  ::PROTOBUF_NAMESPACE_ID::int32 ishigh() const;
  void set_ishigh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ishigh() const;
  void _internal_set_ishigh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 islow = 45;
  bool has_islow() const;
  private:
  bool _internal_has_islow() const;
  public:
  void clear_islow();
  ::PROTOBUF_NAMESPACE_ID::int32 islow() const;
  void set_islow(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_islow() const;
  void _internal_set_islow(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 change = 50;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  ::PROTOBUF_NAMESPACE_ID::int32 change() const;
  void set_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change() const;
  void _internal_set_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tic = 60;
  bool has_tic() const;
  private:
  bool _internal_has_tic() const;
  public:
  void clear_tic();
  ::PROTOBUF_NAMESPACE_ID::int32 tic() const;
  void set_tic(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tic() const;
  void _internal_set_tic(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.TradeTic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 ishigh_;
  ::PROTOBUF_NAMESPACE_ID::int32 islow_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_;
  ::PROTOBUF_NAMESPACE_ID::int32 tic_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class DepthFeedDelta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.DepthFeedDelta) */ {
 public:
  inline DepthFeedDelta() : DepthFeedDelta(nullptr) {};
  virtual ~DepthFeedDelta();

  DepthFeedDelta(const DepthFeedDelta& from);
  DepthFeedDelta(DepthFeedDelta&& from) noexcept
    : DepthFeedDelta() {
    *this = ::std::move(from);
  }

  inline DepthFeedDelta& operator=(const DepthFeedDelta& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthFeedDelta& operator=(DepthFeedDelta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthFeedDelta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthFeedDelta* internal_default_instance() {
    return reinterpret_cast<const DepthFeedDelta*>(
               &_DepthFeedDelta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DepthFeedDelta& a, DepthFeedDelta& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthFeedDelta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthFeedDelta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepthFeedDelta* New() const final {
    return CreateMaybeMessage<DepthFeedDelta>(nullptr);
  }

  DepthFeedDelta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthFeedDelta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthFeedDelta& from);
  void MergeFrom(const DepthFeedDelta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthFeedDelta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.DepthFeedDelta";
  }
  protected:
  explicit DepthFeedDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kPriceFieldNumber = 30,
    kIsbidFieldNumber = 10,
    kSizeFieldNumber = 20,
  };
  // optional string symbol = 1;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional int32 price = 30;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool isbid = 10;
  bool has_isbid() const;
  private:
  bool _internal_has_isbid() const;
  public:
  void clear_isbid();
  bool isbid() const;
  void set_isbid(bool value);
  private:
  bool _internal_isbid() const;
  void _internal_set_isbid(bool value);
  public:

  // optional int32 size = 20;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.DepthFeedDelta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  bool isbid_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class ContractOHLC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.ContractOHLC) */ {
 public:
  inline ContractOHLC() : ContractOHLC(nullptr) {};
  virtual ~ContractOHLC();

  ContractOHLC(const ContractOHLC& from);
  ContractOHLC(ContractOHLC&& from) noexcept
    : ContractOHLC() {
    *this = ::std::move(from);
  }

  inline ContractOHLC& operator=(const ContractOHLC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractOHLC& operator=(ContractOHLC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractOHLC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractOHLC* internal_default_instance() {
    return reinterpret_cast<const ContractOHLC*>(
               &_ContractOHLC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ContractOHLC& a, ContractOHLC& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractOHLC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractOHLC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractOHLC* New() const final {
    return CreateMaybeMessage<ContractOHLC>(nullptr);
  }

  ContractOHLC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractOHLC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractOHLC& from);
  void MergeFrom(const ContractOHLC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractOHLC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.ContractOHLC";
  }
  protected:
  explicit ContractOHLC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 10,
    kOpenFieldNumber = 20,
    kHighFieldNumber = 30,
    kLowFieldNumber = 40,
    kCloseFieldNumber = 50,
    kVolumeFieldNumber = 60,
    kChangeFieldNumber = 70,
  };
  // optional string symbol = 10;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional int32 open = 20;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  ::PROTOBUF_NAMESPACE_ID::int32 open() const;
  void set_open(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_open() const;
  void _internal_set_open(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 high = 30;
  bool has_high() const;
  private:
  bool _internal_has_high() const;
  public:
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::int32 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 low = 40;
  bool has_low() const;
  private:
  bool _internal_has_low() const;
  public:
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::int32 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 close = 50;
  bool has_close() const;
  private:
  bool _internal_has_close() const;
  public:
  void clear_close();
  ::PROTOBUF_NAMESPACE_ID::int32 close() const;
  void set_close(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_close() const;
  void _internal_set_close(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 volume = 60;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 change = 70;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  ::PROTOBUF_NAMESPACE_ID::int32 change() const;
  void set_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change() const;
  void _internal_set_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.ContractOHLC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_;
  ::PROTOBUF_NAMESPACE_ID::int32 high_;
  ::PROTOBUF_NAMESPACE_ID::int32 low_;
  ::PROTOBUF_NAMESPACE_ID::int32 close_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class DepthItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.DepthItem) */ {
 public:
  inline DepthItem() : DepthItem(nullptr) {};
  virtual ~DepthItem();

  DepthItem(const DepthItem& from);
  DepthItem(DepthItem&& from) noexcept
    : DepthItem() {
    *this = ::std::move(from);
  }

  inline DepthItem& operator=(const DepthItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthItem& operator=(DepthItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthItem* internal_default_instance() {
    return reinterpret_cast<const DepthItem*>(
               &_DepthItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DepthItem& a, DepthItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepthItem* New() const final {
    return CreateMaybeMessage<DepthItem>(nullptr);
  }

  DepthItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthItem& from);
  void MergeFrom(const DepthItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.DepthItem";
  }
  protected:
  explicit DepthItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsFieldNumber = 60,
    kLevelFieldNumber = 10,
    kBFieldNumber = 30,
    kAFieldNumber = 40,
    kBsFieldNumber = 50,
  };
  // optional int32 as = 60;
  bool has_as() const;
  private:
  bool _internal_has_as() const;
  public:
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::int32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 level = 10;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 b = 30;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 a = 40;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 bs = 50;
  bool has_bs() const;
  private:
  bool _internal_has_bs() const;
  public:
  void clear_bs();
  ::PROTOBUF_NAMESPACE_ID::int32 bs() const;
  void set_bs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bs() const;
  void _internal_set_bs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.DepthItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 as_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  ::PROTOBUF_NAMESPACE_ID::int32 bs_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class BookDelta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.BookDelta) */ {
 public:
  inline BookDelta() : BookDelta(nullptr) {};
  virtual ~BookDelta();

  BookDelta(const BookDelta& from);
  BookDelta(BookDelta&& from) noexcept
    : BookDelta() {
    *this = ::std::move(from);
  }

  inline BookDelta& operator=(const BookDelta& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookDelta& operator=(BookDelta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BookDelta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BookDelta* internal_default_instance() {
    return reinterpret_cast<const BookDelta*>(
               &_BookDelta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BookDelta& a, BookDelta& b) {
    a.Swap(&b);
  }
  inline void Swap(BookDelta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookDelta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BookDelta* New() const final {
    return CreateMaybeMessage<BookDelta>(nullptr);
  }

  BookDelta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BookDelta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BookDelta& from);
  void MergeFrom(const BookDelta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookDelta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.BookDelta";
  }
  protected:
  explicit BookDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemovesFieldNumber = 50,
    kLevel2TicFieldNumber = 60,
    kLevel1TicFieldNumber = 70,
    kFantasyNameFieldNumber = 10,
    kPlayeridFieldNumber = 30,
    kSymbolFieldNumber = 90,
    kNewnewFieldNumber = 40,
    kOhlcFieldNumber = 41,
    kSeqnumFieldNumber = 20,
    kBlocknumFieldNumber = 80,
  };
  // repeated .fantasybit.Order removes = 50;
  int removes_size() const;
  private:
  int _internal_removes_size() const;
  public:
  void clear_removes();
  ::fantasybit::Order* mutable_removes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Order >*
      mutable_removes();
  private:
  const ::fantasybit::Order& _internal_removes(int index) const;
  ::fantasybit::Order* _internal_add_removes();
  public:
  const ::fantasybit::Order& removes(int index) const;
  ::fantasybit::Order* add_removes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Order >&
      removes() const;

  // repeated .fantasybit.MarketTicker level2tic = 60;
  int level2tic_size() const;
  private:
  int _internal_level2tic_size() const;
  public:
  void clear_level2tic();
  ::fantasybit::MarketTicker* mutable_level2tic(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::MarketTicker >*
      mutable_level2tic();
  private:
  const ::fantasybit::MarketTicker& _internal_level2tic(int index) const;
  ::fantasybit::MarketTicker* _internal_add_level2tic();
  public:
  const ::fantasybit::MarketTicker& level2tic(int index) const;
  ::fantasybit::MarketTicker* add_level2tic();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::MarketTicker >&
      level2tic() const;

  // repeated .fantasybit.MarketTicker level1tic = 70;
  int level1tic_size() const;
  private:
  int _internal_level1tic_size() const;
  public:
  void clear_level1tic();
  ::fantasybit::MarketTicker* mutable_level1tic(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::MarketTicker >*
      mutable_level1tic();
  private:
  const ::fantasybit::MarketTicker& _internal_level1tic(int index) const;
  ::fantasybit::MarketTicker* _internal_add_level1tic();
  public:
  const ::fantasybit::MarketTicker& level1tic(int index) const;
  ::fantasybit::MarketTicker* add_level1tic();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::MarketTicker >&
      level1tic() const;

  // optional string fantasy_name = 10;
  bool has_fantasy_name() const;
  private:
  bool _internal_has_fantasy_name() const;
  public:
  void clear_fantasy_name();
  const std::string& fantasy_name() const;
  void set_fantasy_name(const std::string& value);
  void set_fantasy_name(std::string&& value);
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  std::string* mutable_fantasy_name();
  std::string* release_fantasy_name();
  void set_allocated_fantasy_name(std::string* fantasy_name);
  private:
  const std::string& _internal_fantasy_name() const;
  void _internal_set_fantasy_name(const std::string& value);
  std::string* _internal_mutable_fantasy_name();
  public:

  // optional string playerid = 30;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional string symbol = 90;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional .fantasybit.OrderCore newnew = 40;
  bool has_newnew() const;
  private:
  bool _internal_has_newnew() const;
  public:
  void clear_newnew();
  const ::fantasybit::OrderCore& newnew() const;
  ::fantasybit::OrderCore* release_newnew();
  ::fantasybit::OrderCore* mutable_newnew();
  void set_allocated_newnew(::fantasybit::OrderCore* newnew);
  private:
  const ::fantasybit::OrderCore& _internal_newnew() const;
  ::fantasybit::OrderCore* _internal_mutable_newnew();
  public:
  void unsafe_arena_set_allocated_newnew(
      ::fantasybit::OrderCore* newnew);
  ::fantasybit::OrderCore* unsafe_arena_release_newnew();

  // optional .fantasybit.ContractOHLC ohlc = 41;
  bool has_ohlc() const;
  private:
  bool _internal_has_ohlc() const;
  public:
  void clear_ohlc();
  const ::fantasybit::ContractOHLC& ohlc() const;
  ::fantasybit::ContractOHLC* release_ohlc();
  ::fantasybit::ContractOHLC* mutable_ohlc();
  void set_allocated_ohlc(::fantasybit::ContractOHLC* ohlc);
  private:
  const ::fantasybit::ContractOHLC& _internal_ohlc() const;
  ::fantasybit::ContractOHLC* _internal_mutable_ohlc();
  public:
  void unsafe_arena_set_allocated_ohlc(
      ::fantasybit::ContractOHLC* ohlc);
  ::fantasybit::ContractOHLC* unsafe_arena_release_ohlc();

  // optional int32 seqnum = 20;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  ::PROTOBUF_NAMESPACE_ID::int32 seqnum() const;
  void set_seqnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seqnum() const;
  void _internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 blocknum = 80;
  bool has_blocknum() const;
  private:
  bool _internal_has_blocknum() const;
  public:
  void clear_blocknum();
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum() const;
  void set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocknum() const;
  void _internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.BookDelta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Order > removes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::MarketTicker > level2tic_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::MarketTicker > level1tic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fantasy_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::fantasybit::OrderCore* newnew_;
  ::fantasybit::ContractOHLC* ohlc_;
  ::PROTOBUF_NAMESPACE_ID::int32 seqnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class MarketQuote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.MarketQuote) */ {
 public:
  inline MarketQuote() : MarketQuote(nullptr) {};
  virtual ~MarketQuote();

  MarketQuote(const MarketQuote& from);
  MarketQuote(MarketQuote&& from) noexcept
    : MarketQuote() {
    *this = ::std::move(from);
  }

  inline MarketQuote& operator=(const MarketQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketQuote& operator=(MarketQuote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketQuote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketQuote* internal_default_instance() {
    return reinterpret_cast<const MarketQuote*>(
               &_MarketQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MarketQuote& a, MarketQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketQuote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketQuote* New() const final {
    return CreateMaybeMessage<MarketQuote>(nullptr);
  }

  MarketQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketQuote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketQuote& from);
  void MergeFrom(const MarketQuote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketQuote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.MarketQuote";
  }
  protected:
  explicit MarketQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUdnFieldNumber = 70,
    kBsFieldNumber = 10,
    kBFieldNumber = 20,
    kAFieldNumber = 30,
    kAsFieldNumber = 40,
    kLFieldNumber = 50,
    kLsFieldNumber = 60,
  };
  // optional int32 udn = 70;
  bool has_udn() const;
  private:
  bool _internal_has_udn() const;
  public:
  void clear_udn();
  ::PROTOBUF_NAMESPACE_ID::int32 udn() const;
  void set_udn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_udn() const;
  void _internal_set_udn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 bs = 10;
  bool has_bs() const;
  private:
  bool _internal_has_bs() const;
  public:
  void clear_bs();
  ::PROTOBUF_NAMESPACE_ID::int32 bs() const;
  void set_bs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bs() const;
  void _internal_set_bs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 b = 20;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 a = 30;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 as = 40;
  bool has_as() const;
  private:
  bool _internal_has_as() const;
  public:
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::int32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 l = 50;
  bool has_l() const;
  private:
  bool _internal_has_l() const;
  public:
  void clear_l();
  ::PROTOBUF_NAMESPACE_ID::int32 l() const;
  void set_l(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_l() const;
  void _internal_set_l(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ls = 60;
  bool has_ls() const;
  private:
  bool _internal_has_ls() const;
  public:
  void clear_ls();
  ::PROTOBUF_NAMESPACE_ID::int32 ls() const;
  void set_ls(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ls() const;
  void _internal_set_ls(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.MarketQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 udn_;
  ::PROTOBUF_NAMESPACE_ID::int32 bs_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  ::PROTOBUF_NAMESPACE_ID::int32 as_;
  ::PROTOBUF_NAMESPACE_ID::int32 l_;
  ::PROTOBUF_NAMESPACE_ID::int32 ls_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class MarketSnapshot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.MarketSnapshot) */ {
 public:
  inline MarketSnapshot() : MarketSnapshot(nullptr) {};
  virtual ~MarketSnapshot();

  MarketSnapshot(const MarketSnapshot& from);
  MarketSnapshot(MarketSnapshot&& from) noexcept
    : MarketSnapshot() {
    *this = ::std::move(from);
  }

  inline MarketSnapshot& operator=(const MarketSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketSnapshot& operator=(MarketSnapshot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketSnapshot* internal_default_instance() {
    return reinterpret_cast<const MarketSnapshot*>(
               &_MarketSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MarketSnapshot& a, MarketSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketSnapshot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketSnapshot* New() const final {
    return CreateMaybeMessage<MarketSnapshot>(nullptr);
  }

  MarketSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketSnapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketSnapshot& from);
  void MergeFrom(const MarketSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketSnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.MarketSnapshot";
  }
  protected:
  explicit MarketSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepthFieldNumber = 70,
    kSymbolFieldNumber = 10,
    kOhlcFieldNumber = 20,
    kQuoteFieldNumber = 30,
    kWeekFieldNumber = 11,
    kBlocknumFieldNumber = 40,
  };
  // repeated .fantasybit.DepthItem depth = 70;
  int depth_size() const;
  private:
  int _internal_depth_size() const;
  public:
  void clear_depth();
  ::fantasybit::DepthItem* mutable_depth(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::DepthItem >*
      mutable_depth();
  private:
  const ::fantasybit::DepthItem& _internal_depth(int index) const;
  ::fantasybit::DepthItem* _internal_add_depth();
  public:
  const ::fantasybit::DepthItem& depth(int index) const;
  ::fantasybit::DepthItem* add_depth();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::DepthItem >&
      depth() const;

  // optional string symbol = 10;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional .fantasybit.ContractOHLC ohlc = 20;
  bool has_ohlc() const;
  private:
  bool _internal_has_ohlc() const;
  public:
  void clear_ohlc();
  const ::fantasybit::ContractOHLC& ohlc() const;
  ::fantasybit::ContractOHLC* release_ohlc();
  ::fantasybit::ContractOHLC* mutable_ohlc();
  void set_allocated_ohlc(::fantasybit::ContractOHLC* ohlc);
  private:
  const ::fantasybit::ContractOHLC& _internal_ohlc() const;
  ::fantasybit::ContractOHLC* _internal_mutable_ohlc();
  public:
  void unsafe_arena_set_allocated_ohlc(
      ::fantasybit::ContractOHLC* ohlc);
  ::fantasybit::ContractOHLC* unsafe_arena_release_ohlc();

  // optional .fantasybit.MarketQuote quote = 30;
  bool has_quote() const;
  private:
  bool _internal_has_quote() const;
  public:
  void clear_quote();
  const ::fantasybit::MarketQuote& quote() const;
  ::fantasybit::MarketQuote* release_quote();
  ::fantasybit::MarketQuote* mutable_quote();
  void set_allocated_quote(::fantasybit::MarketQuote* quote);
  private:
  const ::fantasybit::MarketQuote& _internal_quote() const;
  ::fantasybit::MarketQuote* _internal_mutable_quote();
  public:
  void unsafe_arena_set_allocated_quote(
      ::fantasybit::MarketQuote* quote);
  ::fantasybit::MarketQuote* unsafe_arena_release_quote();

  // optional int32 week = 11;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::int32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 blocknum = 40;
  bool has_blocknum() const;
  private:
  bool _internal_has_blocknum() const;
  public:
  void clear_blocknum();
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum() const;
  void set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocknum() const;
  void _internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.MarketSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::DepthItem > depth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::fantasybit::ContractOHLC* ohlc_;
  ::fantasybit::MarketQuote* quote_;
  ::PROTOBUF_NAMESPACE_ID::int32 week_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum_;
  friend struct ::TableStruct_ExData_2eproto;
};
// -------------------------------------------------------------------

class FutContract PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.FutContract) */ {
 public:
  inline FutContract() : FutContract(nullptr) {};
  virtual ~FutContract();

  FutContract(const FutContract& from);
  FutContract(FutContract&& from) noexcept
    : FutContract() {
    *this = ::std::move(from);
  }

  inline FutContract& operator=(const FutContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline FutContract& operator=(FutContract&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FutContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutContract* internal_default_instance() {
    return reinterpret_cast<const FutContract*>(
               &_FutContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FutContract& a, FutContract& b) {
    a.Swap(&b);
  }
  inline void Swap(FutContract* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FutContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FutContract* New() const final {
    return CreateMaybeMessage<FutContract>(nullptr);
  }

  FutContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FutContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FutContract& from);
  void MergeFrom(const FutContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.FutContract";
  }
  protected:
  explicit FutContract(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExData_2eproto);
    return ::descriptor_table_ExData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FutContract_Type Type;
  static constexpr Type WEEKLY =
    FutContract_Type_WEEKLY;
  static constexpr Type SEASON =
    FutContract_Type_SEASON;
  static constexpr Type ROW =
    FutContract_Type_ROW;
  static constexpr Type OTHER =
    FutContract_Type_OTHER;
  static inline bool Type_IsValid(int value) {
    return FutContract_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    FutContract_Type_Type_MIN;
  static constexpr Type Type_MAX =
    FutContract_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    FutContract_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return FutContract_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return FutContract_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return FutContract_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 40,
    kSeasonFieldNumber = 20,
    kWeekFieldNumber = 30,
    kTypeFieldNumber = 10,
  };
  // optional string symbol = 40;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional int32 season = 20;
  bool has_season() const;
  private:
  bool _internal_has_season() const;
  public:
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::int32 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 week = 30;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::int32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .fantasybit.FutContract.Type type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::fantasybit::FutContract_Type type() const;
  void set_type(::fantasybit::FutContract_Type value);
  private:
  ::fantasybit::FutContract_Type _internal_type() const;
  void _internal_set_type(::fantasybit::FutContract_Type value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.FutContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 season_;
  ::PROTOBUF_NAMESPACE_ID::int32 week_;
  int type_;
  friend struct ::TableStruct_ExData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SettlePos

// optional string pk = 10;
inline bool SettlePos::_internal_has_pk() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SettlePos::has_pk() const {
  return _internal_has_pk();
}
inline void SettlePos::clear_pk() {
  pk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SettlePos::pk() const {
  // @@protoc_insertion_point(field_get:fantasybit.SettlePos.pk)
  return _internal_pk();
}
inline void SettlePos::set_pk(const std::string& value) {
  _internal_set_pk(value);
  // @@protoc_insertion_point(field_set:fantasybit.SettlePos.pk)
}
inline std::string* SettlePos::mutable_pk() {
  // @@protoc_insertion_point(field_mutable:fantasybit.SettlePos.pk)
  return _internal_mutable_pk();
}
inline const std::string& SettlePos::_internal_pk() const {
  return pk_.Get();
}
inline void SettlePos::_internal_set_pk(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SettlePos::set_pk(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pk_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.SettlePos.pk)
}
inline void SettlePos::set_pk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.SettlePos.pk)
}
inline void SettlePos::set_pk(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SettlePos.pk)
}
inline std::string* SettlePos::_internal_mutable_pk() {
  _has_bits_[0] |= 0x00000001u;
  return pk_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SettlePos::release_pk() {
  // @@protoc_insertion_point(field_release:fantasybit.SettlePos.pk)
  if (!_internal_has_pk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettlePos::set_allocated_pk(std::string* pk) {
  if (pk != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SettlePos.pk)
}

// optional int32 qty = 20;
inline bool SettlePos::_internal_has_qty() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SettlePos::has_qty() const {
  return _internal_has_qty();
}
inline void SettlePos::clear_qty() {
  qty_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettlePos::_internal_qty() const {
  return qty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettlePos::qty() const {
  // @@protoc_insertion_point(field_get:fantasybit.SettlePos.qty)
  return _internal_qty();
}
inline void SettlePos::_internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  qty_ = value;
}
inline void SettlePos::set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fantasybit.SettlePos.qty)
}

// optional int32 price = 25;
inline bool SettlePos::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SettlePos::has_price() const {
  return _internal_has_price();
}
inline void SettlePos::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettlePos::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettlePos::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.SettlePos.price)
  return _internal_price();
}
inline void SettlePos::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  price_ = value;
}
inline void SettlePos::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.SettlePos.price)
}

// -------------------------------------------------------------------

// StorePos

// optional int32 qty = 20;
inline bool StorePos::_internal_has_qty() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StorePos::has_qty() const {
  return _internal_has_qty();
}
inline void StorePos::clear_qty() {
  qty_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StorePos::_internal_qty() const {
  return qty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StorePos::qty() const {
  // @@protoc_insertion_point(field_get:fantasybit.StorePos.qty)
  return _internal_qty();
}
inline void StorePos::_internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  qty_ = value;
}
inline void StorePos::set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fantasybit.StorePos.qty)
}

// optional int32 price = 25;
inline bool StorePos::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StorePos::has_price() const {
  return _internal_has_price();
}
inline void StorePos::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StorePos::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StorePos::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.StorePos.price)
  return _internal_price();
}
inline void StorePos::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  price_ = value;
}
inline void StorePos::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.StorePos.price)
}

// -------------------------------------------------------------------

// BookPos

// optional string playerid = 30;
inline bool BookPos::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BookPos::has_playerid() const {
  return _internal_has_playerid();
}
inline void BookPos::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BookPos::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.BookPos.playerid)
  return _internal_playerid();
}
inline void BookPos::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.BookPos.playerid)
}
inline std::string* BookPos::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BookPos.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& BookPos::_internal_playerid() const {
  return playerid_.Get();
}
inline void BookPos::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BookPos::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BookPos.playerid)
}
inline void BookPos::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.BookPos.playerid)
}
inline void BookPos::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BookPos.playerid)
}
inline std::string* BookPos::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000001u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BookPos::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.BookPos.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BookPos::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BookPos.playerid)
}

// repeated .fantasybit.SettlePos positions = 40;
inline int BookPos::_internal_positions_size() const {
  return positions_.size();
}
inline int BookPos::positions_size() const {
  return _internal_positions_size();
}
inline void BookPos::clear_positions() {
  positions_.Clear();
}
inline ::fantasybit::SettlePos* BookPos::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.BookPos.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::SettlePos >*
BookPos::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.BookPos.positions)
  return &positions_;
}
inline const ::fantasybit::SettlePos& BookPos::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline const ::fantasybit::SettlePos& BookPos::positions(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.BookPos.positions)
  return _internal_positions(index);
}
inline ::fantasybit::SettlePos* BookPos::_internal_add_positions() {
  return positions_.Add();
}
inline ::fantasybit::SettlePos* BookPos::add_positions() {
  // @@protoc_insertion_point(field_add:fantasybit.BookPos.positions)
  return _internal_add_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::SettlePos >&
BookPos::positions() const {
  // @@protoc_insertion_point(field_list:fantasybit.BookPos.positions)
  return positions_;
}

// optional string symbol = 50;
inline bool BookPos::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BookPos::has_symbol() const {
  return _internal_has_symbol();
}
inline void BookPos::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BookPos::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.BookPos.symbol)
  return _internal_symbol();
}
inline void BookPos::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.BookPos.symbol)
}
inline std::string* BookPos::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BookPos.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& BookPos::_internal_symbol() const {
  return symbol_.Get();
}
inline void BookPos::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BookPos::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BookPos.symbol)
}
inline void BookPos::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.BookPos.symbol)
}
inline void BookPos::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BookPos.symbol)
}
inline std::string* BookPos::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000002u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BookPos::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.BookPos.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BookPos::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BookPos.symbol)
}

// -------------------------------------------------------------------

// GameSettlePos

// optional string gameid = 10;
inline bool GameSettlePos::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameSettlePos::has_gameid() const {
  return _internal_has_gameid();
}
inline void GameSettlePos::clear_gameid() {
  gameid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameSettlePos::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameSettlePos.gameid)
  return _internal_gameid();
}
inline void GameSettlePos::set_gameid(const std::string& value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameSettlePos.gameid)
}
inline std::string* GameSettlePos::mutable_gameid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameSettlePos.gameid)
  return _internal_mutable_gameid();
}
inline const std::string& GameSettlePos::_internal_gameid() const {
  return gameid_.Get();
}
inline void GameSettlePos::_internal_set_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameSettlePos::set_gameid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameSettlePos.gameid)
}
inline void GameSettlePos::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameSettlePos.gameid)
}
inline void GameSettlePos::set_gameid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameSettlePos.gameid)
}
inline std::string* GameSettlePos::_internal_mutable_gameid() {
  _has_bits_[0] |= 0x00000001u;
  return gameid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameSettlePos::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameSettlePos.gameid)
  if (!_internal_has_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameSettlePos::set_allocated_gameid(std::string* gameid) {
  if (gameid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameSettlePos.gameid)
}

// repeated .fantasybit.BookPos home = 20;
inline int GameSettlePos::_internal_home_size() const {
  return home_.size();
}
inline int GameSettlePos::home_size() const {
  return _internal_home_size();
}
inline void GameSettlePos::clear_home() {
  home_.Clear();
}
inline ::fantasybit::BookPos* GameSettlePos::mutable_home(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameSettlePos.home)
  return home_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::BookPos >*
GameSettlePos::mutable_home() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameSettlePos.home)
  return &home_;
}
inline const ::fantasybit::BookPos& GameSettlePos::_internal_home(int index) const {
  return home_.Get(index);
}
inline const ::fantasybit::BookPos& GameSettlePos::home(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameSettlePos.home)
  return _internal_home(index);
}
inline ::fantasybit::BookPos* GameSettlePos::_internal_add_home() {
  return home_.Add();
}
inline ::fantasybit::BookPos* GameSettlePos::add_home() {
  // @@protoc_insertion_point(field_add:fantasybit.GameSettlePos.home)
  return _internal_add_home();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::BookPos >&
GameSettlePos::home() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameSettlePos.home)
  return home_;
}

// repeated .fantasybit.BookPos away = 30;
inline int GameSettlePos::_internal_away_size() const {
  return away_.size();
}
inline int GameSettlePos::away_size() const {
  return _internal_away_size();
}
inline void GameSettlePos::clear_away() {
  away_.Clear();
}
inline ::fantasybit::BookPos* GameSettlePos::mutable_away(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameSettlePos.away)
  return away_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::BookPos >*
GameSettlePos::mutable_away() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameSettlePos.away)
  return &away_;
}
inline const ::fantasybit::BookPos& GameSettlePos::_internal_away(int index) const {
  return away_.Get(index);
}
inline const ::fantasybit::BookPos& GameSettlePos::away(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameSettlePos.away)
  return _internal_away(index);
}
inline ::fantasybit::BookPos* GameSettlePos::_internal_add_away() {
  return away_.Add();
}
inline ::fantasybit::BookPos* GameSettlePos::add_away() {
  // @@protoc_insertion_point(field_add:fantasybit.GameSettlePos.away)
  return _internal_add_away();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::BookPos >&
GameSettlePos::away() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameSettlePos.away)
  return away_;
}

// -------------------------------------------------------------------

// OrderCore

// optional bool buyside = 10;
inline bool OrderCore::_internal_has_buyside() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OrderCore::has_buyside() const {
  return _internal_has_buyside();
}
inline void OrderCore::clear_buyside() {
  buyside_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool OrderCore::_internal_buyside() const {
  return buyside_;
}
inline bool OrderCore::buyside() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderCore.buyside)
  return _internal_buyside();
}
inline void OrderCore::_internal_set_buyside(bool value) {
  _has_bits_[0] |= 0x00000002u;
  buyside_ = value;
}
inline void OrderCore::set_buyside(bool value) {
  _internal_set_buyside(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderCore.buyside)
}

// optional int32 size = 20;
inline bool OrderCore::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OrderCore::has_size() const {
  return _internal_has_size();
}
inline void OrderCore::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCore::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCore::size() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderCore.size)
  return _internal_size();
}
inline void OrderCore::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
}
inline void OrderCore::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderCore.size)
}

// optional int32 price = 30;
inline bool OrderCore::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OrderCore::has_price() const {
  return _internal_has_price();
}
inline void OrderCore::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCore::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCore::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderCore.price)
  return _internal_price();
}
inline void OrderCore::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  price_ = value;
}
inline void OrderCore::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderCore.price)
}

// -------------------------------------------------------------------

// Order

// optional int32 refnum = 10;
inline bool Order::_internal_has_refnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Order::has_refnum() const {
  return _internal_has_refnum();
}
inline void Order::clear_refnum() {
  refnum_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_refnum() const {
  return refnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::refnum() const {
  // @@protoc_insertion_point(field_get:fantasybit.Order.refnum)
  return _internal_refnum();
}
inline void Order::_internal_set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  refnum_ = value;
}
inline void Order::set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refnum(value);
  // @@protoc_insertion_point(field_set:fantasybit.Order.refnum)
}

// optional .fantasybit.OrderCore core = 20;
inline bool Order::_internal_has_core() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || core_ != nullptr);
  return value;
}
inline bool Order::has_core() const {
  return _internal_has_core();
}
inline void Order::clear_core() {
  if (core_ != nullptr) core_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::OrderCore& Order::_internal_core() const {
  const ::fantasybit::OrderCore* p = core_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::OrderCore*>(
      &::fantasybit::_OrderCore_default_instance_);
}
inline const ::fantasybit::OrderCore& Order::core() const {
  // @@protoc_insertion_point(field_get:fantasybit.Order.core)
  return _internal_core();
}
inline void Order::unsafe_arena_set_allocated_core(
    ::fantasybit::OrderCore* core) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(core_);
  }
  core_ = core;
  if (core) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.Order.core)
}
inline ::fantasybit::OrderCore* Order::release_core() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::OrderCore* temp = core_;
  core_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::OrderCore* Order::unsafe_arena_release_core() {
  // @@protoc_insertion_point(field_release:fantasybit.Order.core)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::OrderCore* temp = core_;
  core_ = nullptr;
  return temp;
}
inline ::fantasybit::OrderCore* Order::_internal_mutable_core() {
  _has_bits_[0] |= 0x00000001u;
  if (core_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::OrderCore>(GetArena());
    core_ = p;
  }
  return core_;
}
inline ::fantasybit::OrderCore* Order::mutable_core() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Order.core)
  return _internal_mutable_core();
}
inline void Order::set_allocated_core(::fantasybit::OrderCore* core) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete core_;
  }
  if (core) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(core);
    if (message_arena != submessage_arena) {
      core = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, core, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  core_ = core;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Order.core)
}

// -------------------------------------------------------------------

// OrderFill

// optional .fantasybit.Order left = 10;
inline bool OrderFill::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || left_ != nullptr);
  return value;
}
inline bool OrderFill::has_left() const {
  return _internal_has_left();
}
inline void OrderFill::clear_left() {
  if (left_ != nullptr) left_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::Order& OrderFill::_internal_left() const {
  const ::fantasybit::Order* p = left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::Order*>(
      &::fantasybit::_Order_default_instance_);
}
inline const ::fantasybit::Order& OrderFill::left() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFill.left)
  return _internal_left();
}
inline void OrderFill::unsafe_arena_set_allocated_left(
    ::fantasybit::Order* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.OrderFill.left)
}
inline ::fantasybit::Order* OrderFill::release_left() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::Order* temp = left_;
  left_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::Order* OrderFill::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderFill.left)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::Order* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::fantasybit::Order* OrderFill::_internal_mutable_left() {
  _has_bits_[0] |= 0x00000001u;
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::Order>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::fantasybit::Order* OrderFill::mutable_left() {
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderFill.left)
  return _internal_mutable_left();
}
inline void OrderFill::set_allocated_left(::fantasybit::Order* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderFill.left)
}

// optional int32 fillprice = 20;
inline bool OrderFill::_internal_has_fillprice() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OrderFill::has_fillprice() const {
  return _internal_has_fillprice();
}
inline void OrderFill::clear_fillprice() {
  fillprice_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFill::_internal_fillprice() const {
  return fillprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFill::fillprice() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFill.fillprice)
  return _internal_fillprice();
}
inline void OrderFill::_internal_set_fillprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  fillprice_ = value;
}
inline void OrderFill::set_fillprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fillprice(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFill.fillprice)
}

// optional int32 fillsize = 30;
inline bool OrderFill::_internal_has_fillsize() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OrderFill::has_fillsize() const {
  return _internal_has_fillsize();
}
inline void OrderFill::clear_fillsize() {
  fillsize_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFill::_internal_fillsize() const {
  return fillsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFill::fillsize() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFill.fillsize)
  return _internal_fillsize();
}
inline void OrderFill::_internal_set_fillsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  fillsize_ = value;
}
inline void OrderFill::set_fillsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fillsize(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFill.fillsize)
}

// optional int32 timestamp = 40;
inline bool OrderFill::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OrderFill::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void OrderFill::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFill::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFill::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFill.timestamp)
  return _internal_timestamp();
}
inline void OrderFill::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void OrderFill::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFill.timestamp)
}

// -------------------------------------------------------------------

// MarketTicker

// optional .fantasybit.MarketTicker.Type type = 1;
inline bool MarketTicker::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MarketTicker::has_type() const {
  return _internal_has_type();
}
inline void MarketTicker::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::fantasybit::MarketTicker_Type MarketTicker::_internal_type() const {
  return static_cast< ::fantasybit::MarketTicker_Type >(type_);
}
inline ::fantasybit::MarketTicker_Type MarketTicker::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicker.type)
  return _internal_type();
}
inline void MarketTicker::_internal_set_type(::fantasybit::MarketTicker_Type value) {
  assert(::fantasybit::MarketTicker_Type_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void MarketTicker::set_type(::fantasybit::MarketTicker_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicker.type)
}

// optional string symbol = 2;
inline bool MarketTicker::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MarketTicker::has_symbol() const {
  return _internal_has_symbol();
}
inline void MarketTicker::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MarketTicker::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicker.symbol)
  return _internal_symbol();
}
inline void MarketTicker::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicker.symbol)
}
inline std::string* MarketTicker::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.MarketTicker.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& MarketTicker::_internal_symbol() const {
  return symbol_.Get();
}
inline void MarketTicker::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketTicker::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.MarketTicker.symbol)
}
inline void MarketTicker::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.MarketTicker.symbol)
}
inline void MarketTicker::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MarketTicker.symbol)
}
inline std::string* MarketTicker::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000001u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketTicker::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.MarketTicker.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketTicker::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MarketTicker.symbol)
}

// optional int32 size = 20;
inline bool MarketTicker::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MarketTicker::has_size() const {
  return _internal_has_size();
}
inline void MarketTicker::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketTicker::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketTicker::size() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicker.size)
  return _internal_size();
}
inline void MarketTicker::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
}
inline void MarketTicker::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicker.size)
}

// optional int32 price = 30;
inline bool MarketTicker::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MarketTicker::has_price() const {
  return _internal_has_price();
}
inline void MarketTicker::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketTicker::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketTicker::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicker.price)
  return _internal_price();
}
inline void MarketTicker::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  price_ = value;
}
inline void MarketTicker::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicker.price)
}

// -------------------------------------------------------------------

// TradeTic

// optional string symbol = 2;
inline bool TradeTic::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TradeTic::has_symbol() const {
  return _internal_has_symbol();
}
inline void TradeTic::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TradeTic::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.TradeTic.symbol)
  return _internal_symbol();
}
inline void TradeTic::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.TradeTic.symbol)
}
inline std::string* TradeTic::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TradeTic.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TradeTic::_internal_symbol() const {
  return symbol_.Get();
}
inline void TradeTic::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeTic::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TradeTic.symbol)
}
inline void TradeTic::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TradeTic.symbol)
}
inline void TradeTic::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TradeTic.symbol)
}
inline std::string* TradeTic::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000001u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeTic::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.TradeTic.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeTic::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TradeTic.symbol)
}

// optional int32 size = 20;
inline bool TradeTic::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TradeTic::has_size() const {
  return _internal_has_size();
}
inline void TradeTic::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::size() const {
  // @@protoc_insertion_point(field_get:fantasybit.TradeTic.size)
  return _internal_size();
}
inline void TradeTic::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
}
inline void TradeTic::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:fantasybit.TradeTic.size)
}

// optional int32 price = 30;
inline bool TradeTic::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TradeTic::has_price() const {
  return _internal_has_price();
}
inline void TradeTic::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.TradeTic.price)
  return _internal_price();
}
inline void TradeTic::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  price_ = value;
}
inline void TradeTic::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.TradeTic.price)
}

// optional int32 ishigh = 40;
inline bool TradeTic::_internal_has_ishigh() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TradeTic::has_ishigh() const {
  return _internal_has_ishigh();
}
inline void TradeTic::clear_ishigh() {
  ishigh_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::_internal_ishigh() const {
  return ishigh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::ishigh() const {
  // @@protoc_insertion_point(field_get:fantasybit.TradeTic.ishigh)
  return _internal_ishigh();
}
inline void TradeTic::_internal_set_ishigh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ishigh_ = value;
}
inline void TradeTic::set_ishigh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ishigh(value);
  // @@protoc_insertion_point(field_set:fantasybit.TradeTic.ishigh)
}

// optional int32 islow = 45;
inline bool TradeTic::_internal_has_islow() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TradeTic::has_islow() const {
  return _internal_has_islow();
}
inline void TradeTic::clear_islow() {
  islow_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::_internal_islow() const {
  return islow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::islow() const {
  // @@protoc_insertion_point(field_get:fantasybit.TradeTic.islow)
  return _internal_islow();
}
inline void TradeTic::_internal_set_islow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  islow_ = value;
}
inline void TradeTic::set_islow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_islow(value);
  // @@protoc_insertion_point(field_set:fantasybit.TradeTic.islow)
}

// optional int32 change = 50;
inline bool TradeTic::_internal_has_change() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TradeTic::has_change() const {
  return _internal_has_change();
}
inline void TradeTic::clear_change() {
  change_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::_internal_change() const {
  return change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::change() const {
  // @@protoc_insertion_point(field_get:fantasybit.TradeTic.change)
  return _internal_change();
}
inline void TradeTic::_internal_set_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  change_ = value;
}
inline void TradeTic::set_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change(value);
  // @@protoc_insertion_point(field_set:fantasybit.TradeTic.change)
}

// optional int32 tic = 60;
inline bool TradeTic::_internal_has_tic() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TradeTic::has_tic() const {
  return _internal_has_tic();
}
inline void TradeTic::clear_tic() {
  tic_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::_internal_tic() const {
  return tic_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeTic::tic() const {
  // @@protoc_insertion_point(field_get:fantasybit.TradeTic.tic)
  return _internal_tic();
}
inline void TradeTic::_internal_set_tic(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  tic_ = value;
}
inline void TradeTic::set_tic(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tic(value);
  // @@protoc_insertion_point(field_set:fantasybit.TradeTic.tic)
}

// -------------------------------------------------------------------

// DepthFeedDelta

// optional string symbol = 1;
inline bool DepthFeedDelta::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DepthFeedDelta::has_symbol() const {
  return _internal_has_symbol();
}
inline void DepthFeedDelta::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DepthFeedDelta::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.DepthFeedDelta.symbol)
  return _internal_symbol();
}
inline void DepthFeedDelta::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.DepthFeedDelta.symbol)
}
inline std::string* DepthFeedDelta::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.DepthFeedDelta.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& DepthFeedDelta::_internal_symbol() const {
  return symbol_.Get();
}
inline void DepthFeedDelta::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepthFeedDelta::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.DepthFeedDelta.symbol)
}
inline void DepthFeedDelta::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.DepthFeedDelta.symbol)
}
inline void DepthFeedDelta::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.DepthFeedDelta.symbol)
}
inline std::string* DepthFeedDelta::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000001u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepthFeedDelta::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.DepthFeedDelta.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepthFeedDelta::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.DepthFeedDelta.symbol)
}

// optional bool isbid = 10;
inline bool DepthFeedDelta::_internal_has_isbid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DepthFeedDelta::has_isbid() const {
  return _internal_has_isbid();
}
inline void DepthFeedDelta::clear_isbid() {
  isbid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DepthFeedDelta::_internal_isbid() const {
  return isbid_;
}
inline bool DepthFeedDelta::isbid() const {
  // @@protoc_insertion_point(field_get:fantasybit.DepthFeedDelta.isbid)
  return _internal_isbid();
}
inline void DepthFeedDelta::_internal_set_isbid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isbid_ = value;
}
inline void DepthFeedDelta::set_isbid(bool value) {
  _internal_set_isbid(value);
  // @@protoc_insertion_point(field_set:fantasybit.DepthFeedDelta.isbid)
}

// optional int32 size = 20;
inline bool DepthFeedDelta::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DepthFeedDelta::has_size() const {
  return _internal_has_size();
}
inline void DepthFeedDelta::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthFeedDelta::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthFeedDelta::size() const {
  // @@protoc_insertion_point(field_get:fantasybit.DepthFeedDelta.size)
  return _internal_size();
}
inline void DepthFeedDelta::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
}
inline void DepthFeedDelta::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:fantasybit.DepthFeedDelta.size)
}

// optional int32 price = 30;
inline bool DepthFeedDelta::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DepthFeedDelta::has_price() const {
  return _internal_has_price();
}
inline void DepthFeedDelta::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthFeedDelta::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthFeedDelta::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.DepthFeedDelta.price)
  return _internal_price();
}
inline void DepthFeedDelta::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  price_ = value;
}
inline void DepthFeedDelta::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.DepthFeedDelta.price)
}

// -------------------------------------------------------------------

// ContractOHLC

// optional string symbol = 10;
inline bool ContractOHLC::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContractOHLC::has_symbol() const {
  return _internal_has_symbol();
}
inline void ContractOHLC::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContractOHLC::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.ContractOHLC.symbol)
  return _internal_symbol();
}
inline void ContractOHLC::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.ContractOHLC.symbol)
}
inline std::string* ContractOHLC::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ContractOHLC.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& ContractOHLC::_internal_symbol() const {
  return symbol_.Get();
}
inline void ContractOHLC::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractOHLC::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ContractOHLC.symbol)
}
inline void ContractOHLC::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.ContractOHLC.symbol)
}
inline void ContractOHLC::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ContractOHLC.symbol)
}
inline std::string* ContractOHLC::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000001u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractOHLC::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.ContractOHLC.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractOHLC::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ContractOHLC.symbol)
}

// optional int32 open = 20;
inline bool ContractOHLC::_internal_has_open() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContractOHLC::has_open() const {
  return _internal_has_open();
}
inline void ContractOHLC::clear_open() {
  open_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::_internal_open() const {
  return open_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::open() const {
  // @@protoc_insertion_point(field_get:fantasybit.ContractOHLC.open)
  return _internal_open();
}
inline void ContractOHLC::_internal_set_open(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  open_ = value;
}
inline void ContractOHLC::set_open(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:fantasybit.ContractOHLC.open)
}

// optional int32 high = 30;
inline bool ContractOHLC::_internal_has_high() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContractOHLC::has_high() const {
  return _internal_has_high();
}
inline void ContractOHLC::clear_high() {
  high_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::high() const {
  // @@protoc_insertion_point(field_get:fantasybit.ContractOHLC.high)
  return _internal_high();
}
inline void ContractOHLC::_internal_set_high(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  high_ = value;
}
inline void ContractOHLC::set_high(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:fantasybit.ContractOHLC.high)
}

// optional int32 low = 40;
inline bool ContractOHLC::_internal_has_low() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContractOHLC::has_low() const {
  return _internal_has_low();
}
inline void ContractOHLC::clear_low() {
  low_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::low() const {
  // @@protoc_insertion_point(field_get:fantasybit.ContractOHLC.low)
  return _internal_low();
}
inline void ContractOHLC::_internal_set_low(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  low_ = value;
}
inline void ContractOHLC::set_low(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:fantasybit.ContractOHLC.low)
}

// optional int32 close = 50;
inline bool ContractOHLC::_internal_has_close() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ContractOHLC::has_close() const {
  return _internal_has_close();
}
inline void ContractOHLC::clear_close() {
  close_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::_internal_close() const {
  return close_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::close() const {
  // @@protoc_insertion_point(field_get:fantasybit.ContractOHLC.close)
  return _internal_close();
}
inline void ContractOHLC::_internal_set_close(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  close_ = value;
}
inline void ContractOHLC::set_close(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:fantasybit.ContractOHLC.close)
}

// optional int32 volume = 60;
inline bool ContractOHLC::_internal_has_volume() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ContractOHLC::has_volume() const {
  return _internal_has_volume();
}
inline void ContractOHLC::clear_volume() {
  volume_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::volume() const {
  // @@protoc_insertion_point(field_get:fantasybit.ContractOHLC.volume)
  return _internal_volume();
}
inline void ContractOHLC::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  volume_ = value;
}
inline void ContractOHLC::set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:fantasybit.ContractOHLC.volume)
}

// optional int32 change = 70;
inline bool ContractOHLC::_internal_has_change() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ContractOHLC::has_change() const {
  return _internal_has_change();
}
inline void ContractOHLC::clear_change() {
  change_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::_internal_change() const {
  return change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOHLC::change() const {
  // @@protoc_insertion_point(field_get:fantasybit.ContractOHLC.change)
  return _internal_change();
}
inline void ContractOHLC::_internal_set_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  change_ = value;
}
inline void ContractOHLC::set_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change(value);
  // @@protoc_insertion_point(field_set:fantasybit.ContractOHLC.change)
}

// -------------------------------------------------------------------

// DepthItem

// optional int32 level = 10;
inline bool DepthItem::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DepthItem::has_level() const {
  return _internal_has_level();
}
inline void DepthItem::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthItem::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthItem::level() const {
  // @@protoc_insertion_point(field_get:fantasybit.DepthItem.level)
  return _internal_level();
}
inline void DepthItem::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  level_ = value;
}
inline void DepthItem::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:fantasybit.DepthItem.level)
}

// optional int32 b = 30;
inline bool DepthItem::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DepthItem::has_b() const {
  return _internal_has_b();
}
inline void DepthItem::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthItem::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthItem::b() const {
  // @@protoc_insertion_point(field_get:fantasybit.DepthItem.b)
  return _internal_b();
}
inline void DepthItem::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void DepthItem::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:fantasybit.DepthItem.b)
}

// optional int32 a = 40;
inline bool DepthItem::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DepthItem::has_a() const {
  return _internal_has_a();
}
inline void DepthItem::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthItem::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthItem::a() const {
  // @@protoc_insertion_point(field_get:fantasybit.DepthItem.a)
  return _internal_a();
}
inline void DepthItem::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void DepthItem::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:fantasybit.DepthItem.a)
}

// optional int32 bs = 50;
inline bool DepthItem::_internal_has_bs() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DepthItem::has_bs() const {
  return _internal_has_bs();
}
inline void DepthItem::clear_bs() {
  bs_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthItem::_internal_bs() const {
  return bs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthItem::bs() const {
  // @@protoc_insertion_point(field_get:fantasybit.DepthItem.bs)
  return _internal_bs();
}
inline void DepthItem::_internal_set_bs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  bs_ = value;
}
inline void DepthItem::set_bs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bs(value);
  // @@protoc_insertion_point(field_set:fantasybit.DepthItem.bs)
}

// optional int32 as = 60;
inline bool DepthItem::_internal_has_as() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DepthItem::has_as() const {
  return _internal_has_as();
}
inline void DepthItem::clear_as() {
  as_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthItem::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthItem::as() const {
  // @@protoc_insertion_point(field_get:fantasybit.DepthItem.as)
  return _internal_as();
}
inline void DepthItem::_internal_set_as(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  as_ = value;
}
inline void DepthItem::set_as(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:fantasybit.DepthItem.as)
}

// -------------------------------------------------------------------

// BookDelta

// optional string fantasy_name = 10;
inline bool BookDelta::_internal_has_fantasy_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BookDelta::has_fantasy_name() const {
  return _internal_has_fantasy_name();
}
inline void BookDelta::clear_fantasy_name() {
  fantasy_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BookDelta::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.BookDelta.fantasy_name)
  return _internal_fantasy_name();
}
inline void BookDelta::set_fantasy_name(const std::string& value) {
  _internal_set_fantasy_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.BookDelta.fantasy_name)
}
inline std::string* BookDelta::mutable_fantasy_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BookDelta.fantasy_name)
  return _internal_mutable_fantasy_name();
}
inline const std::string& BookDelta::_internal_fantasy_name() const {
  return fantasy_name_.Get();
}
inline void BookDelta::_internal_set_fantasy_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BookDelta::set_fantasy_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BookDelta.fantasy_name)
}
inline void BookDelta::set_fantasy_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.BookDelta.fantasy_name)
}
inline void BookDelta::set_fantasy_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BookDelta.fantasy_name)
}
inline std::string* BookDelta::_internal_mutable_fantasy_name() {
  _has_bits_[0] |= 0x00000001u;
  return fantasy_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BookDelta::release_fantasy_name() {
  // @@protoc_insertion_point(field_release:fantasybit.BookDelta.fantasy_name)
  if (!_internal_has_fantasy_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fantasy_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BookDelta::set_allocated_fantasy_name(std::string* fantasy_name) {
  if (fantasy_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fantasy_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fantasy_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BookDelta.fantasy_name)
}

// optional int32 seqnum = 20;
inline bool BookDelta::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BookDelta::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void BookDelta::clear_seqnum() {
  seqnum_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BookDelta::_internal_seqnum() const {
  return seqnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BookDelta::seqnum() const {
  // @@protoc_insertion_point(field_get:fantasybit.BookDelta.seqnum)
  return _internal_seqnum();
}
inline void BookDelta::_internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  seqnum_ = value;
}
inline void BookDelta::set_seqnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:fantasybit.BookDelta.seqnum)
}

// optional string playerid = 30;
inline bool BookDelta::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BookDelta::has_playerid() const {
  return _internal_has_playerid();
}
inline void BookDelta::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BookDelta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.BookDelta.playerid)
  return _internal_playerid();
}
inline void BookDelta::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.BookDelta.playerid)
}
inline std::string* BookDelta::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BookDelta.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& BookDelta::_internal_playerid() const {
  return playerid_.Get();
}
inline void BookDelta::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BookDelta::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BookDelta.playerid)
}
inline void BookDelta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.BookDelta.playerid)
}
inline void BookDelta::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BookDelta.playerid)
}
inline std::string* BookDelta::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000002u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BookDelta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.BookDelta.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BookDelta::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BookDelta.playerid)
}

// optional .fantasybit.OrderCore newnew = 40;
inline bool BookDelta::_internal_has_newnew() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || newnew_ != nullptr);
  return value;
}
inline bool BookDelta::has_newnew() const {
  return _internal_has_newnew();
}
inline void BookDelta::clear_newnew() {
  if (newnew_ != nullptr) newnew_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::fantasybit::OrderCore& BookDelta::_internal_newnew() const {
  const ::fantasybit::OrderCore* p = newnew_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::OrderCore*>(
      &::fantasybit::_OrderCore_default_instance_);
}
inline const ::fantasybit::OrderCore& BookDelta::newnew() const {
  // @@protoc_insertion_point(field_get:fantasybit.BookDelta.newnew)
  return _internal_newnew();
}
inline void BookDelta::unsafe_arena_set_allocated_newnew(
    ::fantasybit::OrderCore* newnew) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newnew_);
  }
  newnew_ = newnew;
  if (newnew) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.BookDelta.newnew)
}
inline ::fantasybit::OrderCore* BookDelta::release_newnew() {
  _has_bits_[0] &= ~0x00000008u;
  ::fantasybit::OrderCore* temp = newnew_;
  newnew_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::OrderCore* BookDelta::unsafe_arena_release_newnew() {
  // @@protoc_insertion_point(field_release:fantasybit.BookDelta.newnew)
  _has_bits_[0] &= ~0x00000008u;
  ::fantasybit::OrderCore* temp = newnew_;
  newnew_ = nullptr;
  return temp;
}
inline ::fantasybit::OrderCore* BookDelta::_internal_mutable_newnew() {
  _has_bits_[0] |= 0x00000008u;
  if (newnew_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::OrderCore>(GetArena());
    newnew_ = p;
  }
  return newnew_;
}
inline ::fantasybit::OrderCore* BookDelta::mutable_newnew() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BookDelta.newnew)
  return _internal_mutable_newnew();
}
inline void BookDelta::set_allocated_newnew(::fantasybit::OrderCore* newnew) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete newnew_;
  }
  if (newnew) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(newnew);
    if (message_arena != submessage_arena) {
      newnew = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newnew, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  newnew_ = newnew;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BookDelta.newnew)
}

// optional .fantasybit.ContractOHLC ohlc = 41;
inline bool BookDelta::_internal_has_ohlc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || ohlc_ != nullptr);
  return value;
}
inline bool BookDelta::has_ohlc() const {
  return _internal_has_ohlc();
}
inline void BookDelta::clear_ohlc() {
  if (ohlc_ != nullptr) ohlc_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::fantasybit::ContractOHLC& BookDelta::_internal_ohlc() const {
  const ::fantasybit::ContractOHLC* p = ohlc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ContractOHLC*>(
      &::fantasybit::_ContractOHLC_default_instance_);
}
inline const ::fantasybit::ContractOHLC& BookDelta::ohlc() const {
  // @@protoc_insertion_point(field_get:fantasybit.BookDelta.ohlc)
  return _internal_ohlc();
}
inline void BookDelta::unsafe_arena_set_allocated_ohlc(
    ::fantasybit::ContractOHLC* ohlc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ohlc_);
  }
  ohlc_ = ohlc;
  if (ohlc) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.BookDelta.ohlc)
}
inline ::fantasybit::ContractOHLC* BookDelta::release_ohlc() {
  _has_bits_[0] &= ~0x00000010u;
  ::fantasybit::ContractOHLC* temp = ohlc_;
  ohlc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ContractOHLC* BookDelta::unsafe_arena_release_ohlc() {
  // @@protoc_insertion_point(field_release:fantasybit.BookDelta.ohlc)
  _has_bits_[0] &= ~0x00000010u;
  ::fantasybit::ContractOHLC* temp = ohlc_;
  ohlc_ = nullptr;
  return temp;
}
inline ::fantasybit::ContractOHLC* BookDelta::_internal_mutable_ohlc() {
  _has_bits_[0] |= 0x00000010u;
  if (ohlc_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ContractOHLC>(GetArena());
    ohlc_ = p;
  }
  return ohlc_;
}
inline ::fantasybit::ContractOHLC* BookDelta::mutable_ohlc() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BookDelta.ohlc)
  return _internal_mutable_ohlc();
}
inline void BookDelta::set_allocated_ohlc(::fantasybit::ContractOHLC* ohlc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ohlc_;
  }
  if (ohlc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ohlc);
    if (message_arena != submessage_arena) {
      ohlc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ohlc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ohlc_ = ohlc;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BookDelta.ohlc)
}

// repeated .fantasybit.Order removes = 50;
inline int BookDelta::_internal_removes_size() const {
  return removes_.size();
}
inline int BookDelta::removes_size() const {
  return _internal_removes_size();
}
inline void BookDelta::clear_removes() {
  removes_.Clear();
}
inline ::fantasybit::Order* BookDelta::mutable_removes(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.BookDelta.removes)
  return removes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Order >*
BookDelta::mutable_removes() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.BookDelta.removes)
  return &removes_;
}
inline const ::fantasybit::Order& BookDelta::_internal_removes(int index) const {
  return removes_.Get(index);
}
inline const ::fantasybit::Order& BookDelta::removes(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.BookDelta.removes)
  return _internal_removes(index);
}
inline ::fantasybit::Order* BookDelta::_internal_add_removes() {
  return removes_.Add();
}
inline ::fantasybit::Order* BookDelta::add_removes() {
  // @@protoc_insertion_point(field_add:fantasybit.BookDelta.removes)
  return _internal_add_removes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Order >&
BookDelta::removes() const {
  // @@protoc_insertion_point(field_list:fantasybit.BookDelta.removes)
  return removes_;
}

// repeated .fantasybit.MarketTicker level2tic = 60;
inline int BookDelta::_internal_level2tic_size() const {
  return level2tic_.size();
}
inline int BookDelta::level2tic_size() const {
  return _internal_level2tic_size();
}
inline void BookDelta::clear_level2tic() {
  level2tic_.Clear();
}
inline ::fantasybit::MarketTicker* BookDelta::mutable_level2tic(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.BookDelta.level2tic)
  return level2tic_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::MarketTicker >*
BookDelta::mutable_level2tic() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.BookDelta.level2tic)
  return &level2tic_;
}
inline const ::fantasybit::MarketTicker& BookDelta::_internal_level2tic(int index) const {
  return level2tic_.Get(index);
}
inline const ::fantasybit::MarketTicker& BookDelta::level2tic(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.BookDelta.level2tic)
  return _internal_level2tic(index);
}
inline ::fantasybit::MarketTicker* BookDelta::_internal_add_level2tic() {
  return level2tic_.Add();
}
inline ::fantasybit::MarketTicker* BookDelta::add_level2tic() {
  // @@protoc_insertion_point(field_add:fantasybit.BookDelta.level2tic)
  return _internal_add_level2tic();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::MarketTicker >&
BookDelta::level2tic() const {
  // @@protoc_insertion_point(field_list:fantasybit.BookDelta.level2tic)
  return level2tic_;
}

// repeated .fantasybit.MarketTicker level1tic = 70;
inline int BookDelta::_internal_level1tic_size() const {
  return level1tic_.size();
}
inline int BookDelta::level1tic_size() const {
  return _internal_level1tic_size();
}
inline void BookDelta::clear_level1tic() {
  level1tic_.Clear();
}
inline ::fantasybit::MarketTicker* BookDelta::mutable_level1tic(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.BookDelta.level1tic)
  return level1tic_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::MarketTicker >*
BookDelta::mutable_level1tic() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.BookDelta.level1tic)
  return &level1tic_;
}
inline const ::fantasybit::MarketTicker& BookDelta::_internal_level1tic(int index) const {
  return level1tic_.Get(index);
}
inline const ::fantasybit::MarketTicker& BookDelta::level1tic(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.BookDelta.level1tic)
  return _internal_level1tic(index);
}
inline ::fantasybit::MarketTicker* BookDelta::_internal_add_level1tic() {
  return level1tic_.Add();
}
inline ::fantasybit::MarketTicker* BookDelta::add_level1tic() {
  // @@protoc_insertion_point(field_add:fantasybit.BookDelta.level1tic)
  return _internal_add_level1tic();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::MarketTicker >&
BookDelta::level1tic() const {
  // @@protoc_insertion_point(field_list:fantasybit.BookDelta.level1tic)
  return level1tic_;
}

// optional int32 blocknum = 80;
inline bool BookDelta::_internal_has_blocknum() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BookDelta::has_blocknum() const {
  return _internal_has_blocknum();
}
inline void BookDelta::clear_blocknum() {
  blocknum_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BookDelta::_internal_blocknum() const {
  return blocknum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BookDelta::blocknum() const {
  // @@protoc_insertion_point(field_get:fantasybit.BookDelta.blocknum)
  return _internal_blocknum();
}
inline void BookDelta::_internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  blocknum_ = value;
}
inline void BookDelta::set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blocknum(value);
  // @@protoc_insertion_point(field_set:fantasybit.BookDelta.blocknum)
}

// optional string symbol = 90;
inline bool BookDelta::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BookDelta::has_symbol() const {
  return _internal_has_symbol();
}
inline void BookDelta::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BookDelta::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.BookDelta.symbol)
  return _internal_symbol();
}
inline void BookDelta::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.BookDelta.symbol)
}
inline std::string* BookDelta::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BookDelta.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& BookDelta::_internal_symbol() const {
  return symbol_.Get();
}
inline void BookDelta::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BookDelta::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BookDelta.symbol)
}
inline void BookDelta::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.BookDelta.symbol)
}
inline void BookDelta::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BookDelta.symbol)
}
inline std::string* BookDelta::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000004u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BookDelta::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.BookDelta.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BookDelta::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BookDelta.symbol)
}

// -------------------------------------------------------------------

// MarketQuote

// optional int32 bs = 10;
inline bool MarketQuote::_internal_has_bs() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MarketQuote::has_bs() const {
  return _internal_has_bs();
}
inline void MarketQuote::clear_bs() {
  bs_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::_internal_bs() const {
  return bs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::bs() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketQuote.bs)
  return _internal_bs();
}
inline void MarketQuote::_internal_set_bs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  bs_ = value;
}
inline void MarketQuote::set_bs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bs(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketQuote.bs)
}

// optional int32 b = 20;
inline bool MarketQuote::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MarketQuote::has_b() const {
  return _internal_has_b();
}
inline void MarketQuote::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::b() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketQuote.b)
  return _internal_b();
}
inline void MarketQuote::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void MarketQuote::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketQuote.b)
}

// optional int32 a = 30;
inline bool MarketQuote::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MarketQuote::has_a() const {
  return _internal_has_a();
}
inline void MarketQuote::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::a() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketQuote.a)
  return _internal_a();
}
inline void MarketQuote::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void MarketQuote::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketQuote.a)
}

// optional int32 as = 40;
inline bool MarketQuote::_internal_has_as() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MarketQuote::has_as() const {
  return _internal_has_as();
}
inline void MarketQuote::clear_as() {
  as_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::as() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketQuote.as)
  return _internal_as();
}
inline void MarketQuote::_internal_set_as(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  as_ = value;
}
inline void MarketQuote::set_as(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketQuote.as)
}

// optional int32 l = 50;
inline bool MarketQuote::_internal_has_l() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MarketQuote::has_l() const {
  return _internal_has_l();
}
inline void MarketQuote::clear_l() {
  l_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::_internal_l() const {
  return l_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::l() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketQuote.l)
  return _internal_l();
}
inline void MarketQuote::_internal_set_l(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  l_ = value;
}
inline void MarketQuote::set_l(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketQuote.l)
}

// optional int32 ls = 60;
inline bool MarketQuote::_internal_has_ls() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MarketQuote::has_ls() const {
  return _internal_has_ls();
}
inline void MarketQuote::clear_ls() {
  ls_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::_internal_ls() const {
  return ls_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::ls() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketQuote.ls)
  return _internal_ls();
}
inline void MarketQuote::_internal_set_ls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  ls_ = value;
}
inline void MarketQuote::set_ls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ls(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketQuote.ls)
}

// optional int32 udn = 70;
inline bool MarketQuote::_internal_has_udn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MarketQuote::has_udn() const {
  return _internal_has_udn();
}
inline void MarketQuote::clear_udn() {
  udn_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::_internal_udn() const {
  return udn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketQuote::udn() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketQuote.udn)
  return _internal_udn();
}
inline void MarketQuote::_internal_set_udn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  udn_ = value;
}
inline void MarketQuote::set_udn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_udn(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketQuote.udn)
}

// -------------------------------------------------------------------

// MarketSnapshot

// optional string symbol = 10;
inline bool MarketSnapshot::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MarketSnapshot::has_symbol() const {
  return _internal_has_symbol();
}
inline void MarketSnapshot::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MarketSnapshot::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketSnapshot.symbol)
  return _internal_symbol();
}
inline void MarketSnapshot::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketSnapshot.symbol)
}
inline std::string* MarketSnapshot::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.MarketSnapshot.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& MarketSnapshot::_internal_symbol() const {
  return symbol_.Get();
}
inline void MarketSnapshot::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketSnapshot::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.MarketSnapshot.symbol)
}
inline void MarketSnapshot::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.MarketSnapshot.symbol)
}
inline void MarketSnapshot::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MarketSnapshot.symbol)
}
inline std::string* MarketSnapshot::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000001u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketSnapshot::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.MarketSnapshot.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketSnapshot::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MarketSnapshot.symbol)
}

// optional int32 week = 11;
inline bool MarketSnapshot::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MarketSnapshot::has_week() const {
  return _internal_has_week();
}
inline void MarketSnapshot::clear_week() {
  week_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketSnapshot::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketSnapshot::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketSnapshot.week)
  return _internal_week();
}
inline void MarketSnapshot::_internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  week_ = value;
}
inline void MarketSnapshot::set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketSnapshot.week)
}

// repeated .fantasybit.DepthItem depth = 70;
inline int MarketSnapshot::_internal_depth_size() const {
  return depth_.size();
}
inline int MarketSnapshot::depth_size() const {
  return _internal_depth_size();
}
inline void MarketSnapshot::clear_depth() {
  depth_.Clear();
}
inline ::fantasybit::DepthItem* MarketSnapshot::mutable_depth(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.MarketSnapshot.depth)
  return depth_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::DepthItem >*
MarketSnapshot::mutable_depth() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.MarketSnapshot.depth)
  return &depth_;
}
inline const ::fantasybit::DepthItem& MarketSnapshot::_internal_depth(int index) const {
  return depth_.Get(index);
}
inline const ::fantasybit::DepthItem& MarketSnapshot::depth(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketSnapshot.depth)
  return _internal_depth(index);
}
inline ::fantasybit::DepthItem* MarketSnapshot::_internal_add_depth() {
  return depth_.Add();
}
inline ::fantasybit::DepthItem* MarketSnapshot::add_depth() {
  // @@protoc_insertion_point(field_add:fantasybit.MarketSnapshot.depth)
  return _internal_add_depth();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::DepthItem >&
MarketSnapshot::depth() const {
  // @@protoc_insertion_point(field_list:fantasybit.MarketSnapshot.depth)
  return depth_;
}

// optional .fantasybit.ContractOHLC ohlc = 20;
inline bool MarketSnapshot::_internal_has_ohlc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ohlc_ != nullptr);
  return value;
}
inline bool MarketSnapshot::has_ohlc() const {
  return _internal_has_ohlc();
}
inline void MarketSnapshot::clear_ohlc() {
  if (ohlc_ != nullptr) ohlc_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::ContractOHLC& MarketSnapshot::_internal_ohlc() const {
  const ::fantasybit::ContractOHLC* p = ohlc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ContractOHLC*>(
      &::fantasybit::_ContractOHLC_default_instance_);
}
inline const ::fantasybit::ContractOHLC& MarketSnapshot::ohlc() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketSnapshot.ohlc)
  return _internal_ohlc();
}
inline void MarketSnapshot::unsafe_arena_set_allocated_ohlc(
    ::fantasybit::ContractOHLC* ohlc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ohlc_);
  }
  ohlc_ = ohlc;
  if (ohlc) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.MarketSnapshot.ohlc)
}
inline ::fantasybit::ContractOHLC* MarketSnapshot::release_ohlc() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::ContractOHLC* temp = ohlc_;
  ohlc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ContractOHLC* MarketSnapshot::unsafe_arena_release_ohlc() {
  // @@protoc_insertion_point(field_release:fantasybit.MarketSnapshot.ohlc)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::ContractOHLC* temp = ohlc_;
  ohlc_ = nullptr;
  return temp;
}
inline ::fantasybit::ContractOHLC* MarketSnapshot::_internal_mutable_ohlc() {
  _has_bits_[0] |= 0x00000002u;
  if (ohlc_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ContractOHLC>(GetArena());
    ohlc_ = p;
  }
  return ohlc_;
}
inline ::fantasybit::ContractOHLC* MarketSnapshot::mutable_ohlc() {
  // @@protoc_insertion_point(field_mutable:fantasybit.MarketSnapshot.ohlc)
  return _internal_mutable_ohlc();
}
inline void MarketSnapshot::set_allocated_ohlc(::fantasybit::ContractOHLC* ohlc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ohlc_;
  }
  if (ohlc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ohlc);
    if (message_arena != submessage_arena) {
      ohlc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ohlc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ohlc_ = ohlc;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MarketSnapshot.ohlc)
}

// optional .fantasybit.MarketQuote quote = 30;
inline bool MarketSnapshot::_internal_has_quote() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || quote_ != nullptr);
  return value;
}
inline bool MarketSnapshot::has_quote() const {
  return _internal_has_quote();
}
inline void MarketSnapshot::clear_quote() {
  if (quote_ != nullptr) quote_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::MarketQuote& MarketSnapshot::_internal_quote() const {
  const ::fantasybit::MarketQuote* p = quote_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::MarketQuote*>(
      &::fantasybit::_MarketQuote_default_instance_);
}
inline const ::fantasybit::MarketQuote& MarketSnapshot::quote() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketSnapshot.quote)
  return _internal_quote();
}
inline void MarketSnapshot::unsafe_arena_set_allocated_quote(
    ::fantasybit::MarketQuote* quote) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quote_);
  }
  quote_ = quote;
  if (quote) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.MarketSnapshot.quote)
}
inline ::fantasybit::MarketQuote* MarketSnapshot::release_quote() {
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::MarketQuote* temp = quote_;
  quote_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::MarketQuote* MarketSnapshot::unsafe_arena_release_quote() {
  // @@protoc_insertion_point(field_release:fantasybit.MarketSnapshot.quote)
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::MarketQuote* temp = quote_;
  quote_ = nullptr;
  return temp;
}
inline ::fantasybit::MarketQuote* MarketSnapshot::_internal_mutable_quote() {
  _has_bits_[0] |= 0x00000004u;
  if (quote_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::MarketQuote>(GetArena());
    quote_ = p;
  }
  return quote_;
}
inline ::fantasybit::MarketQuote* MarketSnapshot::mutable_quote() {
  // @@protoc_insertion_point(field_mutable:fantasybit.MarketSnapshot.quote)
  return _internal_mutable_quote();
}
inline void MarketSnapshot::set_allocated_quote(::fantasybit::MarketQuote* quote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete quote_;
  }
  if (quote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(quote);
    if (message_arena != submessage_arena) {
      quote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quote, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  quote_ = quote;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MarketSnapshot.quote)
}

// optional int32 blocknum = 40;
inline bool MarketSnapshot::_internal_has_blocknum() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MarketSnapshot::has_blocknum() const {
  return _internal_has_blocknum();
}
inline void MarketSnapshot::clear_blocknum() {
  blocknum_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketSnapshot::_internal_blocknum() const {
  return blocknum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketSnapshot::blocknum() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketSnapshot.blocknum)
  return _internal_blocknum();
}
inline void MarketSnapshot::_internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  blocknum_ = value;
}
inline void MarketSnapshot::set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blocknum(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketSnapshot.blocknum)
}

// -------------------------------------------------------------------

// FutContract

// optional .fantasybit.FutContract.Type type = 10;
inline bool FutContract::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FutContract::has_type() const {
  return _internal_has_type();
}
inline void FutContract::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::fantasybit::FutContract_Type FutContract::_internal_type() const {
  return static_cast< ::fantasybit::FutContract_Type >(type_);
}
inline ::fantasybit::FutContract_Type FutContract::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.FutContract.type)
  return _internal_type();
}
inline void FutContract::_internal_set_type(::fantasybit::FutContract_Type value) {
  assert(::fantasybit::FutContract_Type_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void FutContract::set_type(::fantasybit::FutContract_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:fantasybit.FutContract.type)
}

// optional int32 season = 20;
inline bool FutContract::_internal_has_season() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FutContract::has_season() const {
  return _internal_has_season();
}
inline void FutContract::clear_season() {
  season_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FutContract::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FutContract::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.FutContract.season)
  return _internal_season();
}
inline void FutContract::_internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  season_ = value;
}
inline void FutContract::set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:fantasybit.FutContract.season)
}

// optional int32 week = 30;
inline bool FutContract::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FutContract::has_week() const {
  return _internal_has_week();
}
inline void FutContract::clear_week() {
  week_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FutContract::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FutContract::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.FutContract.week)
  return _internal_week();
}
inline void FutContract::_internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  week_ = value;
}
inline void FutContract::set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.FutContract.week)
}

// optional string symbol = 40;
inline bool FutContract::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FutContract::has_symbol() const {
  return _internal_has_symbol();
}
inline void FutContract::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FutContract::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.FutContract.symbol)
  return _internal_symbol();
}
inline void FutContract::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.FutContract.symbol)
}
inline std::string* FutContract::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FutContract.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& FutContract::_internal_symbol() const {
  return symbol_.Get();
}
inline void FutContract::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FutContract::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FutContract.symbol)
}
inline void FutContract::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FutContract.symbol)
}
inline void FutContract::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FutContract.symbol)
}
inline std::string* FutContract::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000001u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FutContract::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.FutContract.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FutContract::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FutContract.symbol)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fantasybit::MarketTicker_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::MarketTicker_Type>() {
  return ::fantasybit::MarketTicker_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::FutContract_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::FutContract_Type>() {
  return ::fantasybit::FutContract_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ExData_2eproto
