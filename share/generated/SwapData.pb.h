// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SwapData.proto

#ifndef PROTOBUF_SwapData_2eproto__INCLUDED
#define PROTOBUF_SwapData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SwapData_2eproto();
void protobuf_AssignDesc_SwapData_2eproto();
void protobuf_ShutdownFile_SwapData_2eproto();

class SwapOrder;

// ===================================================================

class SwapOrder : public ::google::protobuf::Message {
 public:
  SwapOrder();
  virtual ~SwapOrder();

  SwapOrder(const SwapOrder& from);

  inline SwapOrder& operator=(const SwapOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SwapOrder& default_instance();

  void Swap(SwapOrder* other);

  // implements Message ----------------------------------------------

  SwapOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SwapOrder& from);
  void MergeFrom(const SwapOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isask = 10;
  inline bool has_isask() const;
  inline void clear_isask();
  static const int kIsaskFieldNumber = 10;
  inline bool isask() const;
  inline void set_isask(bool value);

  // optional uint64 satoshi_min = 20;
  inline bool has_satoshi_min() const;
  inline void clear_satoshi_min();
  static const int kSatoshiMinFieldNumber = 20;
  inline ::google::protobuf::uint64 satoshi_min() const;
  inline void set_satoshi_min(::google::protobuf::uint64 value);

  // optional uint64 satoshi_max = 30;
  inline bool has_satoshi_max() const;
  inline void clear_satoshi_max();
  static const int kSatoshiMaxFieldNumber = 30;
  inline ::google::protobuf::uint64 satoshi_max() const;
  inline void set_satoshi_max(::google::protobuf::uint64 value);

  // optional uint64 rate = 40;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 40;
  inline ::google::protobuf::uint64 rate() const;
  inline void set_rate(::google::protobuf::uint64 value);

  // optional uint64 openq = 50;
  inline bool has_openq() const;
  inline void clear_openq();
  static const int kOpenqFieldNumber = 50;
  inline ::google::protobuf::uint64 openq() const;
  inline void set_openq(::google::protobuf::uint64 value);

  // optional uint64 pendq = 60;
  inline bool has_pendq() const;
  inline void clear_pendq();
  static const int kPendqFieldNumber = 60;
  inline ::google::protobuf::uint64 pendq() const;
  inline void set_pendq(::google::protobuf::uint64 value);

  // optional uint64 fillq = 70;
  inline bool has_fillq() const;
  inline void clear_fillq();
  static const int kFillqFieldNumber = 70;
  inline ::google::protobuf::uint64 fillq() const;
  inline void set_fillq(::google::protobuf::uint64 value);

  // optional string fname = 80;
  inline bool has_fname() const;
  inline void clear_fname();
  static const int kFnameFieldNumber = 80;
  inline const ::std::string& fname() const;
  inline void set_fname(const ::std::string& value);
  inline void set_fname(const char* value);
  inline void set_fname(const char* value, size_t size);
  inline ::std::string* mutable_fname();
  inline ::std::string* release_fname();
  inline void set_allocated_fname(::std::string* fname);

  // optional string msg = 90;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 90;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional string ref = 100;
  inline bool has_ref() const;
  inline void clear_ref();
  static const int kRefFieldNumber = 100;
  inline const ::std::string& ref() const;
  inline void set_ref(const ::std::string& value);
  inline void set_ref(const char* value);
  inline void set_ref(const char* value, size_t size);
  inline ::std::string* mutable_ref();
  inline ::std::string* release_ref();
  inline void set_allocated_ref(::std::string* ref);

  // optional string directed = 110;
  inline bool has_directed() const;
  inline void clear_directed();
  static const int kDirectedFieldNumber = 110;
  inline const ::std::string& directed() const;
  inline void set_directed(const ::std::string& value);
  inline void set_directed(const char* value);
  inline void set_directed(const char* value, size_t size);
  inline ::std::string* mutable_directed();
  inline ::std::string* release_directed();
  inline void set_allocated_directed(::std::string* directed);

  // optional bool double_spent = 120;
  inline bool has_double_spent() const;
  inline void clear_double_spent();
  static const int kDoubleSpentFieldNumber = 120;
  inline bool double_spent() const;
  inline void set_double_spent(bool value);

  // @@protoc_insertion_point(class_scope:fantasybit.SwapOrder)
 private:
  inline void set_has_isask();
  inline void clear_has_isask();
  inline void set_has_satoshi_min();
  inline void clear_has_satoshi_min();
  inline void set_has_satoshi_max();
  inline void clear_has_satoshi_max();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_openq();
  inline void clear_has_openq();
  inline void set_has_pendq();
  inline void clear_has_pendq();
  inline void set_has_fillq();
  inline void clear_has_fillq();
  inline void set_has_fname();
  inline void clear_has_fname();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_ref();
  inline void clear_has_ref();
  inline void set_has_directed();
  inline void clear_has_directed();
  inline void set_has_double_spent();
  inline void clear_has_double_spent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 satoshi_min_;
  ::google::protobuf::uint64 satoshi_max_;
  ::google::protobuf::uint64 rate_;
  ::google::protobuf::uint64 openq_;
  ::google::protobuf::uint64 pendq_;
  ::google::protobuf::uint64 fillq_;
  ::std::string* fname_;
  ::std::string* msg_;
  ::std::string* ref_;
  ::std::string* directed_;
  bool isask_;
  bool double_spent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_SwapData_2eproto();
  friend void protobuf_AssignDesc_SwapData_2eproto();
  friend void protobuf_ShutdownFile_SwapData_2eproto();

  void InitAsDefaultInstance();
  static SwapOrder* default_instance_;
};
// ===================================================================


// ===================================================================

// SwapOrder

// optional bool isask = 10;
inline bool SwapOrder::has_isask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwapOrder::set_has_isask() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SwapOrder::clear_has_isask() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SwapOrder::clear_isask() {
  isask_ = false;
  clear_has_isask();
}
inline bool SwapOrder::isask() const {
  return isask_;
}
inline void SwapOrder::set_isask(bool value) {
  set_has_isask();
  isask_ = value;
}

// optional uint64 satoshi_min = 20;
inline bool SwapOrder::has_satoshi_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SwapOrder::set_has_satoshi_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SwapOrder::clear_has_satoshi_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SwapOrder::clear_satoshi_min() {
  satoshi_min_ = GOOGLE_ULONGLONG(0);
  clear_has_satoshi_min();
}
inline ::google::protobuf::uint64 SwapOrder::satoshi_min() const {
  return satoshi_min_;
}
inline void SwapOrder::set_satoshi_min(::google::protobuf::uint64 value) {
  set_has_satoshi_min();
  satoshi_min_ = value;
}

// optional uint64 satoshi_max = 30;
inline bool SwapOrder::has_satoshi_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SwapOrder::set_has_satoshi_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SwapOrder::clear_has_satoshi_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SwapOrder::clear_satoshi_max() {
  satoshi_max_ = GOOGLE_ULONGLONG(0);
  clear_has_satoshi_max();
}
inline ::google::protobuf::uint64 SwapOrder::satoshi_max() const {
  return satoshi_max_;
}
inline void SwapOrder::set_satoshi_max(::google::protobuf::uint64 value) {
  set_has_satoshi_max();
  satoshi_max_ = value;
}

// optional uint64 rate = 40;
inline bool SwapOrder::has_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SwapOrder::set_has_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SwapOrder::clear_has_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SwapOrder::clear_rate() {
  rate_ = GOOGLE_ULONGLONG(0);
  clear_has_rate();
}
inline ::google::protobuf::uint64 SwapOrder::rate() const {
  return rate_;
}
inline void SwapOrder::set_rate(::google::protobuf::uint64 value) {
  set_has_rate();
  rate_ = value;
}

// optional uint64 openq = 50;
inline bool SwapOrder::has_openq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SwapOrder::set_has_openq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SwapOrder::clear_has_openq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SwapOrder::clear_openq() {
  openq_ = GOOGLE_ULONGLONG(0);
  clear_has_openq();
}
inline ::google::protobuf::uint64 SwapOrder::openq() const {
  return openq_;
}
inline void SwapOrder::set_openq(::google::protobuf::uint64 value) {
  set_has_openq();
  openq_ = value;
}

// optional uint64 pendq = 60;
inline bool SwapOrder::has_pendq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SwapOrder::set_has_pendq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SwapOrder::clear_has_pendq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SwapOrder::clear_pendq() {
  pendq_ = GOOGLE_ULONGLONG(0);
  clear_has_pendq();
}
inline ::google::protobuf::uint64 SwapOrder::pendq() const {
  return pendq_;
}
inline void SwapOrder::set_pendq(::google::protobuf::uint64 value) {
  set_has_pendq();
  pendq_ = value;
}

// optional uint64 fillq = 70;
inline bool SwapOrder::has_fillq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SwapOrder::set_has_fillq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SwapOrder::clear_has_fillq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SwapOrder::clear_fillq() {
  fillq_ = GOOGLE_ULONGLONG(0);
  clear_has_fillq();
}
inline ::google::protobuf::uint64 SwapOrder::fillq() const {
  return fillq_;
}
inline void SwapOrder::set_fillq(::google::protobuf::uint64 value) {
  set_has_fillq();
  fillq_ = value;
}

// optional string fname = 80;
inline bool SwapOrder::has_fname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SwapOrder::set_has_fname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SwapOrder::clear_has_fname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SwapOrder::clear_fname() {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    fname_->clear();
  }
  clear_has_fname();
}
inline const ::std::string& SwapOrder::fname() const {
  return *fname_;
}
inline void SwapOrder::set_fname(const ::std::string& value) {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  fname_->assign(value);
}
inline void SwapOrder::set_fname(const char* value) {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  fname_->assign(value);
}
inline void SwapOrder::set_fname(const char* value, size_t size) {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  fname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwapOrder::mutable_fname() {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  return fname_;
}
inline ::std::string* SwapOrder::release_fname() {
  clear_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fname_;
    fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SwapOrder::set_allocated_fname(::std::string* fname) {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    delete fname_;
  }
  if (fname) {
    set_has_fname();
    fname_ = fname;
  } else {
    clear_has_fname();
    fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 90;
inline bool SwapOrder::has_msg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SwapOrder::set_has_msg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SwapOrder::clear_has_msg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SwapOrder::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& SwapOrder::msg() const {
  return *msg_;
}
inline void SwapOrder::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void SwapOrder::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void SwapOrder::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwapOrder::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* SwapOrder::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SwapOrder::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ref = 100;
inline bool SwapOrder::has_ref() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SwapOrder::set_has_ref() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SwapOrder::clear_has_ref() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SwapOrder::clear_ref() {
  if (ref_ != &::google::protobuf::internal::kEmptyString) {
    ref_->clear();
  }
  clear_has_ref();
}
inline const ::std::string& SwapOrder::ref() const {
  return *ref_;
}
inline void SwapOrder::set_ref(const ::std::string& value) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
}
inline void SwapOrder::set_ref(const char* value) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
}
inline void SwapOrder::set_ref(const char* value, size_t size) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  ref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwapOrder::mutable_ref() {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  return ref_;
}
inline ::std::string* SwapOrder::release_ref() {
  clear_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ref_;
    ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SwapOrder::set_allocated_ref(::std::string* ref) {
  if (ref_ != &::google::protobuf::internal::kEmptyString) {
    delete ref_;
  }
  if (ref) {
    set_has_ref();
    ref_ = ref;
  } else {
    clear_has_ref();
    ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string directed = 110;
inline bool SwapOrder::has_directed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SwapOrder::set_has_directed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SwapOrder::clear_has_directed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SwapOrder::clear_directed() {
  if (directed_ != &::google::protobuf::internal::kEmptyString) {
    directed_->clear();
  }
  clear_has_directed();
}
inline const ::std::string& SwapOrder::directed() const {
  return *directed_;
}
inline void SwapOrder::set_directed(const ::std::string& value) {
  set_has_directed();
  if (directed_ == &::google::protobuf::internal::kEmptyString) {
    directed_ = new ::std::string;
  }
  directed_->assign(value);
}
inline void SwapOrder::set_directed(const char* value) {
  set_has_directed();
  if (directed_ == &::google::protobuf::internal::kEmptyString) {
    directed_ = new ::std::string;
  }
  directed_->assign(value);
}
inline void SwapOrder::set_directed(const char* value, size_t size) {
  set_has_directed();
  if (directed_ == &::google::protobuf::internal::kEmptyString) {
    directed_ = new ::std::string;
  }
  directed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwapOrder::mutable_directed() {
  set_has_directed();
  if (directed_ == &::google::protobuf::internal::kEmptyString) {
    directed_ = new ::std::string;
  }
  return directed_;
}
inline ::std::string* SwapOrder::release_directed() {
  clear_has_directed();
  if (directed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = directed_;
    directed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SwapOrder::set_allocated_directed(::std::string* directed) {
  if (directed_ != &::google::protobuf::internal::kEmptyString) {
    delete directed_;
  }
  if (directed) {
    set_has_directed();
    directed_ = directed;
  } else {
    clear_has_directed();
    directed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool double_spent = 120;
inline bool SwapOrder::has_double_spent() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SwapOrder::set_has_double_spent() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SwapOrder::clear_has_double_spent() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SwapOrder::clear_double_spent() {
  double_spent_ = false;
  clear_has_double_spent();
}
inline bool SwapOrder::double_spent() const {
  return double_spent_;
}
inline void SwapOrder::set_double_spent(bool value) {
  set_has_double_spent();
  double_spent_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SwapData_2eproto__INCLUDED
