// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StaticData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_StaticData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_StaticData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "NameData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_StaticData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_StaticData_2eproto;
namespace fantasybit {
class Dstats;
class DstatsDefaultTypeInternal;
extern DstatsDefaultTypeInternal _Dstats_default_instance_;
class GameInfo;
class GameInfoDefaultTypeInternal;
extern GameInfoDefaultTypeInternal _GameInfo_default_instance_;
class GameResult;
class GameResultDefaultTypeInternal;
extern GameResultDefaultTypeInternal _GameResult_default_instance_;
class Kstats;
class KstatsDefaultTypeInternal;
extern KstatsDefaultTypeInternal _Kstats_default_instance_;
class Ostats;
class OstatsDefaultTypeInternal;
extern OstatsDefaultTypeInternal _Ostats_default_instance_;
class PlayerBase;
class PlayerBaseDefaultTypeInternal;
extern PlayerBaseDefaultTypeInternal _PlayerBase_default_instance_;
class PlayerContractSymbol;
class PlayerContractSymbolDefaultTypeInternal;
extern PlayerContractSymbolDefaultTypeInternal _PlayerContractSymbol_default_instance_;
class PlayerResult;
class PlayerResultDefaultTypeInternal;
extern PlayerResultDefaultTypeInternal _PlayerResult_default_instance_;
class SeasonResult;
class SeasonResultDefaultTypeInternal;
extern SeasonResultDefaultTypeInternal _SeasonResult_default_instance_;
class Stats;
class StatsDefaultTypeInternal;
extern StatsDefaultTypeInternal _Stats_default_instance_;
class WeeklySchedule;
class WeeklyScheduleDefaultTypeInternal;
extern WeeklyScheduleDefaultTypeInternal _WeeklySchedule_default_instance_;
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> ::fantasybit::Dstats* Arena::CreateMaybeMessage<::fantasybit::Dstats>(Arena*);
template<> ::fantasybit::GameInfo* Arena::CreateMaybeMessage<::fantasybit::GameInfo>(Arena*);
template<> ::fantasybit::GameResult* Arena::CreateMaybeMessage<::fantasybit::GameResult>(Arena*);
template<> ::fantasybit::Kstats* Arena::CreateMaybeMessage<::fantasybit::Kstats>(Arena*);
template<> ::fantasybit::Ostats* Arena::CreateMaybeMessage<::fantasybit::Ostats>(Arena*);
template<> ::fantasybit::PlayerBase* Arena::CreateMaybeMessage<::fantasybit::PlayerBase>(Arena*);
template<> ::fantasybit::PlayerContractSymbol* Arena::CreateMaybeMessage<::fantasybit::PlayerContractSymbol>(Arena*);
template<> ::fantasybit::PlayerResult* Arena::CreateMaybeMessage<::fantasybit::PlayerResult>(Arena*);
template<> ::fantasybit::SeasonResult* Arena::CreateMaybeMessage<::fantasybit::SeasonResult>(Arena*);
template<> ::fantasybit::Stats* Arena::CreateMaybeMessage<::fantasybit::Stats>(Arena*);
template<> ::fantasybit::WeeklySchedule* Arena::CreateMaybeMessage<::fantasybit::WeeklySchedule>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fantasybit {

// ===================================================================

class PlayerBase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerBase) */ {
 public:
  inline PlayerBase() : PlayerBase(nullptr) {};
  virtual ~PlayerBase();

  PlayerBase(const PlayerBase& from);
  PlayerBase(PlayerBase&& from) noexcept
    : PlayerBase() {
    *this = ::std::move(from);
  }

  inline PlayerBase& operator=(const PlayerBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerBase& operator=(PlayerBase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerBase* internal_default_instance() {
    return reinterpret_cast<const PlayerBase*>(
               &_PlayerBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerBase& a, PlayerBase& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerBase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerBase* New() const final {
    return CreateMaybeMessage<PlayerBase>(nullptr);
  }

  PlayerBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerBase& from);
  void MergeFrom(const PlayerBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.PlayerBase";
  }
  protected:
  explicit PlayerBase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StaticData_2eproto);
    return ::descriptor_table_StaticData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstFieldNumber = 30,
    kLastFieldNumber = 40,
    kPositionFieldNumber = 50,
  };
  // optional string first = 30;
  bool has_first() const;
  private:
  bool _internal_has_first() const;
  public:
  void clear_first();
  const std::string& first() const;
  void set_first(const std::string& value);
  void set_first(std::string&& value);
  void set_first(const char* value);
  void set_first(const char* value, size_t size);
  std::string* mutable_first();
  std::string* release_first();
  void set_allocated_first(std::string* first);
  private:
  const std::string& _internal_first() const;
  void _internal_set_first(const std::string& value);
  std::string* _internal_mutable_first();
  public:

  // optional string last = 40;
  bool has_last() const;
  private:
  bool _internal_has_last() const;
  public:
  void clear_last();
  const std::string& last() const;
  void set_last(const std::string& value);
  void set_last(std::string&& value);
  void set_last(const char* value);
  void set_last(const char* value, size_t size);
  std::string* mutable_last();
  std::string* release_last();
  void set_allocated_last(std::string* last);
  private:
  const std::string& _internal_last() const;
  void _internal_set_last(const std::string& value);
  std::string* _internal_mutable_last();
  public:

  // optional string position = 50;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const std::string& position() const;
  void set_position(const std::string& value);
  void set_position(std::string&& value);
  void set_position(const char* value);
  void set_position(const char* value, size_t size);
  std::string* mutable_position();
  std::string* release_position();
  void set_allocated_position(std::string* position);
  private:
  const std::string& _internal_position() const;
  void _internal_set_position(const std::string& value);
  std::string* _internal_mutable_position();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_;
  friend struct ::TableStruct_StaticData_2eproto;
};
// -------------------------------------------------------------------

class GameInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameInfo) */ {
 public:
  inline GameInfo() : GameInfo(nullptr) {};
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);
  GameInfo(GameInfo&& from) noexcept
    : GameInfo() {
    *this = ::std::move(from);
  }

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameInfo& operator=(GameInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInfo* internal_default_instance() {
    return reinterpret_cast<const GameInfo*>(
               &_GameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameInfo& a, GameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameInfo* New() const final {
    return CreateMaybeMessage<GameInfo>(nullptr);
  }

  GameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GameInfo";
  }
  protected:
  explicit GameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StaticData_2eproto);
    return ::descriptor_table_StaticData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 10,
    kHomeFieldNumber = 20,
    kAwayFieldNumber = 30,
    kTimeFieldNumber = 40,
  };
  // optional string id = 10;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string home = 20;
  bool has_home() const;
  private:
  bool _internal_has_home() const;
  public:
  void clear_home();
  const std::string& home() const;
  void set_home(const std::string& value);
  void set_home(std::string&& value);
  void set_home(const char* value);
  void set_home(const char* value, size_t size);
  std::string* mutable_home();
  std::string* release_home();
  void set_allocated_home(std::string* home);
  private:
  const std::string& _internal_home() const;
  void _internal_set_home(const std::string& value);
  std::string* _internal_mutable_home();
  public:

  // optional string away = 30;
  bool has_away() const;
  private:
  bool _internal_has_away() const;
  public:
  void clear_away();
  const std::string& away() const;
  void set_away(const std::string& value);
  void set_away(std::string&& value);
  void set_away(const char* value);
  void set_away(const char* value, size_t size);
  std::string* mutable_away();
  std::string* release_away();
  void set_allocated_away(std::string* away);
  private:
  const std::string& _internal_away() const;
  void _internal_set_away(const std::string& value);
  std::string* _internal_mutable_away();
  public:

  // optional uint32 time = 40;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.GameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr home_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr away_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  friend struct ::TableStruct_StaticData_2eproto;
};
// -------------------------------------------------------------------

class WeeklySchedule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.WeeklySchedule) */ {
 public:
  inline WeeklySchedule() : WeeklySchedule(nullptr) {};
  virtual ~WeeklySchedule();

  WeeklySchedule(const WeeklySchedule& from);
  WeeklySchedule(WeeklySchedule&& from) noexcept
    : WeeklySchedule() {
    *this = ::std::move(from);
  }

  inline WeeklySchedule& operator=(const WeeklySchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeeklySchedule& operator=(WeeklySchedule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeeklySchedule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeeklySchedule* internal_default_instance() {
    return reinterpret_cast<const WeeklySchedule*>(
               &_WeeklySchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WeeklySchedule& a, WeeklySchedule& b) {
    a.Swap(&b);
  }
  inline void Swap(WeeklySchedule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeeklySchedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeeklySchedule* New() const final {
    return CreateMaybeMessage<WeeklySchedule>(nullptr);
  }

  WeeklySchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeeklySchedule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeeklySchedule& from);
  void MergeFrom(const WeeklySchedule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeeklySchedule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.WeeklySchedule";
  }
  protected:
  explicit WeeklySchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StaticData_2eproto);
    return ::descriptor_table_StaticData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 10,
    kByesFieldNumber = 20,
  };
  // repeated .fantasybit.GameInfo games = 10;
  int games_size() const;
  private:
  int _internal_games_size() const;
  public:
  void clear_games();
  ::fantasybit::GameInfo* mutable_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::GameInfo >*
      mutable_games();
  private:
  const ::fantasybit::GameInfo& _internal_games(int index) const;
  ::fantasybit::GameInfo* _internal_add_games();
  public:
  const ::fantasybit::GameInfo& games(int index) const;
  ::fantasybit::GameInfo* add_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::GameInfo >&
      games() const;

  // repeated string byes = 20;
  int byes_size() const;
  private:
  int _internal_byes_size() const;
  public:
  void clear_byes();
  const std::string& byes(int index) const;
  std::string* mutable_byes(int index);
  void set_byes(int index, const std::string& value);
  void set_byes(int index, std::string&& value);
  void set_byes(int index, const char* value);
  void set_byes(int index, const char* value, size_t size);
  std::string* add_byes();
  void add_byes(const std::string& value);
  void add_byes(std::string&& value);
  void add_byes(const char* value);
  void add_byes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& byes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_byes();
  private:
  const std::string& _internal_byes(int index) const;
  std::string* _internal_add_byes();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.WeeklySchedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::GameInfo > games_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> byes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_StaticData_2eproto;
};
// -------------------------------------------------------------------

class Kstats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Kstats) */ {
 public:
  inline Kstats() : Kstats(nullptr) {};
  virtual ~Kstats();

  Kstats(const Kstats& from);
  Kstats(Kstats&& from) noexcept
    : Kstats() {
    *this = ::std::move(from);
  }

  inline Kstats& operator=(const Kstats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kstats& operator=(Kstats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Kstats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Kstats* internal_default_instance() {
    return reinterpret_cast<const Kstats*>(
               &_Kstats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Kstats& a, Kstats& b) {
    a.Swap(&b);
  }
  inline void Swap(Kstats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kstats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Kstats* New() const final {
    return CreateMaybeMessage<Kstats>(nullptr);
  }

  Kstats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Kstats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Kstats& from);
  void MergeFrom(const Kstats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kstats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Kstats";
  }
  protected:
  explicit Kstats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StaticData_2eproto);
    return ::descriptor_table_StaticData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFgFieldNumber = 20,
    kPaFieldNumber = 10,
  };
  // repeated int32 fg = 20;
  int fg_size() const;
  private:
  int _internal_fg_size() const;
  public:
  void clear_fg();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fg(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_fg() const;
  void _internal_add_fg(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_fg();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 fg(int index) const;
  void set_fg(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_fg(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      fg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_fg();

  // optional int32 pa = 10;
  bool has_pa() const;
  private:
  bool _internal_has_pa() const;
  public:
  void clear_pa();
  ::PROTOBUF_NAMESPACE_ID::int32 pa() const;
  void set_pa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pa() const;
  void _internal_set_pa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.Kstats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > fg_;
  ::PROTOBUF_NAMESPACE_ID::int32 pa_;
  friend struct ::TableStruct_StaticData_2eproto;
};
// -------------------------------------------------------------------

class Dstats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Dstats) */ {
 public:
  inline Dstats() : Dstats(nullptr) {};
  virtual ~Dstats();

  Dstats(const Dstats& from);
  Dstats(Dstats&& from) noexcept
    : Dstats() {
    *this = ::std::move(from);
  }

  inline Dstats& operator=(const Dstats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dstats& operator=(Dstats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dstats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dstats* internal_default_instance() {
    return reinterpret_cast<const Dstats*>(
               &_Dstats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Dstats& a, Dstats& b) {
    a.Swap(&b);
  }
  inline void Swap(Dstats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dstats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dstats* New() const final {
    return CreateMaybeMessage<Dstats>(nullptr);
  }

  Dstats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dstats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dstats& from);
  void MergeFrom(const Dstats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dstats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Dstats";
  }
  protected:
  explicit Dstats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StaticData_2eproto);
    return ::descriptor_table_StaticData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsaFieldNumber = 160,
    kTwoptFieldNumber = 100,
    kOneptFieldNumber = 110,
    kDeftdFieldNumber = 120,
    kSftyFieldNumber = 130,
    kTurnoversFieldNumber = 140,
    kSacksFieldNumber = 150,
  };
  // optional int32 ptsa = 160;
  bool has_ptsa() const;
  private:
  bool _internal_has_ptsa() const;
  public:
  void clear_ptsa();
  ::PROTOBUF_NAMESPACE_ID::int32 ptsa() const;
  void set_ptsa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ptsa() const;
  void _internal_set_ptsa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 twopt = 100;
  bool has_twopt() const;
  private:
  bool _internal_has_twopt() const;
  public:
  void clear_twopt();
  ::PROTOBUF_NAMESPACE_ID::int32 twopt() const;
  void set_twopt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_twopt() const;
  void _internal_set_twopt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 onept = 110;
  bool has_onept() const;
  private:
  bool _internal_has_onept() const;
  public:
  void clear_onept();
  ::PROTOBUF_NAMESPACE_ID::int32 onept() const;
  void set_onept(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onept() const;
  void _internal_set_onept(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 deftd = 120;
  bool has_deftd() const;
  private:
  bool _internal_has_deftd() const;
  public:
  void clear_deftd();
  ::PROTOBUF_NAMESPACE_ID::int32 deftd() const;
  void set_deftd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_deftd() const;
  void _internal_set_deftd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 sfty = 130;
  bool has_sfty() const;
  private:
  bool _internal_has_sfty() const;
  public:
  void clear_sfty();
  ::PROTOBUF_NAMESPACE_ID::int32 sfty() const;
  void set_sfty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfty() const;
  void _internal_set_sfty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 turnovers = 140;
  bool has_turnovers() const;
  private:
  bool _internal_has_turnovers() const;
  public:
  void clear_turnovers();
  ::PROTOBUF_NAMESPACE_ID::int32 turnovers() const;
  void set_turnovers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_turnovers() const;
  void _internal_set_turnovers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 sacks = 150;
  bool has_sacks() const;
  private:
  bool _internal_has_sacks() const;
  public:
  void clear_sacks();
  ::PROTOBUF_NAMESPACE_ID::int32 sacks() const;
  void set_sacks(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sacks() const;
  void _internal_set_sacks(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.Dstats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 ptsa_;
  ::PROTOBUF_NAMESPACE_ID::int32 twopt_;
  ::PROTOBUF_NAMESPACE_ID::int32 onept_;
  ::PROTOBUF_NAMESPACE_ID::int32 deftd_;
  ::PROTOBUF_NAMESPACE_ID::int32 sfty_;
  ::PROTOBUF_NAMESPACE_ID::int32 turnovers_;
  ::PROTOBUF_NAMESPACE_ID::int32 sacks_;
  friend struct ::TableStruct_StaticData_2eproto;
};
// -------------------------------------------------------------------

class Ostats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Ostats) */ {
 public:
  inline Ostats() : Ostats(nullptr) {};
  virtual ~Ostats();

  Ostats(const Ostats& from);
  Ostats(Ostats&& from) noexcept
    : Ostats() {
    *this = ::std::move(from);
  }

  inline Ostats& operator=(const Ostats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ostats& operator=(Ostats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ostats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ostats* internal_default_instance() {
    return reinterpret_cast<const Ostats*>(
               &_Ostats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Ostats& a, Ostats& b) {
    a.Swap(&b);
  }
  inline void Swap(Ostats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ostats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ostats* New() const final {
    return CreateMaybeMessage<Ostats>(nullptr);
  }

  Ostats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ostats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ostats& from);
  void MergeFrom(const Ostats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ostats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Ostats";
  }
  protected:
  explicit Ostats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StaticData_2eproto);
    return ::descriptor_table_StaticData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneptFieldNumber = 110,
    kPassydsFieldNumber = 10,
    kPasstdFieldNumber = 20,
    kRushydsFieldNumber = 30,
    kRushtdFieldNumber = 40,
    kRecydsFieldNumber = 50,
    kRectdFieldNumber = 60,
    kRecFieldNumber = 70,
    kPintFieldNumber = 80,
    kFumbleFieldNumber = 90,
    kTwoptFieldNumber = 100,
  };
  // optional int32 onept = 110;
  bool has_onept() const;
  private:
  bool _internal_has_onept() const;
  public:
  void clear_onept();
  ::PROTOBUF_NAMESPACE_ID::int32 onept() const;
  void set_onept(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onept() const;
  void _internal_set_onept(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 passyds = 10;
  bool has_passyds() const;
  private:
  bool _internal_has_passyds() const;
  public:
  void clear_passyds();
  ::PROTOBUF_NAMESPACE_ID::int32 passyds() const;
  void set_passyds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passyds() const;
  void _internal_set_passyds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 passtd = 20;
  bool has_passtd() const;
  private:
  bool _internal_has_passtd() const;
  public:
  void clear_passtd();
  ::PROTOBUF_NAMESPACE_ID::int32 passtd() const;
  void set_passtd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passtd() const;
  void _internal_set_passtd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rushyds = 30;
  bool has_rushyds() const;
  private:
  bool _internal_has_rushyds() const;
  public:
  void clear_rushyds();
  ::PROTOBUF_NAMESPACE_ID::int32 rushyds() const;
  void set_rushyds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rushyds() const;
  void _internal_set_rushyds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rushtd = 40;
  bool has_rushtd() const;
  private:
  bool _internal_has_rushtd() const;
  public:
  void clear_rushtd();
  ::PROTOBUF_NAMESPACE_ID::int32 rushtd() const;
  void set_rushtd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rushtd() const;
  void _internal_set_rushtd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 recyds = 50;
  bool has_recyds() const;
  private:
  bool _internal_has_recyds() const;
  public:
  void clear_recyds();
  ::PROTOBUF_NAMESPACE_ID::int32 recyds() const;
  void set_recyds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_recyds() const;
  void _internal_set_recyds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rectd = 60;
  bool has_rectd() const;
  private:
  bool _internal_has_rectd() const;
  public:
  void clear_rectd();
  ::PROTOBUF_NAMESPACE_ID::int32 rectd() const;
  void set_rectd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rectd() const;
  void _internal_set_rectd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rec = 70;
  bool has_rec() const;
  private:
  bool _internal_has_rec() const;
  public:
  void clear_rec();
  ::PROTOBUF_NAMESPACE_ID::int32 rec() const;
  void set_rec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rec() const;
  void _internal_set_rec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pint = 80;
  bool has_pint() const;
  private:
  bool _internal_has_pint() const;
  public:
  void clear_pint();
  ::PROTOBUF_NAMESPACE_ID::int32 pint() const;
  void set_pint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pint() const;
  void _internal_set_pint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 fumble = 90;
  bool has_fumble() const;
  private:
  bool _internal_has_fumble() const;
  public:
  void clear_fumble();
  ::PROTOBUF_NAMESPACE_ID::int32 fumble() const;
  void set_fumble(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fumble() const;
  void _internal_set_fumble(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 twopt = 100;
  bool has_twopt() const;
  private:
  bool _internal_has_twopt() const;
  public:
  void clear_twopt();
  ::PROTOBUF_NAMESPACE_ID::int32 twopt() const;
  void set_twopt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_twopt() const;
  void _internal_set_twopt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.Ostats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 onept_;
  ::PROTOBUF_NAMESPACE_ID::int32 passyds_;
  ::PROTOBUF_NAMESPACE_ID::int32 passtd_;
  ::PROTOBUF_NAMESPACE_ID::int32 rushyds_;
  ::PROTOBUF_NAMESPACE_ID::int32 rushtd_;
  ::PROTOBUF_NAMESPACE_ID::int32 recyds_;
  ::PROTOBUF_NAMESPACE_ID::int32 rectd_;
  ::PROTOBUF_NAMESPACE_ID::int32 rec_;
  ::PROTOBUF_NAMESPACE_ID::int32 pint_;
  ::PROTOBUF_NAMESPACE_ID::int32 fumble_;
  ::PROTOBUF_NAMESPACE_ID::int32 twopt_;
  friend struct ::TableStruct_StaticData_2eproto;
};
// -------------------------------------------------------------------

class Stats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Stats) */ {
 public:
  inline Stats() : Stats(nullptr) {};
  virtual ~Stats();

  Stats(const Stats& from);
  Stats(Stats&& from) noexcept
    : Stats() {
    *this = ::std::move(from);
  }

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stats& operator=(Stats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stats* internal_default_instance() {
    return reinterpret_cast<const Stats*>(
               &_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Stats& a, Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(Stats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stats* New() const final {
    return CreateMaybeMessage<Stats>(nullptr);
  }

  Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Stats";
  }
  protected:
  explicit Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StaticData_2eproto);
    return ::descriptor_table_StaticData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOstatsFieldNumber = 10,
    kDstatsFieldNumber = 20,
    kKstatsFieldNumber = 30,
  };
  // optional .fantasybit.Ostats ostats = 10;
  bool has_ostats() const;
  private:
  bool _internal_has_ostats() const;
  public:
  void clear_ostats();
  const ::fantasybit::Ostats& ostats() const;
  ::fantasybit::Ostats* release_ostats();
  ::fantasybit::Ostats* mutable_ostats();
  void set_allocated_ostats(::fantasybit::Ostats* ostats);
  private:
  const ::fantasybit::Ostats& _internal_ostats() const;
  ::fantasybit::Ostats* _internal_mutable_ostats();
  public:
  void unsafe_arena_set_allocated_ostats(
      ::fantasybit::Ostats* ostats);
  ::fantasybit::Ostats* unsafe_arena_release_ostats();

  // optional .fantasybit.Dstats dstats = 20;
  bool has_dstats() const;
  private:
  bool _internal_has_dstats() const;
  public:
  void clear_dstats();
  const ::fantasybit::Dstats& dstats() const;
  ::fantasybit::Dstats* release_dstats();
  ::fantasybit::Dstats* mutable_dstats();
  void set_allocated_dstats(::fantasybit::Dstats* dstats);
  private:
  const ::fantasybit::Dstats& _internal_dstats() const;
  ::fantasybit::Dstats* _internal_mutable_dstats();
  public:
  void unsafe_arena_set_allocated_dstats(
      ::fantasybit::Dstats* dstats);
  ::fantasybit::Dstats* unsafe_arena_release_dstats();

  // optional .fantasybit.Kstats kstats = 30;
  bool has_kstats() const;
  private:
  bool _internal_has_kstats() const;
  public:
  void clear_kstats();
  const ::fantasybit::Kstats& kstats() const;
  ::fantasybit::Kstats* release_kstats();
  ::fantasybit::Kstats* mutable_kstats();
  void set_allocated_kstats(::fantasybit::Kstats* kstats);
  private:
  const ::fantasybit::Kstats& _internal_kstats() const;
  ::fantasybit::Kstats* _internal_mutable_kstats();
  public:
  void unsafe_arena_set_allocated_kstats(
      ::fantasybit::Kstats* kstats);
  ::fantasybit::Kstats* unsafe_arena_release_kstats();

  // @@protoc_insertion_point(class_scope:fantasybit.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::Ostats* ostats_;
  ::fantasybit::Dstats* dstats_;
  ::fantasybit::Kstats* kstats_;
  friend struct ::TableStruct_StaticData_2eproto;
};
// -------------------------------------------------------------------

class PlayerResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerResult) */ {
 public:
  inline PlayerResult() : PlayerResult(nullptr) {};
  virtual ~PlayerResult();

  PlayerResult(const PlayerResult& from);
  PlayerResult(PlayerResult&& from) noexcept
    : PlayerResult() {
    *this = ::std::move(from);
  }

  inline PlayerResult& operator=(const PlayerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerResult& operator=(PlayerResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerResult* internal_default_instance() {
    return reinterpret_cast<const PlayerResult*>(
               &_PlayerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlayerResult& a, PlayerResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerResult* New() const final {
    return CreateMaybeMessage<PlayerResult>(nullptr);
  }

  PlayerResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerResult& from);
  void MergeFrom(const PlayerResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.PlayerResult";
  }
  protected:
  explicit PlayerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StaticData_2eproto);
    return ::descriptor_table_StaticData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantaybitawardFieldNumber = 60,
    kFantasybitpnlFieldNumber = 70,
    kRowposdividendFieldNumber = 80,
    kPlayeridFieldNumber = 20,
    kSymbolFieldNumber = 90,
    kStatsFieldNumber = 50,
    kResultFieldNumber = 40,
  };
  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  int fantaybitaward_size() const;
  private:
  int _internal_fantaybitaward_size() const;
  public:
  void clear_fantaybitaward();
  ::fantasybit::FantasyBitAward* mutable_fantaybitaward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitAward >*
      mutable_fantaybitaward();
  private:
  const ::fantasybit::FantasyBitAward& _internal_fantaybitaward(int index) const;
  ::fantasybit::FantasyBitAward* _internal_add_fantaybitaward();
  public:
  const ::fantasybit::FantasyBitAward& fantaybitaward(int index) const;
  ::fantasybit::FantasyBitAward* add_fantaybitaward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitAward >&
      fantaybitaward() const;

  // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
  int fantasybitpnl_size() const;
  private:
  int _internal_fantasybitpnl_size() const;
  public:
  void clear_fantasybitpnl();
  ::fantasybit::FantasyBitPnl* mutable_fantasybitpnl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitPnl >*
      mutable_fantasybitpnl();
  private:
  const ::fantasybit::FantasyBitPnl& _internal_fantasybitpnl(int index) const;
  ::fantasybit::FantasyBitPnl* _internal_add_fantasybitpnl();
  public:
  const ::fantasybit::FantasyBitPnl& fantasybitpnl(int index) const;
  ::fantasybit::FantasyBitPnl* add_fantasybitpnl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitPnl >&
      fantasybitpnl() const;

  // repeated .fantasybit.FantasyBitPnl rowposdividend = 80;
  int rowposdividend_size() const;
  private:
  int _internal_rowposdividend_size() const;
  public:
  void clear_rowposdividend();
  ::fantasybit::FantasyBitPnl* mutable_rowposdividend(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitPnl >*
      mutable_rowposdividend();
  private:
  const ::fantasybit::FantasyBitPnl& _internal_rowposdividend(int index) const;
  ::fantasybit::FantasyBitPnl* _internal_add_rowposdividend();
  public:
  const ::fantasybit::FantasyBitPnl& rowposdividend(int index) const;
  ::fantasybit::FantasyBitPnl* add_rowposdividend();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitPnl >&
      rowposdividend() const;

  // optional string playerid = 20;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional string symbol = 90;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional .fantasybit.Stats stats = 50;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::fantasybit::Stats& stats() const;
  ::fantasybit::Stats* release_stats();
  ::fantasybit::Stats* mutable_stats();
  void set_allocated_stats(::fantasybit::Stats* stats);
  private:
  const ::fantasybit::Stats& _internal_stats() const;
  ::fantasybit::Stats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::fantasybit::Stats* stats);
  ::fantasybit::Stats* unsafe_arena_release_stats();

  // optional float result = 40;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  float result() const;
  void set_result(float value);
  private:
  float _internal_result() const;
  void _internal_set_result(float value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitAward > fantaybitaward_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitPnl > fantasybitpnl_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitPnl > rowposdividend_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::fantasybit::Stats* stats_;
  float result_;
  friend struct ::TableStruct_StaticData_2eproto;
};
// -------------------------------------------------------------------

class GameResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameResult) */ {
 public:
  inline GameResult() : GameResult(nullptr) {};
  virtual ~GameResult();

  GameResult(const GameResult& from);
  GameResult(GameResult&& from) noexcept
    : GameResult() {
    *this = ::std::move(from);
  }

  inline GameResult& operator=(const GameResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameResult& operator=(GameResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameResult* internal_default_instance() {
    return reinterpret_cast<const GameResult*>(
               &_GameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameResult& a, GameResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GameResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameResult* New() const final {
    return CreateMaybeMessage<GameResult>(nullptr);
  }

  GameResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameResult& from);
  void MergeFrom(const GameResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GameResult";
  }
  protected:
  explicit GameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StaticData_2eproto);
    return ::descriptor_table_StaticData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeResultFieldNumber = 10,
    kAwayResultFieldNumber = 20,
    kGameidFieldNumber = 1,
    kAwayTotalFieldNumber = 50,
    kKickofftimeFieldNumber = 30,
    kHomeTotalFieldNumber = 40,
  };
  // repeated .fantasybit.PlayerResult home_result = 10;
  int home_result_size() const;
  private:
  int _internal_home_result_size() const;
  public:
  void clear_home_result();
  ::fantasybit::PlayerResult* mutable_home_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >*
      mutable_home_result();
  private:
  const ::fantasybit::PlayerResult& _internal_home_result(int index) const;
  ::fantasybit::PlayerResult* _internal_add_home_result();
  public:
  const ::fantasybit::PlayerResult& home_result(int index) const;
  ::fantasybit::PlayerResult* add_home_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >&
      home_result() const;

  // repeated .fantasybit.PlayerResult away_result = 20;
  int away_result_size() const;
  private:
  int _internal_away_result_size() const;
  public:
  void clear_away_result();
  ::fantasybit::PlayerResult* mutable_away_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >*
      mutable_away_result();
  private:
  const ::fantasybit::PlayerResult& _internal_away_result(int index) const;
  ::fantasybit::PlayerResult* _internal_add_away_result();
  public:
  const ::fantasybit::PlayerResult& away_result(int index) const;
  ::fantasybit::PlayerResult* add_away_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >&
      away_result() const;

  // optional string gameid = 1;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  const std::string& gameid() const;
  void set_gameid(const std::string& value);
  void set_gameid(std::string&& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  std::string* mutable_gameid();
  std::string* release_gameid();
  void set_allocated_gameid(std::string* gameid);
  private:
  const std::string& _internal_gameid() const;
  void _internal_set_gameid(const std::string& value);
  std::string* _internal_mutable_gameid();
  public:

  // optional float awayTotal = 50;
  bool has_awaytotal() const;
  private:
  bool _internal_has_awaytotal() const;
  public:
  void clear_awaytotal();
  float awaytotal() const;
  void set_awaytotal(float value);
  private:
  float _internal_awaytotal() const;
  void _internal_set_awaytotal(float value);
  public:

  // optional uint32 kickofftime = 30;
  bool has_kickofftime() const;
  private:
  bool _internal_has_kickofftime() const;
  public:
  void clear_kickofftime();
  ::PROTOBUF_NAMESPACE_ID::uint32 kickofftime() const;
  void set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kickofftime() const;
  void _internal_set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float homeTotal = 40;
  bool has_hometotal() const;
  private:
  bool _internal_has_hometotal() const;
  public:
  void clear_hometotal();
  float hometotal() const;
  void set_hometotal(float value);
  private:
  float _internal_hometotal() const;
  void _internal_set_hometotal(float value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.GameResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult > home_result_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult > away_result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameid_;
  float awaytotal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kickofftime_;
  float hometotal_;
  friend struct ::TableStruct_StaticData_2eproto;
};
// -------------------------------------------------------------------

class SeasonResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.SeasonResult) */ {
 public:
  inline SeasonResult() : SeasonResult(nullptr) {};
  virtual ~SeasonResult();

  SeasonResult(const SeasonResult& from);
  SeasonResult(SeasonResult&& from) noexcept
    : SeasonResult() {
    *this = ::std::move(from);
  }

  inline SeasonResult& operator=(const SeasonResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeasonResult& operator=(SeasonResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeasonResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeasonResult* internal_default_instance() {
    return reinterpret_cast<const SeasonResult*>(
               &_SeasonResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SeasonResult& a, SeasonResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SeasonResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeasonResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeasonResult* New() const final {
    return CreateMaybeMessage<SeasonResult>(nullptr);
  }

  SeasonResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeasonResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeasonResult& from);
  void MergeFrom(const SeasonResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeasonResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.SeasonResult";
  }
  protected:
  explicit SeasonResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StaticData_2eproto);
    return ::descriptor_table_StaticData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerResultsFieldNumber = 10,
    kSeasonFieldNumber = 1,
    kTotalFieldNumber = 20,
  };
  // repeated .fantasybit.PlayerResult player_results = 10;
  int player_results_size() const;
  private:
  int _internal_player_results_size() const;
  public:
  void clear_player_results();
  ::fantasybit::PlayerResult* mutable_player_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >*
      mutable_player_results();
  private:
  const ::fantasybit::PlayerResult& _internal_player_results(int index) const;
  ::fantasybit::PlayerResult* _internal_add_player_results();
  public:
  const ::fantasybit::PlayerResult& player_results(int index) const;
  ::fantasybit::PlayerResult* add_player_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >&
      player_results() const;

  // optional uint64 season = 1;
  bool has_season() const;
  private:
  bool _internal_has_season() const;
  public:
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::uint64 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float total = 20;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  float total() const;
  void set_total(float value);
  private:
  float _internal_total() const;
  void _internal_set_total(float value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.SeasonResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult > player_results_;
  ::PROTOBUF_NAMESPACE_ID::uint64 season_;
  float total_;
  friend struct ::TableStruct_StaticData_2eproto;
};
// -------------------------------------------------------------------

class PlayerContractSymbol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerContractSymbol) */ {
 public:
  inline PlayerContractSymbol() : PlayerContractSymbol(nullptr) {};
  virtual ~PlayerContractSymbol();

  PlayerContractSymbol(const PlayerContractSymbol& from);
  PlayerContractSymbol(PlayerContractSymbol&& from) noexcept
    : PlayerContractSymbol() {
    *this = ::std::move(from);
  }

  inline PlayerContractSymbol& operator=(const PlayerContractSymbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerContractSymbol& operator=(PlayerContractSymbol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerContractSymbol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerContractSymbol* internal_default_instance() {
    return reinterpret_cast<const PlayerContractSymbol*>(
               &_PlayerContractSymbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PlayerContractSymbol& a, PlayerContractSymbol& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerContractSymbol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerContractSymbol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerContractSymbol* New() const final {
    return CreateMaybeMessage<PlayerContractSymbol>(nullptr);
  }

  PlayerContractSymbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerContractSymbol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerContractSymbol& from);
  void MergeFrom(const PlayerContractSymbol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerContractSymbol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.PlayerContractSymbol";
  }
  protected:
  explicit PlayerContractSymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StaticData_2eproto);
    return ::descriptor_table_StaticData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 10,
    kPlayeridFieldNumber = 20,
    kInitals2FieldNumber = 40,
    kSeq2FieldNumber = 50,
    kYear2FieldNumber = 60,
    kType1SorwFieldNumber = 70,
    kWeek1Or04SFieldNumber = 80,
    kSybhashFieldNumber = 30,
  };
  // optional string symbol = 10;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional string playerid = 20;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional string initals2 = 40;
  bool has_initals2() const;
  private:
  bool _internal_has_initals2() const;
  public:
  void clear_initals2();
  const std::string& initals2() const;
  void set_initals2(const std::string& value);
  void set_initals2(std::string&& value);
  void set_initals2(const char* value);
  void set_initals2(const char* value, size_t size);
  std::string* mutable_initals2();
  std::string* release_initals2();
  void set_allocated_initals2(std::string* initals2);
  private:
  const std::string& _internal_initals2() const;
  void _internal_set_initals2(const std::string& value);
  std::string* _internal_mutable_initals2();
  public:

  // optional string seq2 = 50;
  bool has_seq2() const;
  private:
  bool _internal_has_seq2() const;
  public:
  void clear_seq2();
  const std::string& seq2() const;
  void set_seq2(const std::string& value);
  void set_seq2(std::string&& value);
  void set_seq2(const char* value);
  void set_seq2(const char* value, size_t size);
  std::string* mutable_seq2();
  std::string* release_seq2();
  void set_allocated_seq2(std::string* seq2);
  private:
  const std::string& _internal_seq2() const;
  void _internal_set_seq2(const std::string& value);
  std::string* _internal_mutable_seq2();
  public:

  // optional string year2 = 60;
  bool has_year2() const;
  private:
  bool _internal_has_year2() const;
  public:
  void clear_year2();
  const std::string& year2() const;
  void set_year2(const std::string& value);
  void set_year2(std::string&& value);
  void set_year2(const char* value);
  void set_year2(const char* value, size_t size);
  std::string* mutable_year2();
  std::string* release_year2();
  void set_allocated_year2(std::string* year2);
  private:
  const std::string& _internal_year2() const;
  void _internal_set_year2(const std::string& value);
  std::string* _internal_mutable_year2();
  public:

  // optional string type1sorw = 70;
  bool has_type1sorw() const;
  private:
  bool _internal_has_type1sorw() const;
  public:
  void clear_type1sorw();
  const std::string& type1sorw() const;
  void set_type1sorw(const std::string& value);
  void set_type1sorw(std::string&& value);
  void set_type1sorw(const char* value);
  void set_type1sorw(const char* value, size_t size);
  std::string* mutable_type1sorw();
  std::string* release_type1sorw();
  void set_allocated_type1sorw(std::string* type1sorw);
  private:
  const std::string& _internal_type1sorw() const;
  void _internal_set_type1sorw(const std::string& value);
  std::string* _internal_mutable_type1sorw();
  public:

  // optional string week1or04s = 80;
  bool has_week1or04s() const;
  private:
  bool _internal_has_week1or04s() const;
  public:
  void clear_week1or04s();
  const std::string& week1or04s() const;
  void set_week1or04s(const std::string& value);
  void set_week1or04s(std::string&& value);
  void set_week1or04s(const char* value);
  void set_week1or04s(const char* value, size_t size);
  std::string* mutable_week1or04s();
  std::string* release_week1or04s();
  void set_allocated_week1or04s(std::string* week1or04s);
  private:
  const std::string& _internal_week1or04s() const;
  void _internal_set_week1or04s(const std::string& value);
  std::string* _internal_mutable_week1or04s();
  public:

  // optional uint64 sybhash = 30;
  bool has_sybhash() const;
  private:
  bool _internal_has_sybhash() const;
  public:
  void clear_sybhash();
  ::PROTOBUF_NAMESPACE_ID::uint64 sybhash() const;
  void set_sybhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sybhash() const;
  void _internal_set_sybhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerContractSymbol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initals2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seq2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr year2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type1sorw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr week1or04s_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sybhash_;
  friend struct ::TableStruct_StaticData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerBase

// optional string first = 30;
inline bool PlayerBase::_internal_has_first() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerBase::has_first() const {
  return _internal_has_first();
}
inline void PlayerBase::clear_first() {
  first_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerBase::first() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerBase.first)
  return _internal_first();
}
inline void PlayerBase::set_first(const std::string& value) {
  _internal_set_first(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerBase.first)
}
inline std::string* PlayerBase::mutable_first() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerBase.first)
  return _internal_mutable_first();
}
inline const std::string& PlayerBase::_internal_first() const {
  return first_.Get();
}
inline void PlayerBase::_internal_set_first(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerBase::set_first(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  first_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerBase.first)
}
inline void PlayerBase::set_first(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerBase.first)
}
inline void PlayerBase::set_first(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerBase.first)
}
inline std::string* PlayerBase::_internal_mutable_first() {
  _has_bits_[0] |= 0x00000001u;
  return first_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerBase::release_first() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerBase.first)
  if (!_internal_has_first()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return first_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerBase::set_allocated_first(std::string* first) {
  if (first != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  first_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerBase.first)
}

// optional string last = 40;
inline bool PlayerBase::_internal_has_last() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerBase::has_last() const {
  return _internal_has_last();
}
inline void PlayerBase::clear_last() {
  last_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerBase::last() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerBase.last)
  return _internal_last();
}
inline void PlayerBase::set_last(const std::string& value) {
  _internal_set_last(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerBase.last)
}
inline std::string* PlayerBase::mutable_last() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerBase.last)
  return _internal_mutable_last();
}
inline const std::string& PlayerBase::_internal_last() const {
  return last_.Get();
}
inline void PlayerBase::_internal_set_last(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  last_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerBase::set_last(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  last_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerBase.last)
}
inline void PlayerBase::set_last(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  last_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerBase.last)
}
inline void PlayerBase::set_last(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  last_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerBase.last)
}
inline std::string* PlayerBase::_internal_mutable_last() {
  _has_bits_[0] |= 0x00000002u;
  return last_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerBase::release_last() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerBase.last)
  if (!_internal_has_last()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return last_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerBase::set_allocated_last(std::string* last) {
  if (last != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerBase.last)
}

// optional string position = 50;
inline bool PlayerBase::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerBase::has_position() const {
  return _internal_has_position();
}
inline void PlayerBase::clear_position() {
  position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PlayerBase::position() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerBase.position)
  return _internal_position();
}
inline void PlayerBase::set_position(const std::string& value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerBase.position)
}
inline std::string* PlayerBase::mutable_position() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerBase.position)
  return _internal_mutable_position();
}
inline const std::string& PlayerBase::_internal_position() const {
  return position_.Get();
}
inline void PlayerBase::_internal_set_position(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerBase::set_position(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  position_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerBase.position)
}
inline void PlayerBase::set_position(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerBase.position)
}
inline void PlayerBase::set_position(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerBase.position)
}
inline std::string* PlayerBase::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000004u;
  return position_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerBase::release_position() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerBase.position)
  if (!_internal_has_position()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return position_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerBase::set_allocated_position(std::string* position) {
  if (position != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerBase.position)
}

// -------------------------------------------------------------------

// GameInfo

// optional string id = 10;
inline bool GameInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameInfo::has_id() const {
  return _internal_has_id();
}
inline void GameInfo::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameInfo::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.id)
  return _internal_id();
}
inline void GameInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.id)
}
inline std::string* GameInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameInfo.id)
  return _internal_mutable_id();
}
inline const std::string& GameInfo::_internal_id() const {
  return id_.Get();
}
inline void GameInfo::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameInfo::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameInfo.id)
}
inline void GameInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameInfo.id)
}
inline void GameInfo::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameInfo.id)
}
inline std::string* GameInfo::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameInfo::release_id() {
  // @@protoc_insertion_point(field_release:fantasybit.GameInfo.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameInfo.id)
}

// optional string home = 20;
inline bool GameInfo::_internal_has_home() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameInfo::has_home() const {
  return _internal_has_home();
}
inline void GameInfo::clear_home() {
  home_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GameInfo::home() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.home)
  return _internal_home();
}
inline void GameInfo::set_home(const std::string& value) {
  _internal_set_home(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.home)
}
inline std::string* GameInfo::mutable_home() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameInfo.home)
  return _internal_mutable_home();
}
inline const std::string& GameInfo::_internal_home() const {
  return home_.Get();
}
inline void GameInfo::_internal_set_home(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  home_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameInfo::set_home(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  home_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameInfo.home)
}
inline void GameInfo::set_home(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  home_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameInfo.home)
}
inline void GameInfo::set_home(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  home_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameInfo.home)
}
inline std::string* GameInfo::_internal_mutable_home() {
  _has_bits_[0] |= 0x00000002u;
  return home_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameInfo::release_home() {
  // @@protoc_insertion_point(field_release:fantasybit.GameInfo.home)
  if (!_internal_has_home()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return home_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameInfo::set_allocated_home(std::string* home) {
  if (home != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  home_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), home,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameInfo.home)
}

// optional string away = 30;
inline bool GameInfo::_internal_has_away() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameInfo::has_away() const {
  return _internal_has_away();
}
inline void GameInfo::clear_away() {
  away_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GameInfo::away() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.away)
  return _internal_away();
}
inline void GameInfo::set_away(const std::string& value) {
  _internal_set_away(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.away)
}
inline std::string* GameInfo::mutable_away() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameInfo.away)
  return _internal_mutable_away();
}
inline const std::string& GameInfo::_internal_away() const {
  return away_.Get();
}
inline void GameInfo::_internal_set_away(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  away_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameInfo::set_away(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  away_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameInfo.away)
}
inline void GameInfo::set_away(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  away_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameInfo.away)
}
inline void GameInfo::set_away(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  away_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameInfo.away)
}
inline std::string* GameInfo::_internal_mutable_away() {
  _has_bits_[0] |= 0x00000004u;
  return away_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameInfo::release_away() {
  // @@protoc_insertion_point(field_release:fantasybit.GameInfo.away)
  if (!_internal_has_away()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return away_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameInfo::set_allocated_away(std::string* away) {
  if (away != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  away_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), away,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameInfo.away)
}

// optional uint32 time = 40;
inline bool GameInfo::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameInfo::has_time() const {
  return _internal_has_time();
}
inline void GameInfo::clear_time() {
  time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameInfo::time() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.time)
  return _internal_time();
}
inline void GameInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void GameInfo::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.time)
}

// -------------------------------------------------------------------

// WeeklySchedule

// repeated .fantasybit.GameInfo games = 10;
inline int WeeklySchedule::_internal_games_size() const {
  return games_.size();
}
inline int WeeklySchedule::games_size() const {
  return _internal_games_size();
}
inline void WeeklySchedule::clear_games() {
  games_.Clear();
}
inline ::fantasybit::GameInfo* WeeklySchedule::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.WeeklySchedule.games)
  return games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::GameInfo >*
WeeklySchedule::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.WeeklySchedule.games)
  return &games_;
}
inline const ::fantasybit::GameInfo& WeeklySchedule::_internal_games(int index) const {
  return games_.Get(index);
}
inline const ::fantasybit::GameInfo& WeeklySchedule::games(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.WeeklySchedule.games)
  return _internal_games(index);
}
inline ::fantasybit::GameInfo* WeeklySchedule::_internal_add_games() {
  return games_.Add();
}
inline ::fantasybit::GameInfo* WeeklySchedule::add_games() {
  // @@protoc_insertion_point(field_add:fantasybit.WeeklySchedule.games)
  return _internal_add_games();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::GameInfo >&
WeeklySchedule::games() const {
  // @@protoc_insertion_point(field_list:fantasybit.WeeklySchedule.games)
  return games_;
}

// repeated string byes = 20;
inline int WeeklySchedule::_internal_byes_size() const {
  return byes_.size();
}
inline int WeeklySchedule::byes_size() const {
  return _internal_byes_size();
}
inline void WeeklySchedule::clear_byes() {
  byes_.Clear();
}
inline std::string* WeeklySchedule::add_byes() {
  // @@protoc_insertion_point(field_add_mutable:fantasybit.WeeklySchedule.byes)
  return _internal_add_byes();
}
inline const std::string& WeeklySchedule::_internal_byes(int index) const {
  return byes_.Get(index);
}
inline const std::string& WeeklySchedule::byes(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.WeeklySchedule.byes)
  return _internal_byes(index);
}
inline std::string* WeeklySchedule::mutable_byes(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.WeeklySchedule.byes)
  return byes_.Mutable(index);
}
inline void WeeklySchedule::set_byes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.WeeklySchedule.byes)
  byes_.Mutable(index)->assign(value);
}
inline void WeeklySchedule::set_byes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fantasybit.WeeklySchedule.byes)
  byes_.Mutable(index)->assign(std::move(value));
}
inline void WeeklySchedule::set_byes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  byes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.WeeklySchedule.byes)
}
inline void WeeklySchedule::set_byes(int index, const char* value, size_t size) {
  byes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeeklySchedule.byes)
}
inline std::string* WeeklySchedule::_internal_add_byes() {
  return byes_.Add();
}
inline void WeeklySchedule::add_byes(const std::string& value) {
  byes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.WeeklySchedule.byes)
}
inline void WeeklySchedule::add_byes(std::string&& value) {
  byes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fantasybit.WeeklySchedule.byes)
}
inline void WeeklySchedule::add_byes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  byes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.WeeklySchedule.byes)
}
inline void WeeklySchedule::add_byes(const char* value, size_t size) {
  byes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.WeeklySchedule.byes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WeeklySchedule::byes() const {
  // @@protoc_insertion_point(field_list:fantasybit.WeeklySchedule.byes)
  return byes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WeeklySchedule::mutable_byes() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.WeeklySchedule.byes)
  return &byes_;
}

// -------------------------------------------------------------------

// Kstats

// optional int32 pa = 10;
inline bool Kstats::_internal_has_pa() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Kstats::has_pa() const {
  return _internal_has_pa();
}
inline void Kstats::clear_pa() {
  pa_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kstats::_internal_pa() const {
  return pa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kstats::pa() const {
  // @@protoc_insertion_point(field_get:fantasybit.Kstats.pa)
  return _internal_pa();
}
inline void Kstats::_internal_set_pa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  pa_ = value;
}
inline void Kstats::set_pa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pa(value);
  // @@protoc_insertion_point(field_set:fantasybit.Kstats.pa)
}

// repeated int32 fg = 20;
inline int Kstats::_internal_fg_size() const {
  return fg_.size();
}
inline int Kstats::fg_size() const {
  return _internal_fg_size();
}
inline void Kstats::clear_fg() {
  fg_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kstats::_internal_fg(int index) const {
  return fg_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kstats::fg(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.Kstats.fg)
  return _internal_fg(index);
}
inline void Kstats::set_fg(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  fg_.Set(index, value);
  // @@protoc_insertion_point(field_set:fantasybit.Kstats.fg)
}
inline void Kstats::_internal_add_fg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  fg_.Add(value);
}
inline void Kstats::add_fg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_fg(value);
  // @@protoc_insertion_point(field_add:fantasybit.Kstats.fg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Kstats::_internal_fg() const {
  return fg_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Kstats::fg() const {
  // @@protoc_insertion_point(field_list:fantasybit.Kstats.fg)
  return _internal_fg();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Kstats::_internal_mutable_fg() {
  return &fg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Kstats::mutable_fg() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.Kstats.fg)
  return _internal_mutable_fg();
}

// -------------------------------------------------------------------

// Dstats

// optional int32 twopt = 100;
inline bool Dstats::_internal_has_twopt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Dstats::has_twopt() const {
  return _internal_has_twopt();
}
inline void Dstats::clear_twopt() {
  twopt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::_internal_twopt() const {
  return twopt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::twopt() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.twopt)
  return _internal_twopt();
}
inline void Dstats::_internal_set_twopt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  twopt_ = value;
}
inline void Dstats::set_twopt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_twopt(value);
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.twopt)
}

// optional int32 onept = 110;
inline bool Dstats::_internal_has_onept() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Dstats::has_onept() const {
  return _internal_has_onept();
}
inline void Dstats::clear_onept() {
  onept_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::_internal_onept() const {
  return onept_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::onept() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.onept)
  return _internal_onept();
}
inline void Dstats::_internal_set_onept(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  onept_ = value;
}
inline void Dstats::set_onept(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onept(value);
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.onept)
}

// optional int32 deftd = 120;
inline bool Dstats::_internal_has_deftd() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Dstats::has_deftd() const {
  return _internal_has_deftd();
}
inline void Dstats::clear_deftd() {
  deftd_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::_internal_deftd() const {
  return deftd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::deftd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.deftd)
  return _internal_deftd();
}
inline void Dstats::_internal_set_deftd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  deftd_ = value;
}
inline void Dstats::set_deftd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_deftd(value);
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.deftd)
}

// optional int32 sfty = 130;
inline bool Dstats::_internal_has_sfty() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Dstats::has_sfty() const {
  return _internal_has_sfty();
}
inline void Dstats::clear_sfty() {
  sfty_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::_internal_sfty() const {
  return sfty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::sfty() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.sfty)
  return _internal_sfty();
}
inline void Dstats::_internal_set_sfty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  sfty_ = value;
}
inline void Dstats::set_sfty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sfty(value);
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.sfty)
}

// optional int32 turnovers = 140;
inline bool Dstats::_internal_has_turnovers() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Dstats::has_turnovers() const {
  return _internal_has_turnovers();
}
inline void Dstats::clear_turnovers() {
  turnovers_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::_internal_turnovers() const {
  return turnovers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::turnovers() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.turnovers)
  return _internal_turnovers();
}
inline void Dstats::_internal_set_turnovers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  turnovers_ = value;
}
inline void Dstats::set_turnovers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_turnovers(value);
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.turnovers)
}

// optional int32 sacks = 150;
inline bool Dstats::_internal_has_sacks() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Dstats::has_sacks() const {
  return _internal_has_sacks();
}
inline void Dstats::clear_sacks() {
  sacks_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::_internal_sacks() const {
  return sacks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::sacks() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.sacks)
  return _internal_sacks();
}
inline void Dstats::_internal_set_sacks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  sacks_ = value;
}
inline void Dstats::set_sacks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sacks(value);
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.sacks)
}

// optional int32 ptsa = 160;
inline bool Dstats::_internal_has_ptsa() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dstats::has_ptsa() const {
  return _internal_has_ptsa();
}
inline void Dstats::clear_ptsa() {
  ptsa_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::_internal_ptsa() const {
  return ptsa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dstats::ptsa() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.ptsa)
  return _internal_ptsa();
}
inline void Dstats::_internal_set_ptsa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  ptsa_ = value;
}
inline void Dstats::set_ptsa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ptsa(value);
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.ptsa)
}

// -------------------------------------------------------------------

// Ostats

// optional int32 passyds = 10;
inline bool Ostats::_internal_has_passyds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ostats::has_passyds() const {
  return _internal_has_passyds();
}
inline void Ostats::clear_passyds() {
  passyds_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::_internal_passyds() const {
  return passyds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::passyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.passyds)
  return _internal_passyds();
}
inline void Ostats::_internal_set_passyds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  passyds_ = value;
}
inline void Ostats::set_passyds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_passyds(value);
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.passyds)
}

// optional int32 passtd = 20;
inline bool Ostats::_internal_has_passtd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ostats::has_passtd() const {
  return _internal_has_passtd();
}
inline void Ostats::clear_passtd() {
  passtd_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::_internal_passtd() const {
  return passtd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::passtd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.passtd)
  return _internal_passtd();
}
inline void Ostats::_internal_set_passtd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  passtd_ = value;
}
inline void Ostats::set_passtd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_passtd(value);
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.passtd)
}

// optional int32 rushyds = 30;
inline bool Ostats::_internal_has_rushyds() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ostats::has_rushyds() const {
  return _internal_has_rushyds();
}
inline void Ostats::clear_rushyds() {
  rushyds_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::_internal_rushyds() const {
  return rushyds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::rushyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rushyds)
  return _internal_rushyds();
}
inline void Ostats::_internal_set_rushyds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  rushyds_ = value;
}
inline void Ostats::set_rushyds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rushyds(value);
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rushyds)
}

// optional int32 rushtd = 40;
inline bool Ostats::_internal_has_rushtd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Ostats::has_rushtd() const {
  return _internal_has_rushtd();
}
inline void Ostats::clear_rushtd() {
  rushtd_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::_internal_rushtd() const {
  return rushtd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::rushtd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rushtd)
  return _internal_rushtd();
}
inline void Ostats::_internal_set_rushtd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  rushtd_ = value;
}
inline void Ostats::set_rushtd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rushtd(value);
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rushtd)
}

// optional int32 recyds = 50;
inline bool Ostats::_internal_has_recyds() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Ostats::has_recyds() const {
  return _internal_has_recyds();
}
inline void Ostats::clear_recyds() {
  recyds_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::_internal_recyds() const {
  return recyds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::recyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.recyds)
  return _internal_recyds();
}
inline void Ostats::_internal_set_recyds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  recyds_ = value;
}
inline void Ostats::set_recyds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_recyds(value);
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.recyds)
}

// optional int32 rectd = 60;
inline bool Ostats::_internal_has_rectd() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Ostats::has_rectd() const {
  return _internal_has_rectd();
}
inline void Ostats::clear_rectd() {
  rectd_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::_internal_rectd() const {
  return rectd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::rectd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rectd)
  return _internal_rectd();
}
inline void Ostats::_internal_set_rectd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  rectd_ = value;
}
inline void Ostats::set_rectd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rectd(value);
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rectd)
}

// optional int32 rec = 70;
inline bool Ostats::_internal_has_rec() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Ostats::has_rec() const {
  return _internal_has_rec();
}
inline void Ostats::clear_rec() {
  rec_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::_internal_rec() const {
  return rec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::rec() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rec)
  return _internal_rec();
}
inline void Ostats::_internal_set_rec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  rec_ = value;
}
inline void Ostats::set_rec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rec(value);
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rec)
}

// optional int32 pint = 80;
inline bool Ostats::_internal_has_pint() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Ostats::has_pint() const {
  return _internal_has_pint();
}
inline void Ostats::clear_pint() {
  pint_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::_internal_pint() const {
  return pint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::pint() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.pint)
  return _internal_pint();
}
inline void Ostats::_internal_set_pint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  pint_ = value;
}
inline void Ostats::set_pint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pint(value);
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.pint)
}

// optional int32 fumble = 90;
inline bool Ostats::_internal_has_fumble() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Ostats::has_fumble() const {
  return _internal_has_fumble();
}
inline void Ostats::clear_fumble() {
  fumble_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::_internal_fumble() const {
  return fumble_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::fumble() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.fumble)
  return _internal_fumble();
}
inline void Ostats::_internal_set_fumble(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  fumble_ = value;
}
inline void Ostats::set_fumble(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fumble(value);
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.fumble)
}

// optional int32 twopt = 100;
inline bool Ostats::_internal_has_twopt() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Ostats::has_twopt() const {
  return _internal_has_twopt();
}
inline void Ostats::clear_twopt() {
  twopt_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::_internal_twopt() const {
  return twopt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::twopt() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.twopt)
  return _internal_twopt();
}
inline void Ostats::_internal_set_twopt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  twopt_ = value;
}
inline void Ostats::set_twopt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_twopt(value);
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.twopt)
}

// optional int32 onept = 110;
inline bool Ostats::_internal_has_onept() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ostats::has_onept() const {
  return _internal_has_onept();
}
inline void Ostats::clear_onept() {
  onept_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::_internal_onept() const {
  return onept_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ostats::onept() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.onept)
  return _internal_onept();
}
inline void Ostats::_internal_set_onept(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  onept_ = value;
}
inline void Ostats::set_onept(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onept(value);
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.onept)
}

// -------------------------------------------------------------------

// Stats

// optional .fantasybit.Ostats ostats = 10;
inline bool Stats::_internal_has_ostats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ostats_ != nullptr);
  return value;
}
inline bool Stats::has_ostats() const {
  return _internal_has_ostats();
}
inline void Stats::clear_ostats() {
  if (ostats_ != nullptr) ostats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::Ostats& Stats::_internal_ostats() const {
  const ::fantasybit::Ostats* p = ostats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::Ostats*>(
      &::fantasybit::_Ostats_default_instance_);
}
inline const ::fantasybit::Ostats& Stats::ostats() const {
  // @@protoc_insertion_point(field_get:fantasybit.Stats.ostats)
  return _internal_ostats();
}
inline void Stats::unsafe_arena_set_allocated_ostats(
    ::fantasybit::Ostats* ostats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ostats_);
  }
  ostats_ = ostats;
  if (ostats) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.Stats.ostats)
}
inline ::fantasybit::Ostats* Stats::release_ostats() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::Ostats* temp = ostats_;
  ostats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::Ostats* Stats::unsafe_arena_release_ostats() {
  // @@protoc_insertion_point(field_release:fantasybit.Stats.ostats)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::Ostats* temp = ostats_;
  ostats_ = nullptr;
  return temp;
}
inline ::fantasybit::Ostats* Stats::_internal_mutable_ostats() {
  _has_bits_[0] |= 0x00000001u;
  if (ostats_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::Ostats>(GetArena());
    ostats_ = p;
  }
  return ostats_;
}
inline ::fantasybit::Ostats* Stats::mutable_ostats() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Stats.ostats)
  return _internal_mutable_ostats();
}
inline void Stats::set_allocated_ostats(::fantasybit::Ostats* ostats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ostats_;
  }
  if (ostats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ostats);
    if (message_arena != submessage_arena) {
      ostats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ostats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ostats_ = ostats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Stats.ostats)
}

// optional .fantasybit.Dstats dstats = 20;
inline bool Stats::_internal_has_dstats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || dstats_ != nullptr);
  return value;
}
inline bool Stats::has_dstats() const {
  return _internal_has_dstats();
}
inline void Stats::clear_dstats() {
  if (dstats_ != nullptr) dstats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::Dstats& Stats::_internal_dstats() const {
  const ::fantasybit::Dstats* p = dstats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::Dstats*>(
      &::fantasybit::_Dstats_default_instance_);
}
inline const ::fantasybit::Dstats& Stats::dstats() const {
  // @@protoc_insertion_point(field_get:fantasybit.Stats.dstats)
  return _internal_dstats();
}
inline void Stats::unsafe_arena_set_allocated_dstats(
    ::fantasybit::Dstats* dstats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dstats_);
  }
  dstats_ = dstats;
  if (dstats) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.Stats.dstats)
}
inline ::fantasybit::Dstats* Stats::release_dstats() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::Dstats* temp = dstats_;
  dstats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::Dstats* Stats::unsafe_arena_release_dstats() {
  // @@protoc_insertion_point(field_release:fantasybit.Stats.dstats)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::Dstats* temp = dstats_;
  dstats_ = nullptr;
  return temp;
}
inline ::fantasybit::Dstats* Stats::_internal_mutable_dstats() {
  _has_bits_[0] |= 0x00000002u;
  if (dstats_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::Dstats>(GetArena());
    dstats_ = p;
  }
  return dstats_;
}
inline ::fantasybit::Dstats* Stats::mutable_dstats() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Stats.dstats)
  return _internal_mutable_dstats();
}
inline void Stats::set_allocated_dstats(::fantasybit::Dstats* dstats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dstats_;
  }
  if (dstats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dstats);
    if (message_arena != submessage_arena) {
      dstats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dstats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dstats_ = dstats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Stats.dstats)
}

// optional .fantasybit.Kstats kstats = 30;
inline bool Stats::_internal_has_kstats() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || kstats_ != nullptr);
  return value;
}
inline bool Stats::has_kstats() const {
  return _internal_has_kstats();
}
inline void Stats::clear_kstats() {
  if (kstats_ != nullptr) kstats_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::Kstats& Stats::_internal_kstats() const {
  const ::fantasybit::Kstats* p = kstats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::Kstats*>(
      &::fantasybit::_Kstats_default_instance_);
}
inline const ::fantasybit::Kstats& Stats::kstats() const {
  // @@protoc_insertion_point(field_get:fantasybit.Stats.kstats)
  return _internal_kstats();
}
inline void Stats::unsafe_arena_set_allocated_kstats(
    ::fantasybit::Kstats* kstats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kstats_);
  }
  kstats_ = kstats;
  if (kstats) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.Stats.kstats)
}
inline ::fantasybit::Kstats* Stats::release_kstats() {
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::Kstats* temp = kstats_;
  kstats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::Kstats* Stats::unsafe_arena_release_kstats() {
  // @@protoc_insertion_point(field_release:fantasybit.Stats.kstats)
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::Kstats* temp = kstats_;
  kstats_ = nullptr;
  return temp;
}
inline ::fantasybit::Kstats* Stats::_internal_mutable_kstats() {
  _has_bits_[0] |= 0x00000004u;
  if (kstats_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::Kstats>(GetArena());
    kstats_ = p;
  }
  return kstats_;
}
inline ::fantasybit::Kstats* Stats::mutable_kstats() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Stats.kstats)
  return _internal_mutable_kstats();
}
inline void Stats::set_allocated_kstats(::fantasybit::Kstats* kstats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kstats_;
  }
  if (kstats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kstats);
    if (message_arena != submessage_arena) {
      kstats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kstats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  kstats_ = kstats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Stats.kstats)
}

// -------------------------------------------------------------------

// PlayerResult

// optional string playerid = 20;
inline bool PlayerResult::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerResult::has_playerid() const {
  return _internal_has_playerid();
}
inline void PlayerResult::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerResult::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.playerid)
  return _internal_playerid();
}
inline void PlayerResult::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResult.playerid)
}
inline std::string* PlayerResult::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& PlayerResult::_internal_playerid() const {
  return playerid_.Get();
}
inline void PlayerResult::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerResult::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResult.playerid)
}
inline void PlayerResult::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResult.playerid)
}
inline void PlayerResult::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResult.playerid)
}
inline std::string* PlayerResult::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000001u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerResult::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResult.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerResult::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResult.playerid)
}

// optional float result = 40;
inline bool PlayerResult::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerResult::has_result() const {
  return _internal_has_result();
}
inline void PlayerResult::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PlayerResult::_internal_result() const {
  return result_;
}
inline float PlayerResult::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.result)
  return _internal_result();
}
inline void PlayerResult::_internal_set_result(float value) {
  _has_bits_[0] |= 0x00000008u;
  result_ = value;
}
inline void PlayerResult::set_result(float value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResult.result)
}

// optional .fantasybit.Stats stats = 50;
inline bool PlayerResult::_internal_has_stats() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || stats_ != nullptr);
  return value;
}
inline bool PlayerResult::has_stats() const {
  return _internal_has_stats();
}
inline void PlayerResult::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::Stats& PlayerResult::_internal_stats() const {
  const ::fantasybit::Stats* p = stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::Stats*>(
      &::fantasybit::_Stats_default_instance_);
}
inline const ::fantasybit::Stats& PlayerResult::stats() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.stats)
  return _internal_stats();
}
inline void PlayerResult::unsafe_arena_set_allocated_stats(
    ::fantasybit::Stats* stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.PlayerResult.stats)
}
inline ::fantasybit::Stats* PlayerResult::release_stats() {
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::Stats* temp = stats_;
  stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::Stats* PlayerResult::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResult.stats)
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::Stats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::fantasybit::Stats* PlayerResult::_internal_mutable_stats() {
  _has_bits_[0] |= 0x00000004u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::Stats>(GetArena());
    stats_ = p;
  }
  return stats_;
}
inline ::fantasybit::Stats* PlayerResult::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.stats)
  return _internal_mutable_stats();
}
inline void PlayerResult::set_allocated_stats(::fantasybit::Stats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResult.stats)
}

// repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
inline int PlayerResult::_internal_fantaybitaward_size() const {
  return fantaybitaward_.size();
}
inline int PlayerResult::fantaybitaward_size() const {
  return _internal_fantaybitaward_size();
}
inline ::fantasybit::FantasyBitAward* PlayerResult::mutable_fantaybitaward(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.fantaybitaward)
  return fantaybitaward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitAward >*
PlayerResult::mutable_fantaybitaward() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.PlayerResult.fantaybitaward)
  return &fantaybitaward_;
}
inline const ::fantasybit::FantasyBitAward& PlayerResult::_internal_fantaybitaward(int index) const {
  return fantaybitaward_.Get(index);
}
inline const ::fantasybit::FantasyBitAward& PlayerResult::fantaybitaward(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.fantaybitaward)
  return _internal_fantaybitaward(index);
}
inline ::fantasybit::FantasyBitAward* PlayerResult::_internal_add_fantaybitaward() {
  return fantaybitaward_.Add();
}
inline ::fantasybit::FantasyBitAward* PlayerResult::add_fantaybitaward() {
  // @@protoc_insertion_point(field_add:fantasybit.PlayerResult.fantaybitaward)
  return _internal_add_fantaybitaward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitAward >&
PlayerResult::fantaybitaward() const {
  // @@protoc_insertion_point(field_list:fantasybit.PlayerResult.fantaybitaward)
  return fantaybitaward_;
}

// repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
inline int PlayerResult::_internal_fantasybitpnl_size() const {
  return fantasybitpnl_.size();
}
inline int PlayerResult::fantasybitpnl_size() const {
  return _internal_fantasybitpnl_size();
}
inline ::fantasybit::FantasyBitPnl* PlayerResult::mutable_fantasybitpnl(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.fantasybitpnl)
  return fantasybitpnl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitPnl >*
PlayerResult::mutable_fantasybitpnl() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.PlayerResult.fantasybitpnl)
  return &fantasybitpnl_;
}
inline const ::fantasybit::FantasyBitPnl& PlayerResult::_internal_fantasybitpnl(int index) const {
  return fantasybitpnl_.Get(index);
}
inline const ::fantasybit::FantasyBitPnl& PlayerResult::fantasybitpnl(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.fantasybitpnl)
  return _internal_fantasybitpnl(index);
}
inline ::fantasybit::FantasyBitPnl* PlayerResult::_internal_add_fantasybitpnl() {
  return fantasybitpnl_.Add();
}
inline ::fantasybit::FantasyBitPnl* PlayerResult::add_fantasybitpnl() {
  // @@protoc_insertion_point(field_add:fantasybit.PlayerResult.fantasybitpnl)
  return _internal_add_fantasybitpnl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitPnl >&
PlayerResult::fantasybitpnl() const {
  // @@protoc_insertion_point(field_list:fantasybit.PlayerResult.fantasybitpnl)
  return fantasybitpnl_;
}

// repeated .fantasybit.FantasyBitPnl rowposdividend = 80;
inline int PlayerResult::_internal_rowposdividend_size() const {
  return rowposdividend_.size();
}
inline int PlayerResult::rowposdividend_size() const {
  return _internal_rowposdividend_size();
}
inline ::fantasybit::FantasyBitPnl* PlayerResult::mutable_rowposdividend(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.rowposdividend)
  return rowposdividend_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitPnl >*
PlayerResult::mutable_rowposdividend() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.PlayerResult.rowposdividend)
  return &rowposdividend_;
}
inline const ::fantasybit::FantasyBitPnl& PlayerResult::_internal_rowposdividend(int index) const {
  return rowposdividend_.Get(index);
}
inline const ::fantasybit::FantasyBitPnl& PlayerResult::rowposdividend(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.rowposdividend)
  return _internal_rowposdividend(index);
}
inline ::fantasybit::FantasyBitPnl* PlayerResult::_internal_add_rowposdividend() {
  return rowposdividend_.Add();
}
inline ::fantasybit::FantasyBitPnl* PlayerResult::add_rowposdividend() {
  // @@protoc_insertion_point(field_add:fantasybit.PlayerResult.rowposdividend)
  return _internal_add_rowposdividend();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitPnl >&
PlayerResult::rowposdividend() const {
  // @@protoc_insertion_point(field_list:fantasybit.PlayerResult.rowposdividend)
  return rowposdividend_;
}

// optional string symbol = 90;
inline bool PlayerResult::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerResult::has_symbol() const {
  return _internal_has_symbol();
}
inline void PlayerResult::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerResult::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.symbol)
  return _internal_symbol();
}
inline void PlayerResult::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResult.symbol)
}
inline std::string* PlayerResult::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& PlayerResult::_internal_symbol() const {
  return symbol_.Get();
}
inline void PlayerResult::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerResult::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResult.symbol)
}
inline void PlayerResult::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResult.symbol)
}
inline void PlayerResult::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResult.symbol)
}
inline std::string* PlayerResult::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000002u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerResult::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResult.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerResult::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResult.symbol)
}

// -------------------------------------------------------------------

// GameResult

// optional string gameid = 1;
inline bool GameResult::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameResult::has_gameid() const {
  return _internal_has_gameid();
}
inline void GameResult::clear_gameid() {
  gameid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameResult::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.gameid)
  return _internal_gameid();
}
inline void GameResult::set_gameid(const std::string& value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResult.gameid)
}
inline std::string* GameResult::mutable_gameid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResult.gameid)
  return _internal_mutable_gameid();
}
inline const std::string& GameResult::_internal_gameid() const {
  return gameid_.Get();
}
inline void GameResult::_internal_set_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameResult::set_gameid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameResult.gameid)
}
inline void GameResult::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResult.gameid)
}
inline void GameResult::set_gameid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResult.gameid)
}
inline std::string* GameResult::_internal_mutable_gameid() {
  _has_bits_[0] |= 0x00000001u;
  return gameid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameResult::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameResult.gameid)
  if (!_internal_has_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameResult::set_allocated_gameid(std::string* gameid) {
  if (gameid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResult.gameid)
}

// repeated .fantasybit.PlayerResult home_result = 10;
inline int GameResult::_internal_home_result_size() const {
  return home_result_.size();
}
inline int GameResult::home_result_size() const {
  return _internal_home_result_size();
}
inline void GameResult::clear_home_result() {
  home_result_.Clear();
}
inline ::fantasybit::PlayerResult* GameResult::mutable_home_result(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResult.home_result)
  return home_result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >*
GameResult::mutable_home_result() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameResult.home_result)
  return &home_result_;
}
inline const ::fantasybit::PlayerResult& GameResult::_internal_home_result(int index) const {
  return home_result_.Get(index);
}
inline const ::fantasybit::PlayerResult& GameResult::home_result(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.home_result)
  return _internal_home_result(index);
}
inline ::fantasybit::PlayerResult* GameResult::_internal_add_home_result() {
  return home_result_.Add();
}
inline ::fantasybit::PlayerResult* GameResult::add_home_result() {
  // @@protoc_insertion_point(field_add:fantasybit.GameResult.home_result)
  return _internal_add_home_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >&
GameResult::home_result() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameResult.home_result)
  return home_result_;
}

// repeated .fantasybit.PlayerResult away_result = 20;
inline int GameResult::_internal_away_result_size() const {
  return away_result_.size();
}
inline int GameResult::away_result_size() const {
  return _internal_away_result_size();
}
inline void GameResult::clear_away_result() {
  away_result_.Clear();
}
inline ::fantasybit::PlayerResult* GameResult::mutable_away_result(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResult.away_result)
  return away_result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >*
GameResult::mutable_away_result() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameResult.away_result)
  return &away_result_;
}
inline const ::fantasybit::PlayerResult& GameResult::_internal_away_result(int index) const {
  return away_result_.Get(index);
}
inline const ::fantasybit::PlayerResult& GameResult::away_result(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.away_result)
  return _internal_away_result(index);
}
inline ::fantasybit::PlayerResult* GameResult::_internal_add_away_result() {
  return away_result_.Add();
}
inline ::fantasybit::PlayerResult* GameResult::add_away_result() {
  // @@protoc_insertion_point(field_add:fantasybit.GameResult.away_result)
  return _internal_add_away_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >&
GameResult::away_result() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameResult.away_result)
  return away_result_;
}

// optional uint32 kickofftime = 30;
inline bool GameResult::_internal_has_kickofftime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameResult::has_kickofftime() const {
  return _internal_has_kickofftime();
}
inline void GameResult::clear_kickofftime() {
  kickofftime_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameResult::_internal_kickofftime() const {
  return kickofftime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameResult::kickofftime() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.kickofftime)
  return _internal_kickofftime();
}
inline void GameResult::_internal_set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  kickofftime_ = value;
}
inline void GameResult::set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kickofftime(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResult.kickofftime)
}

// optional float homeTotal = 40;
inline bool GameResult::_internal_has_hometotal() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameResult::has_hometotal() const {
  return _internal_has_hometotal();
}
inline void GameResult::clear_hometotal() {
  hometotal_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float GameResult::_internal_hometotal() const {
  return hometotal_;
}
inline float GameResult::hometotal() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.homeTotal)
  return _internal_hometotal();
}
inline void GameResult::_internal_set_hometotal(float value) {
  _has_bits_[0] |= 0x00000008u;
  hometotal_ = value;
}
inline void GameResult::set_hometotal(float value) {
  _internal_set_hometotal(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResult.homeTotal)
}

// optional float awayTotal = 50;
inline bool GameResult::_internal_has_awaytotal() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameResult::has_awaytotal() const {
  return _internal_has_awaytotal();
}
inline void GameResult::clear_awaytotal() {
  awaytotal_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float GameResult::_internal_awaytotal() const {
  return awaytotal_;
}
inline float GameResult::awaytotal() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.awayTotal)
  return _internal_awaytotal();
}
inline void GameResult::_internal_set_awaytotal(float value) {
  _has_bits_[0] |= 0x00000002u;
  awaytotal_ = value;
}
inline void GameResult::set_awaytotal(float value) {
  _internal_set_awaytotal(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResult.awayTotal)
}

// -------------------------------------------------------------------

// SeasonResult

// optional uint64 season = 1;
inline bool SeasonResult::_internal_has_season() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SeasonResult::has_season() const {
  return _internal_has_season();
}
inline void SeasonResult::clear_season() {
  season_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SeasonResult::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SeasonResult::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.SeasonResult.season)
  return _internal_season();
}
inline void SeasonResult::_internal_set_season(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  season_ = value;
}
inline void SeasonResult::set_season(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:fantasybit.SeasonResult.season)
}

// repeated .fantasybit.PlayerResult player_results = 10;
inline int SeasonResult::_internal_player_results_size() const {
  return player_results_.size();
}
inline int SeasonResult::player_results_size() const {
  return _internal_player_results_size();
}
inline void SeasonResult::clear_player_results() {
  player_results_.Clear();
}
inline ::fantasybit::PlayerResult* SeasonResult::mutable_player_results(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.SeasonResult.player_results)
  return player_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >*
SeasonResult::mutable_player_results() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.SeasonResult.player_results)
  return &player_results_;
}
inline const ::fantasybit::PlayerResult& SeasonResult::_internal_player_results(int index) const {
  return player_results_.Get(index);
}
inline const ::fantasybit::PlayerResult& SeasonResult::player_results(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.SeasonResult.player_results)
  return _internal_player_results(index);
}
inline ::fantasybit::PlayerResult* SeasonResult::_internal_add_player_results() {
  return player_results_.Add();
}
inline ::fantasybit::PlayerResult* SeasonResult::add_player_results() {
  // @@protoc_insertion_point(field_add:fantasybit.SeasonResult.player_results)
  return _internal_add_player_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerResult >&
SeasonResult::player_results() const {
  // @@protoc_insertion_point(field_list:fantasybit.SeasonResult.player_results)
  return player_results_;
}

// optional float total = 20;
inline bool SeasonResult::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SeasonResult::has_total() const {
  return _internal_has_total();
}
inline void SeasonResult::clear_total() {
  total_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SeasonResult::_internal_total() const {
  return total_;
}
inline float SeasonResult::total() const {
  // @@protoc_insertion_point(field_get:fantasybit.SeasonResult.total)
  return _internal_total();
}
inline void SeasonResult::_internal_set_total(float value) {
  _has_bits_[0] |= 0x00000002u;
  total_ = value;
}
inline void SeasonResult::set_total(float value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:fantasybit.SeasonResult.total)
}

// -------------------------------------------------------------------

// PlayerContractSymbol

// optional string symbol = 10;
inline bool PlayerContractSymbol::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerContractSymbol::has_symbol() const {
  return _internal_has_symbol();
}
inline void PlayerContractSymbol::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerContractSymbol::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerContractSymbol.symbol)
  return _internal_symbol();
}
inline void PlayerContractSymbol::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerContractSymbol.symbol)
}
inline std::string* PlayerContractSymbol::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerContractSymbol.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& PlayerContractSymbol::_internal_symbol() const {
  return symbol_.Get();
}
inline void PlayerContractSymbol::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerContractSymbol::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerContractSymbol.symbol)
}
inline void PlayerContractSymbol::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerContractSymbol.symbol)
}
inline void PlayerContractSymbol::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerContractSymbol.symbol)
}
inline std::string* PlayerContractSymbol::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000001u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerContractSymbol::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerContractSymbol.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerContractSymbol::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerContractSymbol.symbol)
}

// optional string playerid = 20;
inline bool PlayerContractSymbol::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerContractSymbol::has_playerid() const {
  return _internal_has_playerid();
}
inline void PlayerContractSymbol::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerContractSymbol::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerContractSymbol.playerid)
  return _internal_playerid();
}
inline void PlayerContractSymbol::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerContractSymbol.playerid)
}
inline std::string* PlayerContractSymbol::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerContractSymbol.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& PlayerContractSymbol::_internal_playerid() const {
  return playerid_.Get();
}
inline void PlayerContractSymbol::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerContractSymbol::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerContractSymbol.playerid)
}
inline void PlayerContractSymbol::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerContractSymbol.playerid)
}
inline void PlayerContractSymbol::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerContractSymbol.playerid)
}
inline std::string* PlayerContractSymbol::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000002u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerContractSymbol::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerContractSymbol.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerContractSymbol::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerContractSymbol.playerid)
}

// optional uint64 sybhash = 30;
inline bool PlayerContractSymbol::_internal_has_sybhash() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PlayerContractSymbol::has_sybhash() const {
  return _internal_has_sybhash();
}
inline void PlayerContractSymbol::clear_sybhash() {
  sybhash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerContractSymbol::_internal_sybhash() const {
  return sybhash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerContractSymbol::sybhash() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerContractSymbol.sybhash)
  return _internal_sybhash();
}
inline void PlayerContractSymbol::_internal_set_sybhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  sybhash_ = value;
}
inline void PlayerContractSymbol::set_sybhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sybhash(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerContractSymbol.sybhash)
}

// optional string initals2 = 40;
inline bool PlayerContractSymbol::_internal_has_initals2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerContractSymbol::has_initals2() const {
  return _internal_has_initals2();
}
inline void PlayerContractSymbol::clear_initals2() {
  initals2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PlayerContractSymbol::initals2() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerContractSymbol.initals2)
  return _internal_initals2();
}
inline void PlayerContractSymbol::set_initals2(const std::string& value) {
  _internal_set_initals2(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerContractSymbol.initals2)
}
inline std::string* PlayerContractSymbol::mutable_initals2() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerContractSymbol.initals2)
  return _internal_mutable_initals2();
}
inline const std::string& PlayerContractSymbol::_internal_initals2() const {
  return initals2_.Get();
}
inline void PlayerContractSymbol::_internal_set_initals2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  initals2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerContractSymbol::set_initals2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  initals2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerContractSymbol.initals2)
}
inline void PlayerContractSymbol::set_initals2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  initals2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerContractSymbol.initals2)
}
inline void PlayerContractSymbol::set_initals2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  initals2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerContractSymbol.initals2)
}
inline std::string* PlayerContractSymbol::_internal_mutable_initals2() {
  _has_bits_[0] |= 0x00000004u;
  return initals2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerContractSymbol::release_initals2() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerContractSymbol.initals2)
  if (!_internal_has_initals2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return initals2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerContractSymbol::set_allocated_initals2(std::string* initals2) {
  if (initals2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  initals2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initals2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerContractSymbol.initals2)
}

// optional string seq2 = 50;
inline bool PlayerContractSymbol::_internal_has_seq2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerContractSymbol::has_seq2() const {
  return _internal_has_seq2();
}
inline void PlayerContractSymbol::clear_seq2() {
  seq2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PlayerContractSymbol::seq2() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerContractSymbol.seq2)
  return _internal_seq2();
}
inline void PlayerContractSymbol::set_seq2(const std::string& value) {
  _internal_set_seq2(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerContractSymbol.seq2)
}
inline std::string* PlayerContractSymbol::mutable_seq2() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerContractSymbol.seq2)
  return _internal_mutable_seq2();
}
inline const std::string& PlayerContractSymbol::_internal_seq2() const {
  return seq2_.Get();
}
inline void PlayerContractSymbol::_internal_set_seq2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  seq2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerContractSymbol::set_seq2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  seq2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerContractSymbol.seq2)
}
inline void PlayerContractSymbol::set_seq2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  seq2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerContractSymbol.seq2)
}
inline void PlayerContractSymbol::set_seq2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  seq2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerContractSymbol.seq2)
}
inline std::string* PlayerContractSymbol::_internal_mutable_seq2() {
  _has_bits_[0] |= 0x00000008u;
  return seq2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerContractSymbol::release_seq2() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerContractSymbol.seq2)
  if (!_internal_has_seq2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return seq2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerContractSymbol::set_allocated_seq2(std::string* seq2) {
  if (seq2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  seq2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seq2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerContractSymbol.seq2)
}

// optional string year2 = 60;
inline bool PlayerContractSymbol::_internal_has_year2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlayerContractSymbol::has_year2() const {
  return _internal_has_year2();
}
inline void PlayerContractSymbol::clear_year2() {
  year2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PlayerContractSymbol::year2() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerContractSymbol.year2)
  return _internal_year2();
}
inline void PlayerContractSymbol::set_year2(const std::string& value) {
  _internal_set_year2(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerContractSymbol.year2)
}
inline std::string* PlayerContractSymbol::mutable_year2() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerContractSymbol.year2)
  return _internal_mutable_year2();
}
inline const std::string& PlayerContractSymbol::_internal_year2() const {
  return year2_.Get();
}
inline void PlayerContractSymbol::_internal_set_year2(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  year2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerContractSymbol::set_year2(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  year2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerContractSymbol.year2)
}
inline void PlayerContractSymbol::set_year2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  year2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerContractSymbol.year2)
}
inline void PlayerContractSymbol::set_year2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  year2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerContractSymbol.year2)
}
inline std::string* PlayerContractSymbol::_internal_mutable_year2() {
  _has_bits_[0] |= 0x00000010u;
  return year2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerContractSymbol::release_year2() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerContractSymbol.year2)
  if (!_internal_has_year2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return year2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerContractSymbol::set_allocated_year2(std::string* year2) {
  if (year2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  year2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), year2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerContractSymbol.year2)
}

// optional string type1sorw = 70;
inline bool PlayerContractSymbol::_internal_has_type1sorw() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PlayerContractSymbol::has_type1sorw() const {
  return _internal_has_type1sorw();
}
inline void PlayerContractSymbol::clear_type1sorw() {
  type1sorw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PlayerContractSymbol::type1sorw() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerContractSymbol.type1sorw)
  return _internal_type1sorw();
}
inline void PlayerContractSymbol::set_type1sorw(const std::string& value) {
  _internal_set_type1sorw(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerContractSymbol.type1sorw)
}
inline std::string* PlayerContractSymbol::mutable_type1sorw() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerContractSymbol.type1sorw)
  return _internal_mutable_type1sorw();
}
inline const std::string& PlayerContractSymbol::_internal_type1sorw() const {
  return type1sorw_.Get();
}
inline void PlayerContractSymbol::_internal_set_type1sorw(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  type1sorw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerContractSymbol::set_type1sorw(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  type1sorw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerContractSymbol.type1sorw)
}
inline void PlayerContractSymbol::set_type1sorw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  type1sorw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerContractSymbol.type1sorw)
}
inline void PlayerContractSymbol::set_type1sorw(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  type1sorw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerContractSymbol.type1sorw)
}
inline std::string* PlayerContractSymbol::_internal_mutable_type1sorw() {
  _has_bits_[0] |= 0x00000020u;
  return type1sorw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerContractSymbol::release_type1sorw() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerContractSymbol.type1sorw)
  if (!_internal_has_type1sorw()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return type1sorw_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerContractSymbol::set_allocated_type1sorw(std::string* type1sorw) {
  if (type1sorw != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  type1sorw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type1sorw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerContractSymbol.type1sorw)
}

// optional string week1or04s = 80;
inline bool PlayerContractSymbol::_internal_has_week1or04s() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PlayerContractSymbol::has_week1or04s() const {
  return _internal_has_week1or04s();
}
inline void PlayerContractSymbol::clear_week1or04s() {
  week1or04s_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PlayerContractSymbol::week1or04s() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerContractSymbol.week1or04s)
  return _internal_week1or04s();
}
inline void PlayerContractSymbol::set_week1or04s(const std::string& value) {
  _internal_set_week1or04s(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerContractSymbol.week1or04s)
}
inline std::string* PlayerContractSymbol::mutable_week1or04s() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerContractSymbol.week1or04s)
  return _internal_mutable_week1or04s();
}
inline const std::string& PlayerContractSymbol::_internal_week1or04s() const {
  return week1or04s_.Get();
}
inline void PlayerContractSymbol::_internal_set_week1or04s(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  week1or04s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerContractSymbol::set_week1or04s(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  week1or04s_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerContractSymbol.week1or04s)
}
inline void PlayerContractSymbol::set_week1or04s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  week1or04s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerContractSymbol.week1or04s)
}
inline void PlayerContractSymbol::set_week1or04s(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  week1or04s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerContractSymbol.week1or04s)
}
inline std::string* PlayerContractSymbol::_internal_mutable_week1or04s() {
  _has_bits_[0] |= 0x00000040u;
  return week1or04s_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerContractSymbol::release_week1or04s() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerContractSymbol.week1or04s)
  if (!_internal_has_week1or04s()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return week1or04s_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerContractSymbol::set_allocated_week1or04s(std::string* week1or04s) {
  if (week1or04s != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  week1or04s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), week1or04s,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerContractSymbol.week1or04s)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_StaticData_2eproto
