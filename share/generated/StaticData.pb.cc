// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StaticData.proto

#include "StaticData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dstats_StaticData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NameData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyBitAward_NameData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NameData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FantasyBitPnl_NameData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameInfo_StaticData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Kstats_StaticData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ostats_StaticData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlayerResult_StaticData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Stats_StaticData_2eproto;
namespace fantasybit {
class PlayerBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerBase> _instance;
} _PlayerBase_default_instance_;
class GameInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameInfo> _instance;
} _GameInfo_default_instance_;
class WeeklyScheduleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeeklySchedule> _instance;
} _WeeklySchedule_default_instance_;
class KstatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Kstats> _instance;
} _Kstats_default_instance_;
class DstatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dstats> _instance;
} _Dstats_default_instance_;
class OstatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ostats> _instance;
} _Ostats_default_instance_;
class StatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stats> _instance;
} _Stats_default_instance_;
class PlayerResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerResult> _instance;
} _PlayerResult_default_instance_;
class GameResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameResult> _instance;
} _GameResult_default_instance_;
class SeasonResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeasonResult> _instance;
} _SeasonResult_default_instance_;
class PlayerContractSymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerContractSymbol> _instance;
} _PlayerContractSymbol_default_instance_;
}  // namespace fantasybit
static void InitDefaultsscc_info_Dstats_StaticData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Dstats_default_instance_;
    new (ptr) ::fantasybit::Dstats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Dstats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dstats_StaticData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dstats_StaticData_2eproto}, {}};

static void InitDefaultsscc_info_GameInfo_StaticData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GameInfo_default_instance_;
    new (ptr) ::fantasybit::GameInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameInfo_StaticData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameInfo_StaticData_2eproto}, {}};

static void InitDefaultsscc_info_GameResult_StaticData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GameResult_default_instance_;
    new (ptr) ::fantasybit::GameResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameResult_StaticData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameResult_StaticData_2eproto}, {
      &scc_info_PlayerResult_StaticData_2eproto.base,}};

static void InitDefaultsscc_info_Kstats_StaticData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Kstats_default_instance_;
    new (ptr) ::fantasybit::Kstats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Kstats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Kstats_StaticData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Kstats_StaticData_2eproto}, {}};

static void InitDefaultsscc_info_Ostats_StaticData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Ostats_default_instance_;
    new (ptr) ::fantasybit::Ostats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Ostats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ostats_StaticData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ostats_StaticData_2eproto}, {}};

static void InitDefaultsscc_info_PlayerBase_StaticData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PlayerBase_default_instance_;
    new (ptr) ::fantasybit::PlayerBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerBase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerBase_StaticData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerBase_StaticData_2eproto}, {}};

static void InitDefaultsscc_info_PlayerContractSymbol_StaticData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PlayerContractSymbol_default_instance_;
    new (ptr) ::fantasybit::PlayerContractSymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerContractSymbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerContractSymbol_StaticData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerContractSymbol_StaticData_2eproto}, {}};

static void InitDefaultsscc_info_PlayerResult_StaticData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PlayerResult_default_instance_;
    new (ptr) ::fantasybit::PlayerResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlayerResult_StaticData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PlayerResult_StaticData_2eproto}, {
      &scc_info_Stats_StaticData_2eproto.base,
      &scc_info_FantasyBitAward_NameData_2eproto.base,
      &scc_info_FantasyBitPnl_NameData_2eproto.base,}};

static void InitDefaultsscc_info_SeasonResult_StaticData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_SeasonResult_default_instance_;
    new (ptr) ::fantasybit::SeasonResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SeasonResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SeasonResult_StaticData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SeasonResult_StaticData_2eproto}, {
      &scc_info_PlayerResult_StaticData_2eproto.base,}};

static void InitDefaultsscc_info_Stats_StaticData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Stats_default_instance_;
    new (ptr) ::fantasybit::Stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Stats_StaticData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Stats_StaticData_2eproto}, {
      &scc_info_Ostats_StaticData_2eproto.base,
      &scc_info_Dstats_StaticData_2eproto.base,
      &scc_info_Kstats_StaticData_2eproto.base,}};

static void InitDefaultsscc_info_WeeklySchedule_StaticData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_WeeklySchedule_default_instance_;
    new (ptr) ::fantasybit::WeeklySchedule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::WeeklySchedule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WeeklySchedule_StaticData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WeeklySchedule_StaticData_2eproto}, {
      &scc_info_GameInfo_StaticData_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_StaticData_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_StaticData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_StaticData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_StaticData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerBase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerBase, first_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerBase, last_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerBase, position_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameInfo, id_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameInfo, home_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameInfo, away_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameInfo, time_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fantasybit::WeeklySchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::WeeklySchedule, games_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WeeklySchedule, byes_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Kstats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Kstats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Kstats, pa_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Kstats, fg_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Dstats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Dstats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Dstats, twopt_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Dstats, onept_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Dstats, deftd_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Dstats, sfty_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Dstats, turnovers_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Dstats, sacks_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Dstats, ptsa_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, passyds_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, passtd_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, rushyds_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, rushtd_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, recyds_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, rectd_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, rec_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, pint_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, fumble_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, twopt_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Ostats, onept_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Stats, ostats_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Stats, dstats_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Stats, kstats_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResult, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResult, result_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResult, stats_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResult, fantaybitaward_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResult, fantasybitpnl_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResult, rowposdividend_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResult, symbol_),
  0,
  3,
  2,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResult, gameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResult, home_result_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResult, away_result_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResult, kickofftime_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResult, hometotal_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResult, awaytotal_),
  0,
  ~0u,
  ~0u,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::SeasonResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SeasonResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::SeasonResult, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SeasonResult, player_results_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SeasonResult, total_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, symbol_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, sybhash_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, initals2_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, seq2_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, year2_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, type1sorw_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, week1or04s_),
  0,
  1,
  7,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::fantasybit::PlayerBase)},
  { 11, 20, sizeof(::fantasybit::GameInfo)},
  { 24, -1, sizeof(::fantasybit::WeeklySchedule)},
  { 31, 38, sizeof(::fantasybit::Kstats)},
  { 40, 52, sizeof(::fantasybit::Dstats)},
  { 59, 75, sizeof(::fantasybit::Ostats)},
  { 86, 94, sizeof(::fantasybit::Stats)},
  { 97, 109, sizeof(::fantasybit::PlayerResult)},
  { 116, 127, sizeof(::fantasybit::GameResult)},
  { 133, 141, sizeof(::fantasybit::SeasonResult)},
  { 144, 157, sizeof(::fantasybit::PlayerContractSymbol)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PlayerBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GameInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_WeeklySchedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Kstats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Dstats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Ostats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PlayerResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GameResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_SeasonResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PlayerContractSymbol_default_instance_),
};

const char descriptor_table_protodef_StaticData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020StaticData.proto\022\nfantasybit\032\016NameData"
  ".proto\";\n\nPlayerBase\022\r\n\005first\030\036 \001(\t\022\014\n\004l"
  "ast\030( \001(\t\022\020\n\010position\0302 \001(\t\"@\n\010GameInfo\022"
  "\n\n\002id\030\n \001(\t\022\014\n\004home\030\024 \001(\t\022\014\n\004away\030\036 \001(\t\022"
  "\014\n\004time\030( \001(\r\"C\n\016WeeklySchedule\022#\n\005games"
  "\030\n \003(\0132\024.fantasybit.GameInfo\022\014\n\004byes\030\024 \003"
  "(\t\" \n\006Kstats\022\n\n\002pa\030\n \001(\005\022\n\n\002fg\030\024 \003(\005\"w\n\006"
  "Dstats\022\r\n\005twopt\030d \001(\005\022\r\n\005onept\030n \001(\005\022\r\n\005"
  "deftd\030x \001(\005\022\r\n\004sfty\030\202\001 \001(\005\022\022\n\tturnovers\030"
  "\214\001 \001(\005\022\016\n\005sacks\030\226\001 \001(\005\022\r\n\004ptsa\030\240\001 \001(\005\"\262\001"
  "\n\006Ostats\022\017\n\007passyds\030\n \001(\005\022\016\n\006passtd\030\024 \001("
  "\005\022\017\n\007rushyds\030\036 \001(\005\022\016\n\006rushtd\030( \001(\005\022\016\n\006re"
  "cyds\0302 \001(\005\022\r\n\005rectd\030< \001(\005\022\013\n\003rec\030F \001(\005\022\014"
  "\n\004pint\030P \001(\005\022\016\n\006fumble\030Z \001(\005\022\r\n\005twopt\030d "
  "\001(\005\022\r\n\005onept\030n \001(\005\"s\n\005Stats\022\"\n\006ostats\030\n "
  "\001(\0132\022.fantasybit.Ostats\022\"\n\006dstats\030\024 \001(\0132"
  "\022.fantasybit.Dstats\022\"\n\006kstats\030\036 \001(\0132\022.fa"
  "ntasybit.Kstats\"\374\001\n\014PlayerResult\022\020\n\010play"
  "erid\030\024 \001(\t\022\016\n\006result\030( \001(\002\022 \n\005stats\0302 \001("
  "\0132\021.fantasybit.Stats\0223\n\016fantaybitaward\030<"
  " \003(\0132\033.fantasybit.FantasyBitAward\0220\n\rfan"
  "tasybitpnl\030F \003(\0132\031.fantasybit.FantasyBit"
  "Pnl\0221\n\016rowposdividend\030P \003(\0132\031.fantasybit"
  ".FantasyBitPnl\022\016\n\006symbol\030Z \001(\t\"\265\001\n\nGameR"
  "esult\022\016\n\006gameid\030\001 \001(\t\022-\n\013home_result\030\n \003"
  "(\0132\030.fantasybit.PlayerResult\022-\n\013away_res"
  "ult\030\024 \003(\0132\030.fantasybit.PlayerResult\022\023\n\013k"
  "ickofftime\030\036 \001(\r\022\021\n\thomeTotal\030( \001(\002\022\021\n\ta"
  "wayTotal\0302 \001(\002\"_\n\014SeasonResult\022\016\n\006season"
  "\030\001 \001(\004\0220\n\016player_results\030\n \003(\0132\030.fantasy"
  "bit.PlayerResult\022\r\n\005total\030\024 \001(\002\"\237\001\n\024Play"
  "erContractSymbol\022\016\n\006symbol\030\n \001(\t\022\020\n\010play"
  "erid\030\024 \001(\t\022\017\n\007sybhash\030\036 \001(\004\022\020\n\010initals2\030"
  "( \001(\t\022\014\n\004seq2\0302 \001(\t\022\r\n\005year2\030< \001(\t\022\021\n\tty"
  "pe1sorw\030F \001(\t\022\022\n\nweek1or04s\030P \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_StaticData_2eproto_deps[1] = {
  &::descriptor_table_NameData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_StaticData_2eproto_sccs[11] = {
  &scc_info_Dstats_StaticData_2eproto.base,
  &scc_info_GameInfo_StaticData_2eproto.base,
  &scc_info_GameResult_StaticData_2eproto.base,
  &scc_info_Kstats_StaticData_2eproto.base,
  &scc_info_Ostats_StaticData_2eproto.base,
  &scc_info_PlayerBase_StaticData_2eproto.base,
  &scc_info_PlayerContractSymbol_StaticData_2eproto.base,
  &scc_info_PlayerResult_StaticData_2eproto.base,
  &scc_info_SeasonResult_StaticData_2eproto.base,
  &scc_info_Stats_StaticData_2eproto.base,
  &scc_info_WeeklySchedule_StaticData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_StaticData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_StaticData_2eproto = {
  false, false, descriptor_table_protodef_StaticData_2eproto, "StaticData.proto", 1393,
  &descriptor_table_StaticData_2eproto_once, descriptor_table_StaticData_2eproto_sccs, descriptor_table_StaticData_2eproto_deps, 11, 1,
  schemas, file_default_instances, TableStruct_StaticData_2eproto::offsets,
  file_level_metadata_StaticData_2eproto, 11, file_level_enum_descriptors_StaticData_2eproto, file_level_service_descriptors_StaticData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_StaticData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_StaticData_2eproto)), true);
namespace fantasybit {

// ===================================================================

void PlayerBase::InitAsDefaultInstance() {
}
class PlayerBase::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerBase>()._has_bits_);
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PlayerBase::PlayerBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PlayerBase)
}
PlayerBase::PlayerBase(const PlayerBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  first_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_first()) {
    first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_first(),
      GetArena());
  }
  last_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last()) {
    last_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last(),
      GetArena());
  }
  position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_position()) {
    position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_position(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerBase)
}

void PlayerBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerBase_StaticData_2eproto.base);
  first_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlayerBase::~PlayerBase() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerBase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  first_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerBase::ArenaDtor(void* object) {
  PlayerBase* _this = reinterpret_cast< PlayerBase* >(object);
  (void)_this;
}
void PlayerBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerBase& PlayerBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerBase_StaticData_2eproto.base);
  return *internal_default_instance();
}


void PlayerBase::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      first_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      last_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      position_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string first = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_first();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerBase.first");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerBase.last");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string position = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_position();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerBase.position");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string first = 30;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_first().data(), static_cast<int>(this->_internal_first().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.first");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_first(), target);
  }

  // optional string last = 40;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last().data(), static_cast<int>(this->_internal_last().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.last");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_last(), target);
  }

  // optional string position = 50;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_position().data(), static_cast<int>(this->_internal_position().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.position");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerBase)
  return target;
}

size_t PlayerBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string first = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_first());
    }

    // optional string last = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last());
    }

    // optional string position = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerBase)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerBase)
    MergeFrom(*source);
  }
}

void PlayerBase::MergeFrom(const PlayerBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_first(from._internal_first());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_last(from._internal_last());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_position(from._internal_position());
    }
  }
}

void PlayerBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBase::CopyFrom(const PlayerBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBase::IsInitialized() const {
  return true;
}

void PlayerBase::InternalSwap(PlayerBase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  first_.Swap(&other->first_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_.Swap(&other->last_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  position_.Swap(&other->position_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerBase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameInfo::InitAsDefaultInstance() {
}
class GameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GameInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_home(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_away(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GameInfo::GameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GameInfo)
}
GameInfo::GameInfo(const GameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_home()) {
    home_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_home(),
      GetArena());
  }
  away_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_away()) {
    away_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_away(),
      GetArena());
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameInfo)
}

void GameInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameInfo_StaticData_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  away_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:fantasybit.GameInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  home_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  away_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameInfo::ArenaDtor(void* object) {
  GameInfo* _this = reinterpret_cast< GameInfo* >(object);
  (void)_this;
}
void GameInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameInfo& GameInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameInfo_StaticData_2eproto.base);
  return *internal_default_instance();
}


void GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      home_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      away_.ClearNonDefaultToEmpty();
    }
  }
  time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GameInfo.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string home = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_home();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GameInfo.home");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string away = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_away();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GameInfo.away");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_id(), target);
  }

  // optional string home = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.home");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_home(), target);
  }

  // optional string away = 30;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_away().data(), static_cast<int>(this->_internal_away().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.away");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_away(), target);
  }

  // optional uint32 time = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameInfo)
  return target;
}

size_t GameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string home = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_home());
    }

    // optional string away = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_away());
    }

    // optional uint32 time = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameInfo)
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_home(from._internal_home());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_away(from._internal_away());
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  return true;
}

void GameInfo::InternalSwap(GameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  home_.Swap(&other->home_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  away_.Swap(&other->away_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeeklySchedule::InitAsDefaultInstance() {
}
class WeeklySchedule::_Internal {
 public:
};

WeeklySchedule::WeeklySchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  games_(arena),
  byes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.WeeklySchedule)
}
WeeklySchedule::WeeklySchedule(const WeeklySchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      games_(from.games_),
      byes_(from.byes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fantasybit.WeeklySchedule)
}

void WeeklySchedule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WeeklySchedule_StaticData_2eproto.base);
}

WeeklySchedule::~WeeklySchedule() {
  // @@protoc_insertion_point(destructor:fantasybit.WeeklySchedule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WeeklySchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WeeklySchedule::ArenaDtor(void* object) {
  WeeklySchedule* _this = reinterpret_cast< WeeklySchedule* >(object);
  (void)_this;
}
void WeeklySchedule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WeeklySchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeeklySchedule& WeeklySchedule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeeklySchedule_StaticData_2eproto.base);
  return *internal_default_instance();
}


void WeeklySchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.WeeklySchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  byes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeeklySchedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fantasybit.GameInfo games = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string byes = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_byes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.WeeklySchedule.byes");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeeklySchedule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.WeeklySchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fantasybit.GameInfo games = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_games(i), target, stream);
  }

  // repeated string byes = 20;
  for (int i = 0, n = this->_internal_byes_size(); i < n; i++) {
    const auto& s = this->_internal_byes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.WeeklySchedule.byes");
    target = stream->WriteString(20, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.WeeklySchedule)
  return target;
}

size_t WeeklySchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.WeeklySchedule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.GameInfo games = 10;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string byes = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(byes_.size());
  for (int i = 0, n = byes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      byes_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeeklySchedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.WeeklySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const WeeklySchedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeeklySchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.WeeklySchedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.WeeklySchedule)
    MergeFrom(*source);
  }
}

void WeeklySchedule::MergeFrom(const WeeklySchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.WeeklySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
  byes_.MergeFrom(from.byes_);
}

void WeeklySchedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.WeeklySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeeklySchedule::CopyFrom(const WeeklySchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.WeeklySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeeklySchedule::IsInitialized() const {
  return true;
}

void WeeklySchedule::InternalSwap(WeeklySchedule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  games_.InternalSwap(&other->games_);
  byes_.InternalSwap(&other->byes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeeklySchedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Kstats::InitAsDefaultInstance() {
}
class Kstats::_Internal {
 public:
  using HasBits = decltype(std::declval<Kstats>()._has_bits_);
  static void set_has_pa(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Kstats::Kstats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Kstats)
}
Kstats::Kstats(const Kstats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fg_(from.fg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pa_ = from.pa_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.Kstats)
}

void Kstats::SharedCtor() {
  pa_ = 0;
}

Kstats::~Kstats() {
  // @@protoc_insertion_point(destructor:fantasybit.Kstats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Kstats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Kstats::ArenaDtor(void* object) {
  Kstats* _this = reinterpret_cast< Kstats* >(object);
  (void)_this;
}
void Kstats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Kstats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Kstats& Kstats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Kstats_StaticData_2eproto.base);
  return *internal_default_instance();
}


void Kstats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Kstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fg_.Clear();
  pa_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Kstats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 pa = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pa(&has_bits);
          pa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 fg = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_fg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Kstats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Kstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pa = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_pa(), target);
  }

  // repeated int32 fg = 20;
  for (int i = 0, n = this->_internal_fg_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_fg(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Kstats)
  return target;
}

size_t Kstats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Kstats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 fg = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->fg_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fg_size());
    total_size += data_size;
  }

  // optional int32 pa = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pa());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Kstats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Kstats)
  GOOGLE_DCHECK_NE(&from, this);
  const Kstats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Kstats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Kstats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Kstats)
    MergeFrom(*source);
  }
}

void Kstats::MergeFrom(const Kstats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Kstats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fg_.MergeFrom(from.fg_);
  if (from._internal_has_pa()) {
    _internal_set_pa(from._internal_pa());
  }
}

void Kstats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Kstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kstats::CopyFrom(const Kstats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Kstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kstats::IsInitialized() const {
  return true;
}

void Kstats::InternalSwap(Kstats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fg_.InternalSwap(&other->fg_);
  swap(pa_, other->pa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Kstats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dstats::InitAsDefaultInstance() {
}
class Dstats::_Internal {
 public:
  using HasBits = decltype(std::declval<Dstats>()._has_bits_);
  static void set_has_twopt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_onept(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deftd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sfty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_turnovers(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sacks(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ptsa(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Dstats::Dstats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Dstats)
}
Dstats::Dstats(const Dstats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ptsa_, &from.ptsa_,
    static_cast<size_t>(reinterpret_cast<char*>(&sacks_) -
    reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Dstats)
}

void Dstats::SharedCtor() {
  ::memset(&ptsa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sacks_) -
      reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
}

Dstats::~Dstats() {
  // @@protoc_insertion_point(destructor:fantasybit.Dstats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dstats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Dstats::ArenaDtor(void* object) {
  Dstats* _this = reinterpret_cast< Dstats* >(object);
  (void)_this;
}
void Dstats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dstats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dstats& Dstats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dstats_StaticData_2eproto.base);
  return *internal_default_instance();
}


void Dstats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Dstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&ptsa_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sacks_) -
        reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dstats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 twopt = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_twopt(&has_bits);
          twopt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 onept = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_onept(&has_bits);
          onept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 deftd = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_deftd(&has_bits);
          deftd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sfty = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sfty(&has_bits);
          sfty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 turnovers = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_turnovers(&has_bits);
          turnovers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sacks = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_sacks(&has_bits);
          sacks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ptsa = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_ptsa(&has_bits);
          ptsa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dstats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Dstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 twopt = 100;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_twopt(), target);
  }

  // optional int32 onept = 110;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_onept(), target);
  }

  // optional int32 deftd = 120;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(120, this->_internal_deftd(), target);
  }

  // optional int32 sfty = 130;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(130, this->_internal_sfty(), target);
  }

  // optional int32 turnovers = 140;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(140, this->_internal_turnovers(), target);
  }

  // optional int32 sacks = 150;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(150, this->_internal_sacks(), target);
  }

  // optional int32 ptsa = 160;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(160, this->_internal_ptsa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Dstats)
  return target;
}

size_t Dstats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Dstats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 ptsa = 160;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ptsa());
    }

    // optional int32 twopt = 100;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_twopt());
    }

    // optional int32 onept = 110;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_onept());
    }

    // optional int32 deftd = 120;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_deftd());
    }

    // optional int32 sfty = 130;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sfty());
    }

    // optional int32 turnovers = 140;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_turnovers());
    }

    // optional int32 sacks = 150;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sacks());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dstats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Dstats)
  GOOGLE_DCHECK_NE(&from, this);
  const Dstats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dstats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Dstats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Dstats)
    MergeFrom(*source);
  }
}

void Dstats::MergeFrom(const Dstats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Dstats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ptsa_ = from.ptsa_;
    }
    if (cached_has_bits & 0x00000002u) {
      twopt_ = from.twopt_;
    }
    if (cached_has_bits & 0x00000004u) {
      onept_ = from.onept_;
    }
    if (cached_has_bits & 0x00000008u) {
      deftd_ = from.deftd_;
    }
    if (cached_has_bits & 0x00000010u) {
      sfty_ = from.sfty_;
    }
    if (cached_has_bits & 0x00000020u) {
      turnovers_ = from.turnovers_;
    }
    if (cached_has_bits & 0x00000040u) {
      sacks_ = from.sacks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dstats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Dstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dstats::CopyFrom(const Dstats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Dstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dstats::IsInitialized() const {
  return true;
}

void Dstats::InternalSwap(Dstats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dstats, sacks_)
      + sizeof(Dstats::sacks_)
      - PROTOBUF_FIELD_OFFSET(Dstats, ptsa_)>(
          reinterpret_cast<char*>(&ptsa_),
          reinterpret_cast<char*>(&other->ptsa_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dstats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ostats::InitAsDefaultInstance() {
}
class Ostats::_Internal {
 public:
  using HasBits = decltype(std::declval<Ostats>()._has_bits_);
  static void set_has_passyds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passtd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rushyds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rushtd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_recyds(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rectd(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rec(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pint(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fumble(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_twopt(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_onept(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Ostats::Ostats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Ostats)
}
Ostats::Ostats(const Ostats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&onept_, &from.onept_,
    static_cast<size_t>(reinterpret_cast<char*>(&twopt_) -
    reinterpret_cast<char*>(&onept_)) + sizeof(twopt_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Ostats)
}

void Ostats::SharedCtor() {
  ::memset(&onept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&twopt_) -
      reinterpret_cast<char*>(&onept_)) + sizeof(twopt_));
}

Ostats::~Ostats() {
  // @@protoc_insertion_point(destructor:fantasybit.Ostats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ostats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ostats::ArenaDtor(void* object) {
  Ostats* _this = reinterpret_cast< Ostats* >(object);
  (void)_this;
}
void Ostats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ostats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ostats& Ostats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ostats_StaticData_2eproto.base);
  return *internal_default_instance();
}


void Ostats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Ostats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&onept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rec_) -
        reinterpret_cast<char*>(&onept_)) + sizeof(rec_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&pint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&twopt_) -
        reinterpret_cast<char*>(&pint_)) + sizeof(twopt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ostats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 passyds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_passyds(&has_bits);
          passyds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 passtd = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_passtd(&has_bits);
          passtd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rushyds = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_rushyds(&has_bits);
          rushyds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rushtd = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_rushtd(&has_bits);
          rushtd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 recyds = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_recyds(&has_bits);
          recyds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rectd = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_rectd(&has_bits);
          rectd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rec = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rec(&has_bits);
          rec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pint = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_pint(&has_bits);
          pint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fumble = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_fumble(&has_bits);
          fumble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 twopt = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_twopt(&has_bits);
          twopt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 onept = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_onept(&has_bits);
          onept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ostats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Ostats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 passyds = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_passyds(), target);
  }

  // optional int32 passtd = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_passtd(), target);
  }

  // optional int32 rushyds = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_rushyds(), target);
  }

  // optional int32 rushtd = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_rushtd(), target);
  }

  // optional int32 recyds = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_recyds(), target);
  }

  // optional int32 rectd = 60;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_rectd(), target);
  }

  // optional int32 rec = 70;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_rec(), target);
  }

  // optional int32 pint = 80;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(80, this->_internal_pint(), target);
  }

  // optional int32 fumble = 90;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(90, this->_internal_fumble(), target);
  }

  // optional int32 twopt = 100;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_twopt(), target);
  }

  // optional int32 onept = 110;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_onept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Ostats)
  return target;
}

size_t Ostats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Ostats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 onept = 110;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_onept());
    }

    // optional int32 passyds = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_passyds());
    }

    // optional int32 passtd = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_passtd());
    }

    // optional int32 rushyds = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rushyds());
    }

    // optional int32 rushtd = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rushtd());
    }

    // optional int32 recyds = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_recyds());
    }

    // optional int32 rectd = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rectd());
    }

    // optional int32 rec = 70;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rec());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 pint = 80;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pint());
    }

    // optional int32 fumble = 90;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fumble());
    }

    // optional int32 twopt = 100;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_twopt());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ostats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Ostats)
  GOOGLE_DCHECK_NE(&from, this);
  const Ostats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ostats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Ostats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Ostats)
    MergeFrom(*source);
  }
}

void Ostats::MergeFrom(const Ostats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Ostats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      onept_ = from.onept_;
    }
    if (cached_has_bits & 0x00000002u) {
      passyds_ = from.passyds_;
    }
    if (cached_has_bits & 0x00000004u) {
      passtd_ = from.passtd_;
    }
    if (cached_has_bits & 0x00000008u) {
      rushyds_ = from.rushyds_;
    }
    if (cached_has_bits & 0x00000010u) {
      rushtd_ = from.rushtd_;
    }
    if (cached_has_bits & 0x00000020u) {
      recyds_ = from.recyds_;
    }
    if (cached_has_bits & 0x00000040u) {
      rectd_ = from.rectd_;
    }
    if (cached_has_bits & 0x00000080u) {
      rec_ = from.rec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      pint_ = from.pint_;
    }
    if (cached_has_bits & 0x00000200u) {
      fumble_ = from.fumble_;
    }
    if (cached_has_bits & 0x00000400u) {
      twopt_ = from.twopt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ostats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Ostats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ostats::CopyFrom(const Ostats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Ostats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ostats::IsInitialized() const {
  return true;
}

void Ostats::InternalSwap(Ostats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ostats, twopt_)
      + sizeof(Ostats::twopt_)
      - PROTOBUF_FIELD_OFFSET(Ostats, onept_)>(
          reinterpret_cast<char*>(&onept_),
          reinterpret_cast<char*>(&other->onept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ostats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stats::InitAsDefaultInstance() {
  ::fantasybit::_Stats_default_instance_._instance.get_mutable()->ostats_ = const_cast< ::fantasybit::Ostats*>(
      ::fantasybit::Ostats::internal_default_instance());
  ::fantasybit::_Stats_default_instance_._instance.get_mutable()->dstats_ = const_cast< ::fantasybit::Dstats*>(
      ::fantasybit::Dstats::internal_default_instance());
  ::fantasybit::_Stats_default_instance_._instance.get_mutable()->kstats_ = const_cast< ::fantasybit::Kstats*>(
      ::fantasybit::Kstats::internal_default_instance());
}
class Stats::_Internal {
 public:
  using HasBits = decltype(std::declval<Stats>()._has_bits_);
  static const ::fantasybit::Ostats& ostats(const Stats* msg);
  static void set_has_ostats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::Dstats& dstats(const Stats* msg);
  static void set_has_dstats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::Kstats& kstats(const Stats* msg);
  static void set_has_kstats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::fantasybit::Ostats&
Stats::_Internal::ostats(const Stats* msg) {
  return *msg->ostats_;
}
const ::fantasybit::Dstats&
Stats::_Internal::dstats(const Stats* msg) {
  return *msg->dstats_;
}
const ::fantasybit::Kstats&
Stats::_Internal::kstats(const Stats* msg) {
  return *msg->kstats_;
}
Stats::Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Stats)
}
Stats::Stats(const Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ostats()) {
    ostats_ = new ::fantasybit::Ostats(*from.ostats_);
  } else {
    ostats_ = nullptr;
  }
  if (from._internal_has_dstats()) {
    dstats_ = new ::fantasybit::Dstats(*from.dstats_);
  } else {
    dstats_ = nullptr;
  }
  if (from._internal_has_kstats()) {
    kstats_ = new ::fantasybit::Kstats(*from.kstats_);
  } else {
    kstats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Stats)
}

void Stats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stats_StaticData_2eproto.base);
  ::memset(&ostats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kstats_) -
      reinterpret_cast<char*>(&ostats_)) + sizeof(kstats_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:fantasybit.Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ostats_;
  if (this != internal_default_instance()) delete dstats_;
  if (this != internal_default_instance()) delete kstats_;
}

void Stats::ArenaDtor(void* object) {
  Stats* _this = reinterpret_cast< Stats* >(object);
  (void)_this;
}
void Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stats& Stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stats_StaticData_2eproto.base);
  return *internal_default_instance();
}


void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ostats_ != nullptr);
      ostats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dstats_ != nullptr);
      dstats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kstats_ != nullptr);
      kstats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.Ostats ostats = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ostats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.Dstats dstats = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_dstats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.Kstats kstats = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_kstats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.Ostats ostats = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ostats(this), target, stream);
  }

  // optional .fantasybit.Dstats dstats = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::dstats(this), target, stream);
  }

  // optional .fantasybit.Kstats kstats = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::kstats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Stats)
  return target;
}

size_t Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .fantasybit.Ostats ostats = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ostats_);
    }

    // optional .fantasybit.Dstats dstats = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dstats_);
    }

    // optional .fantasybit.Kstats kstats = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kstats_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Stats)
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ostats()->::fantasybit::Ostats::MergeFrom(from._internal_ostats());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dstats()->::fantasybit::Dstats::MergeFrom(from._internal_dstats());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_kstats()->::fantasybit::Kstats::MergeFrom(from._internal_kstats());
    }
  }
}

void Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  return true;
}

void Stats::InternalSwap(Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stats, kstats_)
      + sizeof(Stats::kstats_)
      - PROTOBUF_FIELD_OFFSET(Stats, ostats_)>(
          reinterpret_cast<char*>(&ostats_),
          reinterpret_cast<char*>(&other->ostats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerResult::InitAsDefaultInstance() {
  ::fantasybit::_PlayerResult_default_instance_._instance.get_mutable()->stats_ = const_cast< ::fantasybit::Stats*>(
      ::fantasybit::Stats::internal_default_instance());
}
class PlayerResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerResult>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::fantasybit::Stats& stats(const PlayerResult* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::Stats&
PlayerResult::_Internal::stats(const PlayerResult* msg) {
  return *msg->stats_;
}
void PlayerResult::clear_fantaybitaward() {
  fantaybitaward_.Clear();
}
void PlayerResult::clear_fantasybitpnl() {
  fantasybitpnl_.Clear();
}
void PlayerResult::clear_rowposdividend() {
  rowposdividend_.Clear();
}
PlayerResult::PlayerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fantaybitaward_(arena),
  fantasybitpnl_(arena),
  rowposdividend_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PlayerResult)
}
PlayerResult::PlayerResult(const PlayerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fantaybitaward_(from.fantaybitaward_),
      fantasybitpnl_(from.fantasybitpnl_),
      rowposdividend_(from.rowposdividend_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  if (from._internal_has_stats()) {
    stats_ = new ::fantasybit::Stats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerResult)
}

void PlayerResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerResult_StaticData_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(result_));
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stats_;
}

void PlayerResult::ArenaDtor(void* object) {
  PlayerResult* _this = reinterpret_cast< PlayerResult* >(object);
  (void)_this;
}
void PlayerResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerResult& PlayerResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerResult_StaticData_2eproto.base);
  return *internal_default_instance();
}


void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantaybitaward_.Clear();
  fantasybitpnl_.Clear();
  rowposdividend_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stats_ != nullptr);
      stats_->Clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string playerid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerResult.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float result = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.Stats stats = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fantaybitaward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<482>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fantasybitpnl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<562>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.FantasyBitPnl rowposdividend = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_rowposdividend(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<642>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string symbol = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerResult.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerResult.playerid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_playerid(), target);
  }

  // optional float result = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(40, this->_internal_result(), target);
  }

  // optional .fantasybit.Stats stats = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::stats(this), target, stream);
  }

  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fantaybitaward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, this->_internal_fantaybitaward(i), target, stream);
  }

  // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fantasybitpnl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, this->_internal_fantasybitpnl(i), target, stream);
  }

  // repeated .fantasybit.FantasyBitPnl rowposdividend = 80;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rowposdividend_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(80, this->_internal_rowposdividend(i), target, stream);
  }

  // optional string symbol = 90;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerResult.symbol");
    target = stream->WriteStringMaybeAliased(
        90, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerResult)
  return target;
}

size_t PlayerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  total_size += 2UL * this->_internal_fantaybitaward_size();
  for (const auto& msg : this->fantaybitaward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
  total_size += 2UL * this->_internal_fantasybitpnl_size();
  for (const auto& msg : this->fantasybitpnl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fantasybit.FantasyBitPnl rowposdividend = 80;
  total_size += 2UL * this->_internal_rowposdividend_size();
  for (const auto& msg : this->rowposdividend_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string playerid = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional string symbol = 90;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional .fantasybit.Stats stats = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional float result = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerResult)
    MergeFrom(*source);
  }
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fantaybitaward_.MergeFrom(from.fantaybitaward_);
  fantasybitpnl_.MergeFrom(from.fantasybitpnl_);
  rowposdividend_.MergeFrom(from.rowposdividend_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stats()->::fantasybit::Stats::MergeFrom(from._internal_stats());
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {
  return true;
}

void PlayerResult::InternalSwap(PlayerResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fantaybitaward_.InternalSwap(&other->fantaybitaward_);
  fantasybitpnl_.InternalSwap(&other->fantasybitpnl_);
  rowposdividend_.InternalSwap(&other->rowposdividend_);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerResult, result_)
      + sizeof(PlayerResult::result_)
      - PROTOBUF_FIELD_OFFSET(PlayerResult, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameResult::InitAsDefaultInstance() {
}
class GameResult::_Internal {
 public:
  using HasBits = decltype(std::declval<GameResult>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kickofftime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hometotal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_awaytotal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GameResult::GameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  home_result_(arena),
  away_result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GameResult)
}
GameResult::GameResult(const GameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      home_result_(from.home_result_),
      away_result_(from.away_result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameid()) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameid(),
      GetArena());
  }
  ::memcpy(&awaytotal_, &from.awaytotal_,
    static_cast<size_t>(reinterpret_cast<char*>(&hometotal_) -
    reinterpret_cast<char*>(&awaytotal_)) + sizeof(hometotal_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameResult)
}

void GameResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameResult_StaticData_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&awaytotal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hometotal_) -
      reinterpret_cast<char*>(&awaytotal_)) + sizeof(hometotal_));
}

GameResult::~GameResult() {
  // @@protoc_insertion_point(destructor:fantasybit.GameResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameResult::ArenaDtor(void* object) {
  GameResult* _this = reinterpret_cast< GameResult* >(object);
  (void)_this;
}
void GameResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameResult& GameResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameResult_StaticData_2eproto.base);
  return *internal_default_instance();
}


void GameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  home_result_.Clear();
  away_result_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gameid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&awaytotal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hometotal_) -
        reinterpret_cast<char*>(&awaytotal_)) + sizeof(hometotal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GameResult.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.PlayerResult home_result = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_home_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.PlayerResult away_result = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_away_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 kickofftime = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_kickofftime(&has_bits);
          kickofftime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float homeTotal = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_hometotal(&has_bits);
          hometotal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float awayTotal = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_awaytotal(&has_bits);
          awaytotal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GameResult.gameid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gameid(), target);
  }

  // repeated .fantasybit.PlayerResult home_result = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_home_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_home_result(i), target, stream);
  }

  // repeated .fantasybit.PlayerResult away_result = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_away_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_away_result(i), target, stream);
  }

  // optional uint32 kickofftime = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_kickofftime(), target);
  }

  // optional float homeTotal = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(40, this->_internal_hometotal(), target);
  }

  // optional float awayTotal = 50;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(50, this->_internal_awaytotal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameResult)
  return target;
}

size_t GameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.PlayerResult home_result = 10;
  total_size += 1UL * this->_internal_home_result_size();
  for (const auto& msg : this->home_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fantasybit.PlayerResult away_result = 20;
  total_size += 2UL * this->_internal_away_result_size();
  for (const auto& msg : this->away_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string gameid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameid());
    }

    // optional float awayTotal = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional uint32 kickofftime = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kickofftime());
    }

    // optional float homeTotal = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameResult)
    MergeFrom(*source);
  }
}

void GameResult::MergeFrom(const GameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  home_result_.MergeFrom(from.home_result_);
  away_result_.MergeFrom(from.away_result_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameid(from._internal_gameid());
    }
    if (cached_has_bits & 0x00000002u) {
      awaytotal_ = from.awaytotal_;
    }
    if (cached_has_bits & 0x00000004u) {
      kickofftime_ = from.kickofftime_;
    }
    if (cached_has_bits & 0x00000008u) {
      hometotal_ = from.hometotal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResult::CopyFrom(const GameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResult::IsInitialized() const {
  return true;
}

void GameResult::InternalSwap(GameResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  home_result_.InternalSwap(&other->home_result_);
  away_result_.InternalSwap(&other->away_result_);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameResult, hometotal_)
      + sizeof(GameResult::hometotal_)
      - PROTOBUF_FIELD_OFFSET(GameResult, awaytotal_)>(
          reinterpret_cast<char*>(&awaytotal_),
          reinterpret_cast<char*>(&other->awaytotal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SeasonResult::InitAsDefaultInstance() {
}
class SeasonResult::_Internal {
 public:
  using HasBits = decltype(std::declval<SeasonResult>()._has_bits_);
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SeasonResult::SeasonResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.SeasonResult)
}
SeasonResult::SeasonResult(const SeasonResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_results_(from.player_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&season_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.SeasonResult)
}

void SeasonResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeasonResult_StaticData_2eproto.base);
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&season_)) + sizeof(total_));
}

SeasonResult::~SeasonResult() {
  // @@protoc_insertion_point(destructor:fantasybit.SeasonResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SeasonResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SeasonResult::ArenaDtor(void* object) {
  SeasonResult* _this = reinterpret_cast< SeasonResult* >(object);
  (void)_this;
}
void SeasonResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeasonResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeasonResult& SeasonResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeasonResult_StaticData_2eproto.base);
  return *internal_default_instance();
}


void SeasonResult::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SeasonResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_) -
        reinterpret_cast<char*>(&season_)) + sizeof(total_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeasonResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 season = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.PlayerResult player_results = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float total = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeasonResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SeasonResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 season = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_season(), target);
  }

  // repeated .fantasybit.PlayerResult player_results = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_player_results(i), target, stream);
  }

  // optional float total = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SeasonResult)
  return target;
}

size_t SeasonResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SeasonResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.PlayerResult player_results = 10;
  total_size += 1UL * this->_internal_player_results_size();
  for (const auto& msg : this->player_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 season = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_season());
    }

    // optional float total = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeasonResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SeasonResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SeasonResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeasonResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SeasonResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SeasonResult)
    MergeFrom(*source);
  }
}

void SeasonResult::MergeFrom(const SeasonResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SeasonResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_results_.MergeFrom(from.player_results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_ = from.total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SeasonResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SeasonResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeasonResult::CopyFrom(const SeasonResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SeasonResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeasonResult::IsInitialized() const {
  return true;
}

void SeasonResult::InternalSwap(SeasonResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_results_.InternalSwap(&other->player_results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeasonResult, total_)
      + sizeof(SeasonResult::total_)
      - PROTOBUF_FIELD_OFFSET(SeasonResult, season_)>(
          reinterpret_cast<char*>(&season_),
          reinterpret_cast<char*>(&other->season_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SeasonResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerContractSymbol::InitAsDefaultInstance() {
}
class PlayerContractSymbol::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerContractSymbol>()._has_bits_);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sybhash(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_initals2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seq2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_year2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type1sorw(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_week1or04s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

PlayerContractSymbol::PlayerContractSymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PlayerContractSymbol)
}
PlayerContractSymbol::PlayerContractSymbol(const PlayerContractSymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  initals2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_initals2()) {
    initals2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_initals2(),
      GetArena());
  }
  seq2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_seq2()) {
    seq2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_seq2(),
      GetArena());
  }
  year2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_year2()) {
    year2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_year2(),
      GetArena());
  }
  type1sorw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type1sorw()) {
    type1sorw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type1sorw(),
      GetArena());
  }
  week1or04s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_week1or04s()) {
    week1or04s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_week1or04s(),
      GetArena());
  }
  sybhash_ = from.sybhash_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerContractSymbol)
}

void PlayerContractSymbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerContractSymbol_StaticData_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initals2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seq2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  year2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type1sorw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  week1or04s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sybhash_ = PROTOBUF_ULONGLONG(0);
}

PlayerContractSymbol::~PlayerContractSymbol() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerContractSymbol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerContractSymbol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initals2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seq2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  year2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type1sorw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  week1or04s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerContractSymbol::ArenaDtor(void* object) {
  PlayerContractSymbol* _this = reinterpret_cast< PlayerContractSymbol* >(object);
  (void)_this;
}
void PlayerContractSymbol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerContractSymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerContractSymbol& PlayerContractSymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerContractSymbol_StaticData_2eproto.base);
  return *internal_default_instance();
}


void PlayerContractSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerContractSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      initals2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      seq2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      year2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      type1sorw_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      week1or04s_.ClearNonDefaultToEmpty();
    }
  }
  sybhash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerContractSymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string symbol = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerContractSymbol.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerContractSymbol.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sybhash = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_sybhash(&has_bits);
          sybhash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string initals2 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_initals2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerContractSymbol.initals2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string seq2 = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_seq2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerContractSymbol.seq2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string year2 = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_year2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerContractSymbol.year2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type1sorw = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_type1sorw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerContractSymbol.type1sorw");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string week1or04s = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_week1or04s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerContractSymbol.week1or04s");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerContractSymbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerContractSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string symbol = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.symbol");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_symbol(), target);
  }

  // optional string playerid = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.playerid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_playerid(), target);
  }

  // optional uint64 sybhash = 30;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_sybhash(), target);
  }

  // optional string initals2 = 40;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_initals2().data(), static_cast<int>(this->_internal_initals2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.initals2");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_initals2(), target);
  }

  // optional string seq2 = 50;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_seq2().data(), static_cast<int>(this->_internal_seq2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.seq2");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_seq2(), target);
  }

  // optional string year2 = 60;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_year2().data(), static_cast<int>(this->_internal_year2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.year2");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_year2(), target);
  }

  // optional string type1sorw = 70;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type1sorw().data(), static_cast<int>(this->_internal_type1sorw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.type1sorw");
    target = stream->WriteStringMaybeAliased(
        70, this->_internal_type1sorw(), target);
  }

  // optional string week1or04s = 80;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_week1or04s().data(), static_cast<int>(this->_internal_week1or04s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.week1or04s");
    target = stream->WriteStringMaybeAliased(
        80, this->_internal_week1or04s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerContractSymbol)
  return target;
}

size_t PlayerContractSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerContractSymbol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string symbol = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional string playerid = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional string initals2 = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_initals2());
    }

    // optional string seq2 = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_seq2());
    }

    // optional string year2 = 60;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_year2());
    }

    // optional string type1sorw = 70;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type1sorw());
    }

    // optional string week1or04s = 80;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_week1or04s());
    }

    // optional uint64 sybhash = 30;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sybhash());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerContractSymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerContractSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerContractSymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerContractSymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerContractSymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerContractSymbol)
    MergeFrom(*source);
  }
}

void PlayerContractSymbol::MergeFrom(const PlayerContractSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerContractSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_initals2(from._internal_initals2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_seq2(from._internal_seq2());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_year2(from._internal_year2());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_type1sorw(from._internal_type1sorw());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_week1or04s(from._internal_week1or04s());
    }
    if (cached_has_bits & 0x00000080u) {
      sybhash_ = from.sybhash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerContractSymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerContractSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerContractSymbol::CopyFrom(const PlayerContractSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerContractSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerContractSymbol::IsInitialized() const {
  return true;
}

void PlayerContractSymbol::InternalSwap(PlayerContractSymbol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  initals2_.Swap(&other->initals2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  seq2_.Swap(&other->seq2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  year2_.Swap(&other->year2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type1sorw_.Swap(&other->type1sorw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  week1or04s_.Swap(&other->week1or04s_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sybhash_, other->sybhash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerContractSymbol::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fantasybit::PlayerBase* Arena::CreateMaybeMessage< ::fantasybit::PlayerBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PlayerBase >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GameInfo* Arena::CreateMaybeMessage< ::fantasybit::GameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::WeeklySchedule* Arena::CreateMaybeMessage< ::fantasybit::WeeklySchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::WeeklySchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Kstats* Arena::CreateMaybeMessage< ::fantasybit::Kstats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Kstats >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Dstats* Arena::CreateMaybeMessage< ::fantasybit::Dstats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Dstats >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Ostats* Arena::CreateMaybeMessage< ::fantasybit::Ostats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Ostats >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Stats* Arena::CreateMaybeMessage< ::fantasybit::Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::PlayerResult* Arena::CreateMaybeMessage< ::fantasybit::PlayerResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PlayerResult >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GameResult* Arena::CreateMaybeMessage< ::fantasybit::GameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::SeasonResult* Arena::CreateMaybeMessage< ::fantasybit::SeasonResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::SeasonResult >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::PlayerContractSymbol* Arena::CreateMaybeMessage< ::fantasybit::PlayerContractSymbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PlayerContractSymbol >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
