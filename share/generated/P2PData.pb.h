// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: P2PData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_P2PData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_P2PData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_P2PData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_P2PData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_P2PData_2eproto;
namespace fantasybit {
class ChainHead;
class ChainHeadDefaultTypeInternal;
extern ChainHeadDefaultTypeInternal _ChainHead_default_instance_;
class MsgAlive;
class MsgAliveDefaultTypeInternal;
extern MsgAliveDefaultTypeInternal _MsgAlive_default_instance_;
class MsgHello;
class MsgHelloDefaultTypeInternal;
extern MsgHelloDefaultTypeInternal _MsgHello_default_instance_;
class MsgIntro;
class MsgIntroDefaultTypeInternal;
extern MsgIntroDefaultTypeInternal _MsgIntro_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class PeerChainStatus;
class PeerChainStatusDefaultTypeInternal;
extern PeerChainStatusDefaultTypeInternal _PeerChainStatus_default_instance_;
class SessionId;
class SessionIdDefaultTypeInternal;
extern SessionIdDefaultTypeInternal _SessionId_default_instance_;
class WireMsg;
class WireMsgDefaultTypeInternal;
extern WireMsgDefaultTypeInternal _WireMsg_default_instance_;
class WirePeer;
class WirePeerDefaultTypeInternal;
extern WirePeerDefaultTypeInternal _WirePeer_default_instance_;
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> ::fantasybit::ChainHead* Arena::CreateMaybeMessage<::fantasybit::ChainHead>(Arena*);
template<> ::fantasybit::MsgAlive* Arena::CreateMaybeMessage<::fantasybit::MsgAlive>(Arena*);
template<> ::fantasybit::MsgHello* Arena::CreateMaybeMessage<::fantasybit::MsgHello>(Arena*);
template<> ::fantasybit::MsgIntro* Arena::CreateMaybeMessage<::fantasybit::MsgIntro>(Arena*);
template<> ::fantasybit::Peer* Arena::CreateMaybeMessage<::fantasybit::Peer>(Arena*);
template<> ::fantasybit::PeerChainStatus* Arena::CreateMaybeMessage<::fantasybit::PeerChainStatus>(Arena*);
template<> ::fantasybit::SessionId* Arena::CreateMaybeMessage<::fantasybit::SessionId>(Arena*);
template<> ::fantasybit::WireMsg* Arena::CreateMaybeMessage<::fantasybit::WireMsg>(Arena*);
template<> ::fantasybit::WirePeer* Arena::CreateMaybeMessage<::fantasybit::WirePeer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fantasybit {

enum Peer_IsListening : int {
  Peer_IsListening__dontuse_ = 0,
  Peer_IsListening_NOTSURE = 1,
  Peer_IsListening_ITHINKSO = 2,
  Peer_IsListening_YES = 3,
  Peer_IsListening_NO = 4
};
bool Peer_IsListening_IsValid(int value);
constexpr Peer_IsListening Peer_IsListening_IsListening_MIN = Peer_IsListening__dontuse_;
constexpr Peer_IsListening Peer_IsListening_IsListening_MAX = Peer_IsListening_NO;
constexpr int Peer_IsListening_IsListening_ARRAYSIZE = Peer_IsListening_IsListening_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Peer_IsListening_descriptor();
template<typename T>
inline const std::string& Peer_IsListening_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Peer_IsListening>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Peer_IsListening_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Peer_IsListening_descriptor(), enum_t_value);
}
inline bool Peer_IsListening_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Peer_IsListening* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Peer_IsListening>(
    Peer_IsListening_descriptor(), name, value);
}
enum SessionId_NetworkID : int {
  SessionId_NetworkID__dontuse_ = 0,
  SessionId_NetworkID_TEST = 1,
  SessionId_NetworkID_PROD = 2
};
bool SessionId_NetworkID_IsValid(int value);
constexpr SessionId_NetworkID SessionId_NetworkID_NetworkID_MIN = SessionId_NetworkID__dontuse_;
constexpr SessionId_NetworkID SessionId_NetworkID_NetworkID_MAX = SessionId_NetworkID_PROD;
constexpr int SessionId_NetworkID_NetworkID_ARRAYSIZE = SessionId_NetworkID_NetworkID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionId_NetworkID_descriptor();
template<typename T>
inline const std::string& SessionId_NetworkID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionId_NetworkID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionId_NetworkID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SessionId_NetworkID_descriptor(), enum_t_value);
}
inline bool SessionId_NetworkID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionId_NetworkID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SessionId_NetworkID>(
    SessionId_NetworkID_descriptor(), name, value);
}
enum PeerChainStatus_ChainState : int {
  PeerChainStatus_ChainState__dontuse_ = 0,
  PeerChainStatus_ChainState_STARTING = 2,
  PeerChainStatus_ChainState_SEARCHING = 4,
  PeerChainStatus_ChainState_REORG = 6,
  PeerChainStatus_ChainState_STOPPING = 8,
  PeerChainStatus_ChainState_ABORTING = 10,
  PeerChainStatus_ChainState_CONNECTING = 40,
  PeerChainStatus_ChainState_SYNCING = 50,
  PeerChainStatus_ChainState_LIVE = 60
};
bool PeerChainStatus_ChainState_IsValid(int value);
constexpr PeerChainStatus_ChainState PeerChainStatus_ChainState_ChainState_MIN = PeerChainStatus_ChainState__dontuse_;
constexpr PeerChainStatus_ChainState PeerChainStatus_ChainState_ChainState_MAX = PeerChainStatus_ChainState_LIVE;
constexpr int PeerChainStatus_ChainState_ChainState_ARRAYSIZE = PeerChainStatus_ChainState_ChainState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerChainStatus_ChainState_descriptor();
template<typename T>
inline const std::string& PeerChainStatus_ChainState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeerChainStatus_ChainState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeerChainStatus_ChainState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeerChainStatus_ChainState_descriptor(), enum_t_value);
}
inline bool PeerChainStatus_ChainState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PeerChainStatus_ChainState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeerChainStatus_ChainState>(
    PeerChainStatus_ChainState_descriptor(), name, value);
}
enum MsgType : int {
  _dontuse_ = 0,
  INTRO = 1,
  HELLO = 2,
  ALIVE = 4
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = _dontuse_;
constexpr MsgType MsgType_MAX = ALIVE;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class Peer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Peer) */ {
 public:
  inline Peer() : Peer(nullptr) {};
  virtual ~Peer();

  Peer(const Peer& from);
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Peer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(Peer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Peer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const final {
    return CreateMaybeMessage<Peer>(nullptr);
  }

  Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Peer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Peer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Peer";
  }
  protected:
  explicit Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_P2PData_2eproto);
    return ::descriptor_table_P2PData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Peer_IsListening IsListening;
  static constexpr IsListening _dontuse_ =
    Peer_IsListening__dontuse_;
  static constexpr IsListening NOTSURE =
    Peer_IsListening_NOTSURE;
  static constexpr IsListening ITHINKSO =
    Peer_IsListening_ITHINKSO;
  static constexpr IsListening YES =
    Peer_IsListening_YES;
  static constexpr IsListening NO =
    Peer_IsListening_NO;
  static inline bool IsListening_IsValid(int value) {
    return Peer_IsListening_IsValid(value);
  }
  static constexpr IsListening IsListening_MIN =
    Peer_IsListening_IsListening_MIN;
  static constexpr IsListening IsListening_MAX =
    Peer_IsListening_IsListening_MAX;
  static constexpr int IsListening_ARRAYSIZE =
    Peer_IsListening_IsListening_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  IsListening_descriptor() {
    return Peer_IsListening_descriptor();
  }
  template<typename T>
  static inline const std::string& IsListening_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IsListening>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IsListening_Name.");
    return Peer_IsListening_Name(enum_t_value);
  }
  static inline bool IsListening_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      IsListening* value) {
    return Peer_IsListening_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 10,
    kPortFieldNumber = 30,
    kIsListeningFieldNumber = 40,
  };
  // optional string address = 10;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // optional uint32 port = 30;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .fantasybit.Peer.IsListening is_listening = 40;
  bool has_is_listening() const;
  private:
  bool _internal_has_is_listening() const;
  public:
  void clear_is_listening();
  ::fantasybit::Peer_IsListening is_listening() const;
  void set_is_listening(::fantasybit::Peer_IsListening value);
  private:
  ::fantasybit::Peer_IsListening _internal_is_listening() const;
  void _internal_set_is_listening(::fantasybit::Peer_IsListening value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.Peer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  int is_listening_;
  friend struct ::TableStruct_P2PData_2eproto;
};
// -------------------------------------------------------------------

class SessionId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.SessionId) */ {
 public:
  inline SessionId() : SessionId(nullptr) {};
  virtual ~SessionId();

  SessionId(const SessionId& from);
  SessionId(SessionId&& from) noexcept
    : SessionId() {
    *this = ::std::move(from);
  }

  inline SessionId& operator=(const SessionId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionId& operator=(SessionId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionId* internal_default_instance() {
    return reinterpret_cast<const SessionId*>(
               &_SessionId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SessionId& a, SessionId& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionId* New() const final {
    return CreateMaybeMessage<SessionId>(nullptr);
  }

  SessionId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionId& from);
  void MergeFrom(const SessionId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.SessionId";
  }
  protected:
  explicit SessionId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_P2PData_2eproto);
    return ::descriptor_table_P2PData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SessionId_NetworkID NetworkID;
  static constexpr NetworkID _dontuse_ =
    SessionId_NetworkID__dontuse_;
  static constexpr NetworkID TEST =
    SessionId_NetworkID_TEST;
  static constexpr NetworkID PROD =
    SessionId_NetworkID_PROD;
  static inline bool NetworkID_IsValid(int value) {
    return SessionId_NetworkID_IsValid(value);
  }
  static constexpr NetworkID NetworkID_MIN =
    SessionId_NetworkID_NetworkID_MIN;
  static constexpr NetworkID NetworkID_MAX =
    SessionId_NetworkID_NetworkID_MAX;
  static constexpr int NetworkID_ARRAYSIZE =
    SessionId_NetworkID_NetworkID_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NetworkID_descriptor() {
    return SessionId_NetworkID_descriptor();
  }
  template<typename T>
  static inline const std::string& NetworkID_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NetworkID>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NetworkID_Name.");
    return SessionId_NetworkID_Name(enum_t_value);
  }
  static inline bool NetworkID_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NetworkID* value) {
    return SessionId_NetworkID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 30,
    kStartTimeFieldNumber = 20,
    kNetworkIdFieldNumber = 1,
    kWireVersionFieldNumber = 10,
  };
  // optional bytes uuid = 30;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional uint32 start_time = 20;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .fantasybit.SessionId.NetworkID network_id = 1;
  bool has_network_id() const;
  private:
  bool _internal_has_network_id() const;
  public:
  void clear_network_id();
  ::fantasybit::SessionId_NetworkID network_id() const;
  void set_network_id(::fantasybit::SessionId_NetworkID value);
  private:
  ::fantasybit::SessionId_NetworkID _internal_network_id() const;
  void _internal_set_network_id(::fantasybit::SessionId_NetworkID value);
  public:

  // optional uint32 wire_version = 10;
  bool has_wire_version() const;
  private:
  bool _internal_has_wire_version() const;
  public:
  void clear_wire_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 wire_version() const;
  void set_wire_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wire_version() const;
  void _internal_set_wire_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.SessionId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time_;
  int network_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wire_version_;
  friend struct ::TableStruct_P2PData_2eproto;
};
// -------------------------------------------------------------------

class WirePeer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.WirePeer) */ {
 public:
  inline WirePeer() : WirePeer(nullptr) {};
  virtual ~WirePeer();

  WirePeer(const WirePeer& from);
  WirePeer(WirePeer&& from) noexcept
    : WirePeer() {
    *this = ::std::move(from);
  }

  inline WirePeer& operator=(const WirePeer& from) {
    CopyFrom(from);
    return *this;
  }
  inline WirePeer& operator=(WirePeer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WirePeer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WirePeer* internal_default_instance() {
    return reinterpret_cast<const WirePeer*>(
               &_WirePeer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WirePeer& a, WirePeer& b) {
    a.Swap(&b);
  }
  inline void Swap(WirePeer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WirePeer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WirePeer* New() const final {
    return CreateMaybeMessage<WirePeer>(nullptr);
  }

  WirePeer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WirePeer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WirePeer& from);
  void MergeFrom(const WirePeer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WirePeer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.WirePeer";
  }
  protected:
  explicit WirePeer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_P2PData_2eproto);
    return ::descriptor_table_P2PData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 10,
    kPeerFieldNumber = 20,
  };
  // optional .fantasybit.SessionId session_id = 10;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const ::fantasybit::SessionId& session_id() const;
  ::fantasybit::SessionId* release_session_id();
  ::fantasybit::SessionId* mutable_session_id();
  void set_allocated_session_id(::fantasybit::SessionId* session_id);
  private:
  const ::fantasybit::SessionId& _internal_session_id() const;
  ::fantasybit::SessionId* _internal_mutable_session_id();
  public:
  void unsafe_arena_set_allocated_session_id(
      ::fantasybit::SessionId* session_id);
  ::fantasybit::SessionId* unsafe_arena_release_session_id();

  // optional .fantasybit.Peer peer = 20;
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::fantasybit::Peer& peer() const;
  ::fantasybit::Peer* release_peer();
  ::fantasybit::Peer* mutable_peer();
  void set_allocated_peer(::fantasybit::Peer* peer);
  private:
  const ::fantasybit::Peer& _internal_peer() const;
  ::fantasybit::Peer* _internal_mutable_peer();
  public:
  void unsafe_arena_set_allocated_peer(
      ::fantasybit::Peer* peer);
  ::fantasybit::Peer* unsafe_arena_release_peer();

  // @@protoc_insertion_point(class_scope:fantasybit.WirePeer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::SessionId* session_id_;
  ::fantasybit::Peer* peer_;
  friend struct ::TableStruct_P2PData_2eproto;
};
// -------------------------------------------------------------------

class MsgIntro PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.MsgIntro) */ {
 public:
  inline MsgIntro() : MsgIntro(nullptr) {};
  virtual ~MsgIntro();

  MsgIntro(const MsgIntro& from);
  MsgIntro(MsgIntro&& from) noexcept
    : MsgIntro() {
    *this = ::std::move(from);
  }

  inline MsgIntro& operator=(const MsgIntro& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgIntro& operator=(MsgIntro&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgIntro& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgIntro* internal_default_instance() {
    return reinterpret_cast<const MsgIntro*>(
               &_MsgIntro_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgIntro& a, MsgIntro& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgIntro* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgIntro* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgIntro* New() const final {
    return CreateMaybeMessage<MsgIntro>(nullptr);
  }

  MsgIntro* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgIntro>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgIntro& from);
  void MergeFrom(const MsgIntro& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgIntro* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.MsgIntro";
  }
  protected:
  explicit MsgIntro(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_P2PData_2eproto);
    return ::descriptor_table_P2PData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEveryoneFieldNumber = 30,
    kIamFieldNumber = 10,
    kYouareFieldNumber = 20,
  };
  // repeated .fantasybit.Peer everyone = 30;
  int everyone_size() const;
  private:
  int _internal_everyone_size() const;
  public:
  void clear_everyone();
  ::fantasybit::Peer* mutable_everyone(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Peer >*
      mutable_everyone();
  private:
  const ::fantasybit::Peer& _internal_everyone(int index) const;
  ::fantasybit::Peer* _internal_add_everyone();
  public:
  const ::fantasybit::Peer& everyone(int index) const;
  ::fantasybit::Peer* add_everyone();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Peer >&
      everyone() const;

  // optional .fantasybit.WirePeer iam = 10;
  bool has_iam() const;
  private:
  bool _internal_has_iam() const;
  public:
  void clear_iam();
  const ::fantasybit::WirePeer& iam() const;
  ::fantasybit::WirePeer* release_iam();
  ::fantasybit::WirePeer* mutable_iam();
  void set_allocated_iam(::fantasybit::WirePeer* iam);
  private:
  const ::fantasybit::WirePeer& _internal_iam() const;
  ::fantasybit::WirePeer* _internal_mutable_iam();
  public:
  void unsafe_arena_set_allocated_iam(
      ::fantasybit::WirePeer* iam);
  ::fantasybit::WirePeer* unsafe_arena_release_iam();

  // optional .fantasybit.WirePeer youare = 20;
  bool has_youare() const;
  private:
  bool _internal_has_youare() const;
  public:
  void clear_youare();
  const ::fantasybit::WirePeer& youare() const;
  ::fantasybit::WirePeer* release_youare();
  ::fantasybit::WirePeer* mutable_youare();
  void set_allocated_youare(::fantasybit::WirePeer* youare);
  private:
  const ::fantasybit::WirePeer& _internal_youare() const;
  ::fantasybit::WirePeer* _internal_mutable_youare();
  public:
  void unsafe_arena_set_allocated_youare(
      ::fantasybit::WirePeer* youare);
  ::fantasybit::WirePeer* unsafe_arena_release_youare();

  // @@protoc_insertion_point(class_scope:fantasybit.MsgIntro)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Peer > everyone_;
  ::fantasybit::WirePeer* iam_;
  ::fantasybit::WirePeer* youare_;
  friend struct ::TableStruct_P2PData_2eproto;
};
// -------------------------------------------------------------------

class ChainHead PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.ChainHead) */ {
 public:
  inline ChainHead() : ChainHead(nullptr) {};
  virtual ~ChainHead();

  ChainHead(const ChainHead& from);
  ChainHead(ChainHead&& from) noexcept
    : ChainHead() {
    *this = ::std::move(from);
  }

  inline ChainHead& operator=(const ChainHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChainHead& operator=(ChainHead&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChainHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChainHead* internal_default_instance() {
    return reinterpret_cast<const ChainHead*>(
               &_ChainHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChainHead& a, ChainHead& b) {
    a.Swap(&b);
  }
  inline void Swap(ChainHead* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChainHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChainHead* New() const final {
    return CreateMaybeMessage<ChainHead>(nullptr);
  }

  ChainHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChainHead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChainHead& from);
  void MergeFrom(const ChainHead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChainHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.ChainHead";
  }
  protected:
  explicit ChainHead(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_P2PData_2eproto);
    return ::descriptor_table_P2PData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 30,
    kHeightFieldNumber = 10,
    kWeightFieldNumber = 20,
  };
  // optional bytes id = 30;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional int32 height = 10;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 weight = 20;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.ChainHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 weight_;
  friend struct ::TableStruct_P2PData_2eproto;
};
// -------------------------------------------------------------------

class PeerChainStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.PeerChainStatus) */ {
 public:
  inline PeerChainStatus() : PeerChainStatus(nullptr) {};
  virtual ~PeerChainStatus();

  PeerChainStatus(const PeerChainStatus& from);
  PeerChainStatus(PeerChainStatus&& from) noexcept
    : PeerChainStatus() {
    *this = ::std::move(from);
  }

  inline PeerChainStatus& operator=(const PeerChainStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerChainStatus& operator=(PeerChainStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerChainStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerChainStatus* internal_default_instance() {
    return reinterpret_cast<const PeerChainStatus*>(
               &_PeerChainStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PeerChainStatus& a, PeerChainStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerChainStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerChainStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerChainStatus* New() const final {
    return CreateMaybeMessage<PeerChainStatus>(nullptr);
  }

  PeerChainStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerChainStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerChainStatus& from);
  void MergeFrom(const PeerChainStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerChainStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.PeerChainStatus";
  }
  protected:
  explicit PeerChainStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_P2PData_2eproto);
    return ::descriptor_table_P2PData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PeerChainStatus_ChainState ChainState;
  static constexpr ChainState _dontuse_ =
    PeerChainStatus_ChainState__dontuse_;
  static constexpr ChainState STARTING =
    PeerChainStatus_ChainState_STARTING;
  static constexpr ChainState SEARCHING =
    PeerChainStatus_ChainState_SEARCHING;
  static constexpr ChainState REORG =
    PeerChainStatus_ChainState_REORG;
  static constexpr ChainState STOPPING =
    PeerChainStatus_ChainState_STOPPING;
  static constexpr ChainState ABORTING =
    PeerChainStatus_ChainState_ABORTING;
  static constexpr ChainState CONNECTING =
    PeerChainStatus_ChainState_CONNECTING;
  static constexpr ChainState SYNCING =
    PeerChainStatus_ChainState_SYNCING;
  static constexpr ChainState LIVE =
    PeerChainStatus_ChainState_LIVE;
  static inline bool ChainState_IsValid(int value) {
    return PeerChainStatus_ChainState_IsValid(value);
  }
  static constexpr ChainState ChainState_MIN =
    PeerChainStatus_ChainState_ChainState_MIN;
  static constexpr ChainState ChainState_MAX =
    PeerChainStatus_ChainState_ChainState_MAX;
  static constexpr int ChainState_ARRAYSIZE =
    PeerChainStatus_ChainState_ChainState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChainState_descriptor() {
    return PeerChainStatus_ChainState_descriptor();
  }
  template<typename T>
  static inline const std::string& ChainState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChainState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChainState_Name.");
    return PeerChainStatus_ChainState_Name(enum_t_value);
  }
  static inline bool ChainState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChainState* value) {
    return PeerChainStatus_ChainState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLastDeaFieldNumber = 10,
    kLastIrreversibleFieldNumber = 20,
    kMempoolSizeFieldNumber = 40,
    kChainStateFieldNumber = 1,
    kMempoolCountFieldNumber = 30,
    kLastBlockTimestampFieldNumber = 50,
    kLastTxTimestampFieldNumber = 60,
  };
  // optional .fantasybit.ChainHead last_dea = 10;
  bool has_last_dea() const;
  private:
  bool _internal_has_last_dea() const;
  public:
  void clear_last_dea();
  const ::fantasybit::ChainHead& last_dea() const;
  ::fantasybit::ChainHead* release_last_dea();
  ::fantasybit::ChainHead* mutable_last_dea();
  void set_allocated_last_dea(::fantasybit::ChainHead* last_dea);
  private:
  const ::fantasybit::ChainHead& _internal_last_dea() const;
  ::fantasybit::ChainHead* _internal_mutable_last_dea();
  public:
  void unsafe_arena_set_allocated_last_dea(
      ::fantasybit::ChainHead* last_dea);
  ::fantasybit::ChainHead* unsafe_arena_release_last_dea();

  // optional .fantasybit.ChainHead last_irreversible = 20;
  bool has_last_irreversible() const;
  private:
  bool _internal_has_last_irreversible() const;
  public:
  void clear_last_irreversible();
  const ::fantasybit::ChainHead& last_irreversible() const;
  ::fantasybit::ChainHead* release_last_irreversible();
  ::fantasybit::ChainHead* mutable_last_irreversible();
  void set_allocated_last_irreversible(::fantasybit::ChainHead* last_irreversible);
  private:
  const ::fantasybit::ChainHead& _internal_last_irreversible() const;
  ::fantasybit::ChainHead* _internal_mutable_last_irreversible();
  public:
  void unsafe_arena_set_allocated_last_irreversible(
      ::fantasybit::ChainHead* last_irreversible);
  ::fantasybit::ChainHead* unsafe_arena_release_last_irreversible();

  // optional uint32 mempool_size = 40;
  bool has_mempool_size() const;
  private:
  bool _internal_has_mempool_size() const;
  public:
  void clear_mempool_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 mempool_size() const;
  void set_mempool_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mempool_size() const;
  void _internal_set_mempool_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .fantasybit.PeerChainStatus.ChainState chain_state = 1;
  bool has_chain_state() const;
  private:
  bool _internal_has_chain_state() const;
  public:
  void clear_chain_state();
  ::fantasybit::PeerChainStatus_ChainState chain_state() const;
  void set_chain_state(::fantasybit::PeerChainStatus_ChainState value);
  private:
  ::fantasybit::PeerChainStatus_ChainState _internal_chain_state() const;
  void _internal_set_chain_state(::fantasybit::PeerChainStatus_ChainState value);
  public:

  // optional uint32 mempool_count = 30;
  bool has_mempool_count() const;
  private:
  bool _internal_has_mempool_count() const;
  public:
  void clear_mempool_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 mempool_count() const;
  void set_mempool_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mempool_count() const;
  void _internal_set_mempool_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 last_block_timestamp = 50;
  bool has_last_block_timestamp() const;
  private:
  bool _internal_has_last_block_timestamp() const;
  public:
  void clear_last_block_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_block_timestamp() const;
  void set_last_block_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_block_timestamp() const;
  void _internal_set_last_block_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 last_tx_timestamp = 60;
  bool has_last_tx_timestamp() const;
  private:
  bool _internal_has_last_tx_timestamp() const;
  public:
  void clear_last_tx_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tx_timestamp() const;
  void set_last_tx_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_tx_timestamp() const;
  void _internal_set_last_tx_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.PeerChainStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::ChainHead* last_dea_;
  ::fantasybit::ChainHead* last_irreversible_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mempool_size_;
  int chain_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mempool_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_block_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_tx_timestamp_;
  friend struct ::TableStruct_P2PData_2eproto;
};
// -------------------------------------------------------------------

class MsgAlive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.MsgAlive) */ {
 public:
  inline MsgAlive() : MsgAlive(nullptr) {};
  virtual ~MsgAlive();

  MsgAlive(const MsgAlive& from);
  MsgAlive(MsgAlive&& from) noexcept
    : MsgAlive() {
    *this = ::std::move(from);
  }

  inline MsgAlive& operator=(const MsgAlive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgAlive& operator=(MsgAlive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgAlive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgAlive* internal_default_instance() {
    return reinterpret_cast<const MsgAlive*>(
               &_MsgAlive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgAlive& a, MsgAlive& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgAlive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgAlive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgAlive* New() const final {
    return CreateMaybeMessage<MsgAlive>(nullptr);
  }

  MsgAlive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgAlive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgAlive& from);
  void MergeFrom(const MsgAlive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgAlive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.MsgAlive";
  }
  protected:
  explicit MsgAlive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_P2PData_2eproto);
    return ::descriptor_table_P2PData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerStatusFieldNumber = 30,
    kTimestampFieldNumber = 40,
  };
  // optional .fantasybit.PeerChainStatus peer_status = 30;
  bool has_peer_status() const;
  private:
  bool _internal_has_peer_status() const;
  public:
  void clear_peer_status();
  const ::fantasybit::PeerChainStatus& peer_status() const;
  ::fantasybit::PeerChainStatus* release_peer_status();
  ::fantasybit::PeerChainStatus* mutable_peer_status();
  void set_allocated_peer_status(::fantasybit::PeerChainStatus* peer_status);
  private:
  const ::fantasybit::PeerChainStatus& _internal_peer_status() const;
  ::fantasybit::PeerChainStatus* _internal_mutable_peer_status();
  public:
  void unsafe_arena_set_allocated_peer_status(
      ::fantasybit::PeerChainStatus* peer_status);
  ::fantasybit::PeerChainStatus* unsafe_arena_release_peer_status();

  // optional uint64 timestamp = 40;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.MsgAlive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::PeerChainStatus* peer_status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  friend struct ::TableStruct_P2PData_2eproto;
};
// -------------------------------------------------------------------

class MsgHello PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.MsgHello) */ {
 public:
  inline MsgHello() : MsgHello(nullptr) {};
  virtual ~MsgHello();

  MsgHello(const MsgHello& from);
  MsgHello(MsgHello&& from) noexcept
    : MsgHello() {
    *this = ::std::move(from);
  }

  inline MsgHello& operator=(const MsgHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHello& operator=(MsgHello&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgHello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgHello* internal_default_instance() {
    return reinterpret_cast<const MsgHello*>(
               &_MsgHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgHello& a, MsgHello& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHello* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgHello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgHello* New() const final {
    return CreateMaybeMessage<MsgHello>(nullptr);
  }

  MsgHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgHello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgHello& from);
  void MergeFrom(const MsgHello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.MsgHello";
  }
  protected:
  explicit MsgHello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_P2PData_2eproto);
    return ::descriptor_table_P2PData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionsFieldNumber = 20,
    kUpdateFieldNumber = 10,
  };
  // repeated .fantasybit.WirePeer connections = 20;
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::fantasybit::WirePeer* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::WirePeer >*
      mutable_connections();
  private:
  const ::fantasybit::WirePeer& _internal_connections(int index) const;
  ::fantasybit::WirePeer* _internal_add_connections();
  public:
  const ::fantasybit::WirePeer& connections(int index) const;
  ::fantasybit::WirePeer* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::WirePeer >&
      connections() const;

  // optional .fantasybit.MsgIntro update = 10;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::fantasybit::MsgIntro& update() const;
  ::fantasybit::MsgIntro* release_update();
  ::fantasybit::MsgIntro* mutable_update();
  void set_allocated_update(::fantasybit::MsgIntro* update);
  private:
  const ::fantasybit::MsgIntro& _internal_update() const;
  ::fantasybit::MsgIntro* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::fantasybit::MsgIntro* update);
  ::fantasybit::MsgIntro* unsafe_arena_release_update();

  // @@protoc_insertion_point(class_scope:fantasybit.MsgHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::WirePeer > connections_;
  ::fantasybit::MsgIntro* update_;
  friend struct ::TableStruct_P2PData_2eproto;
};
// -------------------------------------------------------------------

class WireMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.WireMsg) */ {
 public:
  inline WireMsg() : WireMsg(nullptr) {};
  virtual ~WireMsg();

  WireMsg(const WireMsg& from);
  WireMsg(WireMsg&& from) noexcept
    : WireMsg() {
    *this = ::std::move(from);
  }

  inline WireMsg& operator=(const WireMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline WireMsg& operator=(WireMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WireMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WireMsg* internal_default_instance() {
    return reinterpret_cast<const WireMsg*>(
               &_WireMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WireMsg& a, WireMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(WireMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WireMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WireMsg* New() const final {
    return CreateMaybeMessage<WireMsg>(nullptr);
  }

  WireMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WireMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WireMsg& from);
  void MergeFrom(const WireMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WireMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.WireMsg";
  }
  protected:
  explicit WireMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_P2PData_2eproto);
    return ::descriptor_table_P2PData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntroFieldNumber = 20,
    kHelloFieldNumber = 30,
    kAliveFieldNumber = 40,
    kTypeFieldNumber = 10,
  };
  // optional .fantasybit.MsgIntro intro = 20;
  bool has_intro() const;
  private:
  bool _internal_has_intro() const;
  public:
  void clear_intro();
  const ::fantasybit::MsgIntro& intro() const;
  ::fantasybit::MsgIntro* release_intro();
  ::fantasybit::MsgIntro* mutable_intro();
  void set_allocated_intro(::fantasybit::MsgIntro* intro);
  private:
  const ::fantasybit::MsgIntro& _internal_intro() const;
  ::fantasybit::MsgIntro* _internal_mutable_intro();
  public:
  void unsafe_arena_set_allocated_intro(
      ::fantasybit::MsgIntro* intro);
  ::fantasybit::MsgIntro* unsafe_arena_release_intro();

  // optional .fantasybit.MsgHello hello = 30;
  bool has_hello() const;
  private:
  bool _internal_has_hello() const;
  public:
  void clear_hello();
  const ::fantasybit::MsgHello& hello() const;
  ::fantasybit::MsgHello* release_hello();
  ::fantasybit::MsgHello* mutable_hello();
  void set_allocated_hello(::fantasybit::MsgHello* hello);
  private:
  const ::fantasybit::MsgHello& _internal_hello() const;
  ::fantasybit::MsgHello* _internal_mutable_hello();
  public:
  void unsafe_arena_set_allocated_hello(
      ::fantasybit::MsgHello* hello);
  ::fantasybit::MsgHello* unsafe_arena_release_hello();

  // optional .fantasybit.MsgAlive alive = 40;
  bool has_alive() const;
  private:
  bool _internal_has_alive() const;
  public:
  void clear_alive();
  const ::fantasybit::MsgAlive& alive() const;
  ::fantasybit::MsgAlive* release_alive();
  ::fantasybit::MsgAlive* mutable_alive();
  void set_allocated_alive(::fantasybit::MsgAlive* alive);
  private:
  const ::fantasybit::MsgAlive& _internal_alive() const;
  ::fantasybit::MsgAlive* _internal_mutable_alive();
  public:
  void unsafe_arena_set_allocated_alive(
      ::fantasybit::MsgAlive* alive);
  ::fantasybit::MsgAlive* unsafe_arena_release_alive();

  // optional .fantasybit.MsgType type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::fantasybit::MsgType type() const;
  void set_type(::fantasybit::MsgType value);
  private:
  ::fantasybit::MsgType _internal_type() const;
  void _internal_set_type(::fantasybit::MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.WireMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::MsgIntro* intro_;
  ::fantasybit::MsgHello* hello_;
  ::fantasybit::MsgAlive* alive_;
  int type_;
  friend struct ::TableStruct_P2PData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Peer

// optional string address = 10;
inline bool Peer::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Peer::has_address() const {
  return _internal_has_address();
}
inline void Peer::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Peer::address() const {
  // @@protoc_insertion_point(field_get:fantasybit.Peer.address)
  return _internal_address();
}
inline void Peer::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:fantasybit.Peer.address)
}
inline std::string* Peer::mutable_address() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Peer.address)
  return _internal_mutable_address();
}
inline const std::string& Peer::_internal_address() const {
  return address_.Get();
}
inline void Peer::_internal_set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Peer::set_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Peer.address)
}
inline void Peer::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Peer.address)
}
inline void Peer::set_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Peer.address)
}
inline std::string* Peer::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Peer::release_address() {
  // @@protoc_insertion_point(field_release:fantasybit.Peer.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Peer::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Peer.address)
}

// optional uint32 port = 30;
inline bool Peer::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Peer::has_port() const {
  return _internal_has_port();
}
inline void Peer::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Peer::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Peer::port() const {
  // @@protoc_insertion_point(field_get:fantasybit.Peer.port)
  return _internal_port();
}
inline void Peer::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
}
inline void Peer::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:fantasybit.Peer.port)
}

// optional .fantasybit.Peer.IsListening is_listening = 40;
inline bool Peer::_internal_has_is_listening() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Peer::has_is_listening() const {
  return _internal_has_is_listening();
}
inline void Peer::clear_is_listening() {
  is_listening_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::fantasybit::Peer_IsListening Peer::_internal_is_listening() const {
  return static_cast< ::fantasybit::Peer_IsListening >(is_listening_);
}
inline ::fantasybit::Peer_IsListening Peer::is_listening() const {
  // @@protoc_insertion_point(field_get:fantasybit.Peer.is_listening)
  return _internal_is_listening();
}
inline void Peer::_internal_set_is_listening(::fantasybit::Peer_IsListening value) {
  assert(::fantasybit::Peer_IsListening_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  is_listening_ = value;
}
inline void Peer::set_is_listening(::fantasybit::Peer_IsListening value) {
  _internal_set_is_listening(value);
  // @@protoc_insertion_point(field_set:fantasybit.Peer.is_listening)
}

// -------------------------------------------------------------------

// SessionId

// optional .fantasybit.SessionId.NetworkID network_id = 1;
inline bool SessionId::_internal_has_network_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SessionId::has_network_id() const {
  return _internal_has_network_id();
}
inline void SessionId::clear_network_id() {
  network_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::fantasybit::SessionId_NetworkID SessionId::_internal_network_id() const {
  return static_cast< ::fantasybit::SessionId_NetworkID >(network_id_);
}
inline ::fantasybit::SessionId_NetworkID SessionId::network_id() const {
  // @@protoc_insertion_point(field_get:fantasybit.SessionId.network_id)
  return _internal_network_id();
}
inline void SessionId::_internal_set_network_id(::fantasybit::SessionId_NetworkID value) {
  assert(::fantasybit::SessionId_NetworkID_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  network_id_ = value;
}
inline void SessionId::set_network_id(::fantasybit::SessionId_NetworkID value) {
  _internal_set_network_id(value);
  // @@protoc_insertion_point(field_set:fantasybit.SessionId.network_id)
}

// optional uint32 wire_version = 10;
inline bool SessionId::_internal_has_wire_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SessionId::has_wire_version() const {
  return _internal_has_wire_version();
}
inline void SessionId::clear_wire_version() {
  wire_version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionId::_internal_wire_version() const {
  return wire_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionId::wire_version() const {
  // @@protoc_insertion_point(field_get:fantasybit.SessionId.wire_version)
  return _internal_wire_version();
}
inline void SessionId::_internal_set_wire_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  wire_version_ = value;
}
inline void SessionId::set_wire_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wire_version(value);
  // @@protoc_insertion_point(field_set:fantasybit.SessionId.wire_version)
}

// optional uint32 start_time = 20;
inline bool SessionId::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SessionId::has_start_time() const {
  return _internal_has_start_time();
}
inline void SessionId::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionId::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionId::start_time() const {
  // @@protoc_insertion_point(field_get:fantasybit.SessionId.start_time)
  return _internal_start_time();
}
inline void SessionId::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  start_time_ = value;
}
inline void SessionId::set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:fantasybit.SessionId.start_time)
}

// optional bytes uuid = 30;
inline bool SessionId::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionId::has_uuid() const {
  return _internal_has_uuid();
}
inline void SessionId::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionId::uuid() const {
  // @@protoc_insertion_point(field_get:fantasybit.SessionId.uuid)
  return _internal_uuid();
}
inline void SessionId::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:fantasybit.SessionId.uuid)
}
inline std::string* SessionId::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.SessionId.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& SessionId::_internal_uuid() const {
  return uuid_.Get();
}
inline void SessionId::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionId::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.SessionId.uuid)
}
inline void SessionId::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.SessionId.uuid)
}
inline void SessionId::set_uuid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SessionId.uuid)
}
inline std::string* SessionId::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionId::release_uuid() {
  // @@protoc_insertion_point(field_release:fantasybit.SessionId.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionId::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SessionId.uuid)
}

// -------------------------------------------------------------------

// WirePeer

// optional .fantasybit.SessionId session_id = 10;
inline bool WirePeer::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || session_id_ != nullptr);
  return value;
}
inline bool WirePeer::has_session_id() const {
  return _internal_has_session_id();
}
inline void WirePeer::clear_session_id() {
  if (session_id_ != nullptr) session_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::SessionId& WirePeer::_internal_session_id() const {
  const ::fantasybit::SessionId* p = session_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::SessionId*>(
      &::fantasybit::_SessionId_default_instance_);
}
inline const ::fantasybit::SessionId& WirePeer::session_id() const {
  // @@protoc_insertion_point(field_get:fantasybit.WirePeer.session_id)
  return _internal_session_id();
}
inline void WirePeer::unsafe_arena_set_allocated_session_id(
    ::fantasybit::SessionId* session_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id_);
  }
  session_id_ = session_id;
  if (session_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.WirePeer.session_id)
}
inline ::fantasybit::SessionId* WirePeer::release_session_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::SessionId* temp = session_id_;
  session_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::SessionId* WirePeer::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_release:fantasybit.WirePeer.session_id)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::SessionId* temp = session_id_;
  session_id_ = nullptr;
  return temp;
}
inline ::fantasybit::SessionId* WirePeer::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  if (session_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::SessionId>(GetArena());
    session_id_ = p;
  }
  return session_id_;
}
inline ::fantasybit::SessionId* WirePeer::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WirePeer.session_id)
  return _internal_mutable_session_id();
}
inline void WirePeer::set_allocated_session_id(::fantasybit::SessionId* session_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete session_id_;
  }
  if (session_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session_id);
    if (message_arena != submessage_arena) {
      session_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_ = session_id;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WirePeer.session_id)
}

// optional .fantasybit.Peer peer = 20;
inline bool WirePeer::_internal_has_peer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || peer_ != nullptr);
  return value;
}
inline bool WirePeer::has_peer() const {
  return _internal_has_peer();
}
inline void WirePeer::clear_peer() {
  if (peer_ != nullptr) peer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::Peer& WirePeer::_internal_peer() const {
  const ::fantasybit::Peer* p = peer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::Peer*>(
      &::fantasybit::_Peer_default_instance_);
}
inline const ::fantasybit::Peer& WirePeer::peer() const {
  // @@protoc_insertion_point(field_get:fantasybit.WirePeer.peer)
  return _internal_peer();
}
inline void WirePeer::unsafe_arena_set_allocated_peer(
    ::fantasybit::Peer* peer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  peer_ = peer;
  if (peer) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.WirePeer.peer)
}
inline ::fantasybit::Peer* WirePeer::release_peer() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::Peer* temp = peer_;
  peer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::Peer* WirePeer::unsafe_arena_release_peer() {
  // @@protoc_insertion_point(field_release:fantasybit.WirePeer.peer)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::fantasybit::Peer* WirePeer::_internal_mutable_peer() {
  _has_bits_[0] |= 0x00000002u;
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::Peer>(GetArena());
    peer_ = p;
  }
  return peer_;
}
inline ::fantasybit::Peer* WirePeer::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WirePeer.peer)
  return _internal_mutable_peer();
}
inline void WirePeer::set_allocated_peer(::fantasybit::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete peer_;
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(peer);
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WirePeer.peer)
}

// -------------------------------------------------------------------

// MsgIntro

// optional .fantasybit.WirePeer iam = 10;
inline bool MsgIntro::_internal_has_iam() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || iam_ != nullptr);
  return value;
}
inline bool MsgIntro::has_iam() const {
  return _internal_has_iam();
}
inline void MsgIntro::clear_iam() {
  if (iam_ != nullptr) iam_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::WirePeer& MsgIntro::_internal_iam() const {
  const ::fantasybit::WirePeer* p = iam_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::WirePeer*>(
      &::fantasybit::_WirePeer_default_instance_);
}
inline const ::fantasybit::WirePeer& MsgIntro::iam() const {
  // @@protoc_insertion_point(field_get:fantasybit.MsgIntro.iam)
  return _internal_iam();
}
inline void MsgIntro::unsafe_arena_set_allocated_iam(
    ::fantasybit::WirePeer* iam) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iam_);
  }
  iam_ = iam;
  if (iam) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.MsgIntro.iam)
}
inline ::fantasybit::WirePeer* MsgIntro::release_iam() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::WirePeer* temp = iam_;
  iam_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::WirePeer* MsgIntro::unsafe_arena_release_iam() {
  // @@protoc_insertion_point(field_release:fantasybit.MsgIntro.iam)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::WirePeer* temp = iam_;
  iam_ = nullptr;
  return temp;
}
inline ::fantasybit::WirePeer* MsgIntro::_internal_mutable_iam() {
  _has_bits_[0] |= 0x00000001u;
  if (iam_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::WirePeer>(GetArena());
    iam_ = p;
  }
  return iam_;
}
inline ::fantasybit::WirePeer* MsgIntro::mutable_iam() {
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgIntro.iam)
  return _internal_mutable_iam();
}
inline void MsgIntro::set_allocated_iam(::fantasybit::WirePeer* iam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete iam_;
  }
  if (iam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(iam);
    if (message_arena != submessage_arena) {
      iam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iam, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  iam_ = iam;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MsgIntro.iam)
}

// optional .fantasybit.WirePeer youare = 20;
inline bool MsgIntro::_internal_has_youare() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || youare_ != nullptr);
  return value;
}
inline bool MsgIntro::has_youare() const {
  return _internal_has_youare();
}
inline void MsgIntro::clear_youare() {
  if (youare_ != nullptr) youare_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::WirePeer& MsgIntro::_internal_youare() const {
  const ::fantasybit::WirePeer* p = youare_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::WirePeer*>(
      &::fantasybit::_WirePeer_default_instance_);
}
inline const ::fantasybit::WirePeer& MsgIntro::youare() const {
  // @@protoc_insertion_point(field_get:fantasybit.MsgIntro.youare)
  return _internal_youare();
}
inline void MsgIntro::unsafe_arena_set_allocated_youare(
    ::fantasybit::WirePeer* youare) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(youare_);
  }
  youare_ = youare;
  if (youare) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.MsgIntro.youare)
}
inline ::fantasybit::WirePeer* MsgIntro::release_youare() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::WirePeer* temp = youare_;
  youare_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::WirePeer* MsgIntro::unsafe_arena_release_youare() {
  // @@protoc_insertion_point(field_release:fantasybit.MsgIntro.youare)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::WirePeer* temp = youare_;
  youare_ = nullptr;
  return temp;
}
inline ::fantasybit::WirePeer* MsgIntro::_internal_mutable_youare() {
  _has_bits_[0] |= 0x00000002u;
  if (youare_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::WirePeer>(GetArena());
    youare_ = p;
  }
  return youare_;
}
inline ::fantasybit::WirePeer* MsgIntro::mutable_youare() {
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgIntro.youare)
  return _internal_mutable_youare();
}
inline void MsgIntro::set_allocated_youare(::fantasybit::WirePeer* youare) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete youare_;
  }
  if (youare) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(youare);
    if (message_arena != submessage_arena) {
      youare = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, youare, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  youare_ = youare;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MsgIntro.youare)
}

// repeated .fantasybit.Peer everyone = 30;
inline int MsgIntro::_internal_everyone_size() const {
  return everyone_.size();
}
inline int MsgIntro::everyone_size() const {
  return _internal_everyone_size();
}
inline void MsgIntro::clear_everyone() {
  everyone_.Clear();
}
inline ::fantasybit::Peer* MsgIntro::mutable_everyone(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgIntro.everyone)
  return everyone_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Peer >*
MsgIntro::mutable_everyone() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.MsgIntro.everyone)
  return &everyone_;
}
inline const ::fantasybit::Peer& MsgIntro::_internal_everyone(int index) const {
  return everyone_.Get(index);
}
inline const ::fantasybit::Peer& MsgIntro::everyone(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.MsgIntro.everyone)
  return _internal_everyone(index);
}
inline ::fantasybit::Peer* MsgIntro::_internal_add_everyone() {
  return everyone_.Add();
}
inline ::fantasybit::Peer* MsgIntro::add_everyone() {
  // @@protoc_insertion_point(field_add:fantasybit.MsgIntro.everyone)
  return _internal_add_everyone();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Peer >&
MsgIntro::everyone() const {
  // @@protoc_insertion_point(field_list:fantasybit.MsgIntro.everyone)
  return everyone_;
}

// -------------------------------------------------------------------

// ChainHead

// optional int32 height = 10;
inline bool ChainHead::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChainHead::has_height() const {
  return _internal_has_height();
}
inline void ChainHead::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChainHead::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChainHead::height() const {
  // @@protoc_insertion_point(field_get:fantasybit.ChainHead.height)
  return _internal_height();
}
inline void ChainHead::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void ChainHead::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:fantasybit.ChainHead.height)
}

// optional int32 weight = 20;
inline bool ChainHead::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChainHead::has_weight() const {
  return _internal_has_weight();
}
inline void ChainHead::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChainHead::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChainHead::weight() const {
  // @@protoc_insertion_point(field_get:fantasybit.ChainHead.weight)
  return _internal_weight();
}
inline void ChainHead::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  weight_ = value;
}
inline void ChainHead::set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:fantasybit.ChainHead.weight)
}

// optional bytes id = 30;
inline bool ChainHead::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChainHead::has_id() const {
  return _internal_has_id();
}
inline void ChainHead::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChainHead::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.ChainHead.id)
  return _internal_id();
}
inline void ChainHead::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fantasybit.ChainHead.id)
}
inline std::string* ChainHead::mutable_id() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ChainHead.id)
  return _internal_mutable_id();
}
inline const std::string& ChainHead::_internal_id() const {
  return id_.Get();
}
inline void ChainHead::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChainHead::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ChainHead.id)
}
inline void ChainHead::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.ChainHead.id)
}
inline void ChainHead::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ChainHead.id)
}
inline std::string* ChainHead::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChainHead::release_id() {
  // @@protoc_insertion_point(field_release:fantasybit.ChainHead.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChainHead::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ChainHead.id)
}

// -------------------------------------------------------------------

// PeerChainStatus

// optional .fantasybit.PeerChainStatus.ChainState chain_state = 1;
inline bool PeerChainStatus::_internal_has_chain_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PeerChainStatus::has_chain_state() const {
  return _internal_has_chain_state();
}
inline void PeerChainStatus::clear_chain_state() {
  chain_state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::fantasybit::PeerChainStatus_ChainState PeerChainStatus::_internal_chain_state() const {
  return static_cast< ::fantasybit::PeerChainStatus_ChainState >(chain_state_);
}
inline ::fantasybit::PeerChainStatus_ChainState PeerChainStatus::chain_state() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.chain_state)
  return _internal_chain_state();
}
inline void PeerChainStatus::_internal_set_chain_state(::fantasybit::PeerChainStatus_ChainState value) {
  assert(::fantasybit::PeerChainStatus_ChainState_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  chain_state_ = value;
}
inline void PeerChainStatus::set_chain_state(::fantasybit::PeerChainStatus_ChainState value) {
  _internal_set_chain_state(value);
  // @@protoc_insertion_point(field_set:fantasybit.PeerChainStatus.chain_state)
}

// optional .fantasybit.ChainHead last_dea = 10;
inline bool PeerChainStatus::_internal_has_last_dea() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || last_dea_ != nullptr);
  return value;
}
inline bool PeerChainStatus::has_last_dea() const {
  return _internal_has_last_dea();
}
inline void PeerChainStatus::clear_last_dea() {
  if (last_dea_ != nullptr) last_dea_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::ChainHead& PeerChainStatus::_internal_last_dea() const {
  const ::fantasybit::ChainHead* p = last_dea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ChainHead*>(
      &::fantasybit::_ChainHead_default_instance_);
}
inline const ::fantasybit::ChainHead& PeerChainStatus::last_dea() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.last_dea)
  return _internal_last_dea();
}
inline void PeerChainStatus::unsafe_arena_set_allocated_last_dea(
    ::fantasybit::ChainHead* last_dea) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_dea_);
  }
  last_dea_ = last_dea;
  if (last_dea) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.PeerChainStatus.last_dea)
}
inline ::fantasybit::ChainHead* PeerChainStatus::release_last_dea() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::ChainHead* temp = last_dea_;
  last_dea_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ChainHead* PeerChainStatus::unsafe_arena_release_last_dea() {
  // @@protoc_insertion_point(field_release:fantasybit.PeerChainStatus.last_dea)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::ChainHead* temp = last_dea_;
  last_dea_ = nullptr;
  return temp;
}
inline ::fantasybit::ChainHead* PeerChainStatus::_internal_mutable_last_dea() {
  _has_bits_[0] |= 0x00000001u;
  if (last_dea_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ChainHead>(GetArena());
    last_dea_ = p;
  }
  return last_dea_;
}
inline ::fantasybit::ChainHead* PeerChainStatus::mutable_last_dea() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PeerChainStatus.last_dea)
  return _internal_mutable_last_dea();
}
inline void PeerChainStatus::set_allocated_last_dea(::fantasybit::ChainHead* last_dea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete last_dea_;
  }
  if (last_dea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(last_dea);
    if (message_arena != submessage_arena) {
      last_dea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_dea, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_dea_ = last_dea;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PeerChainStatus.last_dea)
}

// optional .fantasybit.ChainHead last_irreversible = 20;
inline bool PeerChainStatus::_internal_has_last_irreversible() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || last_irreversible_ != nullptr);
  return value;
}
inline bool PeerChainStatus::has_last_irreversible() const {
  return _internal_has_last_irreversible();
}
inline void PeerChainStatus::clear_last_irreversible() {
  if (last_irreversible_ != nullptr) last_irreversible_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::ChainHead& PeerChainStatus::_internal_last_irreversible() const {
  const ::fantasybit::ChainHead* p = last_irreversible_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ChainHead*>(
      &::fantasybit::_ChainHead_default_instance_);
}
inline const ::fantasybit::ChainHead& PeerChainStatus::last_irreversible() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.last_irreversible)
  return _internal_last_irreversible();
}
inline void PeerChainStatus::unsafe_arena_set_allocated_last_irreversible(
    ::fantasybit::ChainHead* last_irreversible) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_irreversible_);
  }
  last_irreversible_ = last_irreversible;
  if (last_irreversible) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.PeerChainStatus.last_irreversible)
}
inline ::fantasybit::ChainHead* PeerChainStatus::release_last_irreversible() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::ChainHead* temp = last_irreversible_;
  last_irreversible_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ChainHead* PeerChainStatus::unsafe_arena_release_last_irreversible() {
  // @@protoc_insertion_point(field_release:fantasybit.PeerChainStatus.last_irreversible)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::ChainHead* temp = last_irreversible_;
  last_irreversible_ = nullptr;
  return temp;
}
inline ::fantasybit::ChainHead* PeerChainStatus::_internal_mutable_last_irreversible() {
  _has_bits_[0] |= 0x00000002u;
  if (last_irreversible_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ChainHead>(GetArena());
    last_irreversible_ = p;
  }
  return last_irreversible_;
}
inline ::fantasybit::ChainHead* PeerChainStatus::mutable_last_irreversible() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PeerChainStatus.last_irreversible)
  return _internal_mutable_last_irreversible();
}
inline void PeerChainStatus::set_allocated_last_irreversible(::fantasybit::ChainHead* last_irreversible) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete last_irreversible_;
  }
  if (last_irreversible) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(last_irreversible);
    if (message_arena != submessage_arena) {
      last_irreversible = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_irreversible, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_irreversible_ = last_irreversible;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PeerChainStatus.last_irreversible)
}

// optional uint32 mempool_count = 30;
inline bool PeerChainStatus::_internal_has_mempool_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PeerChainStatus::has_mempool_count() const {
  return _internal_has_mempool_count();
}
inline void PeerChainStatus::clear_mempool_count() {
  mempool_count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerChainStatus::_internal_mempool_count() const {
  return mempool_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerChainStatus::mempool_count() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.mempool_count)
  return _internal_mempool_count();
}
inline void PeerChainStatus::_internal_set_mempool_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  mempool_count_ = value;
}
inline void PeerChainStatus::set_mempool_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mempool_count(value);
  // @@protoc_insertion_point(field_set:fantasybit.PeerChainStatus.mempool_count)
}

// optional uint32 mempool_size = 40;
inline bool PeerChainStatus::_internal_has_mempool_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PeerChainStatus::has_mempool_size() const {
  return _internal_has_mempool_size();
}
inline void PeerChainStatus::clear_mempool_size() {
  mempool_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerChainStatus::_internal_mempool_size() const {
  return mempool_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerChainStatus::mempool_size() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.mempool_size)
  return _internal_mempool_size();
}
inline void PeerChainStatus::_internal_set_mempool_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mempool_size_ = value;
}
inline void PeerChainStatus::set_mempool_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mempool_size(value);
  // @@protoc_insertion_point(field_set:fantasybit.PeerChainStatus.mempool_size)
}

// optional uint64 last_block_timestamp = 50;
inline bool PeerChainStatus::_internal_has_last_block_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PeerChainStatus::has_last_block_timestamp() const {
  return _internal_has_last_block_timestamp();
}
inline void PeerChainStatus::clear_last_block_timestamp() {
  last_block_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PeerChainStatus::_internal_last_block_timestamp() const {
  return last_block_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PeerChainStatus::last_block_timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.last_block_timestamp)
  return _internal_last_block_timestamp();
}
inline void PeerChainStatus::_internal_set_last_block_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  last_block_timestamp_ = value;
}
inline void PeerChainStatus::set_last_block_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_block_timestamp(value);
  // @@protoc_insertion_point(field_set:fantasybit.PeerChainStatus.last_block_timestamp)
}

// optional uint64 last_tx_timestamp = 60;
inline bool PeerChainStatus::_internal_has_last_tx_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PeerChainStatus::has_last_tx_timestamp() const {
  return _internal_has_last_tx_timestamp();
}
inline void PeerChainStatus::clear_last_tx_timestamp() {
  last_tx_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PeerChainStatus::_internal_last_tx_timestamp() const {
  return last_tx_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PeerChainStatus::last_tx_timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.last_tx_timestamp)
  return _internal_last_tx_timestamp();
}
inline void PeerChainStatus::_internal_set_last_tx_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  last_tx_timestamp_ = value;
}
inline void PeerChainStatus::set_last_tx_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_tx_timestamp(value);
  // @@protoc_insertion_point(field_set:fantasybit.PeerChainStatus.last_tx_timestamp)
}

// -------------------------------------------------------------------

// MsgAlive

// optional .fantasybit.PeerChainStatus peer_status = 30;
inline bool MsgAlive::_internal_has_peer_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || peer_status_ != nullptr);
  return value;
}
inline bool MsgAlive::has_peer_status() const {
  return _internal_has_peer_status();
}
inline void MsgAlive::clear_peer_status() {
  if (peer_status_ != nullptr) peer_status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::PeerChainStatus& MsgAlive::_internal_peer_status() const {
  const ::fantasybit::PeerChainStatus* p = peer_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::PeerChainStatus*>(
      &::fantasybit::_PeerChainStatus_default_instance_);
}
inline const ::fantasybit::PeerChainStatus& MsgAlive::peer_status() const {
  // @@protoc_insertion_point(field_get:fantasybit.MsgAlive.peer_status)
  return _internal_peer_status();
}
inline void MsgAlive::unsafe_arena_set_allocated_peer_status(
    ::fantasybit::PeerChainStatus* peer_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_status_);
  }
  peer_status_ = peer_status;
  if (peer_status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.MsgAlive.peer_status)
}
inline ::fantasybit::PeerChainStatus* MsgAlive::release_peer_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::PeerChainStatus* temp = peer_status_;
  peer_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::PeerChainStatus* MsgAlive::unsafe_arena_release_peer_status() {
  // @@protoc_insertion_point(field_release:fantasybit.MsgAlive.peer_status)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::PeerChainStatus* temp = peer_status_;
  peer_status_ = nullptr;
  return temp;
}
inline ::fantasybit::PeerChainStatus* MsgAlive::_internal_mutable_peer_status() {
  _has_bits_[0] |= 0x00000001u;
  if (peer_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::PeerChainStatus>(GetArena());
    peer_status_ = p;
  }
  return peer_status_;
}
inline ::fantasybit::PeerChainStatus* MsgAlive::mutable_peer_status() {
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgAlive.peer_status)
  return _internal_mutable_peer_status();
}
inline void MsgAlive::set_allocated_peer_status(::fantasybit::PeerChainStatus* peer_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete peer_status_;
  }
  if (peer_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(peer_status);
    if (message_arena != submessage_arena) {
      peer_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  peer_status_ = peer_status;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MsgAlive.peer_status)
}

// optional uint64 timestamp = 40;
inline bool MsgAlive::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MsgAlive::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void MsgAlive::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgAlive::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgAlive::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.MsgAlive.timestamp)
  return _internal_timestamp();
}
inline void MsgAlive::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void MsgAlive::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fantasybit.MsgAlive.timestamp)
}

// -------------------------------------------------------------------

// MsgHello

// optional .fantasybit.MsgIntro update = 10;
inline bool MsgHello::_internal_has_update() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || update_ != nullptr);
  return value;
}
inline bool MsgHello::has_update() const {
  return _internal_has_update();
}
inline void MsgHello::clear_update() {
  if (update_ != nullptr) update_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::MsgIntro& MsgHello::_internal_update() const {
  const ::fantasybit::MsgIntro* p = update_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::MsgIntro*>(
      &::fantasybit::_MsgIntro_default_instance_);
}
inline const ::fantasybit::MsgIntro& MsgHello::update() const {
  // @@protoc_insertion_point(field_get:fantasybit.MsgHello.update)
  return _internal_update();
}
inline void MsgHello::unsafe_arena_set_allocated_update(
    ::fantasybit::MsgIntro* update) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_);
  }
  update_ = update;
  if (update) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.MsgHello.update)
}
inline ::fantasybit::MsgIntro* MsgHello::release_update() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::MsgIntro* temp = update_;
  update_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::MsgIntro* MsgHello::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_release:fantasybit.MsgHello.update)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::MsgIntro* temp = update_;
  update_ = nullptr;
  return temp;
}
inline ::fantasybit::MsgIntro* MsgHello::_internal_mutable_update() {
  _has_bits_[0] |= 0x00000001u;
  if (update_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::MsgIntro>(GetArena());
    update_ = p;
  }
  return update_;
}
inline ::fantasybit::MsgIntro* MsgHello::mutable_update() {
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgHello.update)
  return _internal_mutable_update();
}
inline void MsgHello::set_allocated_update(::fantasybit::MsgIntro* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete update_;
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MsgHello.update)
}

// repeated .fantasybit.WirePeer connections = 20;
inline int MsgHello::_internal_connections_size() const {
  return connections_.size();
}
inline int MsgHello::connections_size() const {
  return _internal_connections_size();
}
inline void MsgHello::clear_connections() {
  connections_.Clear();
}
inline ::fantasybit::WirePeer* MsgHello::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgHello.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::WirePeer >*
MsgHello::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.MsgHello.connections)
  return &connections_;
}
inline const ::fantasybit::WirePeer& MsgHello::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::fantasybit::WirePeer& MsgHello::connections(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.MsgHello.connections)
  return _internal_connections(index);
}
inline ::fantasybit::WirePeer* MsgHello::_internal_add_connections() {
  return connections_.Add();
}
inline ::fantasybit::WirePeer* MsgHello::add_connections() {
  // @@protoc_insertion_point(field_add:fantasybit.MsgHello.connections)
  return _internal_add_connections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::WirePeer >&
MsgHello::connections() const {
  // @@protoc_insertion_point(field_list:fantasybit.MsgHello.connections)
  return connections_;
}

// -------------------------------------------------------------------

// WireMsg

// optional .fantasybit.MsgType type = 10;
inline bool WireMsg::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WireMsg::has_type() const {
  return _internal_has_type();
}
inline void WireMsg::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::fantasybit::MsgType WireMsg::_internal_type() const {
  return static_cast< ::fantasybit::MsgType >(type_);
}
inline ::fantasybit::MsgType WireMsg::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.WireMsg.type)
  return _internal_type();
}
inline void WireMsg::_internal_set_type(::fantasybit::MsgType value) {
  assert(::fantasybit::MsgType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void WireMsg::set_type(::fantasybit::MsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:fantasybit.WireMsg.type)
}

// optional .fantasybit.MsgIntro intro = 20;
inline bool WireMsg::_internal_has_intro() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || intro_ != nullptr);
  return value;
}
inline bool WireMsg::has_intro() const {
  return _internal_has_intro();
}
inline void WireMsg::clear_intro() {
  if (intro_ != nullptr) intro_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::MsgIntro& WireMsg::_internal_intro() const {
  const ::fantasybit::MsgIntro* p = intro_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::MsgIntro*>(
      &::fantasybit::_MsgIntro_default_instance_);
}
inline const ::fantasybit::MsgIntro& WireMsg::intro() const {
  // @@protoc_insertion_point(field_get:fantasybit.WireMsg.intro)
  return _internal_intro();
}
inline void WireMsg::unsafe_arena_set_allocated_intro(
    ::fantasybit::MsgIntro* intro) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intro_);
  }
  intro_ = intro;
  if (intro) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.WireMsg.intro)
}
inline ::fantasybit::MsgIntro* WireMsg::release_intro() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::MsgIntro* temp = intro_;
  intro_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::MsgIntro* WireMsg::unsafe_arena_release_intro() {
  // @@protoc_insertion_point(field_release:fantasybit.WireMsg.intro)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::MsgIntro* temp = intro_;
  intro_ = nullptr;
  return temp;
}
inline ::fantasybit::MsgIntro* WireMsg::_internal_mutable_intro() {
  _has_bits_[0] |= 0x00000001u;
  if (intro_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::MsgIntro>(GetArena());
    intro_ = p;
  }
  return intro_;
}
inline ::fantasybit::MsgIntro* WireMsg::mutable_intro() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WireMsg.intro)
  return _internal_mutable_intro();
}
inline void WireMsg::set_allocated_intro(::fantasybit::MsgIntro* intro) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete intro_;
  }
  if (intro) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(intro);
    if (message_arena != submessage_arena) {
      intro = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intro, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  intro_ = intro;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WireMsg.intro)
}

// optional .fantasybit.MsgHello hello = 30;
inline bool WireMsg::_internal_has_hello() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || hello_ != nullptr);
  return value;
}
inline bool WireMsg::has_hello() const {
  return _internal_has_hello();
}
inline void WireMsg::clear_hello() {
  if (hello_ != nullptr) hello_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::MsgHello& WireMsg::_internal_hello() const {
  const ::fantasybit::MsgHello* p = hello_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::MsgHello*>(
      &::fantasybit::_MsgHello_default_instance_);
}
inline const ::fantasybit::MsgHello& WireMsg::hello() const {
  // @@protoc_insertion_point(field_get:fantasybit.WireMsg.hello)
  return _internal_hello();
}
inline void WireMsg::unsafe_arena_set_allocated_hello(
    ::fantasybit::MsgHello* hello) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hello_);
  }
  hello_ = hello;
  if (hello) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.WireMsg.hello)
}
inline ::fantasybit::MsgHello* WireMsg::release_hello() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::MsgHello* temp = hello_;
  hello_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::MsgHello* WireMsg::unsafe_arena_release_hello() {
  // @@protoc_insertion_point(field_release:fantasybit.WireMsg.hello)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::MsgHello* temp = hello_;
  hello_ = nullptr;
  return temp;
}
inline ::fantasybit::MsgHello* WireMsg::_internal_mutable_hello() {
  _has_bits_[0] |= 0x00000002u;
  if (hello_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::MsgHello>(GetArena());
    hello_ = p;
  }
  return hello_;
}
inline ::fantasybit::MsgHello* WireMsg::mutable_hello() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WireMsg.hello)
  return _internal_mutable_hello();
}
inline void WireMsg::set_allocated_hello(::fantasybit::MsgHello* hello) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hello_;
  }
  if (hello) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hello);
    if (message_arena != submessage_arena) {
      hello = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hello, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hello_ = hello;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WireMsg.hello)
}

// optional .fantasybit.MsgAlive alive = 40;
inline bool WireMsg::_internal_has_alive() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || alive_ != nullptr);
  return value;
}
inline bool WireMsg::has_alive() const {
  return _internal_has_alive();
}
inline void WireMsg::clear_alive() {
  if (alive_ != nullptr) alive_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::MsgAlive& WireMsg::_internal_alive() const {
  const ::fantasybit::MsgAlive* p = alive_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::MsgAlive*>(
      &::fantasybit::_MsgAlive_default_instance_);
}
inline const ::fantasybit::MsgAlive& WireMsg::alive() const {
  // @@protoc_insertion_point(field_get:fantasybit.WireMsg.alive)
  return _internal_alive();
}
inline void WireMsg::unsafe_arena_set_allocated_alive(
    ::fantasybit::MsgAlive* alive) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alive_);
  }
  alive_ = alive;
  if (alive) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.WireMsg.alive)
}
inline ::fantasybit::MsgAlive* WireMsg::release_alive() {
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::MsgAlive* temp = alive_;
  alive_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::MsgAlive* WireMsg::unsafe_arena_release_alive() {
  // @@protoc_insertion_point(field_release:fantasybit.WireMsg.alive)
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::MsgAlive* temp = alive_;
  alive_ = nullptr;
  return temp;
}
inline ::fantasybit::MsgAlive* WireMsg::_internal_mutable_alive() {
  _has_bits_[0] |= 0x00000004u;
  if (alive_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::MsgAlive>(GetArena());
    alive_ = p;
  }
  return alive_;
}
inline ::fantasybit::MsgAlive* WireMsg::mutable_alive() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WireMsg.alive)
  return _internal_mutable_alive();
}
inline void WireMsg::set_allocated_alive(::fantasybit::MsgAlive* alive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete alive_;
  }
  if (alive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(alive);
    if (message_arena != submessage_arena) {
      alive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  alive_ = alive;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WireMsg.alive)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fantasybit::Peer_IsListening> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::Peer_IsListening>() {
  return ::fantasybit::Peer_IsListening_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::SessionId_NetworkID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::SessionId_NetworkID>() {
  return ::fantasybit::SessionId_NetworkID_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::PeerChainStatus_ChainState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::PeerChainStatus_ChainState>() {
  return ::fantasybit::PeerChainStatus_ChainState_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::MsgType>() {
  return ::fantasybit::MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_P2PData_2eproto
