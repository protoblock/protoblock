// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StateData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StateData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* BlockMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderBoardMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderBoardMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* FantasyNameBalMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FantasyNameBalMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* FantasyNameState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FantasyNameState_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeekGameStatusMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeekGameStatusMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* InGameProjMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InGameProjMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameResultsMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameResultsMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStatusMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStatusMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamProjMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamProjMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamResultMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamResultMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerProjMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerProjMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerResultMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerResultMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerGameStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerGameStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* AwardMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AwardMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* PnlMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PnlMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMarketState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMarketState_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitBookMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitBookMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketTicMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketTicMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderFillMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderFillMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalStateMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalStateMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbstate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbstate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MerkleTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MerkleTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewPlayerModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewPlayerModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* WsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGlobalStateRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGlobalStateRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetScheduleRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetScheduleRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNameRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNameRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pk2FnameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pk2FnameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pk2FnameRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pk2FnameRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameStatusRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameStatusRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllNamesRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllNamesRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRoster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRoster_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameDataRoster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameDataRoster_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCurrRostersRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCurrRostersRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROWMarket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROWMarket_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetROWMarketRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetROWMarketRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDepthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDepthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDepthRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDepthRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllOdersSymbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllOdersSymbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllOdersFname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllOdersFname_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOrdersRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOrdersRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOrdersReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOrdersReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetProjectionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetProjectionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerProj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerProj_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjByName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjByName_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetProjectionRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetProjectionRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bootstrap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bootstrap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_StateData_2eproto() {
  protobuf_AddDesc_StateData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StateData.proto");
  GOOGLE_CHECK(file != NULL);
  BlockMeta_descriptor_ = file->message_type(0);
  static const int BlockMeta_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMeta, blocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMeta, trmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMeta, txmetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMeta, pbstateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMeta, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMeta, next_),
  };
  BlockMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMeta_descriptor_,
      BlockMeta::default_instance_,
      BlockMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMeta));
  TxMeta_descriptor_ = file->message_type(1);
  static const int TxMeta_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMeta, blocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMeta, txnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMeta, txtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMeta, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMeta, fantasy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMeta, id_),
  };
  TxMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxMeta_descriptor_,
      TxMeta::default_instance_,
      TxMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxMeta));
  TrMeta_descriptor_ = file->message_type(2);
  static const int TrMeta_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrMeta, blocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrMeta, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrMeta, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrMeta, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrMeta, gamemetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrMeta, datametaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrMeta, txmetaid_),
  };
  TrMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrMeta_descriptor_,
      TrMeta::default_instance_,
      TrMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrMeta));
  GameMeta_descriptor_ = file->message_type(3);
  static const int GameMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMeta, txmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMeta, gamedata_),
  };
  GameMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameMeta_descriptor_,
      GameMeta::default_instance_,
      GameMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameMeta));
  DataMeta_descriptor_ = file->message_type(4);
  static const int DataMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMeta, txmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMeta, data_),
  };
  DataMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataMeta_descriptor_,
      DataMeta::default_instance_,
      DataMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataMeta));
  LeaderBoardMeta_descriptor_ = file->message_type(5);
  static const int LeaderBoardMeta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderBoardMeta, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderBoardMeta, fnbalmetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderBoardMeta, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderBoardMeta, next_),
  };
  LeaderBoardMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderBoardMeta_descriptor_,
      LeaderBoardMeta::default_instance_,
      LeaderBoardMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderBoardMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderBoardMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderBoardMeta));
  FantasyNameBalMeta_descriptor_ = file->message_type(6);
  static const int FantasyNameBalMeta_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, txmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, trmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, stake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, awardmetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, pnlmetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, next_),
  };
  FantasyNameBalMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FantasyNameBalMeta_descriptor_,
      FantasyNameBalMeta::default_instance_,
      FantasyNameBalMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBalMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyNameBalMeta));
  FantasyNameState_descriptor_ = file->message_type(7);
  static const int FantasyNameState_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameState, fantasynamebalmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameState, posmetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameState, ordersmetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameState, projmetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameState, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameState, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameState, txmetaid_),
  };
  FantasyNameState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FantasyNameState_descriptor_,
      FantasyNameState::default_instance_,
      FantasyNameState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyNameState));
  WeekGameStatusMeta_descriptor_ = file->message_type(8);
  static const int WeekGameStatusMeta_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekGameStatusMeta, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekGameStatusMeta, gameresultmetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekGameStatusMeta, ingameprojmetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekGameStatusMeta, opengamestatusroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekGameStatusMeta, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekGameStatusMeta, next_),
  };
  WeekGameStatusMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeekGameStatusMeta_descriptor_,
      WeekGameStatusMeta::default_instance_,
      WeekGameStatusMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekGameStatusMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekGameStatusMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeekGameStatusMeta));
  InGameProjMeta_descriptor_ = file->message_type(9);
  static const int InGameProjMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InGameProjMeta, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InGameProjMeta, gamestatusmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InGameProjMeta, homeprojmeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InGameProjMeta, awayprojmeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InGameProjMeta, gamedatametaid_),
  };
  InGameProjMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InGameProjMeta_descriptor_,
      InGameProjMeta::default_instance_,
      InGameProjMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InGameProjMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InGameProjMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InGameProjMeta));
  GameResultsMeta_descriptor_ = file->message_type(10);
  static const int GameResultsMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResultsMeta, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResultsMeta, gamestatusmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResultsMeta, homeresultmeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResultsMeta, awayresultmeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResultsMeta, resultdatametaid_),
  };
  GameResultsMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameResultsMeta_descriptor_,
      GameResultsMeta::default_instance_,
      GameResultsMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResultsMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResultsMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameResultsMeta));
  GameStatusMeta_descriptor_ = file->message_type(11);
  static const int GameStatusMeta_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusMeta, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusMeta, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusMeta, gameinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusMeta, gamesatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusMeta, gamemetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusMeta, datametaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusMeta, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusMeta, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusMeta, season_),
  };
  GameStatusMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStatusMeta_descriptor_,
      GameStatusMeta::default_instance_,
      GameStatusMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStatusMeta));
  TeamProjMeta_descriptor_ = file->message_type(12);
  static const int TeamProjMeta_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProjMeta, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProjMeta, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProjMeta, kickofftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProjMeta, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProjMeta, gameplayerprojmetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProjMeta, gamedatametaid_),
  };
  TeamProjMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamProjMeta_descriptor_,
      TeamProjMeta::default_instance_,
      TeamProjMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProjMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProjMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamProjMeta));
  TeamResultMeta_descriptor_ = file->message_type(13);
  static const int TeamResultMeta_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamResultMeta, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamResultMeta, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamResultMeta, kickofftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamResultMeta, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamResultMeta, playerresultmetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamResultMeta, resultdatametaid_),
  };
  TeamResultMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamResultMeta_descriptor_,
      TeamResultMeta::default_instance_,
      TeamResultMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamResultMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamResultMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamResultMeta));
  GamePlayerProjMeta_descriptor_ = file->message_type(14);
  static const int GamePlayerProjMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerProjMeta, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerProjMeta, gamestatusmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerProjMeta, projmetaplayerroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerProjMeta, posmetaplayerroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerProjMeta, gamedatametaid_),
  };
  GamePlayerProjMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerProjMeta_descriptor_,
      GamePlayerProjMeta::default_instance_,
      GamePlayerProjMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerProjMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerProjMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerProjMeta));
  ProjMeta_descriptor_ = file->message_type(15);
  static const int ProjMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjMeta, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjMeta, proj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjMeta, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjMeta, txmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjMeta, prev_),
  };
  ProjMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProjMeta_descriptor_,
      ProjMeta::default_instance_,
      ProjMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProjMeta));
  PosMeta_descriptor_ = file->message_type(16);
  static const int PosMeta_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosMeta, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosMeta, qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosMeta, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosMeta, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosMeta, txmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosMeta, prev_),
  };
  PosMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosMeta_descriptor_,
      PosMeta::default_instance_,
      PosMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosMeta));
  PlayerResultMeta_descriptor_ = file->message_type(17);
  static const int PlayerResultMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResultMeta, playergamestatsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResultMeta, gamestatusmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResultMeta, awardmetaplayerroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResultMeta, pnlmetaplayerroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResultMeta, resultdatametaid_),
  };
  PlayerResultMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerResultMeta_descriptor_,
      PlayerResultMeta::default_instance_,
      PlayerResultMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResultMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResultMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerResultMeta));
  PlayerGameStats_descriptor_ = file->message_type(18);
  static const int PlayerGameStats_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameStats, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameStats, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameStats, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameStats, gameid_),
  };
  PlayerGameStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerGameStats_descriptor_,
      PlayerGameStats::default_instance_,
      PlayerGameStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerGameStats));
  AwardMeta_descriptor_ = file->message_type(19);
  static const int AwardMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardMeta, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardMeta, proj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardMeta, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardMeta, projmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardMeta, playergamestatsid_),
  };
  AwardMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AwardMeta_descriptor_,
      AwardMeta::default_instance_,
      AwardMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AwardMeta));
  PnlMeta_descriptor_ = file->message_type(20);
  static const int PnlMeta_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnlMeta, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnlMeta, qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnlMeta, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnlMeta, pnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnlMeta, posmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnlMeta, playergamestatsid_),
  };
  PnlMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PnlMeta_descriptor_,
      PnlMeta::default_instance_,
      PnlMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnlMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnlMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PnlMeta));
  PlayerMarketState_descriptor_ = file->message_type(21);
  static const int PlayerMarketState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketState, limitbookmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketState, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketState, marketticmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketState, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketState, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketState, next_),
  };
  PlayerMarketState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMarketState_descriptor_,
      PlayerMarketState::default_instance_,
      PlayerMarketState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMarketState));
  LimitBookMeta_descriptor_ = file->message_type(22);
  static const int LimitBookMeta_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitBookMeta, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitBookMeta, bidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitBookMeta, asksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitBookMeta, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitBookMeta, bidordermetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitBookMeta, askordermetaroot_),
  };
  LimitBookMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitBookMeta_descriptor_,
      LimitBookMeta::default_instance_,
      LimitBookMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitBookMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitBookMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitBookMeta));
  MarketTicMeta_descriptor_ = file->message_type(23);
  static const int MarketTicMeta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicMeta, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicMeta, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicMeta, orderfillhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicMeta, prev_),
  };
  MarketTicMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketTicMeta_descriptor_,
      MarketTicMeta::default_instance_,
      MarketTicMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketTicMeta));
  OrderMeta_descriptor_ = file->message_type(24);
  static const int OrderMeta_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, refnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, fname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, buyside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, txmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, orderfillmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, prev_),
  };
  OrderMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderMeta_descriptor_,
      OrderMeta::default_instance_,
      OrderMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderMeta));
  OrderFillMeta_descriptor_ = file->message_type(25);
  static const int OrderFillMeta_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFillMeta, refnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFillMeta, fname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFillMeta, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFillMeta, fillprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFillMeta, fillsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFillMeta, buyside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFillMeta, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFillMeta, txmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFillMeta, prev_),
  };
  OrderFillMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderFillMeta_descriptor_,
      OrderFillMeta::default_instance_,
      OrderFillMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFillMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderFillMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderFillMeta));
  GlobalStateMeta_descriptor_ = file->message_type(26);
  static const int GlobalStateMeta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStateMeta, globalstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStateMeta, trmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStateMeta, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStateMeta, next_),
  };
  GlobalStateMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalStateMeta_descriptor_,
      GlobalStateMeta::default_instance_,
      GlobalStateMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStateMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStateMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalStateMeta));
  PlayerMeta_descriptor_ = file->message_type(27);
  static const int PlayerMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMeta, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMeta, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMeta, player_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMeta, datametaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMeta, prev_),
  };
  PlayerMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMeta_descriptor_,
      PlayerMeta::default_instance_,
      PlayerMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMeta));
  TeamMeta_descriptor_ = file->message_type(28);
  static const int TeamMeta_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMeta, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMeta, playermetaidroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMeta, prev_),
  };
  TeamMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMeta_descriptor_,
      TeamMeta::default_instance_,
      TeamMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMeta));
  pbstate_descriptor_ = file->message_type(29);
  static const int pbstate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbstate, schedulestateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbstate, leaderboardstateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbstate, projstateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbstate, posstateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbstate, orderstateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbstate, marketstateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbstate, globalstateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbstate, teamstatemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbstate, fantasynamestateid_),
  };
  pbstate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbstate_descriptor_,
      pbstate::default_instance_,
      pbstate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbstate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbstate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbstate));
  MerkleTree_descriptor_ = file->message_type(30);
  static const int MerkleTree_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerkleTree, root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerkleTree, leaves_),
  };
  MerkleTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MerkleTree_descriptor_,
      MerkleTree::default_instance_,
      MerkleTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerkleTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerkleTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MerkleTree));
  NewPlayerModel_descriptor_ = file->message_type(31);
  static const int NewPlayerModel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerModel, players_),
  };
  NewPlayerModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewPlayerModel_descriptor_,
      NewPlayerModel::default_instance_,
      NewPlayerModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewPlayerModel));
  WsReq_descriptor_ = file->message_type(32);
  static const int WsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsReq, ctype_),
  };
  WsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WsReq_descriptor_,
      WsReq::default_instance_,
      WsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsReq, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsReq, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WsReq));
  WSReply_descriptor_ = file->message_type(33);
  static const int WSReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSReply, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSReply, ctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSReply, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSReply, data_),
  };
  WSReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSReply_descriptor_,
      WSReply::default_instance_,
      WSReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSReply, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSReply, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSReply));
  GetGlobalStateRep_descriptor_ = file->message_type(34);
  static const int GetGlobalStateRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGlobalStateRep, globalstate_),
  };
  GetGlobalStateRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGlobalStateRep_descriptor_,
      GetGlobalStateRep::default_instance_,
      GetGlobalStateRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGlobalStateRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGlobalStateRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGlobalStateRep));
  GetScheduleRep_descriptor_ = file->message_type(35);
  static const int GetScheduleRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScheduleRep, scheduledata_),
  };
  GetScheduleRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetScheduleRep_descriptor_,
      GetScheduleRep::default_instance_,
      GetScheduleRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScheduleRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScheduleRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetScheduleRep));
  CheckNameReq_descriptor_ = file->message_type(36);
  static const int CheckNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, fantasy_name_),
  };
  CheckNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNameReq_descriptor_,
      CheckNameReq::default_instance_,
      CheckNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNameReq));
  CheckNameRep_descriptor_ = file->message_type(37);
  static const int CheckNameRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRep, isavail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRep, req_),
  };
  CheckNameRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNameRep_descriptor_,
      CheckNameRep::default_instance_,
      CheckNameRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNameRep));
  Pk2FnameReq_descriptor_ = file->message_type(38);
  static const int Pk2FnameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk2FnameReq, pk_),
  };
  Pk2FnameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pk2FnameReq_descriptor_,
      Pk2FnameReq::default_instance_,
      Pk2FnameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk2FnameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk2FnameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pk2FnameReq));
  Pk2FnameRep_descriptor_ = file->message_type(39);
  static const int Pk2FnameRep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk2FnameRep, fname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk2FnameRep, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk2FnameRep, fnb_),
  };
  Pk2FnameRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pk2FnameRep_descriptor_,
      Pk2FnameRep::default_instance_,
      Pk2FnameRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk2FnameRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk2FnameRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pk2FnameRep));
  SubscribeReq_descriptor_ = file->message_type(40);
  static const int SubscribeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeReq, fchash_),
  };
  SubscribeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeReq_descriptor_,
      SubscribeReq::default_instance_,
      SubscribeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeReq));
  NameStatusReq_descriptor_ = file->message_type(41);
  static const int NameStatusReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStatusReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStatusReq, pk_),
  };
  NameStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameStatusReq_descriptor_,
      NameStatusReq::default_instance_,
      NameStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameStatusReq));
  NameStatusRep_descriptor_ = file->message_type(42);
  static const int NameStatusRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStatusRep, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStatusRep, req_),
  };
  NameStatusRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameStatusRep_descriptor_,
      NameStatusRep::default_instance_,
      NameStatusRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStatusRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStatusRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameStatusRep));
  GetAllNamesRep_descriptor_ = file->message_type(43);
  static const int GetAllNamesRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllNamesRep, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllNamesRep, fnb_),
  };
  GetAllNamesRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllNamesRep_descriptor_,
      GetAllNamesRep::default_instance_,
      GetAllNamesRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllNamesRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllNamesRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllNamesRep));
  TeamRoster_descriptor_ = file->message_type(44);
  static const int TeamRoster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRoster, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRoster, players_),
  };
  TeamRoster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRoster_descriptor_,
      TeamRoster::default_instance_,
      TeamRoster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRoster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRoster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRoster));
  GameDataRoster_descriptor_ = file->message_type(45);
  static const int GameDataRoster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDataRoster, game_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDataRoster, homeroster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDataRoster, awayroster_),
  };
  GameDataRoster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameDataRoster_descriptor_,
      GameDataRoster::default_instance_,
      GameDataRoster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDataRoster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDataRoster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameDataRoster));
  GetCurrRostersRep_descriptor_ = file->message_type(46);
  static const int GetCurrRostersRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrRostersRep, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrRostersRep, gamerosters_),
  };
  GetCurrRostersRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCurrRostersRep_descriptor_,
      GetCurrRostersRep::default_instance_,
      GetCurrRostersRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrRostersRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrRostersRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCurrRostersRep));
  ROWMarket_descriptor_ = file->message_type(47);
  static const int ROWMarket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROWMarket, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROWMarket, quote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROWMarket, playerdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROWMarket, ohlc_),
  };
  ROWMarket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROWMarket_descriptor_,
      ROWMarket::default_instance_,
      ROWMarket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROWMarket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROWMarket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROWMarket));
  GetROWMarketRep_descriptor_ = file->message_type(48);
  static const int GetROWMarketRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetROWMarketRep, rowmarket_),
  };
  GetROWMarketRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetROWMarketRep_descriptor_,
      GetROWMarketRep::default_instance_,
      GetROWMarketRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetROWMarketRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetROWMarketRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetROWMarketRep));
  GetDepthReq_descriptor_ = file->message_type(49);
  static const int GetDepthReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepthReq, pid_),
  };
  GetDepthReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDepthReq_descriptor_,
      GetDepthReq::default_instance_,
      GetDepthReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepthReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepthReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDepthReq));
  GetDepthRep_descriptor_ = file->message_type(50);
  static const int GetDepthRep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepthRep, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepthRep, depthitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepthRep, rowmarket_),
  };
  GetDepthRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDepthRep_descriptor_,
      GetDepthRep::default_instance_,
      GetDepthRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepthRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepthRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDepthRep));
  AllOdersSymbol_descriptor_ = file->message_type(51);
  static const int AllOdersSymbol_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersSymbol, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersSymbol, netqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersSymbol, netprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersSymbol, avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersSymbol, pnl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersSymbol, orders_),
  };
  AllOdersSymbol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllOdersSymbol_descriptor_,
      AllOdersSymbol::default_instance_,
      AllOdersSymbol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersSymbol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersSymbol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllOdersSymbol));
  AllOdersFname_descriptor_ = file->message_type(52);
  static const int AllOdersFname_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersFname, fname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersFname, pidorders_),
  };
  AllOdersFname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllOdersFname_descriptor_,
      AllOdersFname::default_instance_,
      AllOdersFname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersFname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOdersFname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllOdersFname));
  GetOrdersRep_descriptor_ = file->message_type(53);
  static const int GetOrdersRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrdersRep, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrdersRep, oorders_),
  };
  GetOrdersRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOrdersRep_descriptor_,
      GetOrdersRep::default_instance_,
      GetOrdersRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrdersRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrdersRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOrdersRep));
  GetOrdersReq_descriptor_ = file->message_type(54);
  static const int GetOrdersReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrdersReq, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrdersReq, fname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrdersReq, fchash_),
  };
  GetOrdersReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOrdersReq_descriptor_,
      GetOrdersReq::default_instance_,
      GetOrdersReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrdersReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrdersReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOrdersReq));
  GetProjectionReq_descriptor_ = file->message_type(55);
  static const int GetProjectionReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProjectionReq, fname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProjectionReq, getavg_),
  };
  GetProjectionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetProjectionReq_descriptor_,
      GetProjectionReq::default_instance_,
      GetProjectionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProjectionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProjectionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetProjectionReq));
  PlayerProj_descriptor_ = file->message_type(56);
  static const int PlayerProj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProj, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProj, proj_),
  };
  PlayerProj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerProj_descriptor_,
      PlayerProj::default_instance_,
      PlayerProj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerProj));
  ProjByName_descriptor_ = file->message_type(57);
  static const int ProjByName_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjByName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjByName, playerproj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjByName, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjByName, block_),
  };
  ProjByName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProjByName_descriptor_,
      ProjByName::default_instance_,
      ProjByName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjByName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjByName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProjByName));
  GetProjectionRep_descriptor_ = file->message_type(58);
  static const int GetProjectionRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProjectionRep, projs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProjectionRep, avg_),
  };
  GetProjectionRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetProjectionRep_descriptor_,
      GetProjectionRep::default_instance_,
      GetProjectionRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProjectionRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProjectionRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetProjectionRep));
  KeyValue_descriptor_ = file->message_type(59);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValue));
  Bootstrap_descriptor_ = file->message_type(60);
  static const int Bootstrap_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, blocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, gamemetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, playermetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, fnamemetaroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, previd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, gameresultroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, posmetaroot_),
  };
  Bootstrap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bootstrap_descriptor_,
      Bootstrap::default_instance_,
      Bootstrap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bootstrap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bootstrap));
  CType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StateData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMeta_descriptor_, &BlockMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxMeta_descriptor_, &TxMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrMeta_descriptor_, &TrMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameMeta_descriptor_, &GameMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataMeta_descriptor_, &DataMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderBoardMeta_descriptor_, &LeaderBoardMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyNameBalMeta_descriptor_, &FantasyNameBalMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyNameState_descriptor_, &FantasyNameState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeekGameStatusMeta_descriptor_, &WeekGameStatusMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InGameProjMeta_descriptor_, &InGameProjMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameResultsMeta_descriptor_, &GameResultsMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStatusMeta_descriptor_, &GameStatusMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamProjMeta_descriptor_, &TeamProjMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamResultMeta_descriptor_, &TeamResultMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerProjMeta_descriptor_, &GamePlayerProjMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProjMeta_descriptor_, &ProjMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosMeta_descriptor_, &PosMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerResultMeta_descriptor_, &PlayerResultMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerGameStats_descriptor_, &PlayerGameStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AwardMeta_descriptor_, &AwardMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PnlMeta_descriptor_, &PnlMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMarketState_descriptor_, &PlayerMarketState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitBookMeta_descriptor_, &LimitBookMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketTicMeta_descriptor_, &MarketTicMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderMeta_descriptor_, &OrderMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderFillMeta_descriptor_, &OrderFillMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalStateMeta_descriptor_, &GlobalStateMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMeta_descriptor_, &PlayerMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMeta_descriptor_, &TeamMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbstate_descriptor_, &pbstate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MerkleTree_descriptor_, &MerkleTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewPlayerModel_descriptor_, &NewPlayerModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WsReq_descriptor_, &WsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSReply_descriptor_, &WSReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGlobalStateRep_descriptor_, &GetGlobalStateRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetScheduleRep_descriptor_, &GetScheduleRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNameReq_descriptor_, &CheckNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNameRep_descriptor_, &CheckNameRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pk2FnameReq_descriptor_, &Pk2FnameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pk2FnameRep_descriptor_, &Pk2FnameRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeReq_descriptor_, &SubscribeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameStatusReq_descriptor_, &NameStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameStatusRep_descriptor_, &NameStatusRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllNamesRep_descriptor_, &GetAllNamesRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRoster_descriptor_, &TeamRoster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameDataRoster_descriptor_, &GameDataRoster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCurrRostersRep_descriptor_, &GetCurrRostersRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROWMarket_descriptor_, &ROWMarket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetROWMarketRep_descriptor_, &GetROWMarketRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDepthReq_descriptor_, &GetDepthReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDepthRep_descriptor_, &GetDepthRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllOdersSymbol_descriptor_, &AllOdersSymbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllOdersFname_descriptor_, &AllOdersFname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOrdersRep_descriptor_, &GetOrdersRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOrdersReq_descriptor_, &GetOrdersReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetProjectionReq_descriptor_, &GetProjectionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerProj_descriptor_, &PlayerProj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProjByName_descriptor_, &ProjByName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetProjectionRep_descriptor_, &GetProjectionRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bootstrap_descriptor_, &Bootstrap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StateData_2eproto() {
  delete BlockMeta::default_instance_;
  delete BlockMeta_reflection_;
  delete TxMeta::default_instance_;
  delete TxMeta_reflection_;
  delete TrMeta::default_instance_;
  delete TrMeta_reflection_;
  delete GameMeta::default_instance_;
  delete GameMeta_reflection_;
  delete DataMeta::default_instance_;
  delete DataMeta_reflection_;
  delete LeaderBoardMeta::default_instance_;
  delete LeaderBoardMeta_reflection_;
  delete FantasyNameBalMeta::default_instance_;
  delete FantasyNameBalMeta_reflection_;
  delete FantasyNameState::default_instance_;
  delete FantasyNameState_reflection_;
  delete WeekGameStatusMeta::default_instance_;
  delete WeekGameStatusMeta_reflection_;
  delete InGameProjMeta::default_instance_;
  delete InGameProjMeta_reflection_;
  delete GameResultsMeta::default_instance_;
  delete GameResultsMeta_reflection_;
  delete GameStatusMeta::default_instance_;
  delete GameStatusMeta_reflection_;
  delete TeamProjMeta::default_instance_;
  delete TeamProjMeta_reflection_;
  delete TeamResultMeta::default_instance_;
  delete TeamResultMeta_reflection_;
  delete GamePlayerProjMeta::default_instance_;
  delete GamePlayerProjMeta_reflection_;
  delete ProjMeta::default_instance_;
  delete ProjMeta_reflection_;
  delete PosMeta::default_instance_;
  delete PosMeta_reflection_;
  delete PlayerResultMeta::default_instance_;
  delete PlayerResultMeta_reflection_;
  delete PlayerGameStats::default_instance_;
  delete PlayerGameStats_reflection_;
  delete AwardMeta::default_instance_;
  delete AwardMeta_reflection_;
  delete PnlMeta::default_instance_;
  delete PnlMeta_reflection_;
  delete PlayerMarketState::default_instance_;
  delete PlayerMarketState_reflection_;
  delete LimitBookMeta::default_instance_;
  delete LimitBookMeta_reflection_;
  delete MarketTicMeta::default_instance_;
  delete MarketTicMeta_reflection_;
  delete OrderMeta::default_instance_;
  delete OrderMeta_reflection_;
  delete OrderFillMeta::default_instance_;
  delete OrderFillMeta_reflection_;
  delete GlobalStateMeta::default_instance_;
  delete GlobalStateMeta_reflection_;
  delete PlayerMeta::default_instance_;
  delete PlayerMeta_reflection_;
  delete TeamMeta::default_instance_;
  delete TeamMeta_reflection_;
  delete pbstate::default_instance_;
  delete pbstate_reflection_;
  delete MerkleTree::default_instance_;
  delete MerkleTree_reflection_;
  delete NewPlayerModel::default_instance_;
  delete NewPlayerModel_reflection_;
  delete WsReq::default_instance_;
  delete WsReq_reflection_;
  delete WSReply::default_instance_;
  delete WSReply_reflection_;
  delete GetGlobalStateRep::default_instance_;
  delete GetGlobalStateRep_reflection_;
  delete GetScheduleRep::default_instance_;
  delete GetScheduleRep_reflection_;
  delete CheckNameReq::default_instance_;
  delete CheckNameReq_reflection_;
  delete CheckNameRep::default_instance_;
  delete CheckNameRep_reflection_;
  delete Pk2FnameReq::default_instance_;
  delete Pk2FnameReq_reflection_;
  delete Pk2FnameRep::default_instance_;
  delete Pk2FnameRep_reflection_;
  delete SubscribeReq::default_instance_;
  delete SubscribeReq_reflection_;
  delete NameStatusReq::default_instance_;
  delete NameStatusReq_reflection_;
  delete NameStatusRep::default_instance_;
  delete NameStatusRep_reflection_;
  delete GetAllNamesRep::default_instance_;
  delete GetAllNamesRep_reflection_;
  delete TeamRoster::default_instance_;
  delete TeamRoster_reflection_;
  delete GameDataRoster::default_instance_;
  delete GameDataRoster_reflection_;
  delete GetCurrRostersRep::default_instance_;
  delete GetCurrRostersRep_reflection_;
  delete ROWMarket::default_instance_;
  delete ROWMarket_reflection_;
  delete GetROWMarketRep::default_instance_;
  delete GetROWMarketRep_reflection_;
  delete GetDepthReq::default_instance_;
  delete GetDepthReq_reflection_;
  delete GetDepthRep::default_instance_;
  delete GetDepthRep_reflection_;
  delete AllOdersSymbol::default_instance_;
  delete AllOdersSymbol_reflection_;
  delete AllOdersFname::default_instance_;
  delete AllOdersFname_reflection_;
  delete GetOrdersRep::default_instance_;
  delete GetOrdersRep_reflection_;
  delete GetOrdersReq::default_instance_;
  delete GetOrdersReq_reflection_;
  delete GetProjectionReq::default_instance_;
  delete GetProjectionReq_reflection_;
  delete PlayerProj::default_instance_;
  delete PlayerProj_reflection_;
  delete ProjByName::default_instance_;
  delete ProjByName_reflection_;
  delete GetProjectionRep::default_instance_;
  delete GetProjectionRep_reflection_;
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete Bootstrap::default_instance_;
  delete Bootstrap_reflection_;
}

void protobuf_AddDesc_StateData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fantasybit::protobuf_AddDesc_ProtoData_2eproto();
  ::fantasybit::protobuf_AddDesc_NameData_2eproto();
  ::fantasybit::protobuf_AddDesc_StaticData_2eproto();
  ::fantasybit::protobuf_AddDesc_StatusData_2eproto();
  ::fantasybit::protobuf_AddDesc_ExData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017StateData.proto\022\nfantasybit\032\017ProtoData"
    ".proto\032\016NameData.proto\032\020StaticData.proto"
    "\032\020StatusData.proto\032\014ExData.proto\"r\n\tBloc"
    "kMeta\022\020\n\010blocknum\030( \001(\005\022\020\n\010trmetaid\0302 \001("
    "\014\022\022\n\ntxmetaroot\030\n \001(\014\022\021\n\tpbstateid\030< \001(\014"
    "\022\014\n\004prev\030\024 \001(\014\022\014\n\004next\030\036 \001(\014\"\227\001\n\006TxMeta\022"
    "\020\n\010blocknum\030\n \001(\005\022\r\n\005txnum\030\024 \001(\005\022%\n\006txty"
    "pe\030( \001(\0162\025.fantasybit.TransType\022#\n\002tx\0302 "
    "\001(\0132\027.fantasybit.Transaction\022\024\n\014fantasy_"
    "name\030< \001(\t\022\n\n\002id\030F \001(\014\"\230\001\n\006TrMeta\022\020\n\010blo"
    "cknum\030\n \001(\005\022 \n\004type\030( \001(\0162\022.fantasybit.T"
    "rType\022\016\n\006season\0302 \001(\r\022\014\n\004week\030< \001(\r\022\024\n\014g"
    "amemetaroot\030F \001(\014\022\024\n\014datametaroot\030P \001(\014\022"
    "\020\n\010txmetaid\030d \001(\014\"D\n\010GameMeta\022\020\n\010txmetai"
    "d\030\n \001(\014\022&\n\010gamedata\030\024 \001(\0132\024.fantasybit.G"
    "ameData\"<\n\010DataMeta\022\020\n\010txmetaid\030\n \001(\014\022\036\n"
    "\004data\030\024 \001(\0132\020.fantasybit.Data\"R\n\017LeaderB"
    "oardMeta\022\014\n\004week\030\n \001(\r\022\025\n\rfnbalmetaroot\030"
    "\024 \001(\014\022\014\n\004prev\030\036 \001(\014\022\014\n\004next\030( \001(\014\"\354\001\n\022Fa"
    "ntasyNameBalMeta\022\020\n\010txmetaid\030\n \001(\014\022\020\n\010tr"
    "metaid\030\024 \001(\014\022\014\n\004name\030\031 \001(\t\022\022\n\npublic_key"
    "\030\036 \001(\t\022\014\n\004bits\030# \001(\004\022\r\n\005stake\030( \001(\003\022\r\n\005b"
    "lock\030) \001(\005\022\r\n\005count\030* \001(\005\022\r\n\005nonce\030- \001(\004"
    "\022\025\n\rawardmetaroot\0302 \001(\014\022\023\n\013pnlmetaroot\030<"
    " \001(\014\022\014\n\004prev\030F \001(\014\022\014\n\004next\030P \001(\014\"\257\001\n\020Fan"
    "tasyNameState\022\014\n\004name\030\001 \001(\t\022\034\n\024fantasyna"
    "mebalmetaid\030\n \001(\014\022\023\n\013posmetaroot\030\024 \001(\014\022\026"
    "\n\016ordersmetaroot\030\036 \001(\014\022\024\n\014projmetaroot\030("
    " \001(\014\022\014\n\004prev\030F \001(\014\022\014\n\004next\030P \001(\014\022\020\n\010txme"
    "taid\0302 \001(\014\"\222\001\n\022WeekGameStatusMeta\022\014\n\004wee"
    "k\030\n \001(\r\022\032\n\022gameresultmetaroot\030\024 \001(\014\022\032\n\022i"
    "ngameprojmetaroot\030\036 \001(\014\022\032\n\022opengamestatu"
    "sroot\030( \001(\014\022\014\n\004prev\0302 \001(\014\022\014\n\004next\030< \001(\014\""
    "~\n\016InGameProjMeta\022\016\n\006gameid\030\024 \001(\t\022\030\n\020gam"
    "estatusmetaid\030( \001(\014\022\024\n\014homeprojmeta\030< \001("
    "\014\022\024\n\014awayprojmeta\030F \001(\014\022\026\n\016gamedatametai"
    "d\0302 \001(\014\"\205\001\n\017GameResultsMeta\022\016\n\006gameid\030\024 "
    "\001(\t\022\030\n\020gamestatusmetaid\030( \001(\014\022\026\n\016homeres"
    "ultmeta\030< \001(\014\022\026\n\016awayresultmeta\030F \001(\014\022\030\n"
    "\020resultdatametaid\0302 \001(\014\"\321\001\n\016GameStatusMe"
    "ta\022\n\n\002id\030\001 \001(\t\022\014\n\004week\030\002 \001(\005\022&\n\010gameinfo"
    "\030\n \001(\0132\024.fantasybit.GameInfo\022)\n\tgamesatu"
    "s\030\024 \001(\0132\026.fantasybit.GameStatus\022\022\n\ngamem"
    "etaid\030\036 \001(\014\022\022\n\ndatametaid\030( \001(\014\022\014\n\004prev\030"
    "2 \001(\014\022\014\n\004next\030< \001(\014\022\016\n\006season\030F \001(\005\"\207\001\n\014"
    "TeamProjMeta\022\016\n\006gameid\030\024 \001(\t\022\014\n\004team\030\036 \001"
    "(\t\022\023\n\013kickofftime\030( \001(\r\022\014\n\004week\0302 \001(\r\022\036\n"
    "\026gameplayerprojmetaroot\030< \001(\014\022\026\n\016gamedat"
    "ametaid\030F \001(\014\"\211\001\n\016TeamResultMeta\022\016\n\006game"
    "id\030\024 \001(\t\022\014\n\004team\030\036 \001(\t\022\023\n\013kickofftime\030( "
    "\001(\r\022\014\n\004week\0302 \001(\r\022\034\n\024playerresultmetaroo"
    "t\030< \001(\014\022\030\n\020resultdatametaid\030F \001(\014\"\217\001\n\022Ga"
    "mePlayerProjMeta\022\020\n\010playerid\030\024 \001(\t\022\030\n\020ga"
    "mestatusmetaid\030\036 \001(\014\022\032\n\022projmetaplayerro"
    "ot\030< \001(\014\022\031\n\021posmetaplayerroot\030F \001(\014\022\026\n\016g"
    "amedatametaid\030P \001(\014\"X\n\010ProjMeta\022\014\n\004name\030"
    "\n \001(\t\022\014\n\004proj\030\024 \001(\005\022\020\n\010playerid\030\036 \001(\t\022\020\n"
    "\010txmetaid\030( \001(\014\022\014\n\004prev\0302 \001(\014\"e\n\007PosMeta"
    "\022\014\n\004name\030\n \001(\t\022\013\n\003qty\030\024 \001(\005\022\r\n\005price\030\036 \001"
    "(\005\022\020\n\010playerid\030( \001(\t\022\020\n\010txmetaid\0302 \001(\014\022\014"
    "\n\004prev\030< \001(\014\"\231\001\n\020PlayerResultMeta\022\031\n\021pla"
    "yergamestatsid\030\n \001(\014\022\030\n\020gamestatusmetaid"
    "\030\036 \001(\014\022\033\n\023awardmetaplayerroot\030< \001(\014\022\031\n\021p"
    "nlmetaplayerroot\030F \001(\014\022\030\n\020resultdatameta"
    "id\030P \001(\014\"e\n\017PlayerGameStats\022\020\n\010playerid\030"
    "\024 \001(\t\022\016\n\006result\030( \001(\002\022 \n\005stats\0302 \001(\0132\021.f"
    "antasybit.Stats\022\016\n\006gameid\030< \001(\t\"e\n\tAward"
    "Meta\022\014\n\004name\030\n \001(\t\022\014\n\004proj\030\024 \001(\005\022\r\n\005awar"
    "d\030\036 \001(\004\022\022\n\nprojmetaid\030( \001(\014\022\031\n\021playergam"
    "estatsid\0302 \001(\014\"n\n\007PnlMeta\022\014\n\004name\030\n \001(\t\022"
    "\013\n\003qty\030\024 \001(\005\022\r\n\005price\030\036 \001(\005\022\013\n\003pnl\030( \001(\003"
    "\022\021\n\tposmetaid\0302 \001(\014\022\031\n\021playergamestatsid"
    "\030< \001(\014\"\203\001\n\021PlayerMarketState\022\027\n\017limitboo"
    "kmetaid\030\n \001(\014\022\020\n\010playerid\030\024 \001(\t\022\027\n\017marke"
    "tticmetaid\030\036 \001(\014\022\016\n\006locked\030\037 \001(\010\022\014\n\004prev"
    "\030( \001(\014\022\014\n\004next\0302 \001(\014\"\177\n\rLimitBookMeta\022\013\n"
    "\003bid\030\n \001(\005\022\017\n\007bidsize\030\024 \001(\005\022\017\n\007asksize\030\036"
    " \001(\005\022\013\n\003ask\030( \001(\005\022\030\n\020bidordermetaroot\0302 "
    "\001(\014\022\030\n\020askordermetaroot\030< \001(\014\"Q\n\rMarketT"
    "icMeta\022\r\n\005price\030\024 \001(\005\022\014\n\004size\030\036 \001(\005\022\025\n\ro"
    "rderfillhead\030( \001(\014\022\014\n\004prev\0302 \001(\014\"\266\001\n\tOrd"
    "erMeta\022\016\n\006refnum\030\001 \001(\005\022\r\n\005fname\030\n \001(\t\022\020\n"
    "\010playerid\030\024 \001(\t\022\017\n\007buyside\030\036 \001(\010\022\014\n\004size"
    "\030( \001(\005\022\r\n\005price\0302 \001(\005\022\020\n\010txmetaid\030< \001(\014\022"
    "\027\n\017orderfillmetaid\030F \001(\014\022\021\n\ttimestamp\030K "
    "\001(\005\022\014\n\004prev\030P \001(\014\"\251\001\n\rOrderFillMeta\022\016\n\006r"
    "efnum\030\001 \001(\005\022\r\n\005fname\030\n \001(\t\022\020\n\010playerid\030\017"
    " \001(\t\022\021\n\tfillprice\030\024 \001(\005\022\020\n\010fillsize\030\036 \001("
    "\005\022\017\n\007buyside\030# \001(\010\022\021\n\ttimestamp\030( \001(\004\022\020\n"
    "\010txmetaid\030< \001(\014\022\014\n\004prev\030F \001(\014\"m\n\017GlobalS"
    "tateMeta\022,\n\013globalstate\030\n \001(\0132\027.fantasyb"
    "it.GlobalState\022\020\n\010trmetaid\030\024 \001(\014\022\014\n\004prev"
    "\030\036 \001(\014\022\014\n\004next\030( \001(\014\"\236\001\n\nPlayerMeta\022\020\n\010p"
    "layerid\030\n \001(\t\022+\n\013player_base\030\024 \001(\0132\026.fan"
    "tasybit.PlayerBase\022/\n\rplayer_status\030\036 \001("
    "\0132\030.fantasybit.PlayerStatus\022\022\n\ndatametai"
    "d\030( \001(\014\022\014\n\004prev\0302 \001(\014\"B\n\010TeamMeta\022\016\n\006tea"
    "mid\030\n \001(\t\022\030\n\020playermetaidroot\030\024 \001(\014\022\014\n\004p"
    "rev\030\036 \001(\014\"\335\001\n\007pbstate\022\027\n\017schedulestateid"
    "\030\n \001(\014\022\032\n\022leaderboardstateid\030\024 \001(\014\022\023\n\013pr"
    "ojstateid\030\036 \001(\014\022\022\n\nposstateid\030# \001(\014\022\024\n\014o"
    "rderstateid\030( \001(\014\022\025\n\rmarketstateid\0302 \001(\014"
    "\022\025\n\rglobalstateid\030< \001(\014\022\024\n\014teamstatemid\030"
    "F \001(\014\022\032\n\022fantasynamestateid\030P \001(\014\"*\n\nMer"
    "kleTree\022\014\n\004root\030\n \001(\014\022\016\n\006leaves\030\024 \003(\014\"9\n"
    "\016NewPlayerModel\022\'\n\007players\030\n \003(\0132\026.fanta"
    "sybit.PlayerMeta\"D\n\005WsReq\022\017\n\007version\030\001 \001"
    "(\005\022 \n\005ctype\030\002 \001(\0162\021.fantasybit.CType*\010\010d"
    "\020\200\200\200\200\002\"t\n\007WSReply\022\017\n\007version\030\001 \001(\005\022 \n\005ct"
    "ype\030\002 \001(\0162\021.fantasybit.CType\022\036\n\003req\030\024 \001("
    "\0132\021.fantasybit.WsReq\022\014\n\004data\030\036 \001(\t*\010\010d\020\200"
    "\200\200\200\002\"\203\001\n\021GetGlobalStateRep\022,\n\013globalstat"
    "e\030\n \001(\0132\027.fantasybit.GlobalState2@\n\003rep\022"
    "\023.fantasybit.WSReply\030\204\007 \001(\0132\035.fantasybit"
    ".GetGlobalStateRep\"\177\n\016GetScheduleRep\022.\n\014"
    "scheduledata\030\n \001(\0132\030.fantasybit.Schedule"
    "Data2=\n\003rep\022\023.fantasybit.WSReply\030\216\007 \001(\0132"
    "\032.fantasybit.GetScheduleRep\"_\n\014CheckName"
    "Req\022\024\n\014fantasy_name\030\n \001(\t29\n\003req\022\021.fanta"
    "sybit.WsReq\030\310\001 \001(\0132\030.fantasybit.CheckNam"
    "eReq\"\203\001\n\014CheckNameRep\022\017\n\007isavail\030\n \001(\t\022%"
    "\n\003req\030\024 \001(\0132\030.fantasybit.CheckNameReq2;\n"
    "\003rep\022\023.fantasybit.WSReply\030\310\001 \001(\0132\030.fanta"
    "sybit.CheckNameRep\"S\n\013Pk2FnameReq\022\n\n\002pk\030"
    "\n \001(\t28\n\003req\022\021.fantasybit.WsReq\030\254\002 \001(\0132\027"
    ".fantasybit.Pk2FnameReq\"\247\001\n\013Pk2FnameRep\022"
    "\r\n\005fname\030\n \001(\t\022$\n\003req\030\024 \001(\0132\027.fantasybit"
    ".Pk2FnameReq\022\'\n\003fnb\030\036 \001(\0132\032.fantasybit.F"
    "antasyNameBal2:\n\003rep\022\023.fantasybit.WSRepl"
    "y\030\254\002 \001(\0132\027.fantasybit.Pk2FnameRep\"g\n\014Sub"
    "scribeReq\022\014\n\004name\030\n \001(\t\022\016\n\006fchash\030\036 \001(\0042"
    "9\n\003req\022\021.fantasybit.WsReq\030\336\002 \001(\0132\030.fanta"
    "sybit.SubscribeReq\"e\n\rNameStatusReq\022\014\n\004n"
    "ame\030\n \001(\t\022\n\n\002pk\030\024 \001(\t2:\n\003req\022\021.fantasybi"
    "t.WsReq\030\220\003 \001(\0132\031.fantasybit.NameStatusRe"
    "q\"\237\001\n\rNameStatusRep\022(\n\006status\030\n \001(\0162\030.fa"
    "ntasybit.MyNameStatus\022&\n\003req\030\024 \001(\0132\031.fan"
    "tasybit.NameStatusReq2<\n\003rep\022\023.fantasybi"
    "t.WSReply\030\220\003 \001(\0132\031.fantasybit.NameStatus"
    "Rep\"\207\001\n\016GetAllNamesRep\022\r\n\005names\030\n \003(\t\022\'\n"
    "\003fnb\030\024 \003(\0132\032.fantasybit.FantasyNameBal2="
    "\n\003rep\022\023.fantasybit.WSReply\030\364\003 \001(\0132\032.fant"
    "asybit.GetAllNamesRep\"E\n\nTeamRoster\022\016\n\006t"
    "eamid\030\n \001(\t\022\'\n\007players\030\024 \003(\0132\026.fantasybi"
    "t.PlayerData\"\221\001\n\016GameDataRoster\022\'\n\tgame_"
    "data\030\n \001(\0132\024.fantasybit.GameData\022*\n\nhome"
    "roster\030\024 \001(\0132\026.fantasybit.TeamRoster\022*\n\n"
    "awayroster\030\036 \001(\0132\026.fantasybit.TeamRoster"
    "\"\224\001\n\021GetCurrRostersRep\022\014\n\004week\030\n \001(\005\022/\n\013"
    "gamerosters\030\024 \003(\0132\032.fantasybit.GameDataR"
    "oster2@\n\003rep\022\023.fantasybit.WSReply\030\230\007 \001(\013"
    "2\035.fantasybit.GetCurrRostersRep\"\224\001\n\tROWM"
    "arket\022\013\n\003pid\030\n \001(\t\022&\n\005quote\030\036 \001(\0132\027.fant"
    "asybit.MarketQuote\022*\n\nplayerdata\030( \001(\0132\026"
    ".fantasybit.PlayerData\022&\n\004ohlc\0302 \001(\0132\030.f"
    "antasybit.ContractOHLC\"{\n\017GetROWMarketRe"
    "p\022(\n\trowmarket\030\n \003(\0132\025.fantasybit.ROWMar"
    "ket2>\n\003rep\022\023.fantasybit.WSReply\030\330\004 \001(\0132\033"
    ".fantasybit.GetROWMarketRep\"T\n\013GetDepthR"
    "eq\022\013\n\003pid\030\n \001(\t28\n\003req\022\021.fantasybit.WsRe"
    "q\030\274\005 \001(\0132\027.fantasybit.GetDepthReq\"\253\001\n\013Ge"
    "tDepthRep\022\013\n\003pid\030\n \001(\t\022)\n\ndepthitems\030\024 \003"
    "(\0132\025.fantasybit.DepthItem\022(\n\trowmarket\030\036"
    " \001(\0132\025.fantasybit.ROWMarket2:\n\003rep\022\023.fan"
    "tasybit.WSReply\030\274\005 \001(\0132\027.fantasybit.GetD"
    "epthRep\"\177\n\016AllOdersSymbol\022\016\n\006symbol\030\n \001("
    "\t\022\016\n\006netqty\030\036 \001(\005\022\020\n\010netprice\030( \001(\005\022\013\n\003a"
    "vg\0302 \001(\001\022\013\n\003pnl\030< \001(\001\022!\n\006orders\030\024 \003(\0132\021."
    "fantasybit.Order\"M\n\rAllOdersFname\022\r\n\005fna"
    "me\030\n \001(\t\022-\n\tpidorders\030\024 \003(\0132\032.fantasybit"
    ".AllOdersSymbol\"\236\001\n\014GetOrdersRep\022%\n\003req\030"
    "\n \001(\0132\030.fantasybit.GetOrdersReq\022*\n\007oorde"
    "rs\030\024 \001(\0132\031.fantasybit.AllOdersFname2;\n\003r"
    "ep\022\023.fantasybit.WSReply\030\240\006 \001(\0132\030.fantasy"
    "bit.GetOrdersRep\"x\n\014GetOrdersReq\022\016\n\006symb"
    "ol\030\n \001(\t\022\r\n\005fname\030\024 \001(\t\022\016\n\006fchash\030\036 \001(\0042"
    "9\n\003req\022\021.fantasybit.WsReq\030\240\006 \001(\0132\030.fanta"
    "sybit.GetOrdersReq\"p\n\020GetProjectionReq\022\r"
    "\n\005fname\030\024 \001(\t\022\016\n\006getavg\030\036 \001(\0102=\n\003req\022\021.f"
    "antasybit.WsReq\030\204\007 \001(\0132\034.fantasybit.GetP"
    "rojectionReq\",\n\nPlayerProj\022\020\n\010playerid\030\n"
    " \001(\t\022\014\n\004proj\030\024 \001(\005\"d\n\nProjByName\022\014\n\004name"
    "\030\n \001(\t\022*\n\nplayerproj\030\024 \003(\0132\026.fantasybit."
    "PlayerProj\022\r\n\005count\030( \001(\005\022\r\n\005block\0302 \001(\005"
    "\"\237\001\n\020GetProjectionRep\022%\n\005projs\030\024 \001(\0132\026.f"
    "antasybit.ProjByName\022#\n\003avg\030\036 \001(\0132\026.fant"
    "asybit.ProjByName2\?\n\003rep\022\023.fantasybit.WS"
    "Reply\030\254\007 \001(\0132\034.fantasybit.GetProjectionR"
    "ep\"&\n\010KeyValue\022\013\n\003key\030\n \001(\014\022\r\n\005value\030\024 \001"
    "(\014\"\312\001\n\tBootstrap\022\013\n\003key\030\001 \001(\t\022\020\n\010blocknu"
    "m\030\002 \001(\005\022\014\n\004week\030\003 \001(\005\022\016\n\006season\030\004 \001(\005\022\024\n"
    "\014gamemetaroot\030\n \001(\014\022\026\n\016playermetaroot\030\024 "
    "\001(\014\022\025\n\rfnamemetaroot\030\036 \001(\014\022\016\n\006previd\030( \001"
    "(\014\022\026\n\016gameresultroot\0302 \001(\014\022\023\n\013posmetaroo"
    "t\030< \001(\014*\214\002\n\005CType\022\010\n\004NONE\020\000\022\r\n\tCHECKNAME"
    "\020\001\022\t\n\005NEWTX\020\002\022\014\n\010PK2FNAME\020\003\022\r\n\tGETSTATUS"
    "\020\004\022\017\n\013GETALLNAMES\020\005\022\020\n\014GETROWMARKET\020\006\022\014\n"
    "\010GETDEPTH\020\007\022\r\n\tGETORDERS\020\010\022\020\n\014GETPOSITIO"
    "NS\020\t\022\022\n\016SUBSCRIBEFNAME\020\n\022\022\n\016GETGLOBALSTA"
    "TE\020\013\022\017\n\013GETSCHEDULE\020\014\022\021\n\rGETGAMEROSTER\020\r"
    "\022\022\n\016GETPROJECTIONS\020\017\022\020\n\014GETGAMESTART\020\020", 8038);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StateData.proto", &protobuf_RegisterTypes);
  BlockMeta::default_instance_ = new BlockMeta();
  TxMeta::default_instance_ = new TxMeta();
  TrMeta::default_instance_ = new TrMeta();
  GameMeta::default_instance_ = new GameMeta();
  DataMeta::default_instance_ = new DataMeta();
  LeaderBoardMeta::default_instance_ = new LeaderBoardMeta();
  FantasyNameBalMeta::default_instance_ = new FantasyNameBalMeta();
  FantasyNameState::default_instance_ = new FantasyNameState();
  WeekGameStatusMeta::default_instance_ = new WeekGameStatusMeta();
  InGameProjMeta::default_instance_ = new InGameProjMeta();
  GameResultsMeta::default_instance_ = new GameResultsMeta();
  GameStatusMeta::default_instance_ = new GameStatusMeta();
  TeamProjMeta::default_instance_ = new TeamProjMeta();
  TeamResultMeta::default_instance_ = new TeamResultMeta();
  GamePlayerProjMeta::default_instance_ = new GamePlayerProjMeta();
  ProjMeta::default_instance_ = new ProjMeta();
  PosMeta::default_instance_ = new PosMeta();
  PlayerResultMeta::default_instance_ = new PlayerResultMeta();
  PlayerGameStats::default_instance_ = new PlayerGameStats();
  AwardMeta::default_instance_ = new AwardMeta();
  PnlMeta::default_instance_ = new PnlMeta();
  PlayerMarketState::default_instance_ = new PlayerMarketState();
  LimitBookMeta::default_instance_ = new LimitBookMeta();
  MarketTicMeta::default_instance_ = new MarketTicMeta();
  OrderMeta::default_instance_ = new OrderMeta();
  OrderFillMeta::default_instance_ = new OrderFillMeta();
  GlobalStateMeta::default_instance_ = new GlobalStateMeta();
  PlayerMeta::default_instance_ = new PlayerMeta();
  TeamMeta::default_instance_ = new TeamMeta();
  pbstate::default_instance_ = new pbstate();
  MerkleTree::default_instance_ = new MerkleTree();
  NewPlayerModel::default_instance_ = new NewPlayerModel();
  WsReq::default_instance_ = new WsReq();
  WSReply::default_instance_ = new WSReply();
  GetGlobalStateRep::default_instance_ = new GetGlobalStateRep();
  GetScheduleRep::default_instance_ = new GetScheduleRep();
  CheckNameReq::default_instance_ = new CheckNameReq();
  CheckNameRep::default_instance_ = new CheckNameRep();
  Pk2FnameReq::default_instance_ = new Pk2FnameReq();
  Pk2FnameRep::default_instance_ = new Pk2FnameRep();
  SubscribeReq::default_instance_ = new SubscribeReq();
  NameStatusReq::default_instance_ = new NameStatusReq();
  NameStatusRep::default_instance_ = new NameStatusRep();
  GetAllNamesRep::default_instance_ = new GetAllNamesRep();
  TeamRoster::default_instance_ = new TeamRoster();
  GameDataRoster::default_instance_ = new GameDataRoster();
  GetCurrRostersRep::default_instance_ = new GetCurrRostersRep();
  ROWMarket::default_instance_ = new ROWMarket();
  GetROWMarketRep::default_instance_ = new GetROWMarketRep();
  GetDepthReq::default_instance_ = new GetDepthReq();
  GetDepthRep::default_instance_ = new GetDepthRep();
  AllOdersSymbol::default_instance_ = new AllOdersSymbol();
  AllOdersFname::default_instance_ = new AllOdersFname();
  GetOrdersRep::default_instance_ = new GetOrdersRep();
  GetOrdersReq::default_instance_ = new GetOrdersReq();
  GetProjectionReq::default_instance_ = new GetProjectionReq();
  PlayerProj::default_instance_ = new PlayerProj();
  ProjByName::default_instance_ = new ProjByName();
  GetProjectionRep::default_instance_ = new GetProjectionRep();
  KeyValue::default_instance_ = new KeyValue();
  Bootstrap::default_instance_ = new Bootstrap();
  BlockMeta::default_instance_->InitAsDefaultInstance();
  TxMeta::default_instance_->InitAsDefaultInstance();
  TrMeta::default_instance_->InitAsDefaultInstance();
  GameMeta::default_instance_->InitAsDefaultInstance();
  DataMeta::default_instance_->InitAsDefaultInstance();
  LeaderBoardMeta::default_instance_->InitAsDefaultInstance();
  FantasyNameBalMeta::default_instance_->InitAsDefaultInstance();
  FantasyNameState::default_instance_->InitAsDefaultInstance();
  WeekGameStatusMeta::default_instance_->InitAsDefaultInstance();
  InGameProjMeta::default_instance_->InitAsDefaultInstance();
  GameResultsMeta::default_instance_->InitAsDefaultInstance();
  GameStatusMeta::default_instance_->InitAsDefaultInstance();
  TeamProjMeta::default_instance_->InitAsDefaultInstance();
  TeamResultMeta::default_instance_->InitAsDefaultInstance();
  GamePlayerProjMeta::default_instance_->InitAsDefaultInstance();
  ProjMeta::default_instance_->InitAsDefaultInstance();
  PosMeta::default_instance_->InitAsDefaultInstance();
  PlayerResultMeta::default_instance_->InitAsDefaultInstance();
  PlayerGameStats::default_instance_->InitAsDefaultInstance();
  AwardMeta::default_instance_->InitAsDefaultInstance();
  PnlMeta::default_instance_->InitAsDefaultInstance();
  PlayerMarketState::default_instance_->InitAsDefaultInstance();
  LimitBookMeta::default_instance_->InitAsDefaultInstance();
  MarketTicMeta::default_instance_->InitAsDefaultInstance();
  OrderMeta::default_instance_->InitAsDefaultInstance();
  OrderFillMeta::default_instance_->InitAsDefaultInstance();
  GlobalStateMeta::default_instance_->InitAsDefaultInstance();
  PlayerMeta::default_instance_->InitAsDefaultInstance();
  TeamMeta::default_instance_->InitAsDefaultInstance();
  pbstate::default_instance_->InitAsDefaultInstance();
  MerkleTree::default_instance_->InitAsDefaultInstance();
  NewPlayerModel::default_instance_->InitAsDefaultInstance();
  WsReq::default_instance_->InitAsDefaultInstance();
  WSReply::default_instance_->InitAsDefaultInstance();
  GetGlobalStateRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WSReply::default_instance(),
    900, 11, false, false,
    &::fantasybit::GetGlobalStateRep::default_instance());
  GetScheduleRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WSReply::default_instance(),
    910, 11, false, false,
    &::fantasybit::GetScheduleRep::default_instance());
  CheckNameReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WsReq::default_instance(),
    200, 11, false, false,
    &::fantasybit::CheckNameReq::default_instance());
  CheckNameRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WSReply::default_instance(),
    200, 11, false, false,
    &::fantasybit::CheckNameRep::default_instance());
  Pk2FnameReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WsReq::default_instance(),
    300, 11, false, false,
    &::fantasybit::Pk2FnameReq::default_instance());
  Pk2FnameRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WSReply::default_instance(),
    300, 11, false, false,
    &::fantasybit::Pk2FnameRep::default_instance());
  SubscribeReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WsReq::default_instance(),
    350, 11, false, false,
    &::fantasybit::SubscribeReq::default_instance());
  NameStatusReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WsReq::default_instance(),
    400, 11, false, false,
    &::fantasybit::NameStatusReq::default_instance());
  NameStatusRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WSReply::default_instance(),
    400, 11, false, false,
    &::fantasybit::NameStatusRep::default_instance());
  GetAllNamesRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WSReply::default_instance(),
    500, 11, false, false,
    &::fantasybit::GetAllNamesRep::default_instance());
  TeamRoster::default_instance_->InitAsDefaultInstance();
  GameDataRoster::default_instance_->InitAsDefaultInstance();
  GetCurrRostersRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WSReply::default_instance(),
    920, 11, false, false,
    &::fantasybit::GetCurrRostersRep::default_instance());
  ROWMarket::default_instance_->InitAsDefaultInstance();
  GetROWMarketRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WSReply::default_instance(),
    600, 11, false, false,
    &::fantasybit::GetROWMarketRep::default_instance());
  GetDepthReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WsReq::default_instance(),
    700, 11, false, false,
    &::fantasybit::GetDepthReq::default_instance());
  GetDepthRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WSReply::default_instance(),
    700, 11, false, false,
    &::fantasybit::GetDepthRep::default_instance());
  AllOdersSymbol::default_instance_->InitAsDefaultInstance();
  AllOdersFname::default_instance_->InitAsDefaultInstance();
  GetOrdersRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WSReply::default_instance(),
    800, 11, false, false,
    &::fantasybit::GetOrdersRep::default_instance());
  GetOrdersReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WsReq::default_instance(),
    800, 11, false, false,
    &::fantasybit::GetOrdersReq::default_instance());
  GetProjectionReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WsReq::default_instance(),
    900, 11, false, false,
    &::fantasybit::GetProjectionReq::default_instance());
  PlayerProj::default_instance_->InitAsDefaultInstance();
  ProjByName::default_instance_->InitAsDefaultInstance();
  GetProjectionRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::WSReply::default_instance(),
    940, 11, false, false,
    &::fantasybit::GetProjectionRep::default_instance());
  KeyValue::default_instance_->InitAsDefaultInstance();
  Bootstrap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StateData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StateData_2eproto {
  StaticDescriptorInitializer_StateData_2eproto() {
    protobuf_AddDesc_StateData_2eproto();
  }
} static_descriptor_initializer_StateData_2eproto_;
const ::google::protobuf::EnumDescriptor* CType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CType_descriptor_;
}
bool CType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMeta::kBlocknumFieldNumber;
const int BlockMeta::kTrmetaidFieldNumber;
const int BlockMeta::kTxmetarootFieldNumber;
const int BlockMeta::kPbstateidFieldNumber;
const int BlockMeta::kPrevFieldNumber;
const int BlockMeta::kNextFieldNumber;
#endif  // !_MSC_VER

BlockMeta::BlockMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMeta::InitAsDefaultInstance() {
}

BlockMeta::BlockMeta(const BlockMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMeta::SharedCtor() {
  _cached_size_ = 0;
  blocknum_ = 0;
  trmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  txmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pbstateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  next_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMeta::~BlockMeta() {
  SharedDtor();
}

void BlockMeta::SharedDtor() {
  if (trmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete trmetaid_;
  }
  if (txmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete txmetaroot_;
  }
  if (pbstateid_ != &::google::protobuf::internal::kEmptyString) {
    delete pbstateid_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (next_ != &::google::protobuf::internal::kEmptyString) {
    delete next_;
  }
  if (this != default_instance_) {
  }
}

void BlockMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMeta_descriptor_;
}

const BlockMeta& BlockMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

BlockMeta* BlockMeta::default_instance_ = NULL;

BlockMeta* BlockMeta::New() const {
  return new BlockMeta;
}

void BlockMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blocknum_ = 0;
    if (has_trmetaid()) {
      if (trmetaid_ != &::google::protobuf::internal::kEmptyString) {
        trmetaid_->clear();
      }
    }
    if (has_txmetaroot()) {
      if (txmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        txmetaroot_->clear();
      }
    }
    if (has_pbstateid()) {
      if (pbstateid_ != &::google::protobuf::internal::kEmptyString) {
        pbstateid_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
    if (has_next()) {
      if (next_ != &::google::protobuf::internal::kEmptyString) {
        next_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes txmetaroot = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_prev;
        break;
      }

      // optional bytes prev = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_next;
        break;
      }

      // optional bytes next = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_blocknum;
        break;
      }

      // optional int32 blocknum = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocknum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocknum_)));
          set_has_blocknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_trmetaid;
        break;
      }

      // optional bytes trmetaid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_pbstateid;
        break;
      }

      // optional bytes pbstateid = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbstateid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbstateid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes txmetaroot = 10;
  if (has_txmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->txmetaroot(), output);
  }

  // optional bytes prev = 20;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->prev(), output);
  }

  // optional bytes next = 30;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->next(), output);
  }

  // optional int32 blocknum = 40;
  if (has_blocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->blocknum(), output);
  }

  // optional bytes trmetaid = 50;
  if (has_trmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->trmetaid(), output);
  }

  // optional bytes pbstateid = 60;
  if (has_pbstateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->pbstateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes txmetaroot = 10;
  if (has_txmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->txmetaroot(), target);
  }

  // optional bytes prev = 20;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->prev(), target);
  }

  // optional bytes next = 30;
  if (has_next()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->next(), target);
  }

  // optional int32 blocknum = 40;
  if (has_blocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->blocknum(), target);
  }

  // optional bytes trmetaid = 50;
  if (has_trmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->trmetaid(), target);
  }

  // optional bytes pbstateid = 60;
  if (has_pbstateid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->pbstateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 blocknum = 40;
    if (has_blocknum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocknum());
    }

    // optional bytes trmetaid = 50;
    if (has_trmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->trmetaid());
    }

    // optional bytes txmetaroot = 10;
    if (has_txmetaroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txmetaroot());
    }

    // optional bytes pbstateid = 60;
    if (has_pbstateid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pbstateid());
    }

    // optional bytes prev = 20;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

    // optional bytes next = 30;
    if (has_next()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->next());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMeta::MergeFrom(const BlockMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blocknum()) {
      set_blocknum(from.blocknum());
    }
    if (from.has_trmetaid()) {
      set_trmetaid(from.trmetaid());
    }
    if (from.has_txmetaroot()) {
      set_txmetaroot(from.txmetaroot());
    }
    if (from.has_pbstateid()) {
      set_pbstateid(from.pbstateid());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMeta::CopyFrom(const BlockMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMeta::IsInitialized() const {

  return true;
}

void BlockMeta::Swap(BlockMeta* other) {
  if (other != this) {
    std::swap(blocknum_, other->blocknum_);
    std::swap(trmetaid_, other->trmetaid_);
    std::swap(txmetaroot_, other->txmetaroot_);
    std::swap(pbstateid_, other->pbstateid_);
    std::swap(prev_, other->prev_);
    std::swap(next_, other->next_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMeta_descriptor_;
  metadata.reflection = BlockMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TxMeta::kBlocknumFieldNumber;
const int TxMeta::kTxnumFieldNumber;
const int TxMeta::kTxtypeFieldNumber;
const int TxMeta::kTxFieldNumber;
const int TxMeta::kFantasyNameFieldNumber;
const int TxMeta::kIdFieldNumber;
#endif  // !_MSC_VER

TxMeta::TxMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxMeta::InitAsDefaultInstance() {
  tx_ = const_cast< ::fantasybit::Transaction*>(&::fantasybit::Transaction::default_instance());
}

TxMeta::TxMeta(const TxMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxMeta::SharedCtor() {
  _cached_size_ = 0;
  blocknum_ = 0;
  txnum_ = 0;
  txtype_ = 0;
  tx_ = NULL;
  fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxMeta::~TxMeta() {
  SharedDtor();
}

void TxMeta::SharedDtor() {
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete tx_;
  }
}

void TxMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxMeta_descriptor_;
}

const TxMeta& TxMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

TxMeta* TxMeta::default_instance_ = NULL;

TxMeta* TxMeta::New() const {
  return new TxMeta;
}

void TxMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blocknum_ = 0;
    txnum_ = 0;
    txtype_ = 0;
    if (has_tx()) {
      if (tx_ != NULL) tx_->::fantasybit::Transaction::Clear();
    }
    if (has_fantasy_name()) {
      if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
        fantasy_name_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 blocknum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocknum_)));
          set_has_blocknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_txnum;
        break;
      }

      // optional int32 txnum = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &txnum_)));
          set_has_txnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_txtype;
        break;
      }

      // optional .fantasybit.TransType txtype = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TransType_IsValid(value)) {
            set_txtype(static_cast< ::fantasybit::TransType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_tx;
        break;
      }

      // optional .fantasybit.Transaction tx = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_fantasy_name;
        break;
      }

      // optional string fantasy_name = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_id;
        break;
      }

      // optional bytes id = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 blocknum = 10;
  if (has_blocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->blocknum(), output);
  }

  // optional int32 txnum = 20;
  if (has_txnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->txnum(), output);
  }

  // optional .fantasybit.TransType txtype = 40;
  if (has_txtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->txtype(), output);
  }

  // optional .fantasybit.Transaction tx = 50;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->tx(), output);
  }

  // optional string fantasy_name = 60;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->fantasy_name(), output);
  }

  // optional bytes id = 70;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 blocknum = 10;
  if (has_blocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->blocknum(), target);
  }

  // optional int32 txnum = 20;
  if (has_txnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->txnum(), target);
  }

  // optional .fantasybit.TransType txtype = 40;
  if (has_txtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->txtype(), target);
  }

  // optional .fantasybit.Transaction tx = 50;
  if (has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->tx(), target);
  }

  // optional string fantasy_name = 60;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->fantasy_name(), target);
  }

  // optional bytes id = 70;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 blocknum = 10;
    if (has_blocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocknum());
    }

    // optional int32 txnum = 20;
    if (has_txnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->txnum());
    }

    // optional .fantasybit.TransType txtype = 40;
    if (has_txtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->txtype());
    }

    // optional .fantasybit.Transaction tx = 50;
    if (has_tx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tx());
    }

    // optional string fantasy_name = 60;
    if (has_fantasy_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional bytes id = 70;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxMeta::MergeFrom(const TxMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blocknum()) {
      set_blocknum(from.blocknum());
    }
    if (from.has_txnum()) {
      set_txnum(from.txnum());
    }
    if (from.has_txtype()) {
      set_txtype(from.txtype());
    }
    if (from.has_tx()) {
      mutable_tx()->::fantasybit::Transaction::MergeFrom(from.tx());
    }
    if (from.has_fantasy_name()) {
      set_fantasy_name(from.fantasy_name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxMeta::CopyFrom(const TxMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMeta::IsInitialized() const {

  if (has_tx()) {
    if (!this->tx().IsInitialized()) return false;
  }
  return true;
}

void TxMeta::Swap(TxMeta* other) {
  if (other != this) {
    std::swap(blocknum_, other->blocknum_);
    std::swap(txnum_, other->txnum_);
    std::swap(txtype_, other->txtype_);
    std::swap(tx_, other->tx_);
    std::swap(fantasy_name_, other->fantasy_name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxMeta_descriptor_;
  metadata.reflection = TxMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrMeta::kBlocknumFieldNumber;
const int TrMeta::kTypeFieldNumber;
const int TrMeta::kSeasonFieldNumber;
const int TrMeta::kWeekFieldNumber;
const int TrMeta::kGamemetarootFieldNumber;
const int TrMeta::kDatametarootFieldNumber;
const int TrMeta::kTxmetaidFieldNumber;
#endif  // !_MSC_VER

TrMeta::TrMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrMeta::InitAsDefaultInstance() {
}

TrMeta::TrMeta(const TrMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrMeta::SharedCtor() {
  _cached_size_ = 0;
  blocknum_ = 0;
  type_ = 2;
  season_ = 0u;
  week_ = 0u;
  gamemetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datametaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  txmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrMeta::~TrMeta() {
  SharedDtor();
}

void TrMeta::SharedDtor() {
  if (gamemetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete gamemetaroot_;
  }
  if (datametaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete datametaroot_;
  }
  if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete txmetaid_;
  }
  if (this != default_instance_) {
  }
}

void TrMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrMeta_descriptor_;
}

const TrMeta& TrMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

TrMeta* TrMeta::default_instance_ = NULL;

TrMeta* TrMeta::New() const {
  return new TrMeta;
}

void TrMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blocknum_ = 0;
    type_ = 2;
    season_ = 0u;
    week_ = 0u;
    if (has_gamemetaroot()) {
      if (gamemetaroot_ != &::google::protobuf::internal::kEmptyString) {
        gamemetaroot_->clear();
      }
    }
    if (has_datametaroot()) {
      if (datametaroot_ != &::google::protobuf::internal::kEmptyString) {
        datametaroot_->clear();
      }
    }
    if (has_txmetaid()) {
      if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
        txmetaid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 blocknum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocknum_)));
          set_has_blocknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_type;
        break;
      }

      // optional .fantasybit.TrType type = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TrType_IsValid(value)) {
            set_type(static_cast< ::fantasybit::TrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_season;
        break;
      }

      // optional uint32 season = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_week;
        break;
      }

      // optional uint32 week = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_gamemetaroot;
        break;
      }

      // optional bytes gamemetaroot = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamemetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamemetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_datametaroot;
        break;
      }

      // optional bytes datametaroot = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datametaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datametaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_txmetaid;
        break;
      }

      // optional bytes txmetaid = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 blocknum = 10;
  if (has_blocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->blocknum(), output);
  }

  // optional .fantasybit.TrType type = 40;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->type(), output);
  }

  // optional uint32 season = 50;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->season(), output);
  }

  // optional uint32 week = 60;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->week(), output);
  }

  // optional bytes gamemetaroot = 70;
  if (has_gamemetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->gamemetaroot(), output);
  }

  // optional bytes datametaroot = 80;
  if (has_datametaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      80, this->datametaroot(), output);
  }

  // optional bytes txmetaid = 100;
  if (has_txmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      100, this->txmetaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 blocknum = 10;
  if (has_blocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->blocknum(), target);
  }

  // optional .fantasybit.TrType type = 40;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->type(), target);
  }

  // optional uint32 season = 50;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->season(), target);
  }

  // optional uint32 week = 60;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->week(), target);
  }

  // optional bytes gamemetaroot = 70;
  if (has_gamemetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->gamemetaroot(), target);
  }

  // optional bytes datametaroot = 80;
  if (has_datametaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        80, this->datametaroot(), target);
  }

  // optional bytes txmetaid = 100;
  if (has_txmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->txmetaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 blocknum = 10;
    if (has_blocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocknum());
    }

    // optional .fantasybit.TrType type = 40;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 season = 50;
    if (has_season()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 60;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional bytes gamemetaroot = 70;
    if (has_gamemetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gamemetaroot());
    }

    // optional bytes datametaroot = 80;
    if (has_datametaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datametaroot());
    }

    // optional bytes txmetaid = 100;
    if (has_txmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txmetaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrMeta::MergeFrom(const TrMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blocknum()) {
      set_blocknum(from.blocknum());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_gamemetaroot()) {
      set_gamemetaroot(from.gamemetaroot());
    }
    if (from.has_datametaroot()) {
      set_datametaroot(from.datametaroot());
    }
    if (from.has_txmetaid()) {
      set_txmetaid(from.txmetaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrMeta::CopyFrom(const TrMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrMeta::IsInitialized() const {

  return true;
}

void TrMeta::Swap(TrMeta* other) {
  if (other != this) {
    std::swap(blocknum_, other->blocknum_);
    std::swap(type_, other->type_);
    std::swap(season_, other->season_);
    std::swap(week_, other->week_);
    std::swap(gamemetaroot_, other->gamemetaroot_);
    std::swap(datametaroot_, other->datametaroot_);
    std::swap(txmetaid_, other->txmetaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrMeta_descriptor_;
  metadata.reflection = TrMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameMeta::kTxmetaidFieldNumber;
const int GameMeta::kGamedataFieldNumber;
#endif  // !_MSC_VER

GameMeta::GameMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameMeta::InitAsDefaultInstance() {
  gamedata_ = const_cast< ::fantasybit::GameData*>(&::fantasybit::GameData::default_instance());
}

GameMeta::GameMeta(const GameMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameMeta::SharedCtor() {
  _cached_size_ = 0;
  txmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMeta::~GameMeta() {
  SharedDtor();
}

void GameMeta::SharedDtor() {
  if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete txmetaid_;
  }
  if (this != default_instance_) {
    delete gamedata_;
  }
}

void GameMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMeta_descriptor_;
}

const GameMeta& GameMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GameMeta* GameMeta::default_instance_ = NULL;

GameMeta* GameMeta::New() const {
  return new GameMeta;
}

void GameMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_txmetaid()) {
      if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
        txmetaid_->clear();
      }
    }
    if (has_gamedata()) {
      if (gamedata_ != NULL) gamedata_->::fantasybit::GameData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes txmetaid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_gamedata;
        break;
      }

      // optional .fantasybit.GameData gamedata = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes txmetaid = 10;
  if (has_txmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->txmetaid(), output);
  }

  // optional .fantasybit.GameData gamedata = 20;
  if (has_gamedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->gamedata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes txmetaid = 10;
  if (has_txmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->txmetaid(), target);
  }

  // optional .fantasybit.GameData gamedata = 20;
  if (has_gamedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->gamedata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes txmetaid = 10;
    if (has_txmetaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txmetaid());
    }

    // optional .fantasybit.GameData gamedata = 20;
    if (has_gamedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamedata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMeta::MergeFrom(const GameMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txmetaid()) {
      set_txmetaid(from.txmetaid());
    }
    if (from.has_gamedata()) {
      mutable_gamedata()->::fantasybit::GameData::MergeFrom(from.gamedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMeta::CopyFrom(const GameMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMeta::IsInitialized() const {

  return true;
}

void GameMeta::Swap(GameMeta* other) {
  if (other != this) {
    std::swap(txmetaid_, other->txmetaid_);
    std::swap(gamedata_, other->gamedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMeta_descriptor_;
  metadata.reflection = GameMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataMeta::kTxmetaidFieldNumber;
const int DataMeta::kDataFieldNumber;
#endif  // !_MSC_VER

DataMeta::DataMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataMeta::InitAsDefaultInstance() {
  data_ = const_cast< ::fantasybit::Data*>(&::fantasybit::Data::default_instance());
}

DataMeta::DataMeta(const DataMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataMeta::SharedCtor() {
  _cached_size_ = 0;
  txmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMeta::~DataMeta() {
  SharedDtor();
}

void DataMeta::SharedDtor() {
  if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete txmetaid_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void DataMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMeta_descriptor_;
}

const DataMeta& DataMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

DataMeta* DataMeta::default_instance_ = NULL;

DataMeta* DataMeta::New() const {
  return new DataMeta;
}

void DataMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_txmetaid()) {
      if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
        txmetaid_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::fantasybit::Data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes txmetaid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_data;
        break;
      }

      // optional .fantasybit.Data data = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes txmetaid = 10;
  if (has_txmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->txmetaid(), output);
  }

  // optional .fantasybit.Data data = 20;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes txmetaid = 10;
  if (has_txmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->txmetaid(), target);
  }

  // optional .fantasybit.Data data = 20;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes txmetaid = 10;
    if (has_txmetaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txmetaid());
    }

    // optional .fantasybit.Data data = 20;
    if (has_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataMeta::MergeFrom(const DataMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txmetaid()) {
      set_txmetaid(from.txmetaid());
    }
    if (from.has_data()) {
      mutable_data()->::fantasybit::Data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMeta::CopyFrom(const DataMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMeta::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void DataMeta::Swap(DataMeta* other) {
  if (other != this) {
    std::swap(txmetaid_, other->txmetaid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataMeta_descriptor_;
  metadata.reflection = DataMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaderBoardMeta::kWeekFieldNumber;
const int LeaderBoardMeta::kFnbalmetarootFieldNumber;
const int LeaderBoardMeta::kPrevFieldNumber;
const int LeaderBoardMeta::kNextFieldNumber;
#endif  // !_MSC_VER

LeaderBoardMeta::LeaderBoardMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaderBoardMeta::InitAsDefaultInstance() {
}

LeaderBoardMeta::LeaderBoardMeta(const LeaderBoardMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaderBoardMeta::SharedCtor() {
  _cached_size_ = 0;
  week_ = 0u;
  fnbalmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  next_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderBoardMeta::~LeaderBoardMeta() {
  SharedDtor();
}

void LeaderBoardMeta::SharedDtor() {
  if (fnbalmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete fnbalmetaroot_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (next_ != &::google::protobuf::internal::kEmptyString) {
    delete next_;
  }
  if (this != default_instance_) {
  }
}

void LeaderBoardMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderBoardMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderBoardMeta_descriptor_;
}

const LeaderBoardMeta& LeaderBoardMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

LeaderBoardMeta* LeaderBoardMeta::default_instance_ = NULL;

LeaderBoardMeta* LeaderBoardMeta::New() const {
  return new LeaderBoardMeta;
}

void LeaderBoardMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    week_ = 0u;
    if (has_fnbalmetaroot()) {
      if (fnbalmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        fnbalmetaroot_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
    if (has_next()) {
      if (next_ != &::google::protobuf::internal::kEmptyString) {
        next_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderBoardMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 week = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_fnbalmetaroot;
        break;
      }

      // optional bytes fnbalmetaroot = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fnbalmetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fnbalmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_prev;
        break;
      }

      // optional bytes prev = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_next;
        break;
      }

      // optional bytes next = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaderBoardMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 week = 10;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->week(), output);
  }

  // optional bytes fnbalmetaroot = 20;
  if (has_fnbalmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->fnbalmetaroot(), output);
  }

  // optional bytes prev = 30;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->prev(), output);
  }

  // optional bytes next = 40;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->next(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaderBoardMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 week = 10;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->week(), target);
  }

  // optional bytes fnbalmetaroot = 20;
  if (has_fnbalmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->fnbalmetaroot(), target);
  }

  // optional bytes prev = 30;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->prev(), target);
  }

  // optional bytes next = 40;
  if (has_next()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->next(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaderBoardMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 week = 10;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional bytes fnbalmetaroot = 20;
    if (has_fnbalmetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fnbalmetaroot());
    }

    // optional bytes prev = 30;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

    // optional bytes next = 40;
    if (has_next()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->next());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderBoardMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderBoardMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderBoardMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderBoardMeta::MergeFrom(const LeaderBoardMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_fnbalmetaroot()) {
      set_fnbalmetaroot(from.fnbalmetaroot());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderBoardMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderBoardMeta::CopyFrom(const LeaderBoardMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderBoardMeta::IsInitialized() const {

  return true;
}

void LeaderBoardMeta::Swap(LeaderBoardMeta* other) {
  if (other != this) {
    std::swap(week_, other->week_);
    std::swap(fnbalmetaroot_, other->fnbalmetaroot_);
    std::swap(prev_, other->prev_);
    std::swap(next_, other->next_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderBoardMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderBoardMeta_descriptor_;
  metadata.reflection = LeaderBoardMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FantasyNameBalMeta::kTxmetaidFieldNumber;
const int FantasyNameBalMeta::kTrmetaidFieldNumber;
const int FantasyNameBalMeta::kNameFieldNumber;
const int FantasyNameBalMeta::kPublicKeyFieldNumber;
const int FantasyNameBalMeta::kBitsFieldNumber;
const int FantasyNameBalMeta::kStakeFieldNumber;
const int FantasyNameBalMeta::kBlockFieldNumber;
const int FantasyNameBalMeta::kCountFieldNumber;
const int FantasyNameBalMeta::kNonceFieldNumber;
const int FantasyNameBalMeta::kAwardmetarootFieldNumber;
const int FantasyNameBalMeta::kPnlmetarootFieldNumber;
const int FantasyNameBalMeta::kPrevFieldNumber;
const int FantasyNameBalMeta::kNextFieldNumber;
#endif  // !_MSC_VER

FantasyNameBalMeta::FantasyNameBalMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FantasyNameBalMeta::InitAsDefaultInstance() {
}

FantasyNameBalMeta::FantasyNameBalMeta(const FantasyNameBalMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FantasyNameBalMeta::SharedCtor() {
  _cached_size_ = 0;
  txmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bits_ = GOOGLE_ULONGLONG(0);
  stake_ = GOOGLE_LONGLONG(0);
  block_ = 0;
  count_ = 0;
  nonce_ = GOOGLE_ULONGLONG(0);
  awardmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pnlmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  next_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyNameBalMeta::~FantasyNameBalMeta() {
  SharedDtor();
}

void FantasyNameBalMeta::SharedDtor() {
  if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete txmetaid_;
  }
  if (trmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete trmetaid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (awardmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete awardmetaroot_;
  }
  if (pnlmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete pnlmetaroot_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (next_ != &::google::protobuf::internal::kEmptyString) {
    delete next_;
  }
  if (this != default_instance_) {
  }
}

void FantasyNameBalMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyNameBalMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyNameBalMeta_descriptor_;
}

const FantasyNameBalMeta& FantasyNameBalMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

FantasyNameBalMeta* FantasyNameBalMeta::default_instance_ = NULL;

FantasyNameBalMeta* FantasyNameBalMeta::New() const {
  return new FantasyNameBalMeta;
}

void FantasyNameBalMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_txmetaid()) {
      if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
        txmetaid_->clear();
      }
    }
    if (has_trmetaid()) {
      if (trmetaid_ != &::google::protobuf::internal::kEmptyString) {
        trmetaid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
    bits_ = GOOGLE_ULONGLONG(0);
    stake_ = GOOGLE_LONGLONG(0);
    block_ = 0;
    count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nonce_ = GOOGLE_ULONGLONG(0);
    if (has_awardmetaroot()) {
      if (awardmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        awardmetaroot_->clear();
      }
    }
    if (has_pnlmetaroot()) {
      if (pnlmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        pnlmetaroot_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
    if (has_next()) {
      if (next_ != &::google::protobuf::internal::kEmptyString) {
        next_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyNameBalMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes txmetaid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_trmetaid;
        break;
      }

      // optional bytes trmetaid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_name;
        break;
      }

      // optional string name = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_public_key;
        break;
      }

      // optional string public_key = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_bits;
        break;
      }

      // optional uint64 bits = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_stake;
        break;
      }

      // optional int64 stake = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stake_)));
          set_has_stake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_block;
        break;
      }

      // optional int32 block = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_count;
        break;
      }

      // optional int32 count = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_awardmetaroot;
        break;
      }

      // optional bytes awardmetaroot = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardmetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_awardmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_pnlmetaroot;
        break;
      }

      // optional bytes pnlmetaroot = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pnlmetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pnlmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_prev;
        break;
      }

      // optional bytes prev = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_next;
        break;
      }

      // optional bytes next = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FantasyNameBalMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes txmetaid = 10;
  if (has_txmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->txmetaid(), output);
  }

  // optional bytes trmetaid = 20;
  if (has_trmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->trmetaid(), output);
  }

  // optional string name = 25;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->name(), output);
  }

  // optional string public_key = 30;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->public_key(), output);
  }

  // optional uint64 bits = 35;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->bits(), output);
  }

  // optional int64 stake = 40;
  if (has_stake()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->stake(), output);
  }

  // optional int32 block = 41;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->block(), output);
  }

  // optional int32 count = 42;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->count(), output);
  }

  // optional uint64 nonce = 45;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(45, this->nonce(), output);
  }

  // optional bytes awardmetaroot = 50;
  if (has_awardmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->awardmetaroot(), output);
  }

  // optional bytes pnlmetaroot = 60;
  if (has_pnlmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->pnlmetaroot(), output);
  }

  // optional bytes prev = 70;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->prev(), output);
  }

  // optional bytes next = 80;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      80, this->next(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FantasyNameBalMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes txmetaid = 10;
  if (has_txmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->txmetaid(), target);
  }

  // optional bytes trmetaid = 20;
  if (has_trmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->trmetaid(), target);
  }

  // optional string name = 25;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->name(), target);
  }

  // optional string public_key = 30;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->public_key(), target);
  }

  // optional uint64 bits = 35;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->bits(), target);
  }

  // optional int64 stake = 40;
  if (has_stake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->stake(), target);
  }

  // optional int32 block = 41;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->block(), target);
  }

  // optional int32 count = 42;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->count(), target);
  }

  // optional uint64 nonce = 45;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(45, this->nonce(), target);
  }

  // optional bytes awardmetaroot = 50;
  if (has_awardmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->awardmetaroot(), target);
  }

  // optional bytes pnlmetaroot = 60;
  if (has_pnlmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->pnlmetaroot(), target);
  }

  // optional bytes prev = 70;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->prev(), target);
  }

  // optional bytes next = 80;
  if (has_next()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        80, this->next(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FantasyNameBalMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes txmetaid = 10;
    if (has_txmetaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txmetaid());
    }

    // optional bytes trmetaid = 20;
    if (has_trmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->trmetaid());
    }

    // optional string name = 25;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string public_key = 30;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // optional uint64 bits = 35;
    if (has_bits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bits());
    }

    // optional int64 stake = 40;
    if (has_stake()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stake());
    }

    // optional int32 block = 41;
    if (has_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block());
    }

    // optional int32 count = 42;
    if (has_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 nonce = 45;
    if (has_nonce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

    // optional bytes awardmetaroot = 50;
    if (has_awardmetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->awardmetaroot());
    }

    // optional bytes pnlmetaroot = 60;
    if (has_pnlmetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pnlmetaroot());
    }

    // optional bytes prev = 70;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

    // optional bytes next = 80;
    if (has_next()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->next());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyNameBalMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyNameBalMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FantasyNameBalMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyNameBalMeta::MergeFrom(const FantasyNameBalMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txmetaid()) {
      set_txmetaid(from.txmetaid());
    }
    if (from.has_trmetaid()) {
      set_trmetaid(from.trmetaid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
    if (from.has_stake()) {
      set_stake(from.stake());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_awardmetaroot()) {
      set_awardmetaroot(from.awardmetaroot());
    }
    if (from.has_pnlmetaroot()) {
      set_pnlmetaroot(from.pnlmetaroot());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyNameBalMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyNameBalMeta::CopyFrom(const FantasyNameBalMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyNameBalMeta::IsInitialized() const {

  return true;
}

void FantasyNameBalMeta::Swap(FantasyNameBalMeta* other) {
  if (other != this) {
    std::swap(txmetaid_, other->txmetaid_);
    std::swap(trmetaid_, other->trmetaid_);
    std::swap(name_, other->name_);
    std::swap(public_key_, other->public_key_);
    std::swap(bits_, other->bits_);
    std::swap(stake_, other->stake_);
    std::swap(block_, other->block_);
    std::swap(count_, other->count_);
    std::swap(nonce_, other->nonce_);
    std::swap(awardmetaroot_, other->awardmetaroot_);
    std::swap(pnlmetaroot_, other->pnlmetaroot_);
    std::swap(prev_, other->prev_);
    std::swap(next_, other->next_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FantasyNameBalMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FantasyNameBalMeta_descriptor_;
  metadata.reflection = FantasyNameBalMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FantasyNameState::kNameFieldNumber;
const int FantasyNameState::kFantasynamebalmetaidFieldNumber;
const int FantasyNameState::kPosmetarootFieldNumber;
const int FantasyNameState::kOrdersmetarootFieldNumber;
const int FantasyNameState::kProjmetarootFieldNumber;
const int FantasyNameState::kPrevFieldNumber;
const int FantasyNameState::kNextFieldNumber;
const int FantasyNameState::kTxmetaidFieldNumber;
#endif  // !_MSC_VER

FantasyNameState::FantasyNameState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FantasyNameState::InitAsDefaultInstance() {
}

FantasyNameState::FantasyNameState(const FantasyNameState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FantasyNameState::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fantasynamebalmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordersmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  projmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  next_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  txmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyNameState::~FantasyNameState() {
  SharedDtor();
}

void FantasyNameState::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (fantasynamebalmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasynamebalmetaid_;
  }
  if (posmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete posmetaroot_;
  }
  if (ordersmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete ordersmetaroot_;
  }
  if (projmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete projmetaroot_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (next_ != &::google::protobuf::internal::kEmptyString) {
    delete next_;
  }
  if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete txmetaid_;
  }
  if (this != default_instance_) {
  }
}

void FantasyNameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyNameState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyNameState_descriptor_;
}

const FantasyNameState& FantasyNameState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

FantasyNameState* FantasyNameState::default_instance_ = NULL;

FantasyNameState* FantasyNameState::New() const {
  return new FantasyNameState;
}

void FantasyNameState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_fantasynamebalmetaid()) {
      if (fantasynamebalmetaid_ != &::google::protobuf::internal::kEmptyString) {
        fantasynamebalmetaid_->clear();
      }
    }
    if (has_posmetaroot()) {
      if (posmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        posmetaroot_->clear();
      }
    }
    if (has_ordersmetaroot()) {
      if (ordersmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        ordersmetaroot_->clear();
      }
    }
    if (has_projmetaroot()) {
      if (projmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        projmetaroot_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
    if (has_next()) {
      if (next_ != &::google::protobuf::internal::kEmptyString) {
        next_->clear();
      }
    }
    if (has_txmetaid()) {
      if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
        txmetaid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyNameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fantasynamebalmetaid;
        break;
      }

      // optional bytes fantasynamebalmetaid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasynamebalmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fantasynamebalmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_posmetaroot;
        break;
      }

      // optional bytes posmetaroot = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_posmetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_ordersmetaroot;
        break;
      }

      // optional bytes ordersmetaroot = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ordersmetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ordersmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_projmetaroot;
        break;
      }

      // optional bytes projmetaroot = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_projmetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_projmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_txmetaid;
        break;
      }

      // optional bytes txmetaid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_prev;
        break;
      }

      // optional bytes prev = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_next;
        break;
      }

      // optional bytes next = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FantasyNameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bytes fantasynamebalmetaid = 10;
  if (has_fantasynamebalmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->fantasynamebalmetaid(), output);
  }

  // optional bytes posmetaroot = 20;
  if (has_posmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->posmetaroot(), output);
  }

  // optional bytes ordersmetaroot = 30;
  if (has_ordersmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->ordersmetaroot(), output);
  }

  // optional bytes projmetaroot = 40;
  if (has_projmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->projmetaroot(), output);
  }

  // optional bytes txmetaid = 50;
  if (has_txmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->txmetaid(), output);
  }

  // optional bytes prev = 70;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->prev(), output);
  }

  // optional bytes next = 80;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      80, this->next(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FantasyNameState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes fantasynamebalmetaid = 10;
  if (has_fantasynamebalmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->fantasynamebalmetaid(), target);
  }

  // optional bytes posmetaroot = 20;
  if (has_posmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->posmetaroot(), target);
  }

  // optional bytes ordersmetaroot = 30;
  if (has_ordersmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->ordersmetaroot(), target);
  }

  // optional bytes projmetaroot = 40;
  if (has_projmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->projmetaroot(), target);
  }

  // optional bytes txmetaid = 50;
  if (has_txmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->txmetaid(), target);
  }

  // optional bytes prev = 70;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->prev(), target);
  }

  // optional bytes next = 80;
  if (has_next()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        80, this->next(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FantasyNameState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes fantasynamebalmetaid = 10;
    if (has_fantasynamebalmetaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fantasynamebalmetaid());
    }

    // optional bytes posmetaroot = 20;
    if (has_posmetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posmetaroot());
    }

    // optional bytes ordersmetaroot = 30;
    if (has_ordersmetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ordersmetaroot());
    }

    // optional bytes projmetaroot = 40;
    if (has_projmetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->projmetaroot());
    }

    // optional bytes prev = 70;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

    // optional bytes next = 80;
    if (has_next()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->next());
    }

    // optional bytes txmetaid = 50;
    if (has_txmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txmetaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyNameState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyNameState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FantasyNameState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyNameState::MergeFrom(const FantasyNameState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fantasynamebalmetaid()) {
      set_fantasynamebalmetaid(from.fantasynamebalmetaid());
    }
    if (from.has_posmetaroot()) {
      set_posmetaroot(from.posmetaroot());
    }
    if (from.has_ordersmetaroot()) {
      set_ordersmetaroot(from.ordersmetaroot());
    }
    if (from.has_projmetaroot()) {
      set_projmetaroot(from.projmetaroot());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
    if (from.has_txmetaid()) {
      set_txmetaid(from.txmetaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyNameState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyNameState::CopyFrom(const FantasyNameState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyNameState::IsInitialized() const {

  return true;
}

void FantasyNameState::Swap(FantasyNameState* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(fantasynamebalmetaid_, other->fantasynamebalmetaid_);
    std::swap(posmetaroot_, other->posmetaroot_);
    std::swap(ordersmetaroot_, other->ordersmetaroot_);
    std::swap(projmetaroot_, other->projmetaroot_);
    std::swap(prev_, other->prev_);
    std::swap(next_, other->next_);
    std::swap(txmetaid_, other->txmetaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FantasyNameState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FantasyNameState_descriptor_;
  metadata.reflection = FantasyNameState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeekGameStatusMeta::kWeekFieldNumber;
const int WeekGameStatusMeta::kGameresultmetarootFieldNumber;
const int WeekGameStatusMeta::kIngameprojmetarootFieldNumber;
const int WeekGameStatusMeta::kOpengamestatusrootFieldNumber;
const int WeekGameStatusMeta::kPrevFieldNumber;
const int WeekGameStatusMeta::kNextFieldNumber;
#endif  // !_MSC_VER

WeekGameStatusMeta::WeekGameStatusMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeekGameStatusMeta::InitAsDefaultInstance() {
}

WeekGameStatusMeta::WeekGameStatusMeta(const WeekGameStatusMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeekGameStatusMeta::SharedCtor() {
  _cached_size_ = 0;
  week_ = 0u;
  gameresultmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ingameprojmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opengamestatusroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  next_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeekGameStatusMeta::~WeekGameStatusMeta() {
  SharedDtor();
}

void WeekGameStatusMeta::SharedDtor() {
  if (gameresultmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete gameresultmetaroot_;
  }
  if (ingameprojmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete ingameprojmetaroot_;
  }
  if (opengamestatusroot_ != &::google::protobuf::internal::kEmptyString) {
    delete opengamestatusroot_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (next_ != &::google::protobuf::internal::kEmptyString) {
    delete next_;
  }
  if (this != default_instance_) {
  }
}

void WeekGameStatusMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeekGameStatusMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeekGameStatusMeta_descriptor_;
}

const WeekGameStatusMeta& WeekGameStatusMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

WeekGameStatusMeta* WeekGameStatusMeta::default_instance_ = NULL;

WeekGameStatusMeta* WeekGameStatusMeta::New() const {
  return new WeekGameStatusMeta;
}

void WeekGameStatusMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    week_ = 0u;
    if (has_gameresultmetaroot()) {
      if (gameresultmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        gameresultmetaroot_->clear();
      }
    }
    if (has_ingameprojmetaroot()) {
      if (ingameprojmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        ingameprojmetaroot_->clear();
      }
    }
    if (has_opengamestatusroot()) {
      if (opengamestatusroot_ != &::google::protobuf::internal::kEmptyString) {
        opengamestatusroot_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
    if (has_next()) {
      if (next_ != &::google::protobuf::internal::kEmptyString) {
        next_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeekGameStatusMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 week = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_gameresultmetaroot;
        break;
      }

      // optional bytes gameresultmetaroot = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameresultmetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameresultmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_ingameprojmetaroot;
        break;
      }

      // optional bytes ingameprojmetaroot = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ingameprojmetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ingameprojmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_opengamestatusroot;
        break;
      }

      // optional bytes opengamestatusroot = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opengamestatusroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_opengamestatusroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_prev;
        break;
      }

      // optional bytes prev = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_next;
        break;
      }

      // optional bytes next = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeekGameStatusMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 week = 10;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->week(), output);
  }

  // optional bytes gameresultmetaroot = 20;
  if (has_gameresultmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->gameresultmetaroot(), output);
  }

  // optional bytes ingameprojmetaroot = 30;
  if (has_ingameprojmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->ingameprojmetaroot(), output);
  }

  // optional bytes opengamestatusroot = 40;
  if (has_opengamestatusroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->opengamestatusroot(), output);
  }

  // optional bytes prev = 50;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->prev(), output);
  }

  // optional bytes next = 60;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->next(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeekGameStatusMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 week = 10;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->week(), target);
  }

  // optional bytes gameresultmetaroot = 20;
  if (has_gameresultmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->gameresultmetaroot(), target);
  }

  // optional bytes ingameprojmetaroot = 30;
  if (has_ingameprojmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->ingameprojmetaroot(), target);
  }

  // optional bytes opengamestatusroot = 40;
  if (has_opengamestatusroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->opengamestatusroot(), target);
  }

  // optional bytes prev = 50;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->prev(), target);
  }

  // optional bytes next = 60;
  if (has_next()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->next(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeekGameStatusMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 week = 10;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional bytes gameresultmetaroot = 20;
    if (has_gameresultmetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gameresultmetaroot());
    }

    // optional bytes ingameprojmetaroot = 30;
    if (has_ingameprojmetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ingameprojmetaroot());
    }

    // optional bytes opengamestatusroot = 40;
    if (has_opengamestatusroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->opengamestatusroot());
    }

    // optional bytes prev = 50;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

    // optional bytes next = 60;
    if (has_next()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->next());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeekGameStatusMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeekGameStatusMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeekGameStatusMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeekGameStatusMeta::MergeFrom(const WeekGameStatusMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_gameresultmetaroot()) {
      set_gameresultmetaroot(from.gameresultmetaroot());
    }
    if (from.has_ingameprojmetaroot()) {
      set_ingameprojmetaroot(from.ingameprojmetaroot());
    }
    if (from.has_opengamestatusroot()) {
      set_opengamestatusroot(from.opengamestatusroot());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeekGameStatusMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeekGameStatusMeta::CopyFrom(const WeekGameStatusMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeekGameStatusMeta::IsInitialized() const {

  return true;
}

void WeekGameStatusMeta::Swap(WeekGameStatusMeta* other) {
  if (other != this) {
    std::swap(week_, other->week_);
    std::swap(gameresultmetaroot_, other->gameresultmetaroot_);
    std::swap(ingameprojmetaroot_, other->ingameprojmetaroot_);
    std::swap(opengamestatusroot_, other->opengamestatusroot_);
    std::swap(prev_, other->prev_);
    std::swap(next_, other->next_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeekGameStatusMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeekGameStatusMeta_descriptor_;
  metadata.reflection = WeekGameStatusMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InGameProjMeta::kGameidFieldNumber;
const int InGameProjMeta::kGamestatusmetaidFieldNumber;
const int InGameProjMeta::kHomeprojmetaFieldNumber;
const int InGameProjMeta::kAwayprojmetaFieldNumber;
const int InGameProjMeta::kGamedatametaidFieldNumber;
#endif  // !_MSC_VER

InGameProjMeta::InGameProjMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InGameProjMeta::InitAsDefaultInstance() {
}

InGameProjMeta::InGameProjMeta(const InGameProjMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InGameProjMeta::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamestatusmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  homeprojmeta_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awayprojmeta_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamedatametaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InGameProjMeta::~InGameProjMeta() {
  SharedDtor();
}

void InGameProjMeta::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (gamestatusmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamestatusmetaid_;
  }
  if (homeprojmeta_ != &::google::protobuf::internal::kEmptyString) {
    delete homeprojmeta_;
  }
  if (awayprojmeta_ != &::google::protobuf::internal::kEmptyString) {
    delete awayprojmeta_;
  }
  if (gamedatametaid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamedatametaid_;
  }
  if (this != default_instance_) {
  }
}

void InGameProjMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InGameProjMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InGameProjMeta_descriptor_;
}

const InGameProjMeta& InGameProjMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

InGameProjMeta* InGameProjMeta::default_instance_ = NULL;

InGameProjMeta* InGameProjMeta::New() const {
  return new InGameProjMeta;
}

void InGameProjMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::kEmptyString) {
        gameid_->clear();
      }
    }
    if (has_gamestatusmetaid()) {
      if (gamestatusmetaid_ != &::google::protobuf::internal::kEmptyString) {
        gamestatusmetaid_->clear();
      }
    }
    if (has_homeprojmeta()) {
      if (homeprojmeta_ != &::google::protobuf::internal::kEmptyString) {
        homeprojmeta_->clear();
      }
    }
    if (has_awayprojmeta()) {
      if (awayprojmeta_ != &::google::protobuf::internal::kEmptyString) {
        awayprojmeta_->clear();
      }
    }
    if (has_gamedatametaid()) {
      if (gamedatametaid_ != &::google::protobuf::internal::kEmptyString) {
        gamedatametaid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InGameProjMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_gamestatusmetaid;
        break;
      }

      // optional bytes gamestatusmetaid = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestatusmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamestatusmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_gamedatametaid;
        break;
      }

      // optional bytes gamedatametaid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamedatametaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamedatametaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_homeprojmeta;
        break;
      }

      // optional bytes homeprojmeta = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_homeprojmeta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_homeprojmeta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_awayprojmeta;
        break;
      }

      // optional bytes awayprojmeta = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awayprojmeta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_awayprojmeta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InGameProjMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gameid = 20;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->gameid(), output);
  }

  // optional bytes gamestatusmetaid = 40;
  if (has_gamestatusmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->gamestatusmetaid(), output);
  }

  // optional bytes gamedatametaid = 50;
  if (has_gamedatametaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->gamedatametaid(), output);
  }

  // optional bytes homeprojmeta = 60;
  if (has_homeprojmeta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->homeprojmeta(), output);
  }

  // optional bytes awayprojmeta = 70;
  if (has_awayprojmeta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->awayprojmeta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InGameProjMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gameid = 20;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->gameid(), target);
  }

  // optional bytes gamestatusmetaid = 40;
  if (has_gamestatusmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->gamestatusmetaid(), target);
  }

  // optional bytes gamedatametaid = 50;
  if (has_gamedatametaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->gamedatametaid(), target);
  }

  // optional bytes homeprojmeta = 60;
  if (has_homeprojmeta()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->homeprojmeta(), target);
  }

  // optional bytes awayprojmeta = 70;
  if (has_awayprojmeta()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->awayprojmeta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InGameProjMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gameid = 20;
    if (has_gameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional bytes gamestatusmetaid = 40;
    if (has_gamestatusmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gamestatusmetaid());
    }

    // optional bytes homeprojmeta = 60;
    if (has_homeprojmeta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->homeprojmeta());
    }

    // optional bytes awayprojmeta = 70;
    if (has_awayprojmeta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->awayprojmeta());
    }

    // optional bytes gamedatametaid = 50;
    if (has_gamedatametaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gamedatametaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InGameProjMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InGameProjMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InGameProjMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InGameProjMeta::MergeFrom(const InGameProjMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamestatusmetaid()) {
      set_gamestatusmetaid(from.gamestatusmetaid());
    }
    if (from.has_homeprojmeta()) {
      set_homeprojmeta(from.homeprojmeta());
    }
    if (from.has_awayprojmeta()) {
      set_awayprojmeta(from.awayprojmeta());
    }
    if (from.has_gamedatametaid()) {
      set_gamedatametaid(from.gamedatametaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InGameProjMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InGameProjMeta::CopyFrom(const InGameProjMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InGameProjMeta::IsInitialized() const {

  return true;
}

void InGameProjMeta::Swap(InGameProjMeta* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gamestatusmetaid_, other->gamestatusmetaid_);
    std::swap(homeprojmeta_, other->homeprojmeta_);
    std::swap(awayprojmeta_, other->awayprojmeta_);
    std::swap(gamedatametaid_, other->gamedatametaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InGameProjMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InGameProjMeta_descriptor_;
  metadata.reflection = InGameProjMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameResultsMeta::kGameidFieldNumber;
const int GameResultsMeta::kGamestatusmetaidFieldNumber;
const int GameResultsMeta::kHomeresultmetaFieldNumber;
const int GameResultsMeta::kAwayresultmetaFieldNumber;
const int GameResultsMeta::kResultdatametaidFieldNumber;
#endif  // !_MSC_VER

GameResultsMeta::GameResultsMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameResultsMeta::InitAsDefaultInstance() {
}

GameResultsMeta::GameResultsMeta(const GameResultsMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameResultsMeta::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamestatusmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  homeresultmeta_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awayresultmeta_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resultdatametaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameResultsMeta::~GameResultsMeta() {
  SharedDtor();
}

void GameResultsMeta::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (gamestatusmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamestatusmetaid_;
  }
  if (homeresultmeta_ != &::google::protobuf::internal::kEmptyString) {
    delete homeresultmeta_;
  }
  if (awayresultmeta_ != &::google::protobuf::internal::kEmptyString) {
    delete awayresultmeta_;
  }
  if (resultdatametaid_ != &::google::protobuf::internal::kEmptyString) {
    delete resultdatametaid_;
  }
  if (this != default_instance_) {
  }
}

void GameResultsMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameResultsMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameResultsMeta_descriptor_;
}

const GameResultsMeta& GameResultsMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GameResultsMeta* GameResultsMeta::default_instance_ = NULL;

GameResultsMeta* GameResultsMeta::New() const {
  return new GameResultsMeta;
}

void GameResultsMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::kEmptyString) {
        gameid_->clear();
      }
    }
    if (has_gamestatusmetaid()) {
      if (gamestatusmetaid_ != &::google::protobuf::internal::kEmptyString) {
        gamestatusmetaid_->clear();
      }
    }
    if (has_homeresultmeta()) {
      if (homeresultmeta_ != &::google::protobuf::internal::kEmptyString) {
        homeresultmeta_->clear();
      }
    }
    if (has_awayresultmeta()) {
      if (awayresultmeta_ != &::google::protobuf::internal::kEmptyString) {
        awayresultmeta_->clear();
      }
    }
    if (has_resultdatametaid()) {
      if (resultdatametaid_ != &::google::protobuf::internal::kEmptyString) {
        resultdatametaid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameResultsMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_gamestatusmetaid;
        break;
      }

      // optional bytes gamestatusmetaid = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestatusmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamestatusmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_resultdatametaid;
        break;
      }

      // optional bytes resultdatametaid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultdatametaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdatametaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_homeresultmeta;
        break;
      }

      // optional bytes homeresultmeta = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_homeresultmeta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_homeresultmeta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_awayresultmeta;
        break;
      }

      // optional bytes awayresultmeta = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awayresultmeta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_awayresultmeta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameResultsMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gameid = 20;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->gameid(), output);
  }

  // optional bytes gamestatusmetaid = 40;
  if (has_gamestatusmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->gamestatusmetaid(), output);
  }

  // optional bytes resultdatametaid = 50;
  if (has_resultdatametaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->resultdatametaid(), output);
  }

  // optional bytes homeresultmeta = 60;
  if (has_homeresultmeta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->homeresultmeta(), output);
  }

  // optional bytes awayresultmeta = 70;
  if (has_awayresultmeta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->awayresultmeta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameResultsMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gameid = 20;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->gameid(), target);
  }

  // optional bytes gamestatusmetaid = 40;
  if (has_gamestatusmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->gamestatusmetaid(), target);
  }

  // optional bytes resultdatametaid = 50;
  if (has_resultdatametaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->resultdatametaid(), target);
  }

  // optional bytes homeresultmeta = 60;
  if (has_homeresultmeta()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->homeresultmeta(), target);
  }

  // optional bytes awayresultmeta = 70;
  if (has_awayresultmeta()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->awayresultmeta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameResultsMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gameid = 20;
    if (has_gameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional bytes gamestatusmetaid = 40;
    if (has_gamestatusmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gamestatusmetaid());
    }

    // optional bytes homeresultmeta = 60;
    if (has_homeresultmeta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->homeresultmeta());
    }

    // optional bytes awayresultmeta = 70;
    if (has_awayresultmeta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->awayresultmeta());
    }

    // optional bytes resultdatametaid = 50;
    if (has_resultdatametaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdatametaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameResultsMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameResultsMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameResultsMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameResultsMeta::MergeFrom(const GameResultsMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamestatusmetaid()) {
      set_gamestatusmetaid(from.gamestatusmetaid());
    }
    if (from.has_homeresultmeta()) {
      set_homeresultmeta(from.homeresultmeta());
    }
    if (from.has_awayresultmeta()) {
      set_awayresultmeta(from.awayresultmeta());
    }
    if (from.has_resultdatametaid()) {
      set_resultdatametaid(from.resultdatametaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameResultsMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResultsMeta::CopyFrom(const GameResultsMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResultsMeta::IsInitialized() const {

  return true;
}

void GameResultsMeta::Swap(GameResultsMeta* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gamestatusmetaid_, other->gamestatusmetaid_);
    std::swap(homeresultmeta_, other->homeresultmeta_);
    std::swap(awayresultmeta_, other->awayresultmeta_);
    std::swap(resultdatametaid_, other->resultdatametaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameResultsMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameResultsMeta_descriptor_;
  metadata.reflection = GameResultsMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStatusMeta::kIdFieldNumber;
const int GameStatusMeta::kWeekFieldNumber;
const int GameStatusMeta::kGameinfoFieldNumber;
const int GameStatusMeta::kGamesatusFieldNumber;
const int GameStatusMeta::kGamemetaidFieldNumber;
const int GameStatusMeta::kDatametaidFieldNumber;
const int GameStatusMeta::kPrevFieldNumber;
const int GameStatusMeta::kNextFieldNumber;
const int GameStatusMeta::kSeasonFieldNumber;
#endif  // !_MSC_VER

GameStatusMeta::GameStatusMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStatusMeta::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::fantasybit::GameInfo*>(&::fantasybit::GameInfo::default_instance());
  gamesatus_ = const_cast< ::fantasybit::GameStatus*>(&::fantasybit::GameStatus::default_instance());
}

GameStatusMeta::GameStatusMeta(const GameStatusMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStatusMeta::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  week_ = 0;
  gameinfo_ = NULL;
  gamesatus_ = NULL;
  gamemetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datametaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  next_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  season_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStatusMeta::~GameStatusMeta() {
  SharedDtor();
}

void GameStatusMeta::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (gamemetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamemetaid_;
  }
  if (datametaid_ != &::google::protobuf::internal::kEmptyString) {
    delete datametaid_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (next_ != &::google::protobuf::internal::kEmptyString) {
    delete next_;
  }
  if (this != default_instance_) {
    delete gameinfo_;
    delete gamesatus_;
  }
}

void GameStatusMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStatusMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatusMeta_descriptor_;
}

const GameStatusMeta& GameStatusMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GameStatusMeta* GameStatusMeta::default_instance_ = NULL;

GameStatusMeta* GameStatusMeta::New() const {
  return new GameStatusMeta;
}

void GameStatusMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    week_ = 0;
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::fantasybit::GameInfo::Clear();
    }
    if (has_gamesatus()) {
      if (gamesatus_ != NULL) gamesatus_->::fantasybit::GameStatus::Clear();
    }
    if (has_gamemetaid()) {
      if (gamemetaid_ != &::google::protobuf::internal::kEmptyString) {
        gamemetaid_->clear();
      }
    }
    if (has_datametaid()) {
      if (datametaid_ != &::google::protobuf::internal::kEmptyString) {
        datametaid_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
    if (has_next()) {
      if (next_ != &::google::protobuf::internal::kEmptyString) {
        next_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    season_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStatusMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_week;
        break;
      }

      // optional int32 week = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_gameinfo;
        break;
      }

      // optional .fantasybit.GameInfo gameinfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_gamesatus;
        break;
      }

      // optional .fantasybit.GameStatus gamesatus = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamesatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamesatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_gamemetaid;
        break;
      }

      // optional bytes gamemetaid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamemetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamemetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_datametaid;
        break;
      }

      // optional bytes datametaid = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datametaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datametaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_prev;
        break;
      }

      // optional bytes prev = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_next;
        break;
      }

      // optional bytes next = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_season;
        break;
      }

      // optional int32 season = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStatusMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional int32 week = 2;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->week(), output);
  }

  // optional .fantasybit.GameInfo gameinfo = 10;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gameinfo(), output);
  }

  // optional .fantasybit.GameStatus gamesatus = 20;
  if (has_gamesatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->gamesatus(), output);
  }

  // optional bytes gamemetaid = 30;
  if (has_gamemetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->gamemetaid(), output);
  }

  // optional bytes datametaid = 40;
  if (has_datametaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->datametaid(), output);
  }

  // optional bytes prev = 50;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->prev(), output);
  }

  // optional bytes next = 60;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->next(), output);
  }

  // optional int32 season = 70;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->season(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStatusMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 week = 2;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->week(), target);
  }

  // optional .fantasybit.GameInfo gameinfo = 10;
  if (has_gameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->gameinfo(), target);
  }

  // optional .fantasybit.GameStatus gamesatus = 20;
  if (has_gamesatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->gamesatus(), target);
  }

  // optional bytes gamemetaid = 30;
  if (has_gamemetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->gamemetaid(), target);
  }

  // optional bytes datametaid = 40;
  if (has_datametaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->datametaid(), target);
  }

  // optional bytes prev = 50;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->prev(), target);
  }

  // optional bytes next = 60;
  if (has_next()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->next(), target);
  }

  // optional int32 season = 70;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->season(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStatusMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 week = 2;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // optional .fantasybit.GameInfo gameinfo = 10;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }

    // optional .fantasybit.GameStatus gamesatus = 20;
    if (has_gamesatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamesatus());
    }

    // optional bytes gamemetaid = 30;
    if (has_gamemetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gamemetaid());
    }

    // optional bytes datametaid = 40;
    if (has_datametaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datametaid());
    }

    // optional bytes prev = 50;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

    // optional bytes next = 60;
    if (has_next()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->next());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 season = 70;
    if (has_season()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStatusMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStatusMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStatusMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStatusMeta::MergeFrom(const GameStatusMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::fantasybit::GameInfo::MergeFrom(from.gameinfo());
    }
    if (from.has_gamesatus()) {
      mutable_gamesatus()->::fantasybit::GameStatus::MergeFrom(from.gamesatus());
    }
    if (from.has_gamemetaid()) {
      set_gamemetaid(from.gamemetaid());
    }
    if (from.has_datametaid()) {
      set_datametaid(from.datametaid());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_season()) {
      set_season(from.season());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStatusMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStatusMeta::CopyFrom(const GameStatusMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatusMeta::IsInitialized() const {

  return true;
}

void GameStatusMeta::Swap(GameStatusMeta* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(week_, other->week_);
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(gamesatus_, other->gamesatus_);
    std::swap(gamemetaid_, other->gamemetaid_);
    std::swap(datametaid_, other->datametaid_);
    std::swap(prev_, other->prev_);
    std::swap(next_, other->next_);
    std::swap(season_, other->season_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStatusMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStatusMeta_descriptor_;
  metadata.reflection = GameStatusMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamProjMeta::kGameidFieldNumber;
const int TeamProjMeta::kTeamFieldNumber;
const int TeamProjMeta::kKickofftimeFieldNumber;
const int TeamProjMeta::kWeekFieldNumber;
const int TeamProjMeta::kGameplayerprojmetarootFieldNumber;
const int TeamProjMeta::kGamedatametaidFieldNumber;
#endif  // !_MSC_VER

TeamProjMeta::TeamProjMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamProjMeta::InitAsDefaultInstance() {
}

TeamProjMeta::TeamProjMeta(const TeamProjMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamProjMeta::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kickofftime_ = 0u;
  week_ = 0u;
  gameplayerprojmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamedatametaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamProjMeta::~TeamProjMeta() {
  SharedDtor();
}

void TeamProjMeta::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (team_ != &::google::protobuf::internal::kEmptyString) {
    delete team_;
  }
  if (gameplayerprojmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete gameplayerprojmetaroot_;
  }
  if (gamedatametaid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamedatametaid_;
  }
  if (this != default_instance_) {
  }
}

void TeamProjMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamProjMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamProjMeta_descriptor_;
}

const TeamProjMeta& TeamProjMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

TeamProjMeta* TeamProjMeta::default_instance_ = NULL;

TeamProjMeta* TeamProjMeta::New() const {
  return new TeamProjMeta;
}

void TeamProjMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::kEmptyString) {
        gameid_->clear();
      }
    }
    if (has_team()) {
      if (team_ != &::google::protobuf::internal::kEmptyString) {
        team_->clear();
      }
    }
    kickofftime_ = 0u;
    week_ = 0u;
    if (has_gameplayerprojmetaroot()) {
      if (gameplayerprojmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        gameplayerprojmetaroot_->clear();
      }
    }
    if (has_gamedatametaid()) {
      if (gamedatametaid_ != &::google::protobuf::internal::kEmptyString) {
        gamedatametaid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamProjMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_team;
        break;
      }

      // optional string team = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team().data(), this->team().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_kickofftime;
        break;
      }

      // optional uint32 kickofftime = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kickofftime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kickofftime_)));
          set_has_kickofftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_week;
        break;
      }

      // optional uint32 week = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_gameplayerprojmetaroot;
        break;
      }

      // optional bytes gameplayerprojmetaroot = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameplayerprojmetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameplayerprojmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_gamedatametaid;
        break;
      }

      // optional bytes gamedatametaid = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamedatametaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamedatametaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamProjMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gameid = 20;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->gameid(), output);
  }

  // optional string team = 30;
  if (has_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->team(), output);
  }

  // optional uint32 kickofftime = 40;
  if (has_kickofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->kickofftime(), output);
  }

  // optional uint32 week = 50;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->week(), output);
  }

  // optional bytes gameplayerprojmetaroot = 60;
  if (has_gameplayerprojmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->gameplayerprojmetaroot(), output);
  }

  // optional bytes gamedatametaid = 70;
  if (has_gamedatametaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->gamedatametaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamProjMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gameid = 20;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->gameid(), target);
  }

  // optional string team = 30;
  if (has_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->team(), target);
  }

  // optional uint32 kickofftime = 40;
  if (has_kickofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->kickofftime(), target);
  }

  // optional uint32 week = 50;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->week(), target);
  }

  // optional bytes gameplayerprojmetaroot = 60;
  if (has_gameplayerprojmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->gameplayerprojmetaroot(), target);
  }

  // optional bytes gamedatametaid = 70;
  if (has_gamedatametaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->gamedatametaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamProjMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gameid = 20;
    if (has_gameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional string team = 30;
    if (has_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team());
    }

    // optional uint32 kickofftime = 40;
    if (has_kickofftime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kickofftime());
    }

    // optional uint32 week = 50;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional bytes gameplayerprojmetaroot = 60;
    if (has_gameplayerprojmetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gameplayerprojmetaroot());
    }

    // optional bytes gamedatametaid = 70;
    if (has_gamedatametaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gamedatametaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamProjMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamProjMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamProjMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamProjMeta::MergeFrom(const TeamProjMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_kickofftime()) {
      set_kickofftime(from.kickofftime());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_gameplayerprojmetaroot()) {
      set_gameplayerprojmetaroot(from.gameplayerprojmetaroot());
    }
    if (from.has_gamedatametaid()) {
      set_gamedatametaid(from.gamedatametaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamProjMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamProjMeta::CopyFrom(const TeamProjMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamProjMeta::IsInitialized() const {

  return true;
}

void TeamProjMeta::Swap(TeamProjMeta* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(team_, other->team_);
    std::swap(kickofftime_, other->kickofftime_);
    std::swap(week_, other->week_);
    std::swap(gameplayerprojmetaroot_, other->gameplayerprojmetaroot_);
    std::swap(gamedatametaid_, other->gamedatametaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamProjMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamProjMeta_descriptor_;
  metadata.reflection = TeamProjMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamResultMeta::kGameidFieldNumber;
const int TeamResultMeta::kTeamFieldNumber;
const int TeamResultMeta::kKickofftimeFieldNumber;
const int TeamResultMeta::kWeekFieldNumber;
const int TeamResultMeta::kPlayerresultmetarootFieldNumber;
const int TeamResultMeta::kResultdatametaidFieldNumber;
#endif  // !_MSC_VER

TeamResultMeta::TeamResultMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamResultMeta::InitAsDefaultInstance() {
}

TeamResultMeta::TeamResultMeta(const TeamResultMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamResultMeta::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kickofftime_ = 0u;
  week_ = 0u;
  playerresultmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resultdatametaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamResultMeta::~TeamResultMeta() {
  SharedDtor();
}

void TeamResultMeta::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (team_ != &::google::protobuf::internal::kEmptyString) {
    delete team_;
  }
  if (playerresultmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete playerresultmetaroot_;
  }
  if (resultdatametaid_ != &::google::protobuf::internal::kEmptyString) {
    delete resultdatametaid_;
  }
  if (this != default_instance_) {
  }
}

void TeamResultMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamResultMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamResultMeta_descriptor_;
}

const TeamResultMeta& TeamResultMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

TeamResultMeta* TeamResultMeta::default_instance_ = NULL;

TeamResultMeta* TeamResultMeta::New() const {
  return new TeamResultMeta;
}

void TeamResultMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::kEmptyString) {
        gameid_->clear();
      }
    }
    if (has_team()) {
      if (team_ != &::google::protobuf::internal::kEmptyString) {
        team_->clear();
      }
    }
    kickofftime_ = 0u;
    week_ = 0u;
    if (has_playerresultmetaroot()) {
      if (playerresultmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        playerresultmetaroot_->clear();
      }
    }
    if (has_resultdatametaid()) {
      if (resultdatametaid_ != &::google::protobuf::internal::kEmptyString) {
        resultdatametaid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamResultMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_team;
        break;
      }

      // optional string team = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team().data(), this->team().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_kickofftime;
        break;
      }

      // optional uint32 kickofftime = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kickofftime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kickofftime_)));
          set_has_kickofftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_week;
        break;
      }

      // optional uint32 week = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_playerresultmetaroot;
        break;
      }

      // optional bytes playerresultmetaroot = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerresultmetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playerresultmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_resultdatametaid;
        break;
      }

      // optional bytes resultdatametaid = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultdatametaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdatametaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamResultMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gameid = 20;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->gameid(), output);
  }

  // optional string team = 30;
  if (has_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->team(), output);
  }

  // optional uint32 kickofftime = 40;
  if (has_kickofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->kickofftime(), output);
  }

  // optional uint32 week = 50;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->week(), output);
  }

  // optional bytes playerresultmetaroot = 60;
  if (has_playerresultmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->playerresultmetaroot(), output);
  }

  // optional bytes resultdatametaid = 70;
  if (has_resultdatametaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->resultdatametaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamResultMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gameid = 20;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->gameid(), target);
  }

  // optional string team = 30;
  if (has_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->team(), target);
  }

  // optional uint32 kickofftime = 40;
  if (has_kickofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->kickofftime(), target);
  }

  // optional uint32 week = 50;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->week(), target);
  }

  // optional bytes playerresultmetaroot = 60;
  if (has_playerresultmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->playerresultmetaroot(), target);
  }

  // optional bytes resultdatametaid = 70;
  if (has_resultdatametaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->resultdatametaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamResultMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gameid = 20;
    if (has_gameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional string team = 30;
    if (has_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team());
    }

    // optional uint32 kickofftime = 40;
    if (has_kickofftime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kickofftime());
    }

    // optional uint32 week = 50;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional bytes playerresultmetaroot = 60;
    if (has_playerresultmetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playerresultmetaroot());
    }

    // optional bytes resultdatametaid = 70;
    if (has_resultdatametaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdatametaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamResultMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamResultMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamResultMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamResultMeta::MergeFrom(const TeamResultMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_kickofftime()) {
      set_kickofftime(from.kickofftime());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_playerresultmetaroot()) {
      set_playerresultmetaroot(from.playerresultmetaroot());
    }
    if (from.has_resultdatametaid()) {
      set_resultdatametaid(from.resultdatametaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamResultMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamResultMeta::CopyFrom(const TeamResultMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamResultMeta::IsInitialized() const {

  return true;
}

void TeamResultMeta::Swap(TeamResultMeta* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(team_, other->team_);
    std::swap(kickofftime_, other->kickofftime_);
    std::swap(week_, other->week_);
    std::swap(playerresultmetaroot_, other->playerresultmetaroot_);
    std::swap(resultdatametaid_, other->resultdatametaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamResultMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamResultMeta_descriptor_;
  metadata.reflection = TeamResultMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerProjMeta::kPlayeridFieldNumber;
const int GamePlayerProjMeta::kGamestatusmetaidFieldNumber;
const int GamePlayerProjMeta::kProjmetaplayerrootFieldNumber;
const int GamePlayerProjMeta::kPosmetaplayerrootFieldNumber;
const int GamePlayerProjMeta::kGamedatametaidFieldNumber;
#endif  // !_MSC_VER

GamePlayerProjMeta::GamePlayerProjMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerProjMeta::InitAsDefaultInstance() {
}

GamePlayerProjMeta::GamePlayerProjMeta(const GamePlayerProjMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerProjMeta::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamestatusmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  projmetaplayerroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posmetaplayerroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamedatametaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerProjMeta::~GamePlayerProjMeta() {
  SharedDtor();
}

void GamePlayerProjMeta::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (gamestatusmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamestatusmetaid_;
  }
  if (projmetaplayerroot_ != &::google::protobuf::internal::kEmptyString) {
    delete projmetaplayerroot_;
  }
  if (posmetaplayerroot_ != &::google::protobuf::internal::kEmptyString) {
    delete posmetaplayerroot_;
  }
  if (gamedatametaid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamedatametaid_;
  }
  if (this != default_instance_) {
  }
}

void GamePlayerProjMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerProjMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerProjMeta_descriptor_;
}

const GamePlayerProjMeta& GamePlayerProjMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GamePlayerProjMeta* GamePlayerProjMeta::default_instance_ = NULL;

GamePlayerProjMeta* GamePlayerProjMeta::New() const {
  return new GamePlayerProjMeta;
}

void GamePlayerProjMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_gamestatusmetaid()) {
      if (gamestatusmetaid_ != &::google::protobuf::internal::kEmptyString) {
        gamestatusmetaid_->clear();
      }
    }
    if (has_projmetaplayerroot()) {
      if (projmetaplayerroot_ != &::google::protobuf::internal::kEmptyString) {
        projmetaplayerroot_->clear();
      }
    }
    if (has_posmetaplayerroot()) {
      if (posmetaplayerroot_ != &::google::protobuf::internal::kEmptyString) {
        posmetaplayerroot_->clear();
      }
    }
    if (has_gamedatametaid()) {
      if (gamedatametaid_ != &::google::protobuf::internal::kEmptyString) {
        gamedatametaid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerProjMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_gamestatusmetaid;
        break;
      }

      // optional bytes gamestatusmetaid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestatusmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamestatusmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_projmetaplayerroot;
        break;
      }

      // optional bytes projmetaplayerroot = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_projmetaplayerroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_projmetaplayerroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_posmetaplayerroot;
        break;
      }

      // optional bytes posmetaplayerroot = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_posmetaplayerroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posmetaplayerroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_gamedatametaid;
        break;
      }

      // optional bytes gamedatametaid = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamedatametaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamedatametaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerProjMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->playerid(), output);
  }

  // optional bytes gamestatusmetaid = 30;
  if (has_gamestatusmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->gamestatusmetaid(), output);
  }

  // optional bytes projmetaplayerroot = 60;
  if (has_projmetaplayerroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->projmetaplayerroot(), output);
  }

  // optional bytes posmetaplayerroot = 70;
  if (has_posmetaplayerroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->posmetaplayerroot(), output);
  }

  // optional bytes gamedatametaid = 80;
  if (has_gamedatametaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      80, this->gamedatametaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerProjMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->playerid(), target);
  }

  // optional bytes gamestatusmetaid = 30;
  if (has_gamestatusmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->gamestatusmetaid(), target);
  }

  // optional bytes projmetaplayerroot = 60;
  if (has_projmetaplayerroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->projmetaplayerroot(), target);
  }

  // optional bytes posmetaplayerroot = 70;
  if (has_posmetaplayerroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->posmetaplayerroot(), target);
  }

  // optional bytes gamedatametaid = 80;
  if (has_gamedatametaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        80, this->gamedatametaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerProjMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 20;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional bytes gamestatusmetaid = 30;
    if (has_gamestatusmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gamestatusmetaid());
    }

    // optional bytes projmetaplayerroot = 60;
    if (has_projmetaplayerroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->projmetaplayerroot());
    }

    // optional bytes posmetaplayerroot = 70;
    if (has_posmetaplayerroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posmetaplayerroot());
    }

    // optional bytes gamedatametaid = 80;
    if (has_gamedatametaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gamedatametaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerProjMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerProjMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerProjMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerProjMeta::MergeFrom(const GamePlayerProjMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gamestatusmetaid()) {
      set_gamestatusmetaid(from.gamestatusmetaid());
    }
    if (from.has_projmetaplayerroot()) {
      set_projmetaplayerroot(from.projmetaplayerroot());
    }
    if (from.has_posmetaplayerroot()) {
      set_posmetaplayerroot(from.posmetaplayerroot());
    }
    if (from.has_gamedatametaid()) {
      set_gamedatametaid(from.gamedatametaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerProjMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerProjMeta::CopyFrom(const GamePlayerProjMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerProjMeta::IsInitialized() const {

  return true;
}

void GamePlayerProjMeta::Swap(GamePlayerProjMeta* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(gamestatusmetaid_, other->gamestatusmetaid_);
    std::swap(projmetaplayerroot_, other->projmetaplayerroot_);
    std::swap(posmetaplayerroot_, other->posmetaplayerroot_);
    std::swap(gamedatametaid_, other->gamedatametaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerProjMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerProjMeta_descriptor_;
  metadata.reflection = GamePlayerProjMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProjMeta::kNameFieldNumber;
const int ProjMeta::kProjFieldNumber;
const int ProjMeta::kPlayeridFieldNumber;
const int ProjMeta::kTxmetaidFieldNumber;
const int ProjMeta::kPrevFieldNumber;
#endif  // !_MSC_VER

ProjMeta::ProjMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProjMeta::InitAsDefaultInstance() {
}

ProjMeta::ProjMeta(const ProjMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProjMeta::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proj_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  txmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjMeta::~ProjMeta() {
  SharedDtor();
}

void ProjMeta::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete txmetaid_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (this != default_instance_) {
  }
}

void ProjMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjMeta_descriptor_;
}

const ProjMeta& ProjMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

ProjMeta* ProjMeta::default_instance_ = NULL;

ProjMeta* ProjMeta::New() const {
  return new ProjMeta;
}

void ProjMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    proj_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_txmetaid()) {
      if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
        txmetaid_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProjMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_proj;
        break;
      }

      // optional int32 proj = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proj_)));
          set_has_proj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_playerid;
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_txmetaid;
        break;
      }

      // optional bytes txmetaid = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_prev;
        break;
      }

      // optional bytes prev = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProjMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->proj(), output);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->playerid(), output);
  }

  // optional bytes txmetaid = 40;
  if (has_txmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->txmetaid(), output);
  }

  // optional bytes prev = 50;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->prev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProjMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->proj(), target);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional bytes txmetaid = 40;
  if (has_txmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->txmetaid(), target);
  }

  // optional bytes prev = 50;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->prev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProjMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 proj = 20;
    if (has_proj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proj());
    }

    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional bytes txmetaid = 40;
    if (has_txmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txmetaid());
    }

    // optional bytes prev = 50;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProjMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProjMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjMeta::MergeFrom(const ProjMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_proj()) {
      set_proj(from.proj());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_txmetaid()) {
      set_txmetaid(from.txmetaid());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProjMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjMeta::CopyFrom(const ProjMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjMeta::IsInitialized() const {

  return true;
}

void ProjMeta::Swap(ProjMeta* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(proj_, other->proj_);
    std::swap(playerid_, other->playerid_);
    std::swap(txmetaid_, other->txmetaid_);
    std::swap(prev_, other->prev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProjMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjMeta_descriptor_;
  metadata.reflection = ProjMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PosMeta::kNameFieldNumber;
const int PosMeta::kQtyFieldNumber;
const int PosMeta::kPriceFieldNumber;
const int PosMeta::kPlayeridFieldNumber;
const int PosMeta::kTxmetaidFieldNumber;
const int PosMeta::kPrevFieldNumber;
#endif  // !_MSC_VER

PosMeta::PosMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosMeta::InitAsDefaultInstance() {
}

PosMeta::PosMeta(const PosMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosMeta::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qty_ = 0;
  price_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  txmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosMeta::~PosMeta() {
  SharedDtor();
}

void PosMeta::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete txmetaid_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (this != default_instance_) {
  }
}

void PosMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosMeta_descriptor_;
}

const PosMeta& PosMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

PosMeta* PosMeta::default_instance_ = NULL;

PosMeta* PosMeta::New() const {
  return new PosMeta;
}

void PosMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    qty_ = 0;
    price_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_txmetaid()) {
      if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
        txmetaid_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_qty;
        break;
      }

      // optional int32 qty = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qty_)));
          set_has_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_price;
        break;
      }

      // optional int32 price = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_playerid;
        break;
      }

      // optional string playerid = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_txmetaid;
        break;
      }

      // optional bytes txmetaid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_prev;
        break;
      }

      // optional bytes prev = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional int32 qty = 20;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->qty(), output);
  }

  // optional int32 price = 30;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->price(), output);
  }

  // optional string playerid = 40;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->playerid(), output);
  }

  // optional bytes txmetaid = 50;
  if (has_txmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->txmetaid(), output);
  }

  // optional bytes prev = 60;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->prev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional int32 qty = 20;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->qty(), target);
  }

  // optional int32 price = 30;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->price(), target);
  }

  // optional string playerid = 40;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->playerid(), target);
  }

  // optional bytes txmetaid = 50;
  if (has_txmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->txmetaid(), target);
  }

  // optional bytes prev = 60;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->prev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 qty = 20;
    if (has_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qty());
    }

    // optional int32 price = 30;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional string playerid = 40;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional bytes txmetaid = 50;
    if (has_txmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txmetaid());
    }

    // optional bytes prev = 60;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosMeta::MergeFrom(const PosMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_txmetaid()) {
      set_txmetaid(from.txmetaid());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosMeta::CopyFrom(const PosMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosMeta::IsInitialized() const {

  return true;
}

void PosMeta::Swap(PosMeta* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(qty_, other->qty_);
    std::swap(price_, other->price_);
    std::swap(playerid_, other->playerid_);
    std::swap(txmetaid_, other->txmetaid_);
    std::swap(prev_, other->prev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosMeta_descriptor_;
  metadata.reflection = PosMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerResultMeta::kPlayergamestatsidFieldNumber;
const int PlayerResultMeta::kGamestatusmetaidFieldNumber;
const int PlayerResultMeta::kAwardmetaplayerrootFieldNumber;
const int PlayerResultMeta::kPnlmetaplayerrootFieldNumber;
const int PlayerResultMeta::kResultdatametaidFieldNumber;
#endif  // !_MSC_VER

PlayerResultMeta::PlayerResultMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerResultMeta::InitAsDefaultInstance() {
}

PlayerResultMeta::PlayerResultMeta(const PlayerResultMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerResultMeta::SharedCtor() {
  _cached_size_ = 0;
  playergamestatsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamestatusmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardmetaplayerroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pnlmetaplayerroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resultdatametaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerResultMeta::~PlayerResultMeta() {
  SharedDtor();
}

void PlayerResultMeta::SharedDtor() {
  if (playergamestatsid_ != &::google::protobuf::internal::kEmptyString) {
    delete playergamestatsid_;
  }
  if (gamestatusmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamestatusmetaid_;
  }
  if (awardmetaplayerroot_ != &::google::protobuf::internal::kEmptyString) {
    delete awardmetaplayerroot_;
  }
  if (pnlmetaplayerroot_ != &::google::protobuf::internal::kEmptyString) {
    delete pnlmetaplayerroot_;
  }
  if (resultdatametaid_ != &::google::protobuf::internal::kEmptyString) {
    delete resultdatametaid_;
  }
  if (this != default_instance_) {
  }
}

void PlayerResultMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerResultMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerResultMeta_descriptor_;
}

const PlayerResultMeta& PlayerResultMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

PlayerResultMeta* PlayerResultMeta::default_instance_ = NULL;

PlayerResultMeta* PlayerResultMeta::New() const {
  return new PlayerResultMeta;
}

void PlayerResultMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playergamestatsid()) {
      if (playergamestatsid_ != &::google::protobuf::internal::kEmptyString) {
        playergamestatsid_->clear();
      }
    }
    if (has_gamestatusmetaid()) {
      if (gamestatusmetaid_ != &::google::protobuf::internal::kEmptyString) {
        gamestatusmetaid_->clear();
      }
    }
    if (has_awardmetaplayerroot()) {
      if (awardmetaplayerroot_ != &::google::protobuf::internal::kEmptyString) {
        awardmetaplayerroot_->clear();
      }
    }
    if (has_pnlmetaplayerroot()) {
      if (pnlmetaplayerroot_ != &::google::protobuf::internal::kEmptyString) {
        pnlmetaplayerroot_->clear();
      }
    }
    if (has_resultdatametaid()) {
      if (resultdatametaid_ != &::google::protobuf::internal::kEmptyString) {
        resultdatametaid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerResultMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes playergamestatsid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playergamestatsid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_gamestatusmetaid;
        break;
      }

      // optional bytes gamestatusmetaid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestatusmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamestatusmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_awardmetaplayerroot;
        break;
      }

      // optional bytes awardmetaplayerroot = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardmetaplayerroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_awardmetaplayerroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_pnlmetaplayerroot;
        break;
      }

      // optional bytes pnlmetaplayerroot = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pnlmetaplayerroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pnlmetaplayerroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_resultdatametaid;
        break;
      }

      // optional bytes resultdatametaid = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultdatametaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdatametaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerResultMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes playergamestatsid = 10;
  if (has_playergamestatsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->playergamestatsid(), output);
  }

  // optional bytes gamestatusmetaid = 30;
  if (has_gamestatusmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->gamestatusmetaid(), output);
  }

  // optional bytes awardmetaplayerroot = 60;
  if (has_awardmetaplayerroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->awardmetaplayerroot(), output);
  }

  // optional bytes pnlmetaplayerroot = 70;
  if (has_pnlmetaplayerroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->pnlmetaplayerroot(), output);
  }

  // optional bytes resultdatametaid = 80;
  if (has_resultdatametaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      80, this->resultdatametaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerResultMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes playergamestatsid = 10;
  if (has_playergamestatsid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->playergamestatsid(), target);
  }

  // optional bytes gamestatusmetaid = 30;
  if (has_gamestatusmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->gamestatusmetaid(), target);
  }

  // optional bytes awardmetaplayerroot = 60;
  if (has_awardmetaplayerroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->awardmetaplayerroot(), target);
  }

  // optional bytes pnlmetaplayerroot = 70;
  if (has_pnlmetaplayerroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->pnlmetaplayerroot(), target);
  }

  // optional bytes resultdatametaid = 80;
  if (has_resultdatametaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        80, this->resultdatametaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerResultMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes playergamestatsid = 10;
    if (has_playergamestatsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playergamestatsid());
    }

    // optional bytes gamestatusmetaid = 30;
    if (has_gamestatusmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gamestatusmetaid());
    }

    // optional bytes awardmetaplayerroot = 60;
    if (has_awardmetaplayerroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->awardmetaplayerroot());
    }

    // optional bytes pnlmetaplayerroot = 70;
    if (has_pnlmetaplayerroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pnlmetaplayerroot());
    }

    // optional bytes resultdatametaid = 80;
    if (has_resultdatametaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdatametaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerResultMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerResultMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerResultMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerResultMeta::MergeFrom(const PlayerResultMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playergamestatsid()) {
      set_playergamestatsid(from.playergamestatsid());
    }
    if (from.has_gamestatusmetaid()) {
      set_gamestatusmetaid(from.gamestatusmetaid());
    }
    if (from.has_awardmetaplayerroot()) {
      set_awardmetaplayerroot(from.awardmetaplayerroot());
    }
    if (from.has_pnlmetaplayerroot()) {
      set_pnlmetaplayerroot(from.pnlmetaplayerroot());
    }
    if (from.has_resultdatametaid()) {
      set_resultdatametaid(from.resultdatametaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerResultMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResultMeta::CopyFrom(const PlayerResultMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResultMeta::IsInitialized() const {

  return true;
}

void PlayerResultMeta::Swap(PlayerResultMeta* other) {
  if (other != this) {
    std::swap(playergamestatsid_, other->playergamestatsid_);
    std::swap(gamestatusmetaid_, other->gamestatusmetaid_);
    std::swap(awardmetaplayerroot_, other->awardmetaplayerroot_);
    std::swap(pnlmetaplayerroot_, other->pnlmetaplayerroot_);
    std::swap(resultdatametaid_, other->resultdatametaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerResultMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerResultMeta_descriptor_;
  metadata.reflection = PlayerResultMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerGameStats::kPlayeridFieldNumber;
const int PlayerGameStats::kResultFieldNumber;
const int PlayerGameStats::kStatsFieldNumber;
const int PlayerGameStats::kGameidFieldNumber;
#endif  // !_MSC_VER

PlayerGameStats::PlayerGameStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerGameStats::InitAsDefaultInstance() {
  stats_ = const_cast< ::fantasybit::Stats*>(&::fantasybit::Stats::default_instance());
}

PlayerGameStats::PlayerGameStats(const PlayerGameStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerGameStats::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  stats_ = NULL;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerGameStats::~PlayerGameStats() {
  SharedDtor();
}

void PlayerGameStats::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (this != default_instance_) {
    delete stats_;
  }
}

void PlayerGameStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerGameStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGameStats_descriptor_;
}

const PlayerGameStats& PlayerGameStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

PlayerGameStats* PlayerGameStats::default_instance_ = NULL;

PlayerGameStats* PlayerGameStats::New() const {
  return new PlayerGameStats;
}

void PlayerGameStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    result_ = 0;
    if (has_stats()) {
      if (stats_ != NULL) stats_->::fantasybit::Stats::Clear();
    }
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::kEmptyString) {
        gameid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerGameStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(325)) goto parse_result;
        break;
      }

      // optional float result = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_stats;
        break;
      }

      // optional .fantasybit.Stats stats = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_gameid;
        break;
      }

      // optional string gameid = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerGameStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->playerid(), output);
  }

  // optional float result = 40;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->result(), output);
  }

  // optional .fantasybit.Stats stats = 50;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->stats(), output);
  }

  // optional string gameid = 60;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerGameStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->playerid(), target);
  }

  // optional float result = 40;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->result(), target);
  }

  // optional .fantasybit.Stats stats = 50;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->stats(), target);
  }

  // optional string gameid = 60;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerGameStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 20;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional float result = 40;
    if (has_result()) {
      total_size += 2 + 4;
    }

    // optional .fantasybit.Stats stats = 50;
    if (has_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

    // optional string gameid = 60;
    if (has_gameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerGameStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerGameStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerGameStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerGameStats::MergeFrom(const PlayerGameStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_stats()) {
      mutable_stats()->::fantasybit::Stats::MergeFrom(from.stats());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerGameStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGameStats::CopyFrom(const PlayerGameStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGameStats::IsInitialized() const {

  return true;
}

void PlayerGameStats::Swap(PlayerGameStats* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(result_, other->result_);
    std::swap(stats_, other->stats_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerGameStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerGameStats_descriptor_;
  metadata.reflection = PlayerGameStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AwardMeta::kNameFieldNumber;
const int AwardMeta::kProjFieldNumber;
const int AwardMeta::kAwardFieldNumber;
const int AwardMeta::kProjmetaidFieldNumber;
const int AwardMeta::kPlayergamestatsidFieldNumber;
#endif  // !_MSC_VER

AwardMeta::AwardMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AwardMeta::InitAsDefaultInstance() {
}

AwardMeta::AwardMeta(const AwardMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AwardMeta::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proj_ = 0;
  award_ = GOOGLE_ULONGLONG(0);
  projmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playergamestatsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AwardMeta::~AwardMeta() {
  SharedDtor();
}

void AwardMeta::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (projmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete projmetaid_;
  }
  if (playergamestatsid_ != &::google::protobuf::internal::kEmptyString) {
    delete playergamestatsid_;
  }
  if (this != default_instance_) {
  }
}

void AwardMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AwardMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AwardMeta_descriptor_;
}

const AwardMeta& AwardMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

AwardMeta* AwardMeta::default_instance_ = NULL;

AwardMeta* AwardMeta::New() const {
  return new AwardMeta;
}

void AwardMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    proj_ = 0;
    award_ = GOOGLE_ULONGLONG(0);
    if (has_projmetaid()) {
      if (projmetaid_ != &::google::protobuf::internal::kEmptyString) {
        projmetaid_->clear();
      }
    }
    if (has_playergamestatsid()) {
      if (playergamestatsid_ != &::google::protobuf::internal::kEmptyString) {
        playergamestatsid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AwardMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_proj;
        break;
      }

      // optional int32 proj = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proj_)));
          set_has_proj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_award;
        break;
      }

      // optional uint64 award = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_projmetaid;
        break;
      }

      // optional bytes projmetaid = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_projmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_projmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_playergamestatsid;
        break;
      }

      // optional bytes playergamestatsid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playergamestatsid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playergamestatsid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AwardMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->proj(), output);
  }

  // optional uint64 award = 30;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->award(), output);
  }

  // optional bytes projmetaid = 40;
  if (has_projmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->projmetaid(), output);
  }

  // optional bytes playergamestatsid = 50;
  if (has_playergamestatsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->playergamestatsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AwardMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->proj(), target);
  }

  // optional uint64 award = 30;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->award(), target);
  }

  // optional bytes projmetaid = 40;
  if (has_projmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->projmetaid(), target);
  }

  // optional bytes playergamestatsid = 50;
  if (has_playergamestatsid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->playergamestatsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AwardMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 proj = 20;
    if (has_proj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proj());
    }

    // optional uint64 award = 30;
    if (has_award()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->award());
    }

    // optional bytes projmetaid = 40;
    if (has_projmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->projmetaid());
    }

    // optional bytes playergamestatsid = 50;
    if (has_playergamestatsid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playergamestatsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AwardMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AwardMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AwardMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AwardMeta::MergeFrom(const AwardMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_proj()) {
      set_proj(from.proj());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_projmetaid()) {
      set_projmetaid(from.projmetaid());
    }
    if (from.has_playergamestatsid()) {
      set_playergamestatsid(from.playergamestatsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AwardMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardMeta::CopyFrom(const AwardMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardMeta::IsInitialized() const {

  return true;
}

void AwardMeta::Swap(AwardMeta* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(proj_, other->proj_);
    std::swap(award_, other->award_);
    std::swap(projmetaid_, other->projmetaid_);
    std::swap(playergamestatsid_, other->playergamestatsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AwardMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AwardMeta_descriptor_;
  metadata.reflection = AwardMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PnlMeta::kNameFieldNumber;
const int PnlMeta::kQtyFieldNumber;
const int PnlMeta::kPriceFieldNumber;
const int PnlMeta::kPnlFieldNumber;
const int PnlMeta::kPosmetaidFieldNumber;
const int PnlMeta::kPlayergamestatsidFieldNumber;
#endif  // !_MSC_VER

PnlMeta::PnlMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PnlMeta::InitAsDefaultInstance() {
}

PnlMeta::PnlMeta(const PnlMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PnlMeta::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qty_ = 0;
  price_ = 0;
  pnl_ = GOOGLE_LONGLONG(0);
  posmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playergamestatsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PnlMeta::~PnlMeta() {
  SharedDtor();
}

void PnlMeta::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (posmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete posmetaid_;
  }
  if (playergamestatsid_ != &::google::protobuf::internal::kEmptyString) {
    delete playergamestatsid_;
  }
  if (this != default_instance_) {
  }
}

void PnlMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PnlMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PnlMeta_descriptor_;
}

const PnlMeta& PnlMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

PnlMeta* PnlMeta::default_instance_ = NULL;

PnlMeta* PnlMeta::New() const {
  return new PnlMeta;
}

void PnlMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    qty_ = 0;
    price_ = 0;
    pnl_ = GOOGLE_LONGLONG(0);
    if (has_posmetaid()) {
      if (posmetaid_ != &::google::protobuf::internal::kEmptyString) {
        posmetaid_->clear();
      }
    }
    if (has_playergamestatsid()) {
      if (playergamestatsid_ != &::google::protobuf::internal::kEmptyString) {
        playergamestatsid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PnlMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_qty;
        break;
      }

      // optional int32 qty = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qty_)));
          set_has_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_price;
        break;
      }

      // optional int32 price = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_pnl;
        break;
      }

      // optional int64 pnl = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pnl_)));
          set_has_pnl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_posmetaid;
        break;
      }

      // optional bytes posmetaid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_posmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_playergamestatsid;
        break;
      }

      // optional bytes playergamestatsid = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playergamestatsid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playergamestatsid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PnlMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional int32 qty = 20;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->qty(), output);
  }

  // optional int32 price = 30;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->price(), output);
  }

  // optional int64 pnl = 40;
  if (has_pnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->pnl(), output);
  }

  // optional bytes posmetaid = 50;
  if (has_posmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->posmetaid(), output);
  }

  // optional bytes playergamestatsid = 60;
  if (has_playergamestatsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->playergamestatsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PnlMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional int32 qty = 20;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->qty(), target);
  }

  // optional int32 price = 30;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->price(), target);
  }

  // optional int64 pnl = 40;
  if (has_pnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->pnl(), target);
  }

  // optional bytes posmetaid = 50;
  if (has_posmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->posmetaid(), target);
  }

  // optional bytes playergamestatsid = 60;
  if (has_playergamestatsid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->playergamestatsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PnlMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 qty = 20;
    if (has_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qty());
    }

    // optional int32 price = 30;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int64 pnl = 40;
    if (has_pnl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pnl());
    }

    // optional bytes posmetaid = 50;
    if (has_posmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posmetaid());
    }

    // optional bytes playergamestatsid = 60;
    if (has_playergamestatsid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playergamestatsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PnlMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PnlMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PnlMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PnlMeta::MergeFrom(const PnlMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_pnl()) {
      set_pnl(from.pnl());
    }
    if (from.has_posmetaid()) {
      set_posmetaid(from.posmetaid());
    }
    if (from.has_playergamestatsid()) {
      set_playergamestatsid(from.playergamestatsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PnlMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PnlMeta::CopyFrom(const PnlMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PnlMeta::IsInitialized() const {

  return true;
}

void PnlMeta::Swap(PnlMeta* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(qty_, other->qty_);
    std::swap(price_, other->price_);
    std::swap(pnl_, other->pnl_);
    std::swap(posmetaid_, other->posmetaid_);
    std::swap(playergamestatsid_, other->playergamestatsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PnlMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PnlMeta_descriptor_;
  metadata.reflection = PnlMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMarketState::kLimitbookmetaidFieldNumber;
const int PlayerMarketState::kPlayeridFieldNumber;
const int PlayerMarketState::kMarketticmetaidFieldNumber;
const int PlayerMarketState::kLockedFieldNumber;
const int PlayerMarketState::kPrevFieldNumber;
const int PlayerMarketState::kNextFieldNumber;
#endif  // !_MSC_VER

PlayerMarketState::PlayerMarketState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMarketState::InitAsDefaultInstance() {
}

PlayerMarketState::PlayerMarketState(const PlayerMarketState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMarketState::SharedCtor() {
  _cached_size_ = 0;
  limitbookmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  marketticmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locked_ = false;
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  next_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMarketState::~PlayerMarketState() {
  SharedDtor();
}

void PlayerMarketState::SharedDtor() {
  if (limitbookmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete limitbookmetaid_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (marketticmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete marketticmetaid_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (next_ != &::google::protobuf::internal::kEmptyString) {
    delete next_;
  }
  if (this != default_instance_) {
  }
}

void PlayerMarketState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMarketState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMarketState_descriptor_;
}

const PlayerMarketState& PlayerMarketState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

PlayerMarketState* PlayerMarketState::default_instance_ = NULL;

PlayerMarketState* PlayerMarketState::New() const {
  return new PlayerMarketState;
}

void PlayerMarketState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_limitbookmetaid()) {
      if (limitbookmetaid_ != &::google::protobuf::internal::kEmptyString) {
        limitbookmetaid_->clear();
      }
    }
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_marketticmetaid()) {
      if (marketticmetaid_ != &::google::protobuf::internal::kEmptyString) {
        marketticmetaid_->clear();
      }
    }
    locked_ = false;
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
    if (has_next()) {
      if (next_ != &::google::protobuf::internal::kEmptyString) {
        next_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMarketState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes limitbookmetaid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_limitbookmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_playerid;
        break;
      }

      // optional string playerid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_marketticmetaid;
        break;
      }

      // optional bytes marketticmetaid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marketticmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marketticmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_locked;
        break;
      }

      // optional bool locked = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_prev;
        break;
      }

      // optional bytes prev = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_next;
        break;
      }

      // optional bytes next = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerMarketState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes limitbookmetaid = 10;
  if (has_limitbookmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->limitbookmetaid(), output);
  }

  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->playerid(), output);
  }

  // optional bytes marketticmetaid = 30;
  if (has_marketticmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->marketticmetaid(), output);
  }

  // optional bool locked = 31;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->locked(), output);
  }

  // optional bytes prev = 40;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->prev(), output);
  }

  // optional bytes next = 50;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->next(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMarketState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes limitbookmetaid = 10;
  if (has_limitbookmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->limitbookmetaid(), target);
  }

  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->playerid(), target);
  }

  // optional bytes marketticmetaid = 30;
  if (has_marketticmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->marketticmetaid(), target);
  }

  // optional bool locked = 31;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->locked(), target);
  }

  // optional bytes prev = 40;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->prev(), target);
  }

  // optional bytes next = 50;
  if (has_next()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->next(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMarketState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes limitbookmetaid = 10;
    if (has_limitbookmetaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->limitbookmetaid());
    }

    // optional string playerid = 20;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional bytes marketticmetaid = 30;
    if (has_marketticmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marketticmetaid());
    }

    // optional bool locked = 31;
    if (has_locked()) {
      total_size += 2 + 1;
    }

    // optional bytes prev = 40;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

    // optional bytes next = 50;
    if (has_next()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->next());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMarketState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMarketState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMarketState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMarketState::MergeFrom(const PlayerMarketState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limitbookmetaid()) {
      set_limitbookmetaid(from.limitbookmetaid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_marketticmetaid()) {
      set_marketticmetaid(from.marketticmetaid());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMarketState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMarketState::CopyFrom(const PlayerMarketState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMarketState::IsInitialized() const {

  return true;
}

void PlayerMarketState::Swap(PlayerMarketState* other) {
  if (other != this) {
    std::swap(limitbookmetaid_, other->limitbookmetaid_);
    std::swap(playerid_, other->playerid_);
    std::swap(marketticmetaid_, other->marketticmetaid_);
    std::swap(locked_, other->locked_);
    std::swap(prev_, other->prev_);
    std::swap(next_, other->next_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMarketState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMarketState_descriptor_;
  metadata.reflection = PlayerMarketState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitBookMeta::kBidFieldNumber;
const int LimitBookMeta::kBidsizeFieldNumber;
const int LimitBookMeta::kAsksizeFieldNumber;
const int LimitBookMeta::kAskFieldNumber;
const int LimitBookMeta::kBidordermetarootFieldNumber;
const int LimitBookMeta::kAskordermetarootFieldNumber;
#endif  // !_MSC_VER

LimitBookMeta::LimitBookMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitBookMeta::InitAsDefaultInstance() {
}

LimitBookMeta::LimitBookMeta(const LimitBookMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitBookMeta::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  bidsize_ = 0;
  asksize_ = 0;
  ask_ = 0;
  bidordermetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  askordermetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitBookMeta::~LimitBookMeta() {
  SharedDtor();
}

void LimitBookMeta::SharedDtor() {
  if (bidordermetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete bidordermetaroot_;
  }
  if (askordermetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete askordermetaroot_;
  }
  if (this != default_instance_) {
  }
}

void LimitBookMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitBookMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitBookMeta_descriptor_;
}

const LimitBookMeta& LimitBookMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

LimitBookMeta* LimitBookMeta::default_instance_ = NULL;

LimitBookMeta* LimitBookMeta::New() const {
  return new LimitBookMeta;
}

void LimitBookMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bid_ = 0;
    bidsize_ = 0;
    asksize_ = 0;
    ask_ = 0;
    if (has_bidordermetaroot()) {
      if (bidordermetaroot_ != &::google::protobuf::internal::kEmptyString) {
        bidordermetaroot_->clear();
      }
    }
    if (has_askordermetaroot()) {
      if (askordermetaroot_ != &::google::protobuf::internal::kEmptyString) {
        askordermetaroot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitBookMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bidsize;
        break;
      }

      // optional int32 bidsize = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsize_)));
          set_has_bidsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_asksize;
        break;
      }

      // optional int32 asksize = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_asksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksize_)));
          set_has_asksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_ask;
        break;
      }

      // optional int32 ask = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_)));
          set_has_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_bidordermetaroot;
        break;
      }

      // optional bytes bidordermetaroot = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bidordermetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bidordermetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_askordermetaroot;
        break;
      }

      // optional bytes askordermetaroot = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_askordermetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_askordermetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitBookMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bid = 10;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bid(), output);
  }

  // optional int32 bidsize = 20;
  if (has_bidsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bidsize(), output);
  }

  // optional int32 asksize = 30;
  if (has_asksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->asksize(), output);
  }

  // optional int32 ask = 40;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->ask(), output);
  }

  // optional bytes bidordermetaroot = 50;
  if (has_bidordermetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->bidordermetaroot(), output);
  }

  // optional bytes askordermetaroot = 60;
  if (has_askordermetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->askordermetaroot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitBookMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bid = 10;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bid(), target);
  }

  // optional int32 bidsize = 20;
  if (has_bidsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bidsize(), target);
  }

  // optional int32 asksize = 30;
  if (has_asksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->asksize(), target);
  }

  // optional int32 ask = 40;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->ask(), target);
  }

  // optional bytes bidordermetaroot = 50;
  if (has_bidordermetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->bidordermetaroot(), target);
  }

  // optional bytes askordermetaroot = 60;
  if (has_askordermetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->askordermetaroot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitBookMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bid = 10;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 bidsize = 20;
    if (has_bidsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsize());
    }

    // optional int32 asksize = 30;
    if (has_asksize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksize());
    }

    // optional int32 ask = 40;
    if (has_ask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ask());
    }

    // optional bytes bidordermetaroot = 50;
    if (has_bidordermetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bidordermetaroot());
    }

    // optional bytes askordermetaroot = 60;
    if (has_askordermetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->askordermetaroot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitBookMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitBookMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitBookMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitBookMeta::MergeFrom(const LimitBookMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_bidsize()) {
      set_bidsize(from.bidsize());
    }
    if (from.has_asksize()) {
      set_asksize(from.asksize());
    }
    if (from.has_ask()) {
      set_ask(from.ask());
    }
    if (from.has_bidordermetaroot()) {
      set_bidordermetaroot(from.bidordermetaroot());
    }
    if (from.has_askordermetaroot()) {
      set_askordermetaroot(from.askordermetaroot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitBookMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitBookMeta::CopyFrom(const LimitBookMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitBookMeta::IsInitialized() const {

  return true;
}

void LimitBookMeta::Swap(LimitBookMeta* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(bidsize_, other->bidsize_);
    std::swap(asksize_, other->asksize_);
    std::swap(ask_, other->ask_);
    std::swap(bidordermetaroot_, other->bidordermetaroot_);
    std::swap(askordermetaroot_, other->askordermetaroot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitBookMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitBookMeta_descriptor_;
  metadata.reflection = LimitBookMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketTicMeta::kPriceFieldNumber;
const int MarketTicMeta::kSizeFieldNumber;
const int MarketTicMeta::kOrderfillheadFieldNumber;
const int MarketTicMeta::kPrevFieldNumber;
#endif  // !_MSC_VER

MarketTicMeta::MarketTicMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketTicMeta::InitAsDefaultInstance() {
}

MarketTicMeta::MarketTicMeta(const MarketTicMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketTicMeta::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0;
  size_ = 0;
  orderfillhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketTicMeta::~MarketTicMeta() {
  SharedDtor();
}

void MarketTicMeta::SharedDtor() {
  if (orderfillhead_ != &::google::protobuf::internal::kEmptyString) {
    delete orderfillhead_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (this != default_instance_) {
  }
}

void MarketTicMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketTicMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketTicMeta_descriptor_;
}

const MarketTicMeta& MarketTicMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

MarketTicMeta* MarketTicMeta::default_instance_ = NULL;

MarketTicMeta* MarketTicMeta::New() const {
  return new MarketTicMeta;
}

void MarketTicMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_ = 0;
    size_ = 0;
    if (has_orderfillhead()) {
      if (orderfillhead_ != &::google::protobuf::internal::kEmptyString) {
        orderfillhead_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketTicMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 price = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_size;
        break;
      }

      // optional int32 size = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_orderfillhead;
        break;
      }

      // optional bytes orderfillhead = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderfillhead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_orderfillhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_prev;
        break;
      }

      // optional bytes prev = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketTicMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 price = 20;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->price(), output);
  }

  // optional int32 size = 30;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->size(), output);
  }

  // optional bytes orderfillhead = 40;
  if (has_orderfillhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->orderfillhead(), output);
  }

  // optional bytes prev = 50;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->prev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketTicMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 price = 20;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->price(), target);
  }

  // optional int32 size = 30;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->size(), target);
  }

  // optional bytes orderfillhead = 40;
  if (has_orderfillhead()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->orderfillhead(), target);
  }

  // optional bytes prev = 50;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->prev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketTicMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 price = 20;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 size = 30;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes orderfillhead = 40;
    if (has_orderfillhead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->orderfillhead());
    }

    // optional bytes prev = 50;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketTicMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketTicMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketTicMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketTicMeta::MergeFrom(const MarketTicMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_orderfillhead()) {
      set_orderfillhead(from.orderfillhead());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketTicMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketTicMeta::CopyFrom(const MarketTicMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketTicMeta::IsInitialized() const {

  return true;
}

void MarketTicMeta::Swap(MarketTicMeta* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(size_, other->size_);
    std::swap(orderfillhead_, other->orderfillhead_);
    std::swap(prev_, other->prev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketTicMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketTicMeta_descriptor_;
  metadata.reflection = MarketTicMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderMeta::kRefnumFieldNumber;
const int OrderMeta::kFnameFieldNumber;
const int OrderMeta::kPlayeridFieldNumber;
const int OrderMeta::kBuysideFieldNumber;
const int OrderMeta::kSizeFieldNumber;
const int OrderMeta::kPriceFieldNumber;
const int OrderMeta::kTxmetaidFieldNumber;
const int OrderMeta::kOrderfillmetaidFieldNumber;
const int OrderMeta::kTimestampFieldNumber;
const int OrderMeta::kPrevFieldNumber;
#endif  // !_MSC_VER

OrderMeta::OrderMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderMeta::InitAsDefaultInstance() {
}

OrderMeta::OrderMeta(const OrderMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderMeta::SharedCtor() {
  _cached_size_ = 0;
  refnum_ = 0;
  fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buyside_ = false;
  size_ = 0;
  price_ = 0;
  txmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderfillmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = 0;
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderMeta::~OrderMeta() {
  SharedDtor();
}

void OrderMeta::SharedDtor() {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    delete fname_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete txmetaid_;
  }
  if (orderfillmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderfillmetaid_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (this != default_instance_) {
  }
}

void OrderMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderMeta_descriptor_;
}

const OrderMeta& OrderMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

OrderMeta* OrderMeta::default_instance_ = NULL;

OrderMeta* OrderMeta::New() const {
  return new OrderMeta;
}

void OrderMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refnum_ = 0;
    if (has_fname()) {
      if (fname_ != &::google::protobuf::internal::kEmptyString) {
        fname_->clear();
      }
    }
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    buyside_ = false;
    size_ = 0;
    price_ = 0;
    if (has_txmetaid()) {
      if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
        txmetaid_->clear();
      }
    }
    if (has_orderfillmetaid()) {
      if (orderfillmetaid_ != &::google::protobuf::internal::kEmptyString) {
        orderfillmetaid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    timestamp_ = 0;
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refnum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refnum_)));
          set_has_refnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fname;
        break;
      }

      // optional string fname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fname().data(), this->fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_playerid;
        break;
      }

      // optional string playerid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_buyside;
        break;
      }

      // optional bool buyside = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyside:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buyside_)));
          set_has_buyside();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_size;
        break;
      }

      // optional int32 size = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_price;
        break;
      }

      // optional int32 price = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_txmetaid;
        break;
      }

      // optional bytes txmetaid = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_orderfillmetaid;
        break;
      }

      // optional bytes orderfillmetaid = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderfillmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_orderfillmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_prev;
        break;
      }

      // optional bytes prev = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refnum = 1;
  if (has_refnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refnum(), output);
  }

  // optional string fname = 10;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fname(), output);
  }

  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->playerid(), output);
  }

  // optional bool buyside = 30;
  if (has_buyside()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->buyside(), output);
  }

  // optional int32 size = 40;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->size(), output);
  }

  // optional int32 price = 50;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->price(), output);
  }

  // optional bytes txmetaid = 60;
  if (has_txmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->txmetaid(), output);
  }

  // optional bytes orderfillmetaid = 70;
  if (has_orderfillmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->orderfillmetaid(), output);
  }

  // optional int32 timestamp = 75;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->timestamp(), output);
  }

  // optional bytes prev = 80;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      80, this->prev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refnum = 1;
  if (has_refnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refnum(), target);
  }

  // optional string fname = 10;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fname(), target);
  }

  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->playerid(), target);
  }

  // optional bool buyside = 30;
  if (has_buyside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->buyside(), target);
  }

  // optional int32 size = 40;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->size(), target);
  }

  // optional int32 price = 50;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->price(), target);
  }

  // optional bytes txmetaid = 60;
  if (has_txmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->txmetaid(), target);
  }

  // optional bytes orderfillmetaid = 70;
  if (has_orderfillmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->orderfillmetaid(), target);
  }

  // optional int32 timestamp = 75;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->timestamp(), target);
  }

  // optional bytes prev = 80;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        80, this->prev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refnum = 1;
    if (has_refnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refnum());
    }

    // optional string fname = 10;
    if (has_fname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fname());
    }

    // optional string playerid = 20;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional bool buyside = 30;
    if (has_buyside()) {
      total_size += 2 + 1;
    }

    // optional int32 size = 40;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 price = 50;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional bytes txmetaid = 60;
    if (has_txmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txmetaid());
    }

    // optional bytes orderfillmetaid = 70;
    if (has_orderfillmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->orderfillmetaid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 timestamp = 75;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional bytes prev = 80;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderMeta::MergeFrom(const OrderMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refnum()) {
      set_refnum(from.refnum());
    }
    if (from.has_fname()) {
      set_fname(from.fname());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_buyside()) {
      set_buyside(from.buyside());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_txmetaid()) {
      set_txmetaid(from.txmetaid());
    }
    if (from.has_orderfillmetaid()) {
      set_orderfillmetaid(from.orderfillmetaid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderMeta::CopyFrom(const OrderMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderMeta::IsInitialized() const {

  return true;
}

void OrderMeta::Swap(OrderMeta* other) {
  if (other != this) {
    std::swap(refnum_, other->refnum_);
    std::swap(fname_, other->fname_);
    std::swap(playerid_, other->playerid_);
    std::swap(buyside_, other->buyside_);
    std::swap(size_, other->size_);
    std::swap(price_, other->price_);
    std::swap(txmetaid_, other->txmetaid_);
    std::swap(orderfillmetaid_, other->orderfillmetaid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(prev_, other->prev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderMeta_descriptor_;
  metadata.reflection = OrderMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderFillMeta::kRefnumFieldNumber;
const int OrderFillMeta::kFnameFieldNumber;
const int OrderFillMeta::kPlayeridFieldNumber;
const int OrderFillMeta::kFillpriceFieldNumber;
const int OrderFillMeta::kFillsizeFieldNumber;
const int OrderFillMeta::kBuysideFieldNumber;
const int OrderFillMeta::kTimestampFieldNumber;
const int OrderFillMeta::kTxmetaidFieldNumber;
const int OrderFillMeta::kPrevFieldNumber;
#endif  // !_MSC_VER

OrderFillMeta::OrderFillMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderFillMeta::InitAsDefaultInstance() {
}

OrderFillMeta::OrderFillMeta(const OrderFillMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderFillMeta::SharedCtor() {
  _cached_size_ = 0;
  refnum_ = 0;
  fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fillprice_ = 0;
  fillsize_ = 0;
  buyside_ = false;
  timestamp_ = GOOGLE_ULONGLONG(0);
  txmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderFillMeta::~OrderFillMeta() {
  SharedDtor();
}

void OrderFillMeta::SharedDtor() {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    delete fname_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete txmetaid_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (this != default_instance_) {
  }
}

void OrderFillMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderFillMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderFillMeta_descriptor_;
}

const OrderFillMeta& OrderFillMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

OrderFillMeta* OrderFillMeta::default_instance_ = NULL;

OrderFillMeta* OrderFillMeta::New() const {
  return new OrderFillMeta;
}

void OrderFillMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refnum_ = 0;
    if (has_fname()) {
      if (fname_ != &::google::protobuf::internal::kEmptyString) {
        fname_->clear();
      }
    }
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    fillprice_ = 0;
    fillsize_ = 0;
    buyside_ = false;
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_txmetaid()) {
      if (txmetaid_ != &::google::protobuf::internal::kEmptyString) {
        txmetaid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderFillMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refnum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refnum_)));
          set_has_refnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fname;
        break;
      }

      // optional string fname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fname().data(), this->fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_playerid;
        break;
      }

      // optional string playerid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fillprice;
        break;
      }

      // optional int32 fillprice = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fillprice_)));
          set_has_fillprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_fillsize;
        break;
      }

      // optional int32 fillsize = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fillsize_)));
          set_has_fillsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_buyside;
        break;
      }

      // optional bool buyside = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyside:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buyside_)));
          set_has_buyside();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_txmetaid;
        break;
      }

      // optional bytes txmetaid = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_prev;
        break;
      }

      // optional bytes prev = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderFillMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refnum = 1;
  if (has_refnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refnum(), output);
  }

  // optional string fname = 10;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fname(), output);
  }

  // optional string playerid = 15;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->playerid(), output);
  }

  // optional int32 fillprice = 20;
  if (has_fillprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->fillprice(), output);
  }

  // optional int32 fillsize = 30;
  if (has_fillsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->fillsize(), output);
  }

  // optional bool buyside = 35;
  if (has_buyside()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->buyside(), output);
  }

  // optional uint64 timestamp = 40;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->timestamp(), output);
  }

  // optional bytes txmetaid = 60;
  if (has_txmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->txmetaid(), output);
  }

  // optional bytes prev = 70;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->prev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderFillMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refnum = 1;
  if (has_refnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refnum(), target);
  }

  // optional string fname = 10;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fname(), target);
  }

  // optional string playerid = 15;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->playerid(), target);
  }

  // optional int32 fillprice = 20;
  if (has_fillprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->fillprice(), target);
  }

  // optional int32 fillsize = 30;
  if (has_fillsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->fillsize(), target);
  }

  // optional bool buyside = 35;
  if (has_buyside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->buyside(), target);
  }

  // optional uint64 timestamp = 40;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->timestamp(), target);
  }

  // optional bytes txmetaid = 60;
  if (has_txmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->txmetaid(), target);
  }

  // optional bytes prev = 70;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->prev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderFillMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refnum = 1;
    if (has_refnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refnum());
    }

    // optional string fname = 10;
    if (has_fname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fname());
    }

    // optional string playerid = 15;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 fillprice = 20;
    if (has_fillprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fillprice());
    }

    // optional int32 fillsize = 30;
    if (has_fillsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fillsize());
    }

    // optional bool buyside = 35;
    if (has_buyside()) {
      total_size += 2 + 1;
    }

    // optional uint64 timestamp = 40;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional bytes txmetaid = 60;
    if (has_txmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txmetaid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes prev = 70;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderFillMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderFillMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderFillMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderFillMeta::MergeFrom(const OrderFillMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refnum()) {
      set_refnum(from.refnum());
    }
    if (from.has_fname()) {
      set_fname(from.fname());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_fillprice()) {
      set_fillprice(from.fillprice());
    }
    if (from.has_fillsize()) {
      set_fillsize(from.fillsize());
    }
    if (from.has_buyside()) {
      set_buyside(from.buyside());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_txmetaid()) {
      set_txmetaid(from.txmetaid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prev()) {
      set_prev(from.prev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderFillMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderFillMeta::CopyFrom(const OrderFillMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderFillMeta::IsInitialized() const {

  return true;
}

void OrderFillMeta::Swap(OrderFillMeta* other) {
  if (other != this) {
    std::swap(refnum_, other->refnum_);
    std::swap(fname_, other->fname_);
    std::swap(playerid_, other->playerid_);
    std::swap(fillprice_, other->fillprice_);
    std::swap(fillsize_, other->fillsize_);
    std::swap(buyside_, other->buyside_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(txmetaid_, other->txmetaid_);
    std::swap(prev_, other->prev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderFillMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderFillMeta_descriptor_;
  metadata.reflection = OrderFillMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalStateMeta::kGlobalstateFieldNumber;
const int GlobalStateMeta::kTrmetaidFieldNumber;
const int GlobalStateMeta::kPrevFieldNumber;
const int GlobalStateMeta::kNextFieldNumber;
#endif  // !_MSC_VER

GlobalStateMeta::GlobalStateMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalStateMeta::InitAsDefaultInstance() {
  globalstate_ = const_cast< ::fantasybit::GlobalState*>(&::fantasybit::GlobalState::default_instance());
}

GlobalStateMeta::GlobalStateMeta(const GlobalStateMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalStateMeta::SharedCtor() {
  _cached_size_ = 0;
  globalstate_ = NULL;
  trmetaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  next_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalStateMeta::~GlobalStateMeta() {
  SharedDtor();
}

void GlobalStateMeta::SharedDtor() {
  if (trmetaid_ != &::google::protobuf::internal::kEmptyString) {
    delete trmetaid_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (next_ != &::google::protobuf::internal::kEmptyString) {
    delete next_;
  }
  if (this != default_instance_) {
    delete globalstate_;
  }
}

void GlobalStateMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalStateMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalStateMeta_descriptor_;
}

const GlobalStateMeta& GlobalStateMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GlobalStateMeta* GlobalStateMeta::default_instance_ = NULL;

GlobalStateMeta* GlobalStateMeta::New() const {
  return new GlobalStateMeta;
}

void GlobalStateMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_globalstate()) {
      if (globalstate_ != NULL) globalstate_->::fantasybit::GlobalState::Clear();
    }
    if (has_trmetaid()) {
      if (trmetaid_ != &::google::protobuf::internal::kEmptyString) {
        trmetaid_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
    if (has_next()) {
      if (next_ != &::google::protobuf::internal::kEmptyString) {
        next_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalStateMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GlobalState globalstate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_globalstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_trmetaid;
        break;
      }

      // optional bytes trmetaid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trmetaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trmetaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_prev;
        break;
      }

      // optional bytes prev = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_next;
        break;
      }

      // optional bytes next = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalStateMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.GlobalState globalstate = 10;
  if (has_globalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->globalstate(), output);
  }

  // optional bytes trmetaid = 20;
  if (has_trmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->trmetaid(), output);
  }

  // optional bytes prev = 30;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->prev(), output);
  }

  // optional bytes next = 40;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->next(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalStateMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.GlobalState globalstate = 10;
  if (has_globalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->globalstate(), target);
  }

  // optional bytes trmetaid = 20;
  if (has_trmetaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->trmetaid(), target);
  }

  // optional bytes prev = 30;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->prev(), target);
  }

  // optional bytes next = 40;
  if (has_next()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->next(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalStateMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.GlobalState globalstate = 10;
    if (has_globalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->globalstate());
    }

    // optional bytes trmetaid = 20;
    if (has_trmetaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->trmetaid());
    }

    // optional bytes prev = 30;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

    // optional bytes next = 40;
    if (has_next()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->next());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalStateMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalStateMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalStateMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalStateMeta::MergeFrom(const GlobalStateMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globalstate()) {
      mutable_globalstate()->::fantasybit::GlobalState::MergeFrom(from.globalstate());
    }
    if (from.has_trmetaid()) {
      set_trmetaid(from.trmetaid());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalStateMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalStateMeta::CopyFrom(const GlobalStateMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalStateMeta::IsInitialized() const {

  return true;
}

void GlobalStateMeta::Swap(GlobalStateMeta* other) {
  if (other != this) {
    std::swap(globalstate_, other->globalstate_);
    std::swap(trmetaid_, other->trmetaid_);
    std::swap(prev_, other->prev_);
    std::swap(next_, other->next_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalStateMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalStateMeta_descriptor_;
  metadata.reflection = GlobalStateMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMeta::kPlayeridFieldNumber;
const int PlayerMeta::kPlayerBaseFieldNumber;
const int PlayerMeta::kPlayerStatusFieldNumber;
const int PlayerMeta::kDatametaidFieldNumber;
const int PlayerMeta::kPrevFieldNumber;
#endif  // !_MSC_VER

PlayerMeta::PlayerMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMeta::InitAsDefaultInstance() {
  player_base_ = const_cast< ::fantasybit::PlayerBase*>(&::fantasybit::PlayerBase::default_instance());
  player_status_ = const_cast< ::fantasybit::PlayerStatus*>(&::fantasybit::PlayerStatus::default_instance());
}

PlayerMeta::PlayerMeta(const PlayerMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMeta::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_base_ = NULL;
  player_status_ = NULL;
  datametaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMeta::~PlayerMeta() {
  SharedDtor();
}

void PlayerMeta::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (datametaid_ != &::google::protobuf::internal::kEmptyString) {
    delete datametaid_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (this != default_instance_) {
    delete player_base_;
    delete player_status_;
  }
}

void PlayerMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMeta_descriptor_;
}

const PlayerMeta& PlayerMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

PlayerMeta* PlayerMeta::default_instance_ = NULL;

PlayerMeta* PlayerMeta::New() const {
  return new PlayerMeta;
}

void PlayerMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::fantasybit::PlayerBase::Clear();
    }
    if (has_player_status()) {
      if (player_status_ != NULL) player_status_->::fantasybit::PlayerStatus::Clear();
    }
    if (has_datametaid()) {
      if (datametaid_ != &::google::protobuf::internal::kEmptyString) {
        datametaid_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_player_base;
        break;
      }

      // optional .fantasybit.PlayerBase player_base = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_player_status;
        break;
      }

      // optional .fantasybit.PlayerStatus player_status = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_datametaid;
        break;
      }

      // optional bytes datametaid = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datametaid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datametaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_prev;
        break;
      }

      // optional bytes prev = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playerid = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->playerid(), output);
  }

  // optional .fantasybit.PlayerBase player_base = 20;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->player_base(), output);
  }

  // optional .fantasybit.PlayerStatus player_status = 30;
  if (has_player_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->player_status(), output);
  }

  // optional bytes datametaid = 40;
  if (has_datametaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->datametaid(), output);
  }

  // optional bytes prev = 50;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->prev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerid = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->playerid(), target);
  }

  // optional .fantasybit.PlayerBase player_base = 20;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->player_base(), target);
  }

  // optional .fantasybit.PlayerStatus player_status = 30;
  if (has_player_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->player_status(), target);
  }

  // optional bytes datametaid = 40;
  if (has_datametaid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->datametaid(), target);
  }

  // optional bytes prev = 50;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->prev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 10;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional .fantasybit.PlayerBase player_base = 20;
    if (has_player_base()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

    // optional .fantasybit.PlayerStatus player_status = 30;
    if (has_player_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_status());
    }

    // optional bytes datametaid = 40;
    if (has_datametaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datametaid());
    }

    // optional bytes prev = 50;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMeta::MergeFrom(const PlayerMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_player_base()) {
      mutable_player_base()->::fantasybit::PlayerBase::MergeFrom(from.player_base());
    }
    if (from.has_player_status()) {
      mutable_player_status()->::fantasybit::PlayerStatus::MergeFrom(from.player_status());
    }
    if (from.has_datametaid()) {
      set_datametaid(from.datametaid());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMeta::CopyFrom(const PlayerMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMeta::IsInitialized() const {

  return true;
}

void PlayerMeta::Swap(PlayerMeta* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(player_base_, other->player_base_);
    std::swap(player_status_, other->player_status_);
    std::swap(datametaid_, other->datametaid_);
    std::swap(prev_, other->prev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMeta_descriptor_;
  metadata.reflection = PlayerMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMeta::kTeamidFieldNumber;
const int TeamMeta::kPlayermetaidrootFieldNumber;
const int TeamMeta::kPrevFieldNumber;
#endif  // !_MSC_VER

TeamMeta::TeamMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMeta::InitAsDefaultInstance() {
}

TeamMeta::TeamMeta(const TeamMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMeta::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playermetaidroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMeta::~TeamMeta() {
  SharedDtor();
}

void TeamMeta::SharedDtor() {
  if (teamid_ != &::google::protobuf::internal::kEmptyString) {
    delete teamid_;
  }
  if (playermetaidroot_ != &::google::protobuf::internal::kEmptyString) {
    delete playermetaidroot_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (this != default_instance_) {
  }
}

void TeamMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMeta_descriptor_;
}

const TeamMeta& TeamMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

TeamMeta* TeamMeta::default_instance_ = NULL;

TeamMeta* TeamMeta::New() const {
  return new TeamMeta;
}

void TeamMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_teamid()) {
      if (teamid_ != &::google::protobuf::internal::kEmptyString) {
        teamid_->clear();
      }
    }
    if (has_playermetaidroot()) {
      if (playermetaidroot_ != &::google::protobuf::internal::kEmptyString) {
        playermetaidroot_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string teamid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamid().data(), this->teamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_playermetaidroot;
        break;
      }

      // optional bytes playermetaidroot = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playermetaidroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playermetaidroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_prev;
        break;
      }

      // optional bytes prev = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string teamid = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->teamid(), output);
  }

  // optional bytes playermetaidroot = 20;
  if (has_playermetaidroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->playermetaidroot(), output);
  }

  // optional bytes prev = 30;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->prev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string teamid = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->teamid(), target);
  }

  // optional bytes playermetaidroot = 20;
  if (has_playermetaidroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->playermetaidroot(), target);
  }

  // optional bytes prev = 30;
  if (has_prev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->prev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string teamid = 10;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

    // optional bytes playermetaidroot = 20;
    if (has_playermetaidroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playermetaidroot());
    }

    // optional bytes prev = 30;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMeta::MergeFrom(const TeamMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_playermetaidroot()) {
      set_playermetaidroot(from.playermetaidroot());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMeta::CopyFrom(const TeamMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMeta::IsInitialized() const {

  return true;
}

void TeamMeta::Swap(TeamMeta* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(playermetaidroot_, other->playermetaidroot_);
    std::swap(prev_, other->prev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMeta_descriptor_;
  metadata.reflection = TeamMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbstate::kSchedulestateidFieldNumber;
const int pbstate::kLeaderboardstateidFieldNumber;
const int pbstate::kProjstateidFieldNumber;
const int pbstate::kPosstateidFieldNumber;
const int pbstate::kOrderstateidFieldNumber;
const int pbstate::kMarketstateidFieldNumber;
const int pbstate::kGlobalstateidFieldNumber;
const int pbstate::kTeamstatemidFieldNumber;
const int pbstate::kFantasynamestateidFieldNumber;
#endif  // !_MSC_VER

pbstate::pbstate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbstate::InitAsDefaultInstance() {
}

pbstate::pbstate(const pbstate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbstate::SharedCtor() {
  _cached_size_ = 0;
  schedulestateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leaderboardstateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  projstateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posstateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderstateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  marketstateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalstateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamstatemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fantasynamestateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbstate::~pbstate() {
  SharedDtor();
}

void pbstate::SharedDtor() {
  if (schedulestateid_ != &::google::protobuf::internal::kEmptyString) {
    delete schedulestateid_;
  }
  if (leaderboardstateid_ != &::google::protobuf::internal::kEmptyString) {
    delete leaderboardstateid_;
  }
  if (projstateid_ != &::google::protobuf::internal::kEmptyString) {
    delete projstateid_;
  }
  if (posstateid_ != &::google::protobuf::internal::kEmptyString) {
    delete posstateid_;
  }
  if (orderstateid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderstateid_;
  }
  if (marketstateid_ != &::google::protobuf::internal::kEmptyString) {
    delete marketstateid_;
  }
  if (globalstateid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalstateid_;
  }
  if (teamstatemid_ != &::google::protobuf::internal::kEmptyString) {
    delete teamstatemid_;
  }
  if (fantasynamestateid_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasynamestateid_;
  }
  if (this != default_instance_) {
  }
}

void pbstate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbstate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbstate_descriptor_;
}

const pbstate& pbstate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

pbstate* pbstate::default_instance_ = NULL;

pbstate* pbstate::New() const {
  return new pbstate;
}

void pbstate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_schedulestateid()) {
      if (schedulestateid_ != &::google::protobuf::internal::kEmptyString) {
        schedulestateid_->clear();
      }
    }
    if (has_leaderboardstateid()) {
      if (leaderboardstateid_ != &::google::protobuf::internal::kEmptyString) {
        leaderboardstateid_->clear();
      }
    }
    if (has_projstateid()) {
      if (projstateid_ != &::google::protobuf::internal::kEmptyString) {
        projstateid_->clear();
      }
    }
    if (has_posstateid()) {
      if (posstateid_ != &::google::protobuf::internal::kEmptyString) {
        posstateid_->clear();
      }
    }
    if (has_orderstateid()) {
      if (orderstateid_ != &::google::protobuf::internal::kEmptyString) {
        orderstateid_->clear();
      }
    }
    if (has_marketstateid()) {
      if (marketstateid_ != &::google::protobuf::internal::kEmptyString) {
        marketstateid_->clear();
      }
    }
    if (has_globalstateid()) {
      if (globalstateid_ != &::google::protobuf::internal::kEmptyString) {
        globalstateid_->clear();
      }
    }
    if (has_teamstatemid()) {
      if (teamstatemid_ != &::google::protobuf::internal::kEmptyString) {
        teamstatemid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fantasynamestateid()) {
      if (fantasynamestateid_ != &::google::protobuf::internal::kEmptyString) {
        fantasynamestateid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbstate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes schedulestateid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schedulestateid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_leaderboardstateid;
        break;
      }

      // optional bytes leaderboardstateid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderboardstateid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leaderboardstateid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_projstateid;
        break;
      }

      // optional bytes projstateid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_projstateid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_projstateid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_posstateid;
        break;
      }

      // optional bytes posstateid = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_posstateid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posstateid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_orderstateid;
        break;
      }

      // optional bytes orderstateid = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderstateid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_orderstateid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_marketstateid;
        break;
      }

      // optional bytes marketstateid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marketstateid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marketstateid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_globalstateid;
        break;
      }

      // optional bytes globalstateid = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalstateid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_globalstateid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_teamstatemid;
        break;
      }

      // optional bytes teamstatemid = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamstatemid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_teamstatemid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_fantasynamestateid;
        break;
      }

      // optional bytes fantasynamestateid = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasynamestateid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fantasynamestateid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbstate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes schedulestateid = 10;
  if (has_schedulestateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->schedulestateid(), output);
  }

  // optional bytes leaderboardstateid = 20;
  if (has_leaderboardstateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->leaderboardstateid(), output);
  }

  // optional bytes projstateid = 30;
  if (has_projstateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->projstateid(), output);
  }

  // optional bytes posstateid = 35;
  if (has_posstateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      35, this->posstateid(), output);
  }

  // optional bytes orderstateid = 40;
  if (has_orderstateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->orderstateid(), output);
  }

  // optional bytes marketstateid = 50;
  if (has_marketstateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->marketstateid(), output);
  }

  // optional bytes globalstateid = 60;
  if (has_globalstateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->globalstateid(), output);
  }

  // optional bytes teamstatemid = 70;
  if (has_teamstatemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->teamstatemid(), output);
  }

  // optional bytes fantasynamestateid = 80;
  if (has_fantasynamestateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      80, this->fantasynamestateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbstate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes schedulestateid = 10;
  if (has_schedulestateid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->schedulestateid(), target);
  }

  // optional bytes leaderboardstateid = 20;
  if (has_leaderboardstateid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->leaderboardstateid(), target);
  }

  // optional bytes projstateid = 30;
  if (has_projstateid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->projstateid(), target);
  }

  // optional bytes posstateid = 35;
  if (has_posstateid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        35, this->posstateid(), target);
  }

  // optional bytes orderstateid = 40;
  if (has_orderstateid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->orderstateid(), target);
  }

  // optional bytes marketstateid = 50;
  if (has_marketstateid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->marketstateid(), target);
  }

  // optional bytes globalstateid = 60;
  if (has_globalstateid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->globalstateid(), target);
  }

  // optional bytes teamstatemid = 70;
  if (has_teamstatemid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->teamstatemid(), target);
  }

  // optional bytes fantasynamestateid = 80;
  if (has_fantasynamestateid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        80, this->fantasynamestateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbstate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes schedulestateid = 10;
    if (has_schedulestateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schedulestateid());
    }

    // optional bytes leaderboardstateid = 20;
    if (has_leaderboardstateid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leaderboardstateid());
    }

    // optional bytes projstateid = 30;
    if (has_projstateid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->projstateid());
    }

    // optional bytes posstateid = 35;
    if (has_posstateid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posstateid());
    }

    // optional bytes orderstateid = 40;
    if (has_orderstateid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->orderstateid());
    }

    // optional bytes marketstateid = 50;
    if (has_marketstateid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marketstateid());
    }

    // optional bytes globalstateid = 60;
    if (has_globalstateid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->globalstateid());
    }

    // optional bytes teamstatemid = 70;
    if (has_teamstatemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->teamstatemid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes fantasynamestateid = 80;
    if (has_fantasynamestateid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fantasynamestateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbstate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbstate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbstate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbstate::MergeFrom(const pbstate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schedulestateid()) {
      set_schedulestateid(from.schedulestateid());
    }
    if (from.has_leaderboardstateid()) {
      set_leaderboardstateid(from.leaderboardstateid());
    }
    if (from.has_projstateid()) {
      set_projstateid(from.projstateid());
    }
    if (from.has_posstateid()) {
      set_posstateid(from.posstateid());
    }
    if (from.has_orderstateid()) {
      set_orderstateid(from.orderstateid());
    }
    if (from.has_marketstateid()) {
      set_marketstateid(from.marketstateid());
    }
    if (from.has_globalstateid()) {
      set_globalstateid(from.globalstateid());
    }
    if (from.has_teamstatemid()) {
      set_teamstatemid(from.teamstatemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fantasynamestateid()) {
      set_fantasynamestateid(from.fantasynamestateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbstate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbstate::CopyFrom(const pbstate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbstate::IsInitialized() const {

  return true;
}

void pbstate::Swap(pbstate* other) {
  if (other != this) {
    std::swap(schedulestateid_, other->schedulestateid_);
    std::swap(leaderboardstateid_, other->leaderboardstateid_);
    std::swap(projstateid_, other->projstateid_);
    std::swap(posstateid_, other->posstateid_);
    std::swap(orderstateid_, other->orderstateid_);
    std::swap(marketstateid_, other->marketstateid_);
    std::swap(globalstateid_, other->globalstateid_);
    std::swap(teamstatemid_, other->teamstatemid_);
    std::swap(fantasynamestateid_, other->fantasynamestateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbstate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbstate_descriptor_;
  metadata.reflection = pbstate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MerkleTree::kRootFieldNumber;
const int MerkleTree::kLeavesFieldNumber;
#endif  // !_MSC_VER

MerkleTree::MerkleTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MerkleTree::InitAsDefaultInstance() {
}

MerkleTree::MerkleTree(const MerkleTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MerkleTree::SharedCtor() {
  _cached_size_ = 0;
  root_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MerkleTree::~MerkleTree() {
  SharedDtor();
}

void MerkleTree::SharedDtor() {
  if (root_ != &::google::protobuf::internal::kEmptyString) {
    delete root_;
  }
  if (this != default_instance_) {
  }
}

void MerkleTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MerkleTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MerkleTree_descriptor_;
}

const MerkleTree& MerkleTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

MerkleTree* MerkleTree::default_instance_ = NULL;

MerkleTree* MerkleTree::New() const {
  return new MerkleTree;
}

void MerkleTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_root()) {
      if (root_ != &::google::protobuf::internal::kEmptyString) {
        root_->clear();
      }
    }
  }
  leaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MerkleTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes root = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_root()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_leaves;
        break;
      }

      // repeated bytes leaves = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_leaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_leaves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MerkleTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes root = 10;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->root(), output);
  }

  // repeated bytes leaves = 20;
  for (int i = 0; i < this->leaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->leaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MerkleTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes root = 10;
  if (has_root()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->root(), target);
  }

  // repeated bytes leaves = 20;
  for (int i = 0; i < this->leaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(20, this->leaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MerkleTree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes root = 10;
    if (has_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->root());
    }

  }
  // repeated bytes leaves = 20;
  total_size += 2 * this->leaves_size();
  for (int i = 0; i < this->leaves_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->leaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MerkleTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MerkleTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MerkleTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MerkleTree::MergeFrom(const MerkleTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  leaves_.MergeFrom(from.leaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_root()) {
      set_root(from.root());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MerkleTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerkleTree::CopyFrom(const MerkleTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerkleTree::IsInitialized() const {

  return true;
}

void MerkleTree::Swap(MerkleTree* other) {
  if (other != this) {
    std::swap(root_, other->root_);
    leaves_.Swap(&other->leaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MerkleTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MerkleTree_descriptor_;
  metadata.reflection = MerkleTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewPlayerModel::kPlayersFieldNumber;
#endif  // !_MSC_VER

NewPlayerModel::NewPlayerModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewPlayerModel::InitAsDefaultInstance() {
}

NewPlayerModel::NewPlayerModel(const NewPlayerModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewPlayerModel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewPlayerModel::~NewPlayerModel() {
  SharedDtor();
}

void NewPlayerModel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewPlayerModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewPlayerModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewPlayerModel_descriptor_;
}

const NewPlayerModel& NewPlayerModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

NewPlayerModel* NewPlayerModel::default_instance_ = NULL;

NewPlayerModel* NewPlayerModel::New() const {
  return new NewPlayerModel;
}

void NewPlayerModel::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewPlayerModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fantasybit.PlayerMeta players = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewPlayerModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .fantasybit.PlayerMeta players = 10;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewPlayerModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .fantasybit.PlayerMeta players = 10;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewPlayerModel::ByteSize() const {
  int total_size = 0;

  // repeated .fantasybit.PlayerMeta players = 10;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewPlayerModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewPlayerModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewPlayerModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewPlayerModel::MergeFrom(const NewPlayerModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewPlayerModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewPlayerModel::CopyFrom(const NewPlayerModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPlayerModel::IsInitialized() const {

  return true;
}

void NewPlayerModel::Swap(NewPlayerModel* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewPlayerModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewPlayerModel_descriptor_;
  metadata.reflection = NewPlayerModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WsReq::kVersionFieldNumber;
const int WsReq::kCtypeFieldNumber;
#endif  // !_MSC_VER

WsReq::WsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WsReq::InitAsDefaultInstance() {
}

WsReq::WsReq(const WsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WsReq::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  ctype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WsReq::~WsReq() {
  SharedDtor();
}

void WsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WsReq_descriptor_;
}

const WsReq& WsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

WsReq* WsReq::default_instance_ = NULL;

WsReq* WsReq::New() const {
  return new WsReq;
}

void WsReq::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    ctype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ctype;
        break;
      }

      // optional .fantasybit.CType ctype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::CType_IsValid(value)) {
            set_ctype(static_cast< ::fantasybit::CType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional .fantasybit.CType ctype = 2;
  if (has_ctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ctype(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional .fantasybit.CType ctype = 2;
  if (has_ctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ctype(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .fantasybit.CType ctype = 2;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctype());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WsReq::MergeFrom(const WsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ctype()) {
      set_ctype(from.ctype());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WsReq::CopyFrom(const WsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WsReq::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void WsReq::Swap(WsReq* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(ctype_, other->ctype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata WsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WsReq_descriptor_;
  metadata.reflection = WsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSReply::kVersionFieldNumber;
const int WSReply::kCtypeFieldNumber;
const int WSReply::kReqFieldNumber;
const int WSReply::kDataFieldNumber;
#endif  // !_MSC_VER

WSReply::WSReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSReply::InitAsDefaultInstance() {
  req_ = const_cast< ::fantasybit::WsReq*>(&::fantasybit::WsReq::default_instance());
}

WSReply::WSReply(const WSReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSReply::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  ctype_ = 0;
  req_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSReply::~WSReply() {
  SharedDtor();
}

void WSReply::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete req_;
  }
}

void WSReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSReply_descriptor_;
}

const WSReply& WSReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

WSReply* WSReply::default_instance_ = NULL;

WSReply* WSReply::New() const {
  return new WSReply;
}

void WSReply::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    ctype_ = 0;
    if (has_req()) {
      if (req_ != NULL) req_->::fantasybit::WsReq::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ctype;
        break;
      }

      // optional .fantasybit.CType ctype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::CType_IsValid(value)) {
            set_ctype(static_cast< ::fantasybit::CType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_req;
        break;
      }

      // optional .fantasybit.WsReq req = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_data;
        break;
      }

      // optional string data = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional .fantasybit.CType ctype = 2;
  if (has_ctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ctype(), output);
  }

  // optional .fantasybit.WsReq req = 20;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->req(), output);
  }

  // optional string data = 30;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->data(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional .fantasybit.CType ctype = 2;
  if (has_ctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ctype(), target);
  }

  // optional .fantasybit.WsReq req = 20;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->req(), target);
  }

  // optional string data = 30;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->data(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .fantasybit.CType ctype = 2;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctype());
    }

    // optional .fantasybit.WsReq req = 20;
    if (has_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // optional string data = 30;
    if (has_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSReply::MergeFrom(const WSReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ctype()) {
      set_ctype(from.ctype());
    }
    if (from.has_req()) {
      mutable_req()->::fantasybit::WsReq::MergeFrom(from.req());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSReply::CopyFrom(const WSReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSReply::IsInitialized() const {

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void WSReply::Swap(WSReply* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(ctype_, other->ctype_);
    std::swap(req_, other->req_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata WSReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSReply_descriptor_;
  metadata.reflection = WSReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGlobalStateRep::kGlobalstateFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetGlobalStateRep::kRepFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetGlobalStateRep >, 11, false >
  GetGlobalStateRep::rep(kRepFieldNumber, ::fantasybit::GetGlobalStateRep::default_instance());
GetGlobalStateRep::GetGlobalStateRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGlobalStateRep::InitAsDefaultInstance() {
  globalstate_ = const_cast< ::fantasybit::GlobalState*>(&::fantasybit::GlobalState::default_instance());
}

GetGlobalStateRep::GetGlobalStateRep(const GetGlobalStateRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGlobalStateRep::SharedCtor() {
  _cached_size_ = 0;
  globalstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGlobalStateRep::~GetGlobalStateRep() {
  SharedDtor();
}

void GetGlobalStateRep::SharedDtor() {
  if (this != default_instance_) {
    delete globalstate_;
  }
}

void GetGlobalStateRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGlobalStateRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGlobalStateRep_descriptor_;
}

const GetGlobalStateRep& GetGlobalStateRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GetGlobalStateRep* GetGlobalStateRep::default_instance_ = NULL;

GetGlobalStateRep* GetGlobalStateRep::New() const {
  return new GetGlobalStateRep;
}

void GetGlobalStateRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_globalstate()) {
      if (globalstate_ != NULL) globalstate_->::fantasybit::GlobalState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGlobalStateRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GlobalState globalstate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_globalstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGlobalStateRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.GlobalState globalstate = 10;
  if (has_globalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->globalstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGlobalStateRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.GlobalState globalstate = 10;
  if (has_globalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->globalstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGlobalStateRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.GlobalState globalstate = 10;
    if (has_globalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->globalstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGlobalStateRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGlobalStateRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGlobalStateRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGlobalStateRep::MergeFrom(const GetGlobalStateRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globalstate()) {
      mutable_globalstate()->::fantasybit::GlobalState::MergeFrom(from.globalstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGlobalStateRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGlobalStateRep::CopyFrom(const GetGlobalStateRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGlobalStateRep::IsInitialized() const {

  return true;
}

void GetGlobalStateRep::Swap(GetGlobalStateRep* other) {
  if (other != this) {
    std::swap(globalstate_, other->globalstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGlobalStateRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGlobalStateRep_descriptor_;
  metadata.reflection = GetGlobalStateRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetScheduleRep::kScheduledataFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetScheduleRep::kRepFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetScheduleRep >, 11, false >
  GetScheduleRep::rep(kRepFieldNumber, ::fantasybit::GetScheduleRep::default_instance());
GetScheduleRep::GetScheduleRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetScheduleRep::InitAsDefaultInstance() {
  scheduledata_ = const_cast< ::fantasybit::ScheduleData*>(&::fantasybit::ScheduleData::default_instance());
}

GetScheduleRep::GetScheduleRep(const GetScheduleRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetScheduleRep::SharedCtor() {
  _cached_size_ = 0;
  scheduledata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetScheduleRep::~GetScheduleRep() {
  SharedDtor();
}

void GetScheduleRep::SharedDtor() {
  if (this != default_instance_) {
    delete scheduledata_;
  }
}

void GetScheduleRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetScheduleRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetScheduleRep_descriptor_;
}

const GetScheduleRep& GetScheduleRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GetScheduleRep* GetScheduleRep::default_instance_ = NULL;

GetScheduleRep* GetScheduleRep::New() const {
  return new GetScheduleRep;
}

void GetScheduleRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scheduledata()) {
      if (scheduledata_ != NULL) scheduledata_->::fantasybit::ScheduleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetScheduleRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.ScheduleData scheduledata = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scheduledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetScheduleRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.ScheduleData scheduledata = 10;
  if (has_scheduledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->scheduledata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetScheduleRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.ScheduleData scheduledata = 10;
  if (has_scheduledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->scheduledata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetScheduleRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.ScheduleData scheduledata = 10;
    if (has_scheduledata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scheduledata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetScheduleRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetScheduleRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetScheduleRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetScheduleRep::MergeFrom(const GetScheduleRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scheduledata()) {
      mutable_scheduledata()->::fantasybit::ScheduleData::MergeFrom(from.scheduledata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetScheduleRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScheduleRep::CopyFrom(const GetScheduleRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScheduleRep::IsInitialized() const {

  return true;
}

void GetScheduleRep::Swap(GetScheduleRep* other) {
  if (other != this) {
    std::swap(scheduledata_, other->scheduledata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetScheduleRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetScheduleRep_descriptor_;
  metadata.reflection = GetScheduleRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNameReq::kFantasyNameFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CheckNameReq::kReqFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::CheckNameReq >, 11, false >
  CheckNameReq::req(kReqFieldNumber, ::fantasybit::CheckNameReq::default_instance());
CheckNameReq::CheckNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckNameReq::InitAsDefaultInstance() {
}

CheckNameReq::CheckNameReq(const CheckNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckNameReq::SharedCtor() {
  _cached_size_ = 0;
  fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNameReq::~CheckNameReq() {
  SharedDtor();
}

void CheckNameReq::SharedDtor() {
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (this != default_instance_) {
  }
}

void CheckNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNameReq_descriptor_;
}

const CheckNameReq& CheckNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

CheckNameReq* CheckNameReq::default_instance_ = NULL;

CheckNameReq* CheckNameReq::New() const {
  return new CheckNameReq;
}

void CheckNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fantasy_name()) {
      if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
        fantasy_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fantasy_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fantasy_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fantasy_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fantasy_name = 10;
    if (has_fantasy_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNameReq::MergeFrom(const CheckNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_name()) {
      set_fantasy_name(from.fantasy_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNameReq::CopyFrom(const CheckNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNameReq::IsInitialized() const {

  return true;
}

void CheckNameReq::Swap(CheckNameReq* other) {
  if (other != this) {
    std::swap(fantasy_name_, other->fantasy_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNameReq_descriptor_;
  metadata.reflection = CheckNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNameRep::kIsavailFieldNumber;
const int CheckNameRep::kReqFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CheckNameRep::kRepFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::CheckNameRep >, 11, false >
  CheckNameRep::rep(kRepFieldNumber, ::fantasybit::CheckNameRep::default_instance());
CheckNameRep::CheckNameRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckNameRep::InitAsDefaultInstance() {
  req_ = const_cast< ::fantasybit::CheckNameReq*>(&::fantasybit::CheckNameReq::default_instance());
}

CheckNameRep::CheckNameRep(const CheckNameRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckNameRep::SharedCtor() {
  _cached_size_ = 0;
  isavail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNameRep::~CheckNameRep() {
  SharedDtor();
}

void CheckNameRep::SharedDtor() {
  if (isavail_ != &::google::protobuf::internal::kEmptyString) {
    delete isavail_;
  }
  if (this != default_instance_) {
    delete req_;
  }
}

void CheckNameRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNameRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNameRep_descriptor_;
}

const CheckNameRep& CheckNameRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

CheckNameRep* CheckNameRep::default_instance_ = NULL;

CheckNameRep* CheckNameRep::New() const {
  return new CheckNameRep;
}

void CheckNameRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_isavail()) {
      if (isavail_ != &::google::protobuf::internal::kEmptyString) {
        isavail_->clear();
      }
    }
    if (has_req()) {
      if (req_ != NULL) req_->::fantasybit::CheckNameReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNameRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string isavail = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isavail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isavail().data(), this->isavail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_req;
        break;
      }

      // optional .fantasybit.CheckNameReq req = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckNameRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string isavail = 10;
  if (has_isavail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isavail().data(), this->isavail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->isavail(), output);
  }

  // optional .fantasybit.CheckNameReq req = 20;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckNameRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string isavail = 10;
  if (has_isavail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isavail().data(), this->isavail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->isavail(), target);
  }

  // optional .fantasybit.CheckNameReq req = 20;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckNameRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string isavail = 10;
    if (has_isavail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isavail());
    }

    // optional .fantasybit.CheckNameReq req = 20;
    if (has_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNameRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNameRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNameRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNameRep::MergeFrom(const CheckNameRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isavail()) {
      set_isavail(from.isavail());
    }
    if (from.has_req()) {
      mutable_req()->::fantasybit::CheckNameReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNameRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNameRep::CopyFrom(const CheckNameRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNameRep::IsInitialized() const {

  return true;
}

void CheckNameRep::Swap(CheckNameRep* other) {
  if (other != this) {
    std::swap(isavail_, other->isavail_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNameRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNameRep_descriptor_;
  metadata.reflection = CheckNameRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pk2FnameReq::kPkFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Pk2FnameReq::kReqFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::Pk2FnameReq >, 11, false >
  Pk2FnameReq::req(kReqFieldNumber, ::fantasybit::Pk2FnameReq::default_instance());
Pk2FnameReq::Pk2FnameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pk2FnameReq::InitAsDefaultInstance() {
}

Pk2FnameReq::Pk2FnameReq(const Pk2FnameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pk2FnameReq::SharedCtor() {
  _cached_size_ = 0;
  pk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pk2FnameReq::~Pk2FnameReq() {
  SharedDtor();
}

void Pk2FnameReq::SharedDtor() {
  if (pk_ != &::google::protobuf::internal::kEmptyString) {
    delete pk_;
  }
  if (this != default_instance_) {
  }
}

void Pk2FnameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pk2FnameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pk2FnameReq_descriptor_;
}

const Pk2FnameReq& Pk2FnameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

Pk2FnameReq* Pk2FnameReq::default_instance_ = NULL;

Pk2FnameReq* Pk2FnameReq::New() const {
  return new Pk2FnameReq;
}

void Pk2FnameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pk()) {
      if (pk_ != &::google::protobuf::internal::kEmptyString) {
        pk_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pk2FnameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pk = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pk().data(), this->pk().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pk2FnameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pk = 10;
  if (has_pk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pk().data(), this->pk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->pk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pk2FnameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pk = 10;
  if (has_pk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pk().data(), this->pk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pk2FnameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pk = 10;
    if (has_pk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pk2FnameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pk2FnameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pk2FnameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pk2FnameReq::MergeFrom(const Pk2FnameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pk()) {
      set_pk(from.pk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pk2FnameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pk2FnameReq::CopyFrom(const Pk2FnameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pk2FnameReq::IsInitialized() const {

  return true;
}

void Pk2FnameReq::Swap(Pk2FnameReq* other) {
  if (other != this) {
    std::swap(pk_, other->pk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pk2FnameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pk2FnameReq_descriptor_;
  metadata.reflection = Pk2FnameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pk2FnameRep::kFnameFieldNumber;
const int Pk2FnameRep::kReqFieldNumber;
const int Pk2FnameRep::kFnbFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Pk2FnameRep::kRepFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::Pk2FnameRep >, 11, false >
  Pk2FnameRep::rep(kRepFieldNumber, ::fantasybit::Pk2FnameRep::default_instance());
Pk2FnameRep::Pk2FnameRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pk2FnameRep::InitAsDefaultInstance() {
  req_ = const_cast< ::fantasybit::Pk2FnameReq*>(&::fantasybit::Pk2FnameReq::default_instance());
  fnb_ = const_cast< ::fantasybit::FantasyNameBal*>(&::fantasybit::FantasyNameBal::default_instance());
}

Pk2FnameRep::Pk2FnameRep(const Pk2FnameRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pk2FnameRep::SharedCtor() {
  _cached_size_ = 0;
  fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  req_ = NULL;
  fnb_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pk2FnameRep::~Pk2FnameRep() {
  SharedDtor();
}

void Pk2FnameRep::SharedDtor() {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    delete fname_;
  }
  if (this != default_instance_) {
    delete req_;
    delete fnb_;
  }
}

void Pk2FnameRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pk2FnameRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pk2FnameRep_descriptor_;
}

const Pk2FnameRep& Pk2FnameRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

Pk2FnameRep* Pk2FnameRep::default_instance_ = NULL;

Pk2FnameRep* Pk2FnameRep::New() const {
  return new Pk2FnameRep;
}

void Pk2FnameRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fname()) {
      if (fname_ != &::google::protobuf::internal::kEmptyString) {
        fname_->clear();
      }
    }
    if (has_req()) {
      if (req_ != NULL) req_->::fantasybit::Pk2FnameReq::Clear();
    }
    if (has_fnb()) {
      if (fnb_ != NULL) fnb_->::fantasybit::FantasyNameBal::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pk2FnameRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fname().data(), this->fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_req;
        break;
      }

      // optional .fantasybit.Pk2FnameReq req = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_fnb;
        break;
      }

      // optional .fantasybit.FantasyNameBal fnb = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fnb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fnb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pk2FnameRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fname = 10;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fname(), output);
  }

  // optional .fantasybit.Pk2FnameReq req = 20;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->req(), output);
  }

  // optional .fantasybit.FantasyNameBal fnb = 30;
  if (has_fnb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->fnb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pk2FnameRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fname = 10;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fname(), target);
  }

  // optional .fantasybit.Pk2FnameReq req = 20;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->req(), target);
  }

  // optional .fantasybit.FantasyNameBal fnb = 30;
  if (has_fnb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->fnb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pk2FnameRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fname = 10;
    if (has_fname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fname());
    }

    // optional .fantasybit.Pk2FnameReq req = 20;
    if (has_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // optional .fantasybit.FantasyNameBal fnb = 30;
    if (has_fnb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fnb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pk2FnameRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pk2FnameRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pk2FnameRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pk2FnameRep::MergeFrom(const Pk2FnameRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fname()) {
      set_fname(from.fname());
    }
    if (from.has_req()) {
      mutable_req()->::fantasybit::Pk2FnameReq::MergeFrom(from.req());
    }
    if (from.has_fnb()) {
      mutable_fnb()->::fantasybit::FantasyNameBal::MergeFrom(from.fnb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pk2FnameRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pk2FnameRep::CopyFrom(const Pk2FnameRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pk2FnameRep::IsInitialized() const {

  return true;
}

void Pk2FnameRep::Swap(Pk2FnameRep* other) {
  if (other != this) {
    std::swap(fname_, other->fname_);
    std::swap(req_, other->req_);
    std::swap(fnb_, other->fnb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pk2FnameRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pk2FnameRep_descriptor_;
  metadata.reflection = Pk2FnameRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeReq::kNameFieldNumber;
const int SubscribeReq::kFchashFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int SubscribeReq::kReqFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::SubscribeReq >, 11, false >
  SubscribeReq::req(kReqFieldNumber, ::fantasybit::SubscribeReq::default_instance());
SubscribeReq::SubscribeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeReq::InitAsDefaultInstance() {
}

SubscribeReq::SubscribeReq(const SubscribeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fchash_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeReq::~SubscribeReq() {
  SharedDtor();
}

void SubscribeReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeReq_descriptor_;
}

const SubscribeReq& SubscribeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

SubscribeReq* SubscribeReq::default_instance_ = NULL;

SubscribeReq* SubscribeReq::New() const {
  return new SubscribeReq;
}

void SubscribeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    fchash_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_fchash;
        break;
      }

      // optional uint64 fchash = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fchash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fchash_)));
          set_has_fchash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional uint64 fchash = 30;
  if (has_fchash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->fchash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional uint64 fchash = 30;
  if (has_fchash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->fchash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 fchash = 30;
    if (has_fchash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fchash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeReq::MergeFrom(const SubscribeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fchash()) {
      set_fchash(from.fchash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeReq::CopyFrom(const SubscribeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeReq::IsInitialized() const {

  return true;
}

void SubscribeReq::Swap(SubscribeReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(fchash_, other->fchash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeReq_descriptor_;
  metadata.reflection = SubscribeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameStatusReq::kNameFieldNumber;
const int NameStatusReq::kPkFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int NameStatusReq::kReqFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NameStatusReq >, 11, false >
  NameStatusReq::req(kReqFieldNumber, ::fantasybit::NameStatusReq::default_instance());
NameStatusReq::NameStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameStatusReq::InitAsDefaultInstance() {
}

NameStatusReq::NameStatusReq(const NameStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameStatusReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameStatusReq::~NameStatusReq() {
  SharedDtor();
}

void NameStatusReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pk_ != &::google::protobuf::internal::kEmptyString) {
    delete pk_;
  }
  if (this != default_instance_) {
  }
}

void NameStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameStatusReq_descriptor_;
}

const NameStatusReq& NameStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

NameStatusReq* NameStatusReq::default_instance_ = NULL;

NameStatusReq* NameStatusReq::New() const {
  return new NameStatusReq;
}

void NameStatusReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pk()) {
      if (pk_ != &::google::protobuf::internal::kEmptyString) {
        pk_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_pk;
        break;
      }

      // optional string pk = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pk().data(), this->pk().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional string pk = 20;
  if (has_pk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pk().data(), this->pk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->pk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string pk = 20;
  if (has_pk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pk().data(), this->pk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->pk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string pk = 20;
    if (has_pk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameStatusReq::MergeFrom(const NameStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pk()) {
      set_pk(from.pk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameStatusReq::CopyFrom(const NameStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameStatusReq::IsInitialized() const {

  return true;
}

void NameStatusReq::Swap(NameStatusReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pk_, other->pk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameStatusReq_descriptor_;
  metadata.reflection = NameStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameStatusRep::kStatusFieldNumber;
const int NameStatusRep::kReqFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int NameStatusRep::kRepFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NameStatusRep >, 11, false >
  NameStatusRep::rep(kRepFieldNumber, ::fantasybit::NameStatusRep::default_instance());
NameStatusRep::NameStatusRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameStatusRep::InitAsDefaultInstance() {
  req_ = const_cast< ::fantasybit::NameStatusReq*>(&::fantasybit::NameStatusReq::default_instance());
}

NameStatusRep::NameStatusRep(const NameStatusRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameStatusRep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameStatusRep::~NameStatusRep() {
  SharedDtor();
}

void NameStatusRep::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void NameStatusRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameStatusRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameStatusRep_descriptor_;
}

const NameStatusRep& NameStatusRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

NameStatusRep* NameStatusRep::default_instance_ = NULL;

NameStatusRep* NameStatusRep::New() const {
  return new NameStatusRep;
}

void NameStatusRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
    if (has_req()) {
      if (req_ != NULL) req_->::fantasybit::NameStatusReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameStatusRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.MyNameStatus status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::MyNameStatus_IsValid(value)) {
            set_status(static_cast< ::fantasybit::MyNameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_req;
        break;
      }

      // optional .fantasybit.NameStatusReq req = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameStatusRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.MyNameStatus status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->status(), output);
  }

  // optional .fantasybit.NameStatusReq req = 20;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameStatusRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.MyNameStatus status = 10;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->status(), target);
  }

  // optional .fantasybit.NameStatusReq req = 20;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameStatusRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.MyNameStatus status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .fantasybit.NameStatusReq req = 20;
    if (has_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameStatusRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameStatusRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameStatusRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameStatusRep::MergeFrom(const NameStatusRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_req()) {
      mutable_req()->::fantasybit::NameStatusReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameStatusRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameStatusRep::CopyFrom(const NameStatusRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameStatusRep::IsInitialized() const {

  return true;
}

void NameStatusRep::Swap(NameStatusRep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameStatusRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameStatusRep_descriptor_;
  metadata.reflection = NameStatusRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllNamesRep::kNamesFieldNumber;
const int GetAllNamesRep::kFnbFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetAllNamesRep::kRepFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetAllNamesRep >, 11, false >
  GetAllNamesRep::rep(kRepFieldNumber, ::fantasybit::GetAllNamesRep::default_instance());
GetAllNamesRep::GetAllNamesRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllNamesRep::InitAsDefaultInstance() {
}

GetAllNamesRep::GetAllNamesRep(const GetAllNamesRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllNamesRep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllNamesRep::~GetAllNamesRep() {
  SharedDtor();
}

void GetAllNamesRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllNamesRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllNamesRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllNamesRep_descriptor_;
}

const GetAllNamesRep& GetAllNamesRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GetAllNamesRep* GetAllNamesRep::default_instance_ = NULL;

GetAllNamesRep* GetAllNamesRep::New() const {
  return new GetAllNamesRep;
}

void GetAllNamesRep::Clear() {
  names_.Clear();
  fnb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllNamesRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_names;
        if (input->ExpectTag(162)) goto parse_fnb;
        break;
      }

      // repeated .fantasybit.FantasyNameBal fnb = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fnb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fnb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_fnb;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAllNamesRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string names = 10;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->names(i), output);
  }

  // repeated .fantasybit.FantasyNameBal fnb = 20;
  for (int i = 0; i < this->fnb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->fnb(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllNamesRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string names = 10;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->names(i), target);
  }

  // repeated .fantasybit.FantasyNameBal fnb = 20;
  for (int i = 0; i < this->fnb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->fnb(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllNamesRep::ByteSize() const {
  int total_size = 0;

  // repeated string names = 10;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // repeated .fantasybit.FantasyNameBal fnb = 20;
  total_size += 2 * this->fnb_size();
  for (int i = 0; i < this->fnb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fnb(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllNamesRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllNamesRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllNamesRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllNamesRep::MergeFrom(const GetAllNamesRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  fnb_.MergeFrom(from.fnb_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllNamesRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllNamesRep::CopyFrom(const GetAllNamesRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllNamesRep::IsInitialized() const {

  return true;
}

void GetAllNamesRep::Swap(GetAllNamesRep* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    fnb_.Swap(&other->fnb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllNamesRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllNamesRep_descriptor_;
  metadata.reflection = GetAllNamesRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRoster::kTeamidFieldNumber;
const int TeamRoster::kPlayersFieldNumber;
#endif  // !_MSC_VER

TeamRoster::TeamRoster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRoster::InitAsDefaultInstance() {
}

TeamRoster::TeamRoster(const TeamRoster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRoster::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRoster::~TeamRoster() {
  SharedDtor();
}

void TeamRoster::SharedDtor() {
  if (teamid_ != &::google::protobuf::internal::kEmptyString) {
    delete teamid_;
  }
  if (this != default_instance_) {
  }
}

void TeamRoster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRoster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRoster_descriptor_;
}

const TeamRoster& TeamRoster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

TeamRoster* TeamRoster::default_instance_ = NULL;

TeamRoster* TeamRoster::New() const {
  return new TeamRoster;
}

void TeamRoster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_teamid()) {
      if (teamid_ != &::google::protobuf::internal::kEmptyString) {
        teamid_->clear();
      }
    }
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRoster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string teamid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamid().data(), this->teamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_players;
        break;
      }

      // repeated .fantasybit.PlayerData players = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRoster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string teamid = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->teamid(), output);
  }

  // repeated .fantasybit.PlayerData players = 20;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRoster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string teamid = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->teamid(), target);
  }

  // repeated .fantasybit.PlayerData players = 20;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRoster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string teamid = 10;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

  }
  // repeated .fantasybit.PlayerData players = 20;
  total_size += 2 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRoster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRoster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRoster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRoster::MergeFrom(const TeamRoster& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRoster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRoster::CopyFrom(const TeamRoster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRoster::IsInitialized() const {

  return true;
}

void TeamRoster::Swap(TeamRoster* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRoster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRoster_descriptor_;
  metadata.reflection = TeamRoster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameDataRoster::kGameDataFieldNumber;
const int GameDataRoster::kHomerosterFieldNumber;
const int GameDataRoster::kAwayrosterFieldNumber;
#endif  // !_MSC_VER

GameDataRoster::GameDataRoster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameDataRoster::InitAsDefaultInstance() {
  game_data_ = const_cast< ::fantasybit::GameData*>(&::fantasybit::GameData::default_instance());
  homeroster_ = const_cast< ::fantasybit::TeamRoster*>(&::fantasybit::TeamRoster::default_instance());
  awayroster_ = const_cast< ::fantasybit::TeamRoster*>(&::fantasybit::TeamRoster::default_instance());
}

GameDataRoster::GameDataRoster(const GameDataRoster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameDataRoster::SharedCtor() {
  _cached_size_ = 0;
  game_data_ = NULL;
  homeroster_ = NULL;
  awayroster_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameDataRoster::~GameDataRoster() {
  SharedDtor();
}

void GameDataRoster::SharedDtor() {
  if (this != default_instance_) {
    delete game_data_;
    delete homeroster_;
    delete awayroster_;
  }
}

void GameDataRoster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameDataRoster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameDataRoster_descriptor_;
}

const GameDataRoster& GameDataRoster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GameDataRoster* GameDataRoster::default_instance_ = NULL;

GameDataRoster* GameDataRoster::New() const {
  return new GameDataRoster;
}

void GameDataRoster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_data()) {
      if (game_data_ != NULL) game_data_->::fantasybit::GameData::Clear();
    }
    if (has_homeroster()) {
      if (homeroster_ != NULL) homeroster_->::fantasybit::TeamRoster::Clear();
    }
    if (has_awayroster()) {
      if (awayroster_ != NULL) awayroster_->::fantasybit::TeamRoster::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameDataRoster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GameData game_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_homeroster;
        break;
      }

      // optional .fantasybit.TeamRoster homeroster = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_homeroster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_homeroster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_awayroster;
        break;
      }

      // optional .fantasybit.TeamRoster awayroster = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awayroster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_awayroster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameDataRoster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.GameData game_data = 10;
  if (has_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->game_data(), output);
  }

  // optional .fantasybit.TeamRoster homeroster = 20;
  if (has_homeroster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->homeroster(), output);
  }

  // optional .fantasybit.TeamRoster awayroster = 30;
  if (has_awayroster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->awayroster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameDataRoster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.GameData game_data = 10;
  if (has_game_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->game_data(), target);
  }

  // optional .fantasybit.TeamRoster homeroster = 20;
  if (has_homeroster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->homeroster(), target);
  }

  // optional .fantasybit.TeamRoster awayroster = 30;
  if (has_awayroster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->awayroster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameDataRoster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.GameData game_data = 10;
    if (has_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_data());
    }

    // optional .fantasybit.TeamRoster homeroster = 20;
    if (has_homeroster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->homeroster());
    }

    // optional .fantasybit.TeamRoster awayroster = 30;
    if (has_awayroster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->awayroster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameDataRoster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameDataRoster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameDataRoster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameDataRoster::MergeFrom(const GameDataRoster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_data()) {
      mutable_game_data()->::fantasybit::GameData::MergeFrom(from.game_data());
    }
    if (from.has_homeroster()) {
      mutable_homeroster()->::fantasybit::TeamRoster::MergeFrom(from.homeroster());
    }
    if (from.has_awayroster()) {
      mutable_awayroster()->::fantasybit::TeamRoster::MergeFrom(from.awayroster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameDataRoster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameDataRoster::CopyFrom(const GameDataRoster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDataRoster::IsInitialized() const {

  return true;
}

void GameDataRoster::Swap(GameDataRoster* other) {
  if (other != this) {
    std::swap(game_data_, other->game_data_);
    std::swap(homeroster_, other->homeroster_);
    std::swap(awayroster_, other->awayroster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameDataRoster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameDataRoster_descriptor_;
  metadata.reflection = GameDataRoster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCurrRostersRep::kWeekFieldNumber;
const int GetCurrRostersRep::kGamerostersFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetCurrRostersRep::kRepFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetCurrRostersRep >, 11, false >
  GetCurrRostersRep::rep(kRepFieldNumber, ::fantasybit::GetCurrRostersRep::default_instance());
GetCurrRostersRep::GetCurrRostersRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCurrRostersRep::InitAsDefaultInstance() {
}

GetCurrRostersRep::GetCurrRostersRep(const GetCurrRostersRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCurrRostersRep::SharedCtor() {
  _cached_size_ = 0;
  week_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCurrRostersRep::~GetCurrRostersRep() {
  SharedDtor();
}

void GetCurrRostersRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCurrRostersRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCurrRostersRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCurrRostersRep_descriptor_;
}

const GetCurrRostersRep& GetCurrRostersRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GetCurrRostersRep* GetCurrRostersRep::default_instance_ = NULL;

GetCurrRostersRep* GetCurrRostersRep::New() const {
  return new GetCurrRostersRep;
}

void GetCurrRostersRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    week_ = 0;
  }
  gamerosters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCurrRostersRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 week = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_gamerosters;
        break;
      }

      // repeated .fantasybit.GameDataRoster gamerosters = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamerosters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamerosters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_gamerosters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCurrRostersRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 week = 10;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->week(), output);
  }

  // repeated .fantasybit.GameDataRoster gamerosters = 20;
  for (int i = 0; i < this->gamerosters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->gamerosters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCurrRostersRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 week = 10;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->week(), target);
  }

  // repeated .fantasybit.GameDataRoster gamerosters = 20;
  for (int i = 0; i < this->gamerosters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->gamerosters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCurrRostersRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 week = 10;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

  }
  // repeated .fantasybit.GameDataRoster gamerosters = 20;
  total_size += 2 * this->gamerosters_size();
  for (int i = 0; i < this->gamerosters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamerosters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCurrRostersRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCurrRostersRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCurrRostersRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCurrRostersRep::MergeFrom(const GetCurrRostersRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  gamerosters_.MergeFrom(from.gamerosters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week()) {
      set_week(from.week());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCurrRostersRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurrRostersRep::CopyFrom(const GetCurrRostersRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrRostersRep::IsInitialized() const {

  return true;
}

void GetCurrRostersRep::Swap(GetCurrRostersRep* other) {
  if (other != this) {
    std::swap(week_, other->week_);
    gamerosters_.Swap(&other->gamerosters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCurrRostersRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCurrRostersRep_descriptor_;
  metadata.reflection = GetCurrRostersRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ROWMarket::kPidFieldNumber;
const int ROWMarket::kQuoteFieldNumber;
const int ROWMarket::kPlayerdataFieldNumber;
const int ROWMarket::kOhlcFieldNumber;
#endif  // !_MSC_VER

ROWMarket::ROWMarket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ROWMarket::InitAsDefaultInstance() {
  quote_ = const_cast< ::fantasybit::MarketQuote*>(&::fantasybit::MarketQuote::default_instance());
  playerdata_ = const_cast< ::fantasybit::PlayerData*>(&::fantasybit::PlayerData::default_instance());
  ohlc_ = const_cast< ::fantasybit::ContractOHLC*>(&::fantasybit::ContractOHLC::default_instance());
}

ROWMarket::ROWMarket(const ROWMarket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ROWMarket::SharedCtor() {
  _cached_size_ = 0;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quote_ = NULL;
  playerdata_ = NULL;
  ohlc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROWMarket::~ROWMarket() {
  SharedDtor();
}

void ROWMarket::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (this != default_instance_) {
    delete quote_;
    delete playerdata_;
    delete ohlc_;
  }
}

void ROWMarket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROWMarket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROWMarket_descriptor_;
}

const ROWMarket& ROWMarket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

ROWMarket* ROWMarket::default_instance_ = NULL;

ROWMarket* ROWMarket::New() const {
  return new ROWMarket;
}

void ROWMarket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::kEmptyString) {
        pid_->clear();
      }
    }
    if (has_quote()) {
      if (quote_ != NULL) quote_->::fantasybit::MarketQuote::Clear();
    }
    if (has_playerdata()) {
      if (playerdata_ != NULL) playerdata_->::fantasybit::PlayerData::Clear();
    }
    if (has_ohlc()) {
      if (ohlc_ != NULL) ohlc_->::fantasybit::ContractOHLC::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROWMarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_quote;
        break;
      }

      // optional .fantasybit.MarketQuote quote = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quote()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_playerdata;
        break;
      }

      // optional .fantasybit.PlayerData playerdata = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_ohlc;
        break;
      }

      // optional .fantasybit.ContractOHLC ohlc = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ohlc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ohlc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ROWMarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pid = 10;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->pid(), output);
  }

  // optional .fantasybit.MarketQuote quote = 30;
  if (has_quote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->quote(), output);
  }

  // optional .fantasybit.PlayerData playerdata = 40;
  if (has_playerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->playerdata(), output);
  }

  // optional .fantasybit.ContractOHLC ohlc = 50;
  if (has_ohlc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->ohlc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ROWMarket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pid = 10;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pid(), target);
  }

  // optional .fantasybit.MarketQuote quote = 30;
  if (has_quote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->quote(), target);
  }

  // optional .fantasybit.PlayerData playerdata = 40;
  if (has_playerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->playerdata(), target);
  }

  // optional .fantasybit.ContractOHLC ohlc = 50;
  if (has_ohlc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->ohlc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ROWMarket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pid = 10;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

    // optional .fantasybit.MarketQuote quote = 30;
    if (has_quote()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quote());
    }

    // optional .fantasybit.PlayerData playerdata = 40;
    if (has_playerdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdata());
    }

    // optional .fantasybit.ContractOHLC ohlc = 50;
    if (has_ohlc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ohlc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROWMarket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROWMarket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROWMarket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROWMarket::MergeFrom(const ROWMarket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_quote()) {
      mutable_quote()->::fantasybit::MarketQuote::MergeFrom(from.quote());
    }
    if (from.has_playerdata()) {
      mutable_playerdata()->::fantasybit::PlayerData::MergeFrom(from.playerdata());
    }
    if (from.has_ohlc()) {
      mutable_ohlc()->::fantasybit::ContractOHLC::MergeFrom(from.ohlc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROWMarket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROWMarket::CopyFrom(const ROWMarket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROWMarket::IsInitialized() const {

  return true;
}

void ROWMarket::Swap(ROWMarket* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(quote_, other->quote_);
    std::swap(playerdata_, other->playerdata_);
    std::swap(ohlc_, other->ohlc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROWMarket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROWMarket_descriptor_;
  metadata.reflection = ROWMarket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetROWMarketRep::kRowmarketFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetROWMarketRep::kRepFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetROWMarketRep >, 11, false >
  GetROWMarketRep::rep(kRepFieldNumber, ::fantasybit::GetROWMarketRep::default_instance());
GetROWMarketRep::GetROWMarketRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetROWMarketRep::InitAsDefaultInstance() {
}

GetROWMarketRep::GetROWMarketRep(const GetROWMarketRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetROWMarketRep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetROWMarketRep::~GetROWMarketRep() {
  SharedDtor();
}

void GetROWMarketRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetROWMarketRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetROWMarketRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetROWMarketRep_descriptor_;
}

const GetROWMarketRep& GetROWMarketRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GetROWMarketRep* GetROWMarketRep::default_instance_ = NULL;

GetROWMarketRep* GetROWMarketRep::New() const {
  return new GetROWMarketRep;
}

void GetROWMarketRep::Clear() {
  rowmarket_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetROWMarketRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fantasybit.ROWMarket rowmarket = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rowmarket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rowmarket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_rowmarket;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetROWMarketRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .fantasybit.ROWMarket rowmarket = 10;
  for (int i = 0; i < this->rowmarket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rowmarket(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetROWMarketRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .fantasybit.ROWMarket rowmarket = 10;
  for (int i = 0; i < this->rowmarket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rowmarket(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetROWMarketRep::ByteSize() const {
  int total_size = 0;

  // repeated .fantasybit.ROWMarket rowmarket = 10;
  total_size += 1 * this->rowmarket_size();
  for (int i = 0; i < this->rowmarket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rowmarket(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetROWMarketRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetROWMarketRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetROWMarketRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetROWMarketRep::MergeFrom(const GetROWMarketRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  rowmarket_.MergeFrom(from.rowmarket_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetROWMarketRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetROWMarketRep::CopyFrom(const GetROWMarketRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetROWMarketRep::IsInitialized() const {

  return true;
}

void GetROWMarketRep::Swap(GetROWMarketRep* other) {
  if (other != this) {
    rowmarket_.Swap(&other->rowmarket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetROWMarketRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetROWMarketRep_descriptor_;
  metadata.reflection = GetROWMarketRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDepthReq::kPidFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetDepthReq::kReqFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetDepthReq >, 11, false >
  GetDepthReq::req(kReqFieldNumber, ::fantasybit::GetDepthReq::default_instance());
GetDepthReq::GetDepthReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDepthReq::InitAsDefaultInstance() {
}

GetDepthReq::GetDepthReq(const GetDepthReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDepthReq::SharedCtor() {
  _cached_size_ = 0;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDepthReq::~GetDepthReq() {
  SharedDtor();
}

void GetDepthReq::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (this != default_instance_) {
  }
}

void GetDepthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDepthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDepthReq_descriptor_;
}

const GetDepthReq& GetDepthReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GetDepthReq* GetDepthReq::default_instance_ = NULL;

GetDepthReq* GetDepthReq::New() const {
  return new GetDepthReq;
}

void GetDepthReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::kEmptyString) {
        pid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDepthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDepthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pid = 10;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDepthReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pid = 10;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDepthReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pid = 10;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDepthReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDepthReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDepthReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDepthReq::MergeFrom(const GetDepthReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDepthReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDepthReq::CopyFrom(const GetDepthReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDepthReq::IsInitialized() const {

  return true;
}

void GetDepthReq::Swap(GetDepthReq* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDepthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDepthReq_descriptor_;
  metadata.reflection = GetDepthReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDepthRep::kPidFieldNumber;
const int GetDepthRep::kDepthitemsFieldNumber;
const int GetDepthRep::kRowmarketFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetDepthRep::kRepFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetDepthRep >, 11, false >
  GetDepthRep::rep(kRepFieldNumber, ::fantasybit::GetDepthRep::default_instance());
GetDepthRep::GetDepthRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDepthRep::InitAsDefaultInstance() {
  rowmarket_ = const_cast< ::fantasybit::ROWMarket*>(&::fantasybit::ROWMarket::default_instance());
}

GetDepthRep::GetDepthRep(const GetDepthRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDepthRep::SharedCtor() {
  _cached_size_ = 0;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rowmarket_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDepthRep::~GetDepthRep() {
  SharedDtor();
}

void GetDepthRep::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (this != default_instance_) {
    delete rowmarket_;
  }
}

void GetDepthRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDepthRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDepthRep_descriptor_;
}

const GetDepthRep& GetDepthRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GetDepthRep* GetDepthRep::default_instance_ = NULL;

GetDepthRep* GetDepthRep::New() const {
  return new GetDepthRep;
}

void GetDepthRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::kEmptyString) {
        pid_->clear();
      }
    }
    if (has_rowmarket()) {
      if (rowmarket_ != NULL) rowmarket_->::fantasybit::ROWMarket::Clear();
    }
  }
  depthitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDepthRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_depthitems;
        break;
      }

      // repeated .fantasybit.DepthItem depthitems = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depthitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_depthitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_depthitems;
        if (input->ExpectTag(242)) goto parse_rowmarket;
        break;
      }

      // optional .fantasybit.ROWMarket rowmarket = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rowmarket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rowmarket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDepthRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pid = 10;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->pid(), output);
  }

  // repeated .fantasybit.DepthItem depthitems = 20;
  for (int i = 0; i < this->depthitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->depthitems(i), output);
  }

  // optional .fantasybit.ROWMarket rowmarket = 30;
  if (has_rowmarket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->rowmarket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDepthRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pid = 10;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pid(), target);
  }

  // repeated .fantasybit.DepthItem depthitems = 20;
  for (int i = 0; i < this->depthitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->depthitems(i), target);
  }

  // optional .fantasybit.ROWMarket rowmarket = 30;
  if (has_rowmarket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->rowmarket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDepthRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pid = 10;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

    // optional .fantasybit.ROWMarket rowmarket = 30;
    if (has_rowmarket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rowmarket());
    }

  }
  // repeated .fantasybit.DepthItem depthitems = 20;
  total_size += 2 * this->depthitems_size();
  for (int i = 0; i < this->depthitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->depthitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDepthRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDepthRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDepthRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDepthRep::MergeFrom(const GetDepthRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  depthitems_.MergeFrom(from.depthitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_rowmarket()) {
      mutable_rowmarket()->::fantasybit::ROWMarket::MergeFrom(from.rowmarket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDepthRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDepthRep::CopyFrom(const GetDepthRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDepthRep::IsInitialized() const {

  return true;
}

void GetDepthRep::Swap(GetDepthRep* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    depthitems_.Swap(&other->depthitems_);
    std::swap(rowmarket_, other->rowmarket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDepthRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDepthRep_descriptor_;
  metadata.reflection = GetDepthRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllOdersSymbol::kSymbolFieldNumber;
const int AllOdersSymbol::kNetqtyFieldNumber;
const int AllOdersSymbol::kNetpriceFieldNumber;
const int AllOdersSymbol::kAvgFieldNumber;
const int AllOdersSymbol::kPnlFieldNumber;
const int AllOdersSymbol::kOrdersFieldNumber;
#endif  // !_MSC_VER

AllOdersSymbol::AllOdersSymbol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllOdersSymbol::InitAsDefaultInstance() {
}

AllOdersSymbol::AllOdersSymbol(const AllOdersSymbol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllOdersSymbol::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netqty_ = 0;
  netprice_ = 0;
  avg_ = 0;
  pnl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllOdersSymbol::~AllOdersSymbol() {
  SharedDtor();
}

void AllOdersSymbol::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void AllOdersSymbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllOdersSymbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllOdersSymbol_descriptor_;
}

const AllOdersSymbol& AllOdersSymbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

AllOdersSymbol* AllOdersSymbol::default_instance_ = NULL;

AllOdersSymbol* AllOdersSymbol::New() const {
  return new AllOdersSymbol;
}

void AllOdersSymbol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    netqty_ = 0;
    netprice_ = 0;
    avg_ = 0;
    pnl_ = 0;
  }
  orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllOdersSymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_orders;
        break;
      }

      // repeated .fantasybit.Order orders = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_orders;
        if (input->ExpectTag(240)) goto parse_netqty;
        break;
      }

      // optional int32 netqty = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netqty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netqty_)));
          set_has_netqty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_netprice;
        break;
      }

      // optional int32 netprice = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netprice_)));
          set_has_netprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(401)) goto parse_avg;
        break;
      }

      // optional double avg = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_)));
          set_has_avg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(481)) goto parse_pnl;
        break;
      }

      // optional double pnl = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pnl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pnl_)));
          set_has_pnl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllOdersSymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string symbol = 10;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->symbol(), output);
  }

  // repeated .fantasybit.Order orders = 20;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->orders(i), output);
  }

  // optional int32 netqty = 30;
  if (has_netqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->netqty(), output);
  }

  // optional int32 netprice = 40;
  if (has_netprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->netprice(), output);
  }

  // optional double avg = 50;
  if (has_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->avg(), output);
  }

  // optional double pnl = 60;
  if (has_pnl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(60, this->pnl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllOdersSymbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string symbol = 10;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->symbol(), target);
  }

  // repeated .fantasybit.Order orders = 20;
  for (int i = 0; i < this->orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->orders(i), target);
  }

  // optional int32 netqty = 30;
  if (has_netqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->netqty(), target);
  }

  // optional int32 netprice = 40;
  if (has_netprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->netprice(), target);
  }

  // optional double avg = 50;
  if (has_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->avg(), target);
  }

  // optional double pnl = 60;
  if (has_pnl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(60, this->pnl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllOdersSymbol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string symbol = 10;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional int32 netqty = 30;
    if (has_netqty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netqty());
    }

    // optional int32 netprice = 40;
    if (has_netprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netprice());
    }

    // optional double avg = 50;
    if (has_avg()) {
      total_size += 2 + 8;
    }

    // optional double pnl = 60;
    if (has_pnl()) {
      total_size += 2 + 8;
    }

  }
  // repeated .fantasybit.Order orders = 20;
  total_size += 2 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllOdersSymbol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllOdersSymbol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllOdersSymbol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllOdersSymbol::MergeFrom(const AllOdersSymbol& from) {
  GOOGLE_CHECK_NE(&from, this);
  orders_.MergeFrom(from.orders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_netqty()) {
      set_netqty(from.netqty());
    }
    if (from.has_netprice()) {
      set_netprice(from.netprice());
    }
    if (from.has_avg()) {
      set_avg(from.avg());
    }
    if (from.has_pnl()) {
      set_pnl(from.pnl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllOdersSymbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllOdersSymbol::CopyFrom(const AllOdersSymbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllOdersSymbol::IsInitialized() const {

  return true;
}

void AllOdersSymbol::Swap(AllOdersSymbol* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(netqty_, other->netqty_);
    std::swap(netprice_, other->netprice_);
    std::swap(avg_, other->avg_);
    std::swap(pnl_, other->pnl_);
    orders_.Swap(&other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllOdersSymbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllOdersSymbol_descriptor_;
  metadata.reflection = AllOdersSymbol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllOdersFname::kFnameFieldNumber;
const int AllOdersFname::kPidordersFieldNumber;
#endif  // !_MSC_VER

AllOdersFname::AllOdersFname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllOdersFname::InitAsDefaultInstance() {
}

AllOdersFname::AllOdersFname(const AllOdersFname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllOdersFname::SharedCtor() {
  _cached_size_ = 0;
  fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllOdersFname::~AllOdersFname() {
  SharedDtor();
}

void AllOdersFname::SharedDtor() {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    delete fname_;
  }
  if (this != default_instance_) {
  }
}

void AllOdersFname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllOdersFname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllOdersFname_descriptor_;
}

const AllOdersFname& AllOdersFname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

AllOdersFname* AllOdersFname::default_instance_ = NULL;

AllOdersFname* AllOdersFname::New() const {
  return new AllOdersFname;
}

void AllOdersFname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fname()) {
      if (fname_ != &::google::protobuf::internal::kEmptyString) {
        fname_->clear();
      }
    }
  }
  pidorders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllOdersFname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fname().data(), this->fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_pidorders;
        break;
      }

      // repeated .fantasybit.AllOdersSymbol pidorders = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pidorders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pidorders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_pidorders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllOdersFname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fname = 10;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fname(), output);
  }

  // repeated .fantasybit.AllOdersSymbol pidorders = 20;
  for (int i = 0; i < this->pidorders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->pidorders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllOdersFname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fname = 10;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fname(), target);
  }

  // repeated .fantasybit.AllOdersSymbol pidorders = 20;
  for (int i = 0; i < this->pidorders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->pidorders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllOdersFname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fname = 10;
    if (has_fname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fname());
    }

  }
  // repeated .fantasybit.AllOdersSymbol pidorders = 20;
  total_size += 2 * this->pidorders_size();
  for (int i = 0; i < this->pidorders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pidorders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllOdersFname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllOdersFname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllOdersFname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllOdersFname::MergeFrom(const AllOdersFname& from) {
  GOOGLE_CHECK_NE(&from, this);
  pidorders_.MergeFrom(from.pidorders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fname()) {
      set_fname(from.fname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllOdersFname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllOdersFname::CopyFrom(const AllOdersFname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllOdersFname::IsInitialized() const {

  return true;
}

void AllOdersFname::Swap(AllOdersFname* other) {
  if (other != this) {
    std::swap(fname_, other->fname_);
    pidorders_.Swap(&other->pidorders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllOdersFname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllOdersFname_descriptor_;
  metadata.reflection = AllOdersFname_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOrdersRep::kReqFieldNumber;
const int GetOrdersRep::kOordersFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetOrdersRep::kRepFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetOrdersRep >, 11, false >
  GetOrdersRep::rep(kRepFieldNumber, ::fantasybit::GetOrdersRep::default_instance());
GetOrdersRep::GetOrdersRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOrdersRep::InitAsDefaultInstance() {
  req_ = const_cast< ::fantasybit::GetOrdersReq*>(&::fantasybit::GetOrdersReq::default_instance());
  oorders_ = const_cast< ::fantasybit::AllOdersFname*>(&::fantasybit::AllOdersFname::default_instance());
}

GetOrdersRep::GetOrdersRep(const GetOrdersRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOrdersRep::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  oorders_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOrdersRep::~GetOrdersRep() {
  SharedDtor();
}

void GetOrdersRep::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
    delete oorders_;
  }
}

void GetOrdersRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOrdersRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOrdersRep_descriptor_;
}

const GetOrdersRep& GetOrdersRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GetOrdersRep* GetOrdersRep::default_instance_ = NULL;

GetOrdersRep* GetOrdersRep::New() const {
  return new GetOrdersRep;
}

void GetOrdersRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::fantasybit::GetOrdersReq::Clear();
    }
    if (has_oorders()) {
      if (oorders_ != NULL) oorders_->::fantasybit::AllOdersFname::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOrdersRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GetOrdersReq req = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_oorders;
        break;
      }

      // optional .fantasybit.AllOdersFname oorders = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oorders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oorders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOrdersRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.GetOrdersReq req = 10;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->req(), output);
  }

  // optional .fantasybit.AllOdersFname oorders = 20;
  if (has_oorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->oorders(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOrdersRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.GetOrdersReq req = 10;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->req(), target);
  }

  // optional .fantasybit.AllOdersFname oorders = 20;
  if (has_oorders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->oorders(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOrdersRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.GetOrdersReq req = 10;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // optional .fantasybit.AllOdersFname oorders = 20;
    if (has_oorders()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oorders());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOrdersRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOrdersRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOrdersRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOrdersRep::MergeFrom(const GetOrdersRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::fantasybit::GetOrdersReq::MergeFrom(from.req());
    }
    if (from.has_oorders()) {
      mutable_oorders()->::fantasybit::AllOdersFname::MergeFrom(from.oorders());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOrdersRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrdersRep::CopyFrom(const GetOrdersRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrdersRep::IsInitialized() const {

  return true;
}

void GetOrdersRep::Swap(GetOrdersRep* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(oorders_, other->oorders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOrdersRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOrdersRep_descriptor_;
  metadata.reflection = GetOrdersRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOrdersReq::kSymbolFieldNumber;
const int GetOrdersReq::kFnameFieldNumber;
const int GetOrdersReq::kFchashFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetOrdersReq::kReqFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetOrdersReq >, 11, false >
  GetOrdersReq::req(kReqFieldNumber, ::fantasybit::GetOrdersReq::default_instance());
GetOrdersReq::GetOrdersReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOrdersReq::InitAsDefaultInstance() {
}

GetOrdersReq::GetOrdersReq(const GetOrdersReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOrdersReq::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fchash_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOrdersReq::~GetOrdersReq() {
  SharedDtor();
}

void GetOrdersReq::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    delete fname_;
  }
  if (this != default_instance_) {
  }
}

void GetOrdersReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOrdersReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOrdersReq_descriptor_;
}

const GetOrdersReq& GetOrdersReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GetOrdersReq* GetOrdersReq::default_instance_ = NULL;

GetOrdersReq* GetOrdersReq::New() const {
  return new GetOrdersReq;
}

void GetOrdersReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_fname()) {
      if (fname_ != &::google::protobuf::internal::kEmptyString) {
        fname_->clear();
      }
    }
    fchash_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOrdersReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_fname;
        break;
      }

      // optional string fname = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fname().data(), this->fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_fchash;
        break;
      }

      // optional uint64 fchash = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fchash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fchash_)));
          set_has_fchash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOrdersReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string symbol = 10;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->symbol(), output);
  }

  // optional string fname = 20;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->fname(), output);
  }

  // optional uint64 fchash = 30;
  if (has_fchash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->fchash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOrdersReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string symbol = 10;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->symbol(), target);
  }

  // optional string fname = 20;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->fname(), target);
  }

  // optional uint64 fchash = 30;
  if (has_fchash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->fchash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOrdersReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string symbol = 10;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string fname = 20;
    if (has_fname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fname());
    }

    // optional uint64 fchash = 30;
    if (has_fchash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fchash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOrdersReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOrdersReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOrdersReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOrdersReq::MergeFrom(const GetOrdersReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_fname()) {
      set_fname(from.fname());
    }
    if (from.has_fchash()) {
      set_fchash(from.fchash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOrdersReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrdersReq::CopyFrom(const GetOrdersReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrdersReq::IsInitialized() const {

  return true;
}

void GetOrdersReq::Swap(GetOrdersReq* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(fname_, other->fname_);
    std::swap(fchash_, other->fchash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOrdersReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOrdersReq_descriptor_;
  metadata.reflection = GetOrdersReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetProjectionReq::kFnameFieldNumber;
const int GetProjectionReq::kGetavgFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetProjectionReq::kReqFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetProjectionReq >, 11, false >
  GetProjectionReq::req(kReqFieldNumber, ::fantasybit::GetProjectionReq::default_instance());
GetProjectionReq::GetProjectionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetProjectionReq::InitAsDefaultInstance() {
}

GetProjectionReq::GetProjectionReq(const GetProjectionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetProjectionReq::SharedCtor() {
  _cached_size_ = 0;
  fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getavg_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetProjectionReq::~GetProjectionReq() {
  SharedDtor();
}

void GetProjectionReq::SharedDtor() {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    delete fname_;
  }
  if (this != default_instance_) {
  }
}

void GetProjectionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProjectionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetProjectionReq_descriptor_;
}

const GetProjectionReq& GetProjectionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GetProjectionReq* GetProjectionReq::default_instance_ = NULL;

GetProjectionReq* GetProjectionReq::New() const {
  return new GetProjectionReq;
}

void GetProjectionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fname()) {
      if (fname_ != &::google::protobuf::internal::kEmptyString) {
        fname_->clear();
      }
    }
    getavg_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetProjectionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fname = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fname().data(), this->fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_getavg;
        break;
      }

      // optional bool getavg = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getavg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getavg_)));
          set_has_getavg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetProjectionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fname = 20;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->fname(), output);
  }

  // optional bool getavg = 30;
  if (has_getavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->getavg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetProjectionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fname = 20;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->fname(), target);
  }

  // optional bool getavg = 30;
  if (has_getavg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->getavg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetProjectionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fname = 20;
    if (has_fname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fname());
    }

    // optional bool getavg = 30;
    if (has_getavg()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProjectionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetProjectionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetProjectionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetProjectionReq::MergeFrom(const GetProjectionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fname()) {
      set_fname(from.fname());
    }
    if (from.has_getavg()) {
      set_getavg(from.getavg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetProjectionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectionReq::CopyFrom(const GetProjectionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectionReq::IsInitialized() const {

  return true;
}

void GetProjectionReq::Swap(GetProjectionReq* other) {
  if (other != this) {
    std::swap(fname_, other->fname_);
    std::swap(getavg_, other->getavg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetProjectionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetProjectionReq_descriptor_;
  metadata.reflection = GetProjectionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerProj::kPlayeridFieldNumber;
const int PlayerProj::kProjFieldNumber;
#endif  // !_MSC_VER

PlayerProj::PlayerProj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerProj::InitAsDefaultInstance() {
}

PlayerProj::PlayerProj(const PlayerProj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerProj::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerProj::~PlayerProj() {
  SharedDtor();
}

void PlayerProj::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void PlayerProj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerProj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerProj_descriptor_;
}

const PlayerProj& PlayerProj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

PlayerProj* PlayerProj::default_instance_ = NULL;

PlayerProj* PlayerProj::New() const {
  return new PlayerProj;
}

void PlayerProj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    proj_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerProj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_proj;
        break;
      }

      // optional int32 proj = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proj_)));
          set_has_proj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerProj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playerid = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->playerid(), output);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->proj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerProj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerid = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->playerid(), target);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->proj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerProj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 10;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 proj = 20;
    if (has_proj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerProj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerProj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerProj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerProj::MergeFrom(const PlayerProj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_proj()) {
      set_proj(from.proj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerProj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerProj::CopyFrom(const PlayerProj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerProj::IsInitialized() const {

  return true;
}

void PlayerProj::Swap(PlayerProj* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(proj_, other->proj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerProj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerProj_descriptor_;
  metadata.reflection = PlayerProj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProjByName::kNameFieldNumber;
const int ProjByName::kPlayerprojFieldNumber;
const int ProjByName::kCountFieldNumber;
const int ProjByName::kBlockFieldNumber;
#endif  // !_MSC_VER

ProjByName::ProjByName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProjByName::InitAsDefaultInstance() {
}

ProjByName::ProjByName(const ProjByName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProjByName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  block_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjByName::~ProjByName() {
  SharedDtor();
}

void ProjByName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProjByName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjByName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjByName_descriptor_;
}

const ProjByName& ProjByName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

ProjByName* ProjByName::default_instance_ = NULL;

ProjByName* ProjByName::New() const {
  return new ProjByName;
}

void ProjByName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    count_ = 0;
    block_ = 0;
  }
  playerproj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProjByName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_playerproj;
        break;
      }

      // repeated .fantasybit.PlayerProj playerproj = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerproj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerproj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_playerproj;
        if (input->ExpectTag(320)) goto parse_count;
        break;
      }

      // optional int32 count = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_block;
        break;
      }

      // optional int32 block = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProjByName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // repeated .fantasybit.PlayerProj playerproj = 20;
  for (int i = 0; i < this->playerproj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->playerproj(i), output);
  }

  // optional int32 count = 40;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->count(), output);
  }

  // optional int32 block = 50;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProjByName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // repeated .fantasybit.PlayerProj playerproj = 20;
  for (int i = 0; i < this->playerproj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->playerproj(i), target);
  }

  // optional int32 count = 40;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->count(), target);
  }

  // optional int32 block = 50;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProjByName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 count = 40;
    if (has_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 block = 50;
    if (has_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block());
    }

  }
  // repeated .fantasybit.PlayerProj playerproj = 20;
  total_size += 2 * this->playerproj_size();
  for (int i = 0; i < this->playerproj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerproj(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjByName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProjByName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProjByName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjByName::MergeFrom(const ProjByName& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerproj_.MergeFrom(from.playerproj_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProjByName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjByName::CopyFrom(const ProjByName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjByName::IsInitialized() const {

  return true;
}

void ProjByName::Swap(ProjByName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    playerproj_.Swap(&other->playerproj_);
    std::swap(count_, other->count_);
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProjByName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjByName_descriptor_;
  metadata.reflection = ProjByName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetProjectionRep::kProjsFieldNumber;
const int GetProjectionRep::kAvgFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetProjectionRep::kRepFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetProjectionRep >, 11, false >
  GetProjectionRep::rep(kRepFieldNumber, ::fantasybit::GetProjectionRep::default_instance());
GetProjectionRep::GetProjectionRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetProjectionRep::InitAsDefaultInstance() {
  projs_ = const_cast< ::fantasybit::ProjByName*>(&::fantasybit::ProjByName::default_instance());
  avg_ = const_cast< ::fantasybit::ProjByName*>(&::fantasybit::ProjByName::default_instance());
}

GetProjectionRep::GetProjectionRep(const GetProjectionRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetProjectionRep::SharedCtor() {
  _cached_size_ = 0;
  projs_ = NULL;
  avg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetProjectionRep::~GetProjectionRep() {
  SharedDtor();
}

void GetProjectionRep::SharedDtor() {
  if (this != default_instance_) {
    delete projs_;
    delete avg_;
  }
}

void GetProjectionRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProjectionRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetProjectionRep_descriptor_;
}

const GetProjectionRep& GetProjectionRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

GetProjectionRep* GetProjectionRep::default_instance_ = NULL;

GetProjectionRep* GetProjectionRep::New() const {
  return new GetProjectionRep;
}

void GetProjectionRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_projs()) {
      if (projs_ != NULL) projs_->::fantasybit::ProjByName::Clear();
    }
    if (has_avg()) {
      if (avg_ != NULL) avg_->::fantasybit::ProjByName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetProjectionRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.ProjByName projs = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_projs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_avg;
        break;
      }

      // optional .fantasybit.ProjByName avg = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetProjectionRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.ProjByName projs = 20;
  if (has_projs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->projs(), output);
  }

  // optional .fantasybit.ProjByName avg = 30;
  if (has_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->avg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetProjectionRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.ProjByName projs = 20;
  if (has_projs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->projs(), target);
  }

  // optional .fantasybit.ProjByName avg = 30;
  if (has_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->avg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetProjectionRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.ProjByName projs = 20;
    if (has_projs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->projs());
    }

    // optional .fantasybit.ProjByName avg = 30;
    if (has_avg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProjectionRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetProjectionRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetProjectionRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetProjectionRep::MergeFrom(const GetProjectionRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projs()) {
      mutable_projs()->::fantasybit::ProjByName::MergeFrom(from.projs());
    }
    if (from.has_avg()) {
      mutable_avg()->::fantasybit::ProjByName::MergeFrom(from.avg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetProjectionRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectionRep::CopyFrom(const GetProjectionRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectionRep::IsInitialized() const {

  return true;
}

void GetProjectionRep::Swap(GetProjectionRep* other) {
  if (other != this) {
    std::swap(projs_, other->projs_);
    std::swap(avg_, other->avg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetProjectionRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetProjectionRep_descriptor_;
  metadata.reflection = GetProjectionRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValue::InitAsDefaultInstance() {
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New() const {
  return new KeyValue;
}

void KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_value;
        break;
      }

      // optional bytes value = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes key = 10;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->key(), output);
  }

  // optional bytes value = 20;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes key = 10;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->key(), target);
  }

  // optional bytes value = 20;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 10;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 20;
    if (has_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bootstrap::kKeyFieldNumber;
const int Bootstrap::kBlocknumFieldNumber;
const int Bootstrap::kWeekFieldNumber;
const int Bootstrap::kSeasonFieldNumber;
const int Bootstrap::kGamemetarootFieldNumber;
const int Bootstrap::kPlayermetarootFieldNumber;
const int Bootstrap::kFnamemetarootFieldNumber;
const int Bootstrap::kPrevidFieldNumber;
const int Bootstrap::kGameresultrootFieldNumber;
const int Bootstrap::kPosmetarootFieldNumber;
#endif  // !_MSC_VER

Bootstrap::Bootstrap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bootstrap::InitAsDefaultInstance() {
}

Bootstrap::Bootstrap(const Bootstrap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bootstrap::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blocknum_ = 0;
  week_ = 0;
  season_ = 0;
  gamemetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playermetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fnamemetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  previd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameresultroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posmetaroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bootstrap::~Bootstrap() {
  SharedDtor();
}

void Bootstrap::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (gamemetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete gamemetaroot_;
  }
  if (playermetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete playermetaroot_;
  }
  if (fnamemetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete fnamemetaroot_;
  }
  if (previd_ != &::google::protobuf::internal::kEmptyString) {
    delete previd_;
  }
  if (gameresultroot_ != &::google::protobuf::internal::kEmptyString) {
    delete gameresultroot_;
  }
  if (posmetaroot_ != &::google::protobuf::internal::kEmptyString) {
    delete posmetaroot_;
  }
  if (this != default_instance_) {
  }
}

void Bootstrap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bootstrap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bootstrap_descriptor_;
}

const Bootstrap& Bootstrap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateData_2eproto();
  return *default_instance_;
}

Bootstrap* Bootstrap::default_instance_ = NULL;

Bootstrap* Bootstrap::New() const {
  return new Bootstrap;
}

void Bootstrap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    blocknum_ = 0;
    week_ = 0;
    season_ = 0;
    if (has_gamemetaroot()) {
      if (gamemetaroot_ != &::google::protobuf::internal::kEmptyString) {
        gamemetaroot_->clear();
      }
    }
    if (has_playermetaroot()) {
      if (playermetaroot_ != &::google::protobuf::internal::kEmptyString) {
        playermetaroot_->clear();
      }
    }
    if (has_fnamemetaroot()) {
      if (fnamemetaroot_ != &::google::protobuf::internal::kEmptyString) {
        fnamemetaroot_->clear();
      }
    }
    if (has_previd()) {
      if (previd_ != &::google::protobuf::internal::kEmptyString) {
        previd_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_gameresultroot()) {
      if (gameresultroot_ != &::google::protobuf::internal::kEmptyString) {
        gameresultroot_->clear();
      }
    }
    if (has_posmetaroot()) {
      if (posmetaroot_ != &::google::protobuf::internal::kEmptyString) {
        posmetaroot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bootstrap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blocknum;
        break;
      }

      // optional int32 blocknum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocknum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocknum_)));
          set_has_blocknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_week;
        break;
      }

      // optional int32 week = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_season;
        break;
      }

      // optional int32 season = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_gamemetaroot;
        break;
      }

      // optional bytes gamemetaroot = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamemetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamemetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_playermetaroot;
        break;
      }

      // optional bytes playermetaroot = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playermetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playermetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_fnamemetaroot;
        break;
      }

      // optional bytes fnamemetaroot = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fnamemetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fnamemetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_previd;
        break;
      }

      // optional bytes previd = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_gameresultroot;
        break;
      }

      // optional bytes gameresultroot = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameresultroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameresultroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_posmetaroot;
        break;
      }

      // optional bytes posmetaroot = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_posmetaroot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posmetaroot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bootstrap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional int32 blocknum = 2;
  if (has_blocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->blocknum(), output);
  }

  // optional int32 week = 3;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->week(), output);
  }

  // optional int32 season = 4;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->season(), output);
  }

  // optional bytes gamemetaroot = 10;
  if (has_gamemetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->gamemetaroot(), output);
  }

  // optional bytes playermetaroot = 20;
  if (has_playermetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->playermetaroot(), output);
  }

  // optional bytes fnamemetaroot = 30;
  if (has_fnamemetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->fnamemetaroot(), output);
  }

  // optional bytes previd = 40;
  if (has_previd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->previd(), output);
  }

  // optional bytes gameresultroot = 50;
  if (has_gameresultroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      50, this->gameresultroot(), output);
  }

  // optional bytes posmetaroot = 60;
  if (has_posmetaroot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->posmetaroot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bootstrap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional int32 blocknum = 2;
  if (has_blocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->blocknum(), target);
  }

  // optional int32 week = 3;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->week(), target);
  }

  // optional int32 season = 4;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->season(), target);
  }

  // optional bytes gamemetaroot = 10;
  if (has_gamemetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->gamemetaroot(), target);
  }

  // optional bytes playermetaroot = 20;
  if (has_playermetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->playermetaroot(), target);
  }

  // optional bytes fnamemetaroot = 30;
  if (has_fnamemetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->fnamemetaroot(), target);
  }

  // optional bytes previd = 40;
  if (has_previd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->previd(), target);
  }

  // optional bytes gameresultroot = 50;
  if (has_gameresultroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->gameresultroot(), target);
  }

  // optional bytes posmetaroot = 60;
  if (has_posmetaroot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->posmetaroot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bootstrap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 blocknum = 2;
    if (has_blocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocknum());
    }

    // optional int32 week = 3;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // optional int32 season = 4;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

    // optional bytes gamemetaroot = 10;
    if (has_gamemetaroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gamemetaroot());
    }

    // optional bytes playermetaroot = 20;
    if (has_playermetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playermetaroot());
    }

    // optional bytes fnamemetaroot = 30;
    if (has_fnamemetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fnamemetaroot());
    }

    // optional bytes previd = 40;
    if (has_previd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->previd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes gameresultroot = 50;
    if (has_gameresultroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gameresultroot());
    }

    // optional bytes posmetaroot = 60;
    if (has_posmetaroot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posmetaroot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bootstrap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bootstrap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bootstrap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bootstrap::MergeFrom(const Bootstrap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_blocknum()) {
      set_blocknum(from.blocknum());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_gamemetaroot()) {
      set_gamemetaroot(from.gamemetaroot());
    }
    if (from.has_playermetaroot()) {
      set_playermetaroot(from.playermetaroot());
    }
    if (from.has_fnamemetaroot()) {
      set_fnamemetaroot(from.fnamemetaroot());
    }
    if (from.has_previd()) {
      set_previd(from.previd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gameresultroot()) {
      set_gameresultroot(from.gameresultroot());
    }
    if (from.has_posmetaroot()) {
      set_posmetaroot(from.posmetaroot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bootstrap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bootstrap::CopyFrom(const Bootstrap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bootstrap::IsInitialized() const {

  return true;
}

void Bootstrap::Swap(Bootstrap* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(blocknum_, other->blocknum_);
    std::swap(week_, other->week_);
    std::swap(season_, other->season_);
    std::swap(gamemetaroot_, other->gamemetaroot_);
    std::swap(playermetaroot_, other->playermetaroot_);
    std::swap(fnamemetaroot_, other->fnamemetaroot_);
    std::swap(previd_, other->previd_);
    std::swap(gameresultroot_, other->gameresultroot_);
    std::swap(posmetaroot_, other->posmetaroot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bootstrap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bootstrap_descriptor_;
  metadata.reflection = Bootstrap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
