// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StateData.proto

#include "StateData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllOdersFname_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllOdersSymbol_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckNameRep_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckNameReq_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractOHLC_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Data_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthItem_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NameData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyNameBal_NameData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameData_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameDataRoster_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameInfo_StaticData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StatusData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStatus_StatusData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAllNamesRep_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCurrRostersRep_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetDepthRep_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDepthReq_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGlobalStateRep_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetOrdersRep_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOrdersReq_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProjectionRep_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProjectionReq_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetROWMarketRep_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetScheduleRep_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StatusData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GlobalState_StatusData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketQuote_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NameStatusRep_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NameStatusReq_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pk2FnameRep_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pk2FnameReq_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerBase_StaticData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlayerData_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlayerMeta_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerProj_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StatusData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerStatus_StatusData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProjByName_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ROWMarket_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScheduleData_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StaticData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Stats_StaticData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeReq_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamRoster_StateData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_ProtoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_StateData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WsReq_StateData_2eproto;
namespace fantasybit {
class BlockMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockMeta> _instance;
} _BlockMeta_default_instance_;
class TxMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TxMeta> _instance;
} _TxMeta_default_instance_;
class TrMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrMeta> _instance;
} _TrMeta_default_instance_;
class GameMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMeta> _instance;
} _GameMeta_default_instance_;
class DataMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataMeta> _instance;
} _DataMeta_default_instance_;
class LeaderBoardMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderBoardMeta> _instance;
} _LeaderBoardMeta_default_instance_;
class FantasyNameBalMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FantasyNameBalMeta> _instance;
} _FantasyNameBalMeta_default_instance_;
class FantasyNameStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FantasyNameState> _instance;
} _FantasyNameState_default_instance_;
class WeekGameStatusMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeekGameStatusMeta> _instance;
} _WeekGameStatusMeta_default_instance_;
class InGameProjMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InGameProjMeta> _instance;
} _InGameProjMeta_default_instance_;
class GameResultsMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameResultsMeta> _instance;
} _GameResultsMeta_default_instance_;
class GameStatusMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStatusMeta> _instance;
} _GameStatusMeta_default_instance_;
class TeamProjMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamProjMeta> _instance;
} _TeamProjMeta_default_instance_;
class TeamResultMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamResultMeta> _instance;
} _TeamResultMeta_default_instance_;
class GamePlayerProjMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GamePlayerProjMeta> _instance;
} _GamePlayerProjMeta_default_instance_;
class ProjMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjMeta> _instance;
} _ProjMeta_default_instance_;
class PosMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PosMeta> _instance;
} _PosMeta_default_instance_;
class PlayerResultMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerResultMeta> _instance;
} _PlayerResultMeta_default_instance_;
class PlayerGameStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerGameStats> _instance;
} _PlayerGameStats_default_instance_;
class AwardMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AwardMeta> _instance;
} _AwardMeta_default_instance_;
class PnlMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PnlMeta> _instance;
} _PnlMeta_default_instance_;
class PlayerMarketStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerMarketState> _instance;
} _PlayerMarketState_default_instance_;
class LimitBookMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LimitBookMeta> _instance;
} _LimitBookMeta_default_instance_;
class MarketTicMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketTicMeta> _instance;
} _MarketTicMeta_default_instance_;
class OrderMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderMeta> _instance;
} _OrderMeta_default_instance_;
class OrderFillMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderFillMeta> _instance;
} _OrderFillMeta_default_instance_;
class GlobalStateMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalStateMeta> _instance;
} _GlobalStateMeta_default_instance_;
class PlayerMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerMeta> _instance;
} _PlayerMeta_default_instance_;
class TeamMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamMeta> _instance;
} _TeamMeta_default_instance_;
class pbstateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pbstate> _instance;
} _pbstate_default_instance_;
class MerkleTreeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MerkleTree> _instance;
} _MerkleTree_default_instance_;
class NewPlayerModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewPlayerModel> _instance;
} _NewPlayerModel_default_instance_;
class WsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WsReq> _instance;
} _WsReq_default_instance_;
class WSReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WSReply> _instance;
} _WSReply_default_instance_;
class GetGlobalStateRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGlobalStateRep> _instance;
} _GetGlobalStateRep_default_instance_;
class GetScheduleRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetScheduleRep> _instance;
} _GetScheduleRep_default_instance_;
class CheckNameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckNameReq> _instance;
} _CheckNameReq_default_instance_;
class CheckNameRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckNameRep> _instance;
} _CheckNameRep_default_instance_;
class Pk2FnameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pk2FnameReq> _instance;
} _Pk2FnameReq_default_instance_;
class Pk2FnameRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pk2FnameRep> _instance;
} _Pk2FnameRep_default_instance_;
class SubscribeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeReq> _instance;
} _SubscribeReq_default_instance_;
class NameStatusReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NameStatusReq> _instance;
} _NameStatusReq_default_instance_;
class NameStatusRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NameStatusRep> _instance;
} _NameStatusRep_default_instance_;
class GetAllNamesRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllNamesRep> _instance;
} _GetAllNamesRep_default_instance_;
class TeamRosterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamRoster> _instance;
} _TeamRoster_default_instance_;
class GameDataRosterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameDataRoster> _instance;
} _GameDataRoster_default_instance_;
class GetCurrRostersRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCurrRostersRep> _instance;
} _GetCurrRostersRep_default_instance_;
class ROWMarketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROWMarket> _instance;
} _ROWMarket_default_instance_;
class GetROWMarketRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetROWMarketRep> _instance;
} _GetROWMarketRep_default_instance_;
class GetDepthReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDepthReq> _instance;
} _GetDepthReq_default_instance_;
class GetDepthRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDepthRep> _instance;
} _GetDepthRep_default_instance_;
class AllOdersSymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllOdersSymbol> _instance;
} _AllOdersSymbol_default_instance_;
class AllOdersFnameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllOdersFname> _instance;
} _AllOdersFname_default_instance_;
class GetOrdersRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOrdersRep> _instance;
} _GetOrdersRep_default_instance_;
class GetOrdersReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOrdersReq> _instance;
} _GetOrdersReq_default_instance_;
class GetProjectionReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProjectionReq> _instance;
} _GetProjectionReq_default_instance_;
class PlayerProjDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerProj> _instance;
} _PlayerProj_default_instance_;
class ProjByNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjByName> _instance;
} _ProjByName_default_instance_;
class GetProjectionRepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProjectionRep> _instance;
} _GetProjectionRep_default_instance_;
class KeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValue> _instance;
} _KeyValue_default_instance_;
class BootstrapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bootstrap> _instance;
} _Bootstrap_default_instance_;
}  // namespace fantasybit
static void InitDefaultsscc_info_AllOdersFname_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_AllOdersFname_default_instance_;
    new (ptr) ::fantasybit::AllOdersFname();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::AllOdersFname::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllOdersFname_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllOdersFname_StateData_2eproto}, {
      &scc_info_AllOdersSymbol_StateData_2eproto.base,}};

static void InitDefaultsscc_info_AllOdersSymbol_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_AllOdersSymbol_default_instance_;
    new (ptr) ::fantasybit::AllOdersSymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::AllOdersSymbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllOdersSymbol_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllOdersSymbol_StateData_2eproto}, {
      &scc_info_Order_ExData_2eproto.base,}};

static void InitDefaultsscc_info_AwardMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_AwardMeta_default_instance_;
    new (ptr) ::fantasybit::AwardMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::AwardMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AwardMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_BlockMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_BlockMeta_default_instance_;
    new (ptr) ::fantasybit::BlockMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::BlockMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_Bootstrap_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Bootstrap_default_instance_;
    new (ptr) ::fantasybit::Bootstrap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Bootstrap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bootstrap_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Bootstrap_StateData_2eproto}, {}};

static void InitDefaultsscc_info_CheckNameRep_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_CheckNameRep_default_instance_;
    new (ptr) ::fantasybit::CheckNameRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::CheckNameRep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckNameRep_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CheckNameRep_StateData_2eproto}, {
      &scc_info_CheckNameReq_StateData_2eproto.base,}};

static void InitDefaultsscc_info_CheckNameReq_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_CheckNameReq_default_instance_;
    new (ptr) ::fantasybit::CheckNameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::CheckNameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckNameReq_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckNameReq_StateData_2eproto}, {}};

static void InitDefaultsscc_info_DataMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_DataMeta_default_instance_;
    new (ptr) ::fantasybit::DataMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::DataMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataMeta_StateData_2eproto}, {
      &scc_info_Data_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_FantasyNameBalMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_FantasyNameBalMeta_default_instance_;
    new (ptr) ::fantasybit::FantasyNameBalMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyNameBalMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyNameBalMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FantasyNameBalMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_FantasyNameState_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_FantasyNameState_default_instance_;
    new (ptr) ::fantasybit::FantasyNameState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyNameState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyNameState_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FantasyNameState_StateData_2eproto}, {}};

static void InitDefaultsscc_info_GameDataRoster_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GameDataRoster_default_instance_;
    new (ptr) ::fantasybit::GameDataRoster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameDataRoster::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameDataRoster_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameDataRoster_StateData_2eproto}, {
      &scc_info_GameData_ProtoData_2eproto.base,
      &scc_info_TeamRoster_StateData_2eproto.base,}};

static void InitDefaultsscc_info_GameMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GameMeta_default_instance_;
    new (ptr) ::fantasybit::GameMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameMeta_StateData_2eproto}, {
      &scc_info_GameData_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_GamePlayerProjMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GamePlayerProjMeta_default_instance_;
    new (ptr) ::fantasybit::GamePlayerProjMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GamePlayerProjMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePlayerProjMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GamePlayerProjMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_GameResultsMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GameResultsMeta_default_instance_;
    new (ptr) ::fantasybit::GameResultsMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameResultsMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameResultsMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameResultsMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_GameStatusMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GameStatusMeta_default_instance_;
    new (ptr) ::fantasybit::GameStatusMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameStatusMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameStatusMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameStatusMeta_StateData_2eproto}, {
      &scc_info_GameInfo_StaticData_2eproto.base,
      &scc_info_GameStatus_StatusData_2eproto.base,}};

static void InitDefaultsscc_info_GetAllNamesRep_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GetAllNamesRep_default_instance_;
    new (ptr) ::fantasybit::GetAllNamesRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GetAllNamesRep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAllNamesRep_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAllNamesRep_StateData_2eproto}, {
      &scc_info_FantasyNameBal_NameData_2eproto.base,}};

static void InitDefaultsscc_info_GetCurrRostersRep_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GetCurrRostersRep_default_instance_;
    new (ptr) ::fantasybit::GetCurrRostersRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GetCurrRostersRep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCurrRostersRep_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCurrRostersRep_StateData_2eproto}, {
      &scc_info_GameDataRoster_StateData_2eproto.base,}};

static void InitDefaultsscc_info_GetDepthRep_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GetDepthRep_default_instance_;
    new (ptr) ::fantasybit::GetDepthRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GetDepthRep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetDepthRep_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetDepthRep_StateData_2eproto}, {
      &scc_info_DepthItem_ExData_2eproto.base,
      &scc_info_ROWMarket_StateData_2eproto.base,}};

static void InitDefaultsscc_info_GetDepthReq_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GetDepthReq_default_instance_;
    new (ptr) ::fantasybit::GetDepthReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GetDepthReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDepthReq_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDepthReq_StateData_2eproto}, {}};

static void InitDefaultsscc_info_GetGlobalStateRep_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GetGlobalStateRep_default_instance_;
    new (ptr) ::fantasybit::GetGlobalStateRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GetGlobalStateRep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGlobalStateRep_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetGlobalStateRep_StateData_2eproto}, {
      &scc_info_GlobalState_StatusData_2eproto.base,}};

static void InitDefaultsscc_info_GetOrdersRep_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GetOrdersRep_default_instance_;
    new (ptr) ::fantasybit::GetOrdersRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GetOrdersRep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetOrdersRep_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetOrdersRep_StateData_2eproto}, {
      &scc_info_GetOrdersReq_StateData_2eproto.base,
      &scc_info_AllOdersFname_StateData_2eproto.base,}};

static void InitDefaultsscc_info_GetOrdersReq_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GetOrdersReq_default_instance_;
    new (ptr) ::fantasybit::GetOrdersReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GetOrdersReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOrdersReq_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOrdersReq_StateData_2eproto}, {}};

static void InitDefaultsscc_info_GetProjectionRep_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GetProjectionRep_default_instance_;
    new (ptr) ::fantasybit::GetProjectionRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GetProjectionRep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProjectionRep_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProjectionRep_StateData_2eproto}, {
      &scc_info_ProjByName_StateData_2eproto.base,}};

static void InitDefaultsscc_info_GetProjectionReq_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GetProjectionReq_default_instance_;
    new (ptr) ::fantasybit::GetProjectionReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GetProjectionReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProjectionReq_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProjectionReq_StateData_2eproto}, {}};

static void InitDefaultsscc_info_GetROWMarketRep_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GetROWMarketRep_default_instance_;
    new (ptr) ::fantasybit::GetROWMarketRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GetROWMarketRep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetROWMarketRep_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetROWMarketRep_StateData_2eproto}, {
      &scc_info_ROWMarket_StateData_2eproto.base,}};

static void InitDefaultsscc_info_GetScheduleRep_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GetScheduleRep_default_instance_;
    new (ptr) ::fantasybit::GetScheduleRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GetScheduleRep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetScheduleRep_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetScheduleRep_StateData_2eproto}, {
      &scc_info_ScheduleData_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_GlobalStateMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GlobalStateMeta_default_instance_;
    new (ptr) ::fantasybit::GlobalStateMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GlobalStateMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalStateMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GlobalStateMeta_StateData_2eproto}, {
      &scc_info_GlobalState_StatusData_2eproto.base,}};

static void InitDefaultsscc_info_InGameProjMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_InGameProjMeta_default_instance_;
    new (ptr) ::fantasybit::InGameProjMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::InGameProjMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InGameProjMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InGameProjMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_KeyValue_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_KeyValue_default_instance_;
    new (ptr) ::fantasybit::KeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::KeyValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValue_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyValue_StateData_2eproto}, {}};

static void InitDefaultsscc_info_LeaderBoardMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_LeaderBoardMeta_default_instance_;
    new (ptr) ::fantasybit::LeaderBoardMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::LeaderBoardMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaderBoardMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaderBoardMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_LimitBookMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_LimitBookMeta_default_instance_;
    new (ptr) ::fantasybit::LimitBookMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::LimitBookMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LimitBookMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LimitBookMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_MarketTicMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_MarketTicMeta_default_instance_;
    new (ptr) ::fantasybit::MarketTicMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MarketTicMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketTicMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketTicMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_MerkleTree_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_MerkleTree_default_instance_;
    new (ptr) ::fantasybit::MerkleTree();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MerkleTree::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MerkleTree_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MerkleTree_StateData_2eproto}, {}};

static void InitDefaultsscc_info_NameStatusRep_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_NameStatusRep_default_instance_;
    new (ptr) ::fantasybit::NameStatusRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::NameStatusRep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NameStatusRep_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NameStatusRep_StateData_2eproto}, {
      &scc_info_NameStatusReq_StateData_2eproto.base,}};

static void InitDefaultsscc_info_NameStatusReq_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_NameStatusReq_default_instance_;
    new (ptr) ::fantasybit::NameStatusReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::NameStatusReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NameStatusReq_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NameStatusReq_StateData_2eproto}, {}};

static void InitDefaultsscc_info_NewPlayerModel_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_NewPlayerModel_default_instance_;
    new (ptr) ::fantasybit::NewPlayerModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::NewPlayerModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewPlayerModel_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NewPlayerModel_StateData_2eproto}, {
      &scc_info_PlayerMeta_StateData_2eproto.base,}};

static void InitDefaultsscc_info_OrderFillMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_OrderFillMeta_default_instance_;
    new (ptr) ::fantasybit::OrderFillMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::OrderFillMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderFillMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderFillMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_OrderMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_OrderMeta_default_instance_;
    new (ptr) ::fantasybit::OrderMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::OrderMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_Pk2FnameRep_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Pk2FnameRep_default_instance_;
    new (ptr) ::fantasybit::Pk2FnameRep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Pk2FnameRep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pk2FnameRep_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Pk2FnameRep_StateData_2eproto}, {
      &scc_info_Pk2FnameReq_StateData_2eproto.base,
      &scc_info_FantasyNameBal_NameData_2eproto.base,}};

static void InitDefaultsscc_info_Pk2FnameReq_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Pk2FnameReq_default_instance_;
    new (ptr) ::fantasybit::Pk2FnameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Pk2FnameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pk2FnameReq_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pk2FnameReq_StateData_2eproto}, {}};

static void InitDefaultsscc_info_PlayerGameStats_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PlayerGameStats_default_instance_;
    new (ptr) ::fantasybit::PlayerGameStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerGameStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerGameStats_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerGameStats_StateData_2eproto}, {
      &scc_info_Stats_StaticData_2eproto.base,}};

static void InitDefaultsscc_info_PlayerMarketState_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PlayerMarketState_default_instance_;
    new (ptr) ::fantasybit::PlayerMarketState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerMarketState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerMarketState_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerMarketState_StateData_2eproto}, {}};

static void InitDefaultsscc_info_PlayerMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PlayerMeta_default_instance_;
    new (ptr) ::fantasybit::PlayerMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlayerMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlayerMeta_StateData_2eproto}, {
      &scc_info_PlayerBase_StaticData_2eproto.base,
      &scc_info_PlayerStatus_StatusData_2eproto.base,}};

static void InitDefaultsscc_info_PlayerProj_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PlayerProj_default_instance_;
    new (ptr) ::fantasybit::PlayerProj();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerProj::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerProj_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerProj_StateData_2eproto}, {}};

static void InitDefaultsscc_info_PlayerResultMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PlayerResultMeta_default_instance_;
    new (ptr) ::fantasybit::PlayerResultMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerResultMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerResultMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerResultMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_PnlMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PnlMeta_default_instance_;
    new (ptr) ::fantasybit::PnlMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PnlMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PnlMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PnlMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_PosMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_PosMeta_default_instance_;
    new (ptr) ::fantasybit::PosMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PosMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PosMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PosMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_ProjByName_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ProjByName_default_instance_;
    new (ptr) ::fantasybit::ProjByName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjByName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProjByName_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProjByName_StateData_2eproto}, {
      &scc_info_PlayerProj_StateData_2eproto.base,}};

static void InitDefaultsscc_info_ProjMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ProjMeta_default_instance_;
    new (ptr) ::fantasybit::ProjMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProjMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_ROWMarket_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ROWMarket_default_instance_;
    new (ptr) ::fantasybit::ROWMarket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ROWMarket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ROWMarket_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ROWMarket_StateData_2eproto}, {
      &scc_info_MarketQuote_ExData_2eproto.base,
      &scc_info_PlayerData_ProtoData_2eproto.base,
      &scc_info_ContractOHLC_ExData_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeReq_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_SubscribeReq_default_instance_;
    new (ptr) ::fantasybit::SubscribeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SubscribeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeReq_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeReq_StateData_2eproto}, {}};

static void InitDefaultsscc_info_TeamMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_TeamMeta_default_instance_;
    new (ptr) ::fantasybit::TeamMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TeamMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_TeamProjMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_TeamProjMeta_default_instance_;
    new (ptr) ::fantasybit::TeamProjMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TeamProjMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamProjMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamProjMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_TeamResultMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_TeamResultMeta_default_instance_;
    new (ptr) ::fantasybit::TeamResultMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TeamResultMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamResultMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamResultMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_TeamRoster_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_TeamRoster_default_instance_;
    new (ptr) ::fantasybit::TeamRoster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TeamRoster::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamRoster_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TeamRoster_StateData_2eproto}, {
      &scc_info_PlayerData_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_TrMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_TrMeta_default_instance_;
    new (ptr) ::fantasybit::TrMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TrMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_TxMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_TxMeta_default_instance_;
    new (ptr) ::fantasybit::TxMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TxMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TxMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TxMeta_StateData_2eproto}, {
      &scc_info_Transaction_ProtoData_2eproto.base,}};

static void InitDefaultsscc_info_WSReply_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_WSReply_default_instance_;
    new (ptr) ::fantasybit::WSReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::WSReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WSReply_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WSReply_StateData_2eproto}, {
      &scc_info_WsReq_StateData_2eproto.base,}};

static void InitDefaultsscc_info_WeekGameStatusMeta_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_WeekGameStatusMeta_default_instance_;
    new (ptr) ::fantasybit::WeekGameStatusMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::WeekGameStatusMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeekGameStatusMeta_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WeekGameStatusMeta_StateData_2eproto}, {}};

static void InitDefaultsscc_info_WsReq_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_WsReq_default_instance_;
    new (ptr) ::fantasybit::WsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::WsReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WsReq_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WsReq_StateData_2eproto}, {}};

static void InitDefaultsscc_info_pbstate_StateData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_pbstate_default_instance_;
    new (ptr) ::fantasybit::pbstate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::pbstate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pbstate_StateData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pbstate_StateData_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_StateData_2eproto[61];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_StateData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_StateData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_StateData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockMeta, blocknum_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockMeta, trmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockMeta, txmetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockMeta, pbstateid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockMeta, prev_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BlockMeta, next_),
  5,
  3,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::TxMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TxMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::TxMeta, blocknum_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TxMeta, txnum_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TxMeta, txtype_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TxMeta, tx_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TxMeta, fantasy_name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TxMeta, id_),
  4,
  5,
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::TrMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TrMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::TrMeta, blocknum_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TrMeta, type_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TrMeta, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TrMeta, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TrMeta, gamemetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TrMeta, datametaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TrMeta, txmetaid_),
  4,
  6,
  5,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameMeta, txmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameMeta, gamedata_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::DataMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DataMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::DataMeta, txmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DataMeta, data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::LeaderBoardMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::LeaderBoardMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::LeaderBoardMeta, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::LeaderBoardMeta, fnbalmetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::LeaderBoardMeta, prev_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::LeaderBoardMeta, next_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, txmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, trmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, public_key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, stake_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, block_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, count_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, nonce_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, awardmetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, pnlmetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, prev_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBalMeta, next_),
  0,
  1,
  2,
  3,
  8,
  9,
  10,
  11,
  12,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameState, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameState, fantasynamebalmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameState, posmetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameState, ordersmetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameState, projmetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameState, prev_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameState, next_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameState, txmetaid_),
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::fantasybit::WeekGameStatusMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WeekGameStatusMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::WeekGameStatusMeta, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WeekGameStatusMeta, gameresultmetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WeekGameStatusMeta, ingameprojmetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WeekGameStatusMeta, opengamestatusroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WeekGameStatusMeta, prev_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WeekGameStatusMeta, next_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::fantasybit::InGameProjMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InGameProjMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::InGameProjMeta, gameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InGameProjMeta, gamestatusmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InGameProjMeta, homeprojmeta_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InGameProjMeta, awayprojmeta_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::InGameProjMeta, gamedatametaid_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResultsMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResultsMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResultsMeta, gameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResultsMeta, gamestatusmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResultsMeta, homeresultmeta_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResultsMeta, awayresultmeta_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameResultsMeta, resultdatametaid_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameStatusMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameStatusMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameStatusMeta, id_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameStatusMeta, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameStatusMeta, gameinfo_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameStatusMeta, gamesatus_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameStatusMeta, gamemetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameStatusMeta, datametaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameStatusMeta, prev_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameStatusMeta, next_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameStatusMeta, season_),
  0,
  7,
  5,
  6,
  1,
  2,
  3,
  4,
  8,
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamProjMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamProjMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamProjMeta, gameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamProjMeta, team_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamProjMeta, kickofftime_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamProjMeta, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamProjMeta, gameplayerprojmetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamProjMeta, gamedatametaid_),
  0,
  1,
  4,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamResultMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamResultMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamResultMeta, gameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamResultMeta, team_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamResultMeta, kickofftime_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamResultMeta, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamResultMeta, playerresultmetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamResultMeta, resultdatametaid_),
  0,
  1,
  4,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GamePlayerProjMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GamePlayerProjMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GamePlayerProjMeta, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GamePlayerProjMeta, gamestatusmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GamePlayerProjMeta, projmetaplayerroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GamePlayerProjMeta, posmetaplayerroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GamePlayerProjMeta, gamedatametaid_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjMeta, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjMeta, proj_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjMeta, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjMeta, txmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjMeta, prev_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::fantasybit::PosMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PosMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PosMeta, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PosMeta, qty_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PosMeta, price_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PosMeta, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PosMeta, txmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PosMeta, prev_),
  0,
  4,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResultMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResultMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResultMeta, playergamestatsid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResultMeta, gamestatusmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResultMeta, awardmetaplayerroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResultMeta, pnlmetaplayerroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerResultMeta, resultdatametaid_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerGameStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerGameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerGameStats, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerGameStats, result_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerGameStats, stats_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerGameStats, gameid_),
  0,
  3,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::AwardMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AwardMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::AwardMeta, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AwardMeta, proj_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AwardMeta, award_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AwardMeta, projmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AwardMeta, playergamestatsid_),
  0,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::PnlMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PnlMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PnlMeta, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PnlMeta, qty_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PnlMeta, price_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PnlMeta, pnl_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PnlMeta, posmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PnlMeta, playergamestatsid_),
  0,
  3,
  4,
  5,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMarketState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMarketState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMarketState, limitbookmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMarketState, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMarketState, marketticmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMarketState, locked_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMarketState, prev_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMarketState, next_),
  0,
  1,
  2,
  5,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::fantasybit::LimitBookMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::LimitBookMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::LimitBookMeta, bid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::LimitBookMeta, bidsize_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::LimitBookMeta, asksize_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::LimitBookMeta, ask_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::LimitBookMeta, bidordermetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::LimitBookMeta, askordermetaroot_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicMeta, price_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicMeta, size_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicMeta, orderfillhead_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicMeta, prev_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, refnum_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, fname_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, buyside_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, size_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, price_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, txmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, orderfillmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, timestamp_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderMeta, prev_),
  6,
  0,
  1,
  7,
  8,
  9,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFillMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFillMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFillMeta, refnum_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFillMeta, fname_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFillMeta, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFillMeta, fillprice_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFillMeta, fillsize_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFillMeta, buyside_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFillMeta, timestamp_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFillMeta, txmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFillMeta, prev_),
  4,
  0,
  1,
  5,
  6,
  7,
  8,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GlobalStateMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GlobalStateMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GlobalStateMeta, globalstate_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GlobalStateMeta, trmetaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GlobalStateMeta, prev_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GlobalStateMeta, next_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMeta, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMeta, player_base_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMeta, player_status_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMeta, datametaid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerMeta, prev_),
  0,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamMeta, teamid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamMeta, playermetaidroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamMeta, prev_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::pbstate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::pbstate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::pbstate, schedulestateid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::pbstate, leaderboardstateid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::pbstate, projstateid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::pbstate, posstateid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::pbstate, orderstateid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::pbstate, marketstateid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::pbstate, globalstateid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::pbstate, teamstatemid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::pbstate, fantasynamestateid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::fantasybit::MerkleTree, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MerkleTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::MerkleTree, root_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MerkleTree, leaves_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fantasybit::NewPlayerModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::NewPlayerModel, players_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WsReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WsReq, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WsReq, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::WsReq, version_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WsReq, ctype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::WSReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WSReply, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WSReply, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::WSReply, version_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WSReply, ctype_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WSReply, req_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::WSReply, data_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetGlobalStateRep, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetGlobalStateRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetGlobalStateRep, globalstate_),
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetScheduleRep, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetScheduleRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetScheduleRep, scheduledata_),
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::CheckNameReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::CheckNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::CheckNameReq, fantasy_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::CheckNameRep, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::CheckNameRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::CheckNameRep, isavail_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::CheckNameRep, req_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Pk2FnameReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Pk2FnameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Pk2FnameReq, pk_),
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Pk2FnameRep, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Pk2FnameRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Pk2FnameRep, fname_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Pk2FnameRep, req_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Pk2FnameRep, fnb_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::SubscribeReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SubscribeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::SubscribeReq, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SubscribeReq, fchash_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameStatusReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameStatusReq, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameStatusReq, pk_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameStatusRep, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameStatusRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameStatusRep, status_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::NameStatusRep, req_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetAllNamesRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetAllNamesRep, names_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetAllNamesRep, fnb_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamRoster, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamRoster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamRoster, teamid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TeamRoster, players_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameDataRoster, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameDataRoster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameDataRoster, game_data_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameDataRoster, homeroster_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameDataRoster, awayroster_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetCurrRostersRep, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetCurrRostersRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetCurrRostersRep, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetCurrRostersRep, gamerosters_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ROWMarket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ROWMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ROWMarket, pid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ROWMarket, quote_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ROWMarket, playerdata_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ROWMarket, ohlc_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetROWMarketRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetROWMarketRep, rowmarket_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetDepthReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetDepthReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetDepthReq, pid_),
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetDepthRep, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetDepthRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetDepthRep, pid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetDepthRep, depthitems_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetDepthRep, rowmarket_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersSymbol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersSymbol, symbol_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersSymbol, netqty_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersSymbol, netprice_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersSymbol, avg_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersSymbol, pnl_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersSymbol, orders_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersFname, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersFname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersFname, fname_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::AllOdersFname, pidorders_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetOrdersRep, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetOrdersRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetOrdersRep, req_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetOrdersRep, oorders_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetOrdersReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetOrdersReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetOrdersReq, symbol_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetOrdersReq, fname_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetOrdersReq, fchash_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetProjectionReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetProjectionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetProjectionReq, fname_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetProjectionReq, getavg_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerProj, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerProj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerProj, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::PlayerProj, proj_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjByName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjByName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjByName, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjByName, playerproj_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjByName, count_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjByName, block_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetProjectionRep, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetProjectionRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetProjectionRep, projs_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GetProjectionRep, avg_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::KeyValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::KeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::KeyValue, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, blocknum_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, gamemetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, playermetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, fnamemetaroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, previd_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, gameresultroot_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Bootstrap, posmetaroot_),
  0,
  7,
  8,
  9,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::fantasybit::BlockMeta)},
  { 17, 28, sizeof(::fantasybit::TxMeta)},
  { 34, 46, sizeof(::fantasybit::TrMeta)},
  { 53, 60, sizeof(::fantasybit::GameMeta)},
  { 62, 69, sizeof(::fantasybit::DataMeta)},
  { 71, 80, sizeof(::fantasybit::LeaderBoardMeta)},
  { 84, 102, sizeof(::fantasybit::FantasyNameBalMeta)},
  { 115, 128, sizeof(::fantasybit::FantasyNameState)},
  { 136, 147, sizeof(::fantasybit::WeekGameStatusMeta)},
  { 153, 163, sizeof(::fantasybit::InGameProjMeta)},
  { 168, 178, sizeof(::fantasybit::GameResultsMeta)},
  { 183, 197, sizeof(::fantasybit::GameStatusMeta)},
  { 206, 217, sizeof(::fantasybit::TeamProjMeta)},
  { 223, 234, sizeof(::fantasybit::TeamResultMeta)},
  { 240, 250, sizeof(::fantasybit::GamePlayerProjMeta)},
  { 255, 265, sizeof(::fantasybit::ProjMeta)},
  { 270, 281, sizeof(::fantasybit::PosMeta)},
  { 287, 297, sizeof(::fantasybit::PlayerResultMeta)},
  { 302, 311, sizeof(::fantasybit::PlayerGameStats)},
  { 315, 325, sizeof(::fantasybit::AwardMeta)},
  { 330, 341, sizeof(::fantasybit::PnlMeta)},
  { 347, 358, sizeof(::fantasybit::PlayerMarketState)},
  { 364, 375, sizeof(::fantasybit::LimitBookMeta)},
  { 381, 390, sizeof(::fantasybit::MarketTicMeta)},
  { 394, 409, sizeof(::fantasybit::OrderMeta)},
  { 419, 433, sizeof(::fantasybit::OrderFillMeta)},
  { 442, 451, sizeof(::fantasybit::GlobalStateMeta)},
  { 455, 465, sizeof(::fantasybit::PlayerMeta)},
  { 470, 478, sizeof(::fantasybit::TeamMeta)},
  { 481, 495, sizeof(::fantasybit::pbstate)},
  { 504, 511, sizeof(::fantasybit::MerkleTree)},
  { 513, -1, sizeof(::fantasybit::NewPlayerModel)},
  { 519, 526, sizeof(::fantasybit::WsReq)},
  { 528, 537, sizeof(::fantasybit::WSReply)},
  { 541, 547, sizeof(::fantasybit::GetGlobalStateRep)},
  { 548, 554, sizeof(::fantasybit::GetScheduleRep)},
  { 555, 561, sizeof(::fantasybit::CheckNameReq)},
  { 562, 569, sizeof(::fantasybit::CheckNameRep)},
  { 571, 577, sizeof(::fantasybit::Pk2FnameReq)},
  { 578, 586, sizeof(::fantasybit::Pk2FnameRep)},
  { 589, 596, sizeof(::fantasybit::SubscribeReq)},
  { 598, 605, sizeof(::fantasybit::NameStatusReq)},
  { 607, 614, sizeof(::fantasybit::NameStatusRep)},
  { 616, -1, sizeof(::fantasybit::GetAllNamesRep)},
  { 623, 630, sizeof(::fantasybit::TeamRoster)},
  { 632, 640, sizeof(::fantasybit::GameDataRoster)},
  { 643, 650, sizeof(::fantasybit::GetCurrRostersRep)},
  { 652, 661, sizeof(::fantasybit::ROWMarket)},
  { 665, -1, sizeof(::fantasybit::GetROWMarketRep)},
  { 671, 677, sizeof(::fantasybit::GetDepthReq)},
  { 678, 686, sizeof(::fantasybit::GetDepthRep)},
  { 689, 700, sizeof(::fantasybit::AllOdersSymbol)},
  { 706, 713, sizeof(::fantasybit::AllOdersFname)},
  { 715, 722, sizeof(::fantasybit::GetOrdersRep)},
  { 724, 732, sizeof(::fantasybit::GetOrdersReq)},
  { 735, 742, sizeof(::fantasybit::GetProjectionReq)},
  { 744, 751, sizeof(::fantasybit::PlayerProj)},
  { 753, 762, sizeof(::fantasybit::ProjByName)},
  { 766, 773, sizeof(::fantasybit::GetProjectionRep)},
  { 775, 782, sizeof(::fantasybit::KeyValue)},
  { 784, 799, sizeof(::fantasybit::Bootstrap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_BlockMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_TxMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_TrMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GameMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_DataMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_LeaderBoardMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_FantasyNameBalMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_FantasyNameState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_WeekGameStatusMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_InGameProjMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GameResultsMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GameStatusMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_TeamProjMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_TeamResultMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GamePlayerProjMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ProjMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PosMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PlayerResultMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PlayerGameStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_AwardMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PnlMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PlayerMarketState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_LimitBookMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_MarketTicMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_OrderMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_OrderFillMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GlobalStateMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PlayerMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_TeamMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_pbstate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_MerkleTree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_NewPlayerModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_WsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_WSReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GetGlobalStateRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GetScheduleRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_CheckNameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_CheckNameRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Pk2FnameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Pk2FnameRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_SubscribeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_NameStatusReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_NameStatusRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GetAllNamesRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_TeamRoster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GameDataRoster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GetCurrRostersRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ROWMarket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GetROWMarketRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GetDepthReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GetDepthRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_AllOdersSymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_AllOdersFname_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GetOrdersRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GetOrdersReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GetProjectionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_PlayerProj_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ProjByName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GetProjectionRep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_KeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Bootstrap_default_instance_),
};

const char descriptor_table_protodef_StateData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017StateData.proto\022\nfantasybit\032\017ProtoData"
  ".proto\032\016NameData.proto\032\020StaticData.proto"
  "\032\020StatusData.proto\032\014ExData.proto\"r\n\tBloc"
  "kMeta\022\020\n\010blocknum\030( \001(\005\022\020\n\010trmetaid\0302 \001("
  "\014\022\022\n\ntxmetaroot\030\n \001(\014\022\021\n\tpbstateid\030< \001(\014"
  "\022\014\n\004prev\030\024 \001(\014\022\014\n\004next\030\036 \001(\014\"\227\001\n\006TxMeta\022"
  "\020\n\010blocknum\030\n \001(\005\022\r\n\005txnum\030\024 \001(\005\022%\n\006txty"
  "pe\030( \001(\0162\025.fantasybit.TransType\022#\n\002tx\0302 "
  "\001(\0132\027.fantasybit.Transaction\022\024\n\014fantasy_"
  "name\030< \001(\t\022\n\n\002id\030F \001(\014\"\230\001\n\006TrMeta\022\020\n\010blo"
  "cknum\030\n \001(\005\022 \n\004type\030( \001(\0162\022.fantasybit.T"
  "rType\022\016\n\006season\0302 \001(\r\022\014\n\004week\030< \001(\r\022\024\n\014g"
  "amemetaroot\030F \001(\014\022\024\n\014datametaroot\030P \001(\014\022"
  "\020\n\010txmetaid\030d \001(\014\"D\n\010GameMeta\022\020\n\010txmetai"
  "d\030\n \001(\014\022&\n\010gamedata\030\024 \001(\0132\024.fantasybit.G"
  "ameData\"<\n\010DataMeta\022\020\n\010txmetaid\030\n \001(\014\022\036\n"
  "\004data\030\024 \001(\0132\020.fantasybit.Data\"R\n\017LeaderB"
  "oardMeta\022\014\n\004week\030\n \001(\r\022\025\n\rfnbalmetaroot\030"
  "\024 \001(\014\022\014\n\004prev\030\036 \001(\014\022\014\n\004next\030( \001(\014\"\354\001\n\022Fa"
  "ntasyNameBalMeta\022\020\n\010txmetaid\030\n \001(\014\022\020\n\010tr"
  "metaid\030\024 \001(\014\022\014\n\004name\030\031 \001(\t\022\022\n\npublic_key"
  "\030\036 \001(\t\022\014\n\004bits\030# \001(\004\022\r\n\005stake\030( \001(\003\022\r\n\005b"
  "lock\030) \001(\005\022\r\n\005count\030* \001(\005\022\r\n\005nonce\030- \001(\004"
  "\022\025\n\rawardmetaroot\0302 \001(\014\022\023\n\013pnlmetaroot\030<"
  " \001(\014\022\014\n\004prev\030F \001(\014\022\014\n\004next\030P \001(\014\"\257\001\n\020Fan"
  "tasyNameState\022\014\n\004name\030\001 \001(\t\022\034\n\024fantasyna"
  "mebalmetaid\030\n \001(\014\022\023\n\013posmetaroot\030\024 \001(\014\022\026"
  "\n\016ordersmetaroot\030\036 \001(\014\022\024\n\014projmetaroot\030("
  " \001(\014\022\014\n\004prev\030F \001(\014\022\014\n\004next\030P \001(\014\022\020\n\010txme"
  "taid\0302 \001(\014\"\222\001\n\022WeekGameStatusMeta\022\014\n\004wee"
  "k\030\n \001(\r\022\032\n\022gameresultmetaroot\030\024 \001(\014\022\032\n\022i"
  "ngameprojmetaroot\030\036 \001(\014\022\032\n\022opengamestatu"
  "sroot\030( \001(\014\022\014\n\004prev\0302 \001(\014\022\014\n\004next\030< \001(\014\""
  "~\n\016InGameProjMeta\022\016\n\006gameid\030\024 \001(\t\022\030\n\020gam"
  "estatusmetaid\030( \001(\014\022\024\n\014homeprojmeta\030< \001("
  "\014\022\024\n\014awayprojmeta\030F \001(\014\022\026\n\016gamedatametai"
  "d\0302 \001(\014\"\205\001\n\017GameResultsMeta\022\016\n\006gameid\030\024 "
  "\001(\t\022\030\n\020gamestatusmetaid\030( \001(\014\022\026\n\016homeres"
  "ultmeta\030< \001(\014\022\026\n\016awayresultmeta\030F \001(\014\022\030\n"
  "\020resultdatametaid\0302 \001(\014\"\321\001\n\016GameStatusMe"
  "ta\022\n\n\002id\030\001 \001(\t\022\014\n\004week\030\002 \001(\005\022&\n\010gameinfo"
  "\030\n \001(\0132\024.fantasybit.GameInfo\022)\n\tgamesatu"
  "s\030\024 \001(\0132\026.fantasybit.GameStatus\022\022\n\ngamem"
  "etaid\030\036 \001(\014\022\022\n\ndatametaid\030( \001(\014\022\014\n\004prev\030"
  "2 \001(\014\022\014\n\004next\030< \001(\014\022\016\n\006season\030F \001(\005\"\207\001\n\014"
  "TeamProjMeta\022\016\n\006gameid\030\024 \001(\t\022\014\n\004team\030\036 \001"
  "(\t\022\023\n\013kickofftime\030( \001(\r\022\014\n\004week\0302 \001(\r\022\036\n"
  "\026gameplayerprojmetaroot\030< \001(\014\022\026\n\016gamedat"
  "ametaid\030F \001(\014\"\211\001\n\016TeamResultMeta\022\016\n\006game"
  "id\030\024 \001(\t\022\014\n\004team\030\036 \001(\t\022\023\n\013kickofftime\030( "
  "\001(\r\022\014\n\004week\0302 \001(\r\022\034\n\024playerresultmetaroo"
  "t\030< \001(\014\022\030\n\020resultdatametaid\030F \001(\014\"\217\001\n\022Ga"
  "mePlayerProjMeta\022\020\n\010playerid\030\024 \001(\t\022\030\n\020ga"
  "mestatusmetaid\030\036 \001(\014\022\032\n\022projmetaplayerro"
  "ot\030< \001(\014\022\031\n\021posmetaplayerroot\030F \001(\014\022\026\n\016g"
  "amedatametaid\030P \001(\014\"X\n\010ProjMeta\022\014\n\004name\030"
  "\n \001(\t\022\014\n\004proj\030\024 \001(\005\022\020\n\010playerid\030\036 \001(\t\022\020\n"
  "\010txmetaid\030( \001(\014\022\014\n\004prev\0302 \001(\014\"e\n\007PosMeta"
  "\022\014\n\004name\030\n \001(\t\022\013\n\003qty\030\024 \001(\005\022\r\n\005price\030\036 \001"
  "(\005\022\020\n\010playerid\030( \001(\t\022\020\n\010txmetaid\0302 \001(\014\022\014"
  "\n\004prev\030< \001(\014\"\231\001\n\020PlayerResultMeta\022\031\n\021pla"
  "yergamestatsid\030\n \001(\014\022\030\n\020gamestatusmetaid"
  "\030\036 \001(\014\022\033\n\023awardmetaplayerroot\030< \001(\014\022\031\n\021p"
  "nlmetaplayerroot\030F \001(\014\022\030\n\020resultdatameta"
  "id\030P \001(\014\"e\n\017PlayerGameStats\022\020\n\010playerid\030"
  "\024 \001(\t\022\016\n\006result\030( \001(\002\022 \n\005stats\0302 \001(\0132\021.f"
  "antasybit.Stats\022\016\n\006gameid\030< \001(\t\"e\n\tAward"
  "Meta\022\014\n\004name\030\n \001(\t\022\014\n\004proj\030\024 \001(\005\022\r\n\005awar"
  "d\030\036 \001(\004\022\022\n\nprojmetaid\030( \001(\014\022\031\n\021playergam"
  "estatsid\0302 \001(\014\"n\n\007PnlMeta\022\014\n\004name\030\n \001(\t\022"
  "\013\n\003qty\030\024 \001(\005\022\r\n\005price\030\036 \001(\005\022\013\n\003pnl\030( \001(\003"
  "\022\021\n\tposmetaid\0302 \001(\014\022\031\n\021playergamestatsid"
  "\030< \001(\014\"\203\001\n\021PlayerMarketState\022\027\n\017limitboo"
  "kmetaid\030\n \001(\014\022\020\n\010playerid\030\024 \001(\t\022\027\n\017marke"
  "tticmetaid\030\036 \001(\014\022\016\n\006locked\030\037 \001(\010\022\014\n\004prev"
  "\030( \001(\014\022\014\n\004next\0302 \001(\014\"\177\n\rLimitBookMeta\022\013\n"
  "\003bid\030\n \001(\005\022\017\n\007bidsize\030\024 \001(\005\022\017\n\007asksize\030\036"
  " \001(\005\022\013\n\003ask\030( \001(\005\022\030\n\020bidordermetaroot\0302 "
  "\001(\014\022\030\n\020askordermetaroot\030< \001(\014\"Q\n\rMarketT"
  "icMeta\022\r\n\005price\030\024 \001(\005\022\014\n\004size\030\036 \001(\005\022\025\n\ro"
  "rderfillhead\030( \001(\014\022\014\n\004prev\0302 \001(\014\"\266\001\n\tOrd"
  "erMeta\022\016\n\006refnum\030\001 \001(\005\022\r\n\005fname\030\n \001(\t\022\020\n"
  "\010playerid\030\024 \001(\t\022\017\n\007buyside\030\036 \001(\010\022\014\n\004size"
  "\030( \001(\005\022\r\n\005price\0302 \001(\005\022\020\n\010txmetaid\030< \001(\014\022"
  "\027\n\017orderfillmetaid\030F \001(\014\022\021\n\ttimestamp\030K "
  "\001(\005\022\014\n\004prev\030P \001(\014\"\251\001\n\rOrderFillMeta\022\016\n\006r"
  "efnum\030\001 \001(\005\022\r\n\005fname\030\n \001(\t\022\020\n\010playerid\030\017"
  " \001(\t\022\021\n\tfillprice\030\024 \001(\005\022\020\n\010fillsize\030\036 \001("
  "\005\022\017\n\007buyside\030# \001(\010\022\021\n\ttimestamp\030( \001(\004\022\020\n"
  "\010txmetaid\030< \001(\014\022\014\n\004prev\030F \001(\014\"m\n\017GlobalS"
  "tateMeta\022,\n\013globalstate\030\n \001(\0132\027.fantasyb"
  "it.GlobalState\022\020\n\010trmetaid\030\024 \001(\014\022\014\n\004prev"
  "\030\036 \001(\014\022\014\n\004next\030( \001(\014\"\236\001\n\nPlayerMeta\022\020\n\010p"
  "layerid\030\n \001(\t\022+\n\013player_base\030\024 \001(\0132\026.fan"
  "tasybit.PlayerBase\022/\n\rplayer_status\030\036 \001("
  "\0132\030.fantasybit.PlayerStatus\022\022\n\ndatametai"
  "d\030( \001(\014\022\014\n\004prev\0302 \001(\014\"B\n\010TeamMeta\022\016\n\006tea"
  "mid\030\n \001(\t\022\030\n\020playermetaidroot\030\024 \001(\014\022\014\n\004p"
  "rev\030\036 \001(\014\"\335\001\n\007pbstate\022\027\n\017schedulestateid"
  "\030\n \001(\014\022\032\n\022leaderboardstateid\030\024 \001(\014\022\023\n\013pr"
  "ojstateid\030\036 \001(\014\022\022\n\nposstateid\030# \001(\014\022\024\n\014o"
  "rderstateid\030( \001(\014\022\025\n\rmarketstateid\0302 \001(\014"
  "\022\025\n\rglobalstateid\030< \001(\014\022\024\n\014teamstatemid\030"
  "F \001(\014\022\032\n\022fantasynamestateid\030P \001(\014\"*\n\nMer"
  "kleTree\022\014\n\004root\030\n \001(\014\022\016\n\006leaves\030\024 \003(\014\"9\n"
  "\016NewPlayerModel\022\'\n\007players\030\n \003(\0132\026.fanta"
  "sybit.PlayerMeta\"D\n\005WsReq\022\017\n\007version\030\001 \001"
  "(\005\022 \n\005ctype\030\002 \001(\0162\021.fantasybit.CType*\010\010d"
  "\020\200\200\200\200\002\"t\n\007WSReply\022\017\n\007version\030\001 \001(\005\022 \n\005ct"
  "ype\030\002 \001(\0162\021.fantasybit.CType\022\036\n\003req\030\024 \001("
  "\0132\021.fantasybit.WsReq\022\014\n\004data\030\036 \001(\t*\010\010d\020\200"
  "\200\200\200\002\"\203\001\n\021GetGlobalStateRep\022,\n\013globalstat"
  "e\030\n \001(\0132\027.fantasybit.GlobalState2@\n\003rep\022"
  "\023.fantasybit.WSReply\030\204\007 \001(\0132\035.fantasybit"
  ".GetGlobalStateRep\"\177\n\016GetScheduleRep\022.\n\014"
  "scheduledata\030\n \001(\0132\030.fantasybit.Schedule"
  "Data2=\n\003rep\022\023.fantasybit.WSReply\030\216\007 \001(\0132"
  "\032.fantasybit.GetScheduleRep\"_\n\014CheckName"
  "Req\022\024\n\014fantasy_name\030\n \001(\t29\n\003req\022\021.fanta"
  "sybit.WsReq\030\310\001 \001(\0132\030.fantasybit.CheckNam"
  "eReq\"\203\001\n\014CheckNameRep\022\017\n\007isavail\030\n \001(\t\022%"
  "\n\003req\030\024 \001(\0132\030.fantasybit.CheckNameReq2;\n"
  "\003rep\022\023.fantasybit.WSReply\030\310\001 \001(\0132\030.fanta"
  "sybit.CheckNameRep\"S\n\013Pk2FnameReq\022\n\n\002pk\030"
  "\n \001(\t28\n\003req\022\021.fantasybit.WsReq\030\254\002 \001(\0132\027"
  ".fantasybit.Pk2FnameReq\"\247\001\n\013Pk2FnameRep\022"
  "\r\n\005fname\030\n \001(\t\022$\n\003req\030\024 \001(\0132\027.fantasybit"
  ".Pk2FnameReq\022\'\n\003fnb\030\036 \001(\0132\032.fantasybit.F"
  "antasyNameBal2:\n\003rep\022\023.fantasybit.WSRepl"
  "y\030\254\002 \001(\0132\027.fantasybit.Pk2FnameRep\"g\n\014Sub"
  "scribeReq\022\014\n\004name\030\n \001(\t\022\016\n\006fchash\030\036 \001(\0042"
  "9\n\003req\022\021.fantasybit.WsReq\030\336\002 \001(\0132\030.fanta"
  "sybit.SubscribeReq\"e\n\rNameStatusReq\022\014\n\004n"
  "ame\030\n \001(\t\022\n\n\002pk\030\024 \001(\t2:\n\003req\022\021.fantasybi"
  "t.WsReq\030\220\003 \001(\0132\031.fantasybit.NameStatusRe"
  "q\"\237\001\n\rNameStatusRep\022(\n\006status\030\n \001(\0162\030.fa"
  "ntasybit.MyNameStatus\022&\n\003req\030\024 \001(\0132\031.fan"
  "tasybit.NameStatusReq2<\n\003rep\022\023.fantasybi"
  "t.WSReply\030\220\003 \001(\0132\031.fantasybit.NameStatus"
  "Rep\"\207\001\n\016GetAllNamesRep\022\r\n\005names\030\n \003(\t\022\'\n"
  "\003fnb\030\024 \003(\0132\032.fantasybit.FantasyNameBal2="
  "\n\003rep\022\023.fantasybit.WSReply\030\364\003 \001(\0132\032.fant"
  "asybit.GetAllNamesRep\"E\n\nTeamRoster\022\016\n\006t"
  "eamid\030\n \001(\t\022\'\n\007players\030\024 \003(\0132\026.fantasybi"
  "t.PlayerData\"\221\001\n\016GameDataRoster\022\'\n\tgame_"
  "data\030\n \001(\0132\024.fantasybit.GameData\022*\n\nhome"
  "roster\030\024 \001(\0132\026.fantasybit.TeamRoster\022*\n\n"
  "awayroster\030\036 \001(\0132\026.fantasybit.TeamRoster"
  "\"\224\001\n\021GetCurrRostersRep\022\014\n\004week\030\n \001(\005\022/\n\013"
  "gamerosters\030\024 \003(\0132\032.fantasybit.GameDataR"
  "oster2@\n\003rep\022\023.fantasybit.WSReply\030\230\007 \001(\013"
  "2\035.fantasybit.GetCurrRostersRep\"\224\001\n\tROWM"
  "arket\022\013\n\003pid\030\n \001(\t\022&\n\005quote\030\036 \001(\0132\027.fant"
  "asybit.MarketQuote\022*\n\nplayerdata\030( \001(\0132\026"
  ".fantasybit.PlayerData\022&\n\004ohlc\0302 \001(\0132\030.f"
  "antasybit.ContractOHLC\"{\n\017GetROWMarketRe"
  "p\022(\n\trowmarket\030\n \003(\0132\025.fantasybit.ROWMar"
  "ket2>\n\003rep\022\023.fantasybit.WSReply\030\330\004 \001(\0132\033"
  ".fantasybit.GetROWMarketRep\"T\n\013GetDepthR"
  "eq\022\013\n\003pid\030\n \001(\t28\n\003req\022\021.fantasybit.WsRe"
  "q\030\274\005 \001(\0132\027.fantasybit.GetDepthReq\"\253\001\n\013Ge"
  "tDepthRep\022\013\n\003pid\030\n \001(\t\022)\n\ndepthitems\030\024 \003"
  "(\0132\025.fantasybit.DepthItem\022(\n\trowmarket\030\036"
  " \001(\0132\025.fantasybit.ROWMarket2:\n\003rep\022\023.fan"
  "tasybit.WSReply\030\274\005 \001(\0132\027.fantasybit.GetD"
  "epthRep\"\177\n\016AllOdersSymbol\022\016\n\006symbol\030\n \001("
  "\t\022\016\n\006netqty\030\036 \001(\005\022\020\n\010netprice\030( \001(\005\022\013\n\003a"
  "vg\0302 \001(\001\022\013\n\003pnl\030< \001(\001\022!\n\006orders\030\024 \003(\0132\021."
  "fantasybit.Order\"M\n\rAllOdersFname\022\r\n\005fna"
  "me\030\n \001(\t\022-\n\tpidorders\030\024 \003(\0132\032.fantasybit"
  ".AllOdersSymbol\"\236\001\n\014GetOrdersRep\022%\n\003req\030"
  "\n \001(\0132\030.fantasybit.GetOrdersReq\022*\n\007oorde"
  "rs\030\024 \001(\0132\031.fantasybit.AllOdersFname2;\n\003r"
  "ep\022\023.fantasybit.WSReply\030\240\006 \001(\0132\030.fantasy"
  "bit.GetOrdersRep\"x\n\014GetOrdersReq\022\016\n\006symb"
  "ol\030\n \001(\t\022\r\n\005fname\030\024 \001(\t\022\016\n\006fchash\030\036 \001(\0042"
  "9\n\003req\022\021.fantasybit.WsReq\030\240\006 \001(\0132\030.fanta"
  "sybit.GetOrdersReq\"p\n\020GetProjectionReq\022\r"
  "\n\005fname\030\024 \001(\t\022\016\n\006getavg\030\036 \001(\0102=\n\003req\022\021.f"
  "antasybit.WsReq\030\204\007 \001(\0132\034.fantasybit.GetP"
  "rojectionReq\",\n\nPlayerProj\022\020\n\010playerid\030\n"
  " \001(\t\022\014\n\004proj\030\024 \001(\005\"d\n\nProjByName\022\014\n\004name"
  "\030\n \001(\t\022*\n\nplayerproj\030\024 \003(\0132\026.fantasybit."
  "PlayerProj\022\r\n\005count\030( \001(\005\022\r\n\005block\0302 \001(\005"
  "\"\237\001\n\020GetProjectionRep\022%\n\005projs\030\024 \001(\0132\026.f"
  "antasybit.ProjByName\022#\n\003avg\030\036 \001(\0132\026.fant"
  "asybit.ProjByName2\?\n\003rep\022\023.fantasybit.WS"
  "Reply\030\254\007 \001(\0132\034.fantasybit.GetProjectionR"
  "ep\"&\n\010KeyValue\022\013\n\003key\030\n \001(\014\022\r\n\005value\030\024 \001"
  "(\014\"\312\001\n\tBootstrap\022\013\n\003key\030\001 \001(\t\022\020\n\010blocknu"
  "m\030\002 \001(\005\022\014\n\004week\030\003 \001(\005\022\016\n\006season\030\004 \001(\005\022\024\n"
  "\014gamemetaroot\030\n \001(\014\022\026\n\016playermetaroot\030\024 "
  "\001(\014\022\025\n\rfnamemetaroot\030\036 \001(\014\022\016\n\006previd\030( \001"
  "(\014\022\026\n\016gameresultroot\0302 \001(\014\022\023\n\013posmetaroo"
  "t\030< \001(\014*\214\002\n\005CType\022\010\n\004NONE\020\000\022\r\n\tCHECKNAME"
  "\020\001\022\t\n\005NEWTX\020\002\022\014\n\010PK2FNAME\020\003\022\r\n\tGETSTATUS"
  "\020\004\022\017\n\013GETALLNAMES\020\005\022\020\n\014GETROWMARKET\020\006\022\014\n"
  "\010GETDEPTH\020\007\022\r\n\tGETORDERS\020\010\022\020\n\014GETPOSITIO"
  "NS\020\t\022\022\n\016SUBSCRIBEFNAME\020\n\022\022\n\016GETGLOBALSTA"
  "TE\020\013\022\017\n\013GETSCHEDULE\020\014\022\021\n\rGETGAMEROSTER\020\r"
  "\022\022\n\016GETPROJECTIONS\020\017\022\020\n\014GETGAMESTART\020\020"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_StateData_2eproto_deps[5] = {
  &::descriptor_table_ExData_2eproto,
  &::descriptor_table_NameData_2eproto,
  &::descriptor_table_ProtoData_2eproto,
  &::descriptor_table_StaticData_2eproto,
  &::descriptor_table_StatusData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_StateData_2eproto_sccs[61] = {
  &scc_info_AllOdersFname_StateData_2eproto.base,
  &scc_info_AllOdersSymbol_StateData_2eproto.base,
  &scc_info_AwardMeta_StateData_2eproto.base,
  &scc_info_BlockMeta_StateData_2eproto.base,
  &scc_info_Bootstrap_StateData_2eproto.base,
  &scc_info_CheckNameRep_StateData_2eproto.base,
  &scc_info_CheckNameReq_StateData_2eproto.base,
  &scc_info_DataMeta_StateData_2eproto.base,
  &scc_info_FantasyNameBalMeta_StateData_2eproto.base,
  &scc_info_FantasyNameState_StateData_2eproto.base,
  &scc_info_GameDataRoster_StateData_2eproto.base,
  &scc_info_GameMeta_StateData_2eproto.base,
  &scc_info_GamePlayerProjMeta_StateData_2eproto.base,
  &scc_info_GameResultsMeta_StateData_2eproto.base,
  &scc_info_GameStatusMeta_StateData_2eproto.base,
  &scc_info_GetAllNamesRep_StateData_2eproto.base,
  &scc_info_GetCurrRostersRep_StateData_2eproto.base,
  &scc_info_GetDepthRep_StateData_2eproto.base,
  &scc_info_GetDepthReq_StateData_2eproto.base,
  &scc_info_GetGlobalStateRep_StateData_2eproto.base,
  &scc_info_GetOrdersRep_StateData_2eproto.base,
  &scc_info_GetOrdersReq_StateData_2eproto.base,
  &scc_info_GetProjectionRep_StateData_2eproto.base,
  &scc_info_GetProjectionReq_StateData_2eproto.base,
  &scc_info_GetROWMarketRep_StateData_2eproto.base,
  &scc_info_GetScheduleRep_StateData_2eproto.base,
  &scc_info_GlobalStateMeta_StateData_2eproto.base,
  &scc_info_InGameProjMeta_StateData_2eproto.base,
  &scc_info_KeyValue_StateData_2eproto.base,
  &scc_info_LeaderBoardMeta_StateData_2eproto.base,
  &scc_info_LimitBookMeta_StateData_2eproto.base,
  &scc_info_MarketTicMeta_StateData_2eproto.base,
  &scc_info_MerkleTree_StateData_2eproto.base,
  &scc_info_NameStatusRep_StateData_2eproto.base,
  &scc_info_NameStatusReq_StateData_2eproto.base,
  &scc_info_NewPlayerModel_StateData_2eproto.base,
  &scc_info_OrderFillMeta_StateData_2eproto.base,
  &scc_info_OrderMeta_StateData_2eproto.base,
  &scc_info_Pk2FnameRep_StateData_2eproto.base,
  &scc_info_Pk2FnameReq_StateData_2eproto.base,
  &scc_info_PlayerGameStats_StateData_2eproto.base,
  &scc_info_PlayerMarketState_StateData_2eproto.base,
  &scc_info_PlayerMeta_StateData_2eproto.base,
  &scc_info_PlayerProj_StateData_2eproto.base,
  &scc_info_PlayerResultMeta_StateData_2eproto.base,
  &scc_info_PnlMeta_StateData_2eproto.base,
  &scc_info_PosMeta_StateData_2eproto.base,
  &scc_info_ProjByName_StateData_2eproto.base,
  &scc_info_ProjMeta_StateData_2eproto.base,
  &scc_info_ROWMarket_StateData_2eproto.base,
  &scc_info_SubscribeReq_StateData_2eproto.base,
  &scc_info_TeamMeta_StateData_2eproto.base,
  &scc_info_TeamProjMeta_StateData_2eproto.base,
  &scc_info_TeamResultMeta_StateData_2eproto.base,
  &scc_info_TeamRoster_StateData_2eproto.base,
  &scc_info_TrMeta_StateData_2eproto.base,
  &scc_info_TxMeta_StateData_2eproto.base,
  &scc_info_WSReply_StateData_2eproto.base,
  &scc_info_WeekGameStatusMeta_StateData_2eproto.base,
  &scc_info_WsReq_StateData_2eproto.base,
  &scc_info_pbstate_StateData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_StateData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_StateData_2eproto = {
  false, false, descriptor_table_protodef_StateData_2eproto, "StateData.proto", 8038,
  &descriptor_table_StateData_2eproto_once, descriptor_table_StateData_2eproto_sccs, descriptor_table_StateData_2eproto_deps, 61, 5,
  schemas, file_default_instances, TableStruct_StateData_2eproto::offsets,
  file_level_metadata_StateData_2eproto, 61, file_level_enum_descriptors_StateData_2eproto, file_level_service_descriptors_StateData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_StateData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_StateData_2eproto)), true);
namespace fantasybit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_StateData_2eproto);
  return file_level_enum_descriptors_StateData_2eproto[0];
}
bool CType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BlockMeta::InitAsDefaultInstance() {
}
class BlockMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockMeta>()._has_bits_);
  static void set_has_blocknum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_trmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_txmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pbstateid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_next(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BlockMeta::BlockMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.BlockMeta)
}
BlockMeta::BlockMeta(const BlockMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txmetaroot()) {
    txmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txmetaroot(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_next()) {
    next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next(),
      GetArena());
  }
  trmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trmetaid()) {
    trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trmetaid(),
      GetArena());
  }
  pbstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pbstateid()) {
    pbstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pbstateid(),
      GetArena());
  }
  blocknum_ = from.blocknum_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.BlockMeta)
}

void BlockMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockMeta_StateData_2eproto.base);
  txmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pbstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blocknum_ = 0;
}

BlockMeta::~BlockMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.BlockMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  txmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pbstateid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockMeta::ArenaDtor(void* object) {
  BlockMeta* _this = reinterpret_cast< BlockMeta* >(object);
  (void)_this;
}
void BlockMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockMeta& BlockMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void BlockMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.BlockMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      txmetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      prev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      next_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      trmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      pbstateid_.ClearNonDefaultToEmpty();
    }
  }
  blocknum_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes txmetaroot = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_txmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes next = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 blocknum = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_blocknum(&has_bits);
          blocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes trmetaid = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_trmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pbstateid = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_pbstateid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.BlockMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes txmetaroot = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_txmetaroot(), target);
  }

  // optional bytes prev = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_prev(), target);
  }

  // optional bytes next = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_next(), target);
  }

  // optional int32 blocknum = 40;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_blocknum(), target);
  }

  // optional bytes trmetaid = 50;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_trmetaid(), target);
  }

  // optional bytes pbstateid = 60;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_pbstateid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.BlockMeta)
  return target;
}

size_t BlockMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.BlockMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes txmetaroot = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txmetaroot());
    }

    // optional bytes prev = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional bytes next = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_next());
    }

    // optional bytes trmetaid = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_trmetaid());
    }

    // optional bytes pbstateid = 60;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pbstateid());
    }

    // optional int32 blocknum = 40;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_blocknum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.BlockMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.BlockMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.BlockMeta)
    MergeFrom(*source);
  }
}

void BlockMeta::MergeFrom(const BlockMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.BlockMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_txmetaroot(from._internal_txmetaroot());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_next(from._internal_next());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_trmetaid(from._internal_trmetaid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_pbstateid(from._internal_pbstateid());
    }
    if (cached_has_bits & 0x00000020u) {
      blocknum_ = from.blocknum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.BlockMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMeta::CopyFrom(const BlockMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.BlockMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMeta::IsInitialized() const {
  return true;
}

void BlockMeta::InternalSwap(BlockMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  txmetaroot_.Swap(&other->txmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_.Swap(&other->next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trmetaid_.Swap(&other->trmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pbstateid_.Swap(&other->pbstateid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(blocknum_, other->blocknum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TxMeta::InitAsDefaultInstance() {
  ::fantasybit::_TxMeta_default_instance_._instance.get_mutable()->tx_ = const_cast< ::fantasybit::Transaction*>(
      ::fantasybit::Transaction::internal_default_instance());
}
class TxMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<TxMeta>()._has_bits_);
  static void set_has_blocknum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_txnum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_txtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::fantasybit::Transaction& tx(const TxMeta* msg);
  static void set_has_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fantasy_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::Transaction&
TxMeta::_Internal::tx(const TxMeta* msg) {
  return *msg->tx_;
}
void TxMeta::clear_tx() {
  if (tx_ != nullptr) tx_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TxMeta::TxMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.TxMeta)
}
TxMeta::TxMeta(const TxMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasy_name()) {
    fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fantasy_name(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_tx()) {
    tx_ = new ::fantasybit::Transaction(*from.tx_);
  } else {
    tx_ = nullptr;
  }
  ::memcpy(&txtype_, &from.txtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&txnum_) -
    reinterpret_cast<char*>(&txtype_)) + sizeof(txnum_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.TxMeta)
}

void TxMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TxMeta_StateData_2eproto.base);
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txnum_) -
      reinterpret_cast<char*>(&tx_)) + sizeof(txnum_));
}

TxMeta::~TxMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.TxMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TxMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fantasy_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tx_;
}

void TxMeta::ArenaDtor(void* object) {
  TxMeta* _this = reinterpret_cast< TxMeta* >(object);
  (void)_this;
}
void TxMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxMeta& TxMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TxMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void TxMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TxMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tx_ != nullptr);
      tx_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&txtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&txnum_) -
        reinterpret_cast<char*>(&txtype_)) + sizeof(txnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 blocknum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_blocknum(&has_bits);
          blocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 txnum = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_txnum(&has_bits);
          txnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.TransType txtype = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::TransType_IsValid(val))) {
            _internal_set_txtype(static_cast<::fantasybit::TransType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.Transaction tx = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fantasy_name = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_fantasy_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TxMeta.fantasy_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes id = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TxMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 blocknum = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_blocknum(), target);
  }

  // optional int32 txnum = 20;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_txnum(), target);
  }

  // optional .fantasybit.TransType txtype = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->_internal_txtype(), target);
  }

  // optional .fantasybit.Transaction tx = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::tx(this), target, stream);
  }

  // optional string fantasy_name = 60;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fantasy_name().data(), static_cast<int>(this->_internal_fantasy_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TxMeta.fantasy_name");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_fantasy_name(), target);
  }

  // optional bytes id = 70;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TxMeta)
  return target;
}

size_t TxMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TxMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string fantasy_name = 60;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fantasy_name());
    }

    // optional bytes id = 70;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional .fantasybit.Transaction tx = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tx_);
    }

    // optional .fantasybit.TransType txtype = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_txtype());
    }

    // optional int32 blocknum = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_blocknum());
    }

    // optional int32 txnum = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_txnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TxMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const TxMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TxMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TxMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TxMeta)
    MergeFrom(*source);
  }
}

void TxMeta::MergeFrom(const TxMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TxMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fantasy_name(from._internal_fantasy_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tx()->::fantasybit::Transaction::MergeFrom(from._internal_tx());
    }
    if (cached_has_bits & 0x00000008u) {
      txtype_ = from.txtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      blocknum_ = from.blocknum_;
    }
    if (cached_has_bits & 0x00000020u) {
      txnum_ = from.txnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TxMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TxMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxMeta::CopyFrom(const TxMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TxMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMeta::IsInitialized() const {
  if (_internal_has_tx()) {
    if (!tx_->IsInitialized()) return false;
  }
  return true;
}

void TxMeta::InternalSwap(TxMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fantasy_name_.Swap(&other->fantasy_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxMeta, txnum_)
      + sizeof(TxMeta::txnum_)
      - PROTOBUF_FIELD_OFFSET(TxMeta, tx_)>(
          reinterpret_cast<char*>(&tx_),
          reinterpret_cast<char*>(&other->tx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrMeta::InitAsDefaultInstance() {
}
class TrMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<TrMeta>()._has_bits_);
  static void set_has_blocknum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gamemetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_datametaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_txmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrMeta::TrMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.TrMeta)
}
TrMeta::TrMeta(const TrMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gamemetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamemetaroot()) {
    gamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamemetaroot(),
      GetArena());
  }
  datametaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_datametaroot()) {
    datametaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_datametaroot(),
      GetArena());
  }
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txmetaid()) {
    txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txmetaid(),
      GetArena());
  }
  ::memcpy(&week_, &from.week_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&week_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.TrMeta)
}

void TrMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrMeta_StateData_2eproto.base);
  gamemetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datametaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&week_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&week_)) + sizeof(season_));
  type_ = 2;
}

TrMeta::~TrMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.TrMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamemetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datametaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrMeta::ArenaDtor(void* object) {
  TrMeta* _this = reinterpret_cast< TrMeta* >(object);
  (void)_this;
}
void TrMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrMeta& TrMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void TrMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TrMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gamemetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      datametaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      txmetaid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&week_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_) -
        reinterpret_cast<char*>(&week_)) + sizeof(season_));
    type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 blocknum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_blocknum(&has_bits);
          blocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.TrType type = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::TrType_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::TrType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 season = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 week = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gamemetaroot = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_gamemetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes datametaroot = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_datametaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes txmetaid = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_txmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TrMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 blocknum = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_blocknum(), target);
  }

  // optional .fantasybit.TrType type = 40;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->_internal_type(), target);
  }

  // optional uint32 season = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_season(), target);
  }

  // optional uint32 week = 60;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_week(), target);
  }

  // optional bytes gamemetaroot = 70;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_gamemetaroot(), target);
  }

  // optional bytes datametaroot = 80;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        80, this->_internal_datametaroot(), target);
  }

  // optional bytes txmetaid = 100;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        100, this->_internal_txmetaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TrMeta)
  return target;
}

size_t TrMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TrMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes gamemetaroot = 70;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gamemetaroot());
    }

    // optional bytes datametaroot = 80;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_datametaroot());
    }

    // optional bytes txmetaid = 100;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txmetaid());
    }

    // optional uint32 week = 60;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

    // optional int32 blocknum = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_blocknum());
    }

    // optional uint32 season = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season());
    }

    // optional .fantasybit.TrType type = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TrMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const TrMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TrMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TrMeta)
    MergeFrom(*source);
  }
}

void TrMeta::MergeFrom(const TrMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TrMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gamemetaroot(from._internal_gamemetaroot());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_datametaroot(from._internal_datametaroot());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_txmetaid(from._internal_txmetaid());
    }
    if (cached_has_bits & 0x00000008u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000010u) {
      blocknum_ = from.blocknum_;
    }
    if (cached_has_bits & 0x00000020u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TrMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrMeta::CopyFrom(const TrMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TrMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrMeta::IsInitialized() const {
  return true;
}

void TrMeta::InternalSwap(TrMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamemetaroot_.Swap(&other->gamemetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  datametaroot_.Swap(&other->datametaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txmetaid_.Swap(&other->txmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrMeta, season_)
      + sizeof(TrMeta::season_)
      - PROTOBUF_FIELD_OFFSET(TrMeta, week_)>(
          reinterpret_cast<char*>(&week_),
          reinterpret_cast<char*>(&other->week_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMeta::InitAsDefaultInstance() {
  ::fantasybit::_GameMeta_default_instance_._instance.get_mutable()->gamedata_ = const_cast< ::fantasybit::GameData*>(
      ::fantasybit::GameData::internal_default_instance());
}
class GameMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<GameMeta>()._has_bits_);
  static void set_has_txmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::GameData& gamedata(const GameMeta* msg);
  static void set_has_gamedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::GameData&
GameMeta::_Internal::gamedata(const GameMeta* msg) {
  return *msg->gamedata_;
}
void GameMeta::clear_gamedata() {
  if (gamedata_ != nullptr) gamedata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameMeta::GameMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GameMeta)
}
GameMeta::GameMeta(const GameMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txmetaid()) {
    txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txmetaid(),
      GetArena());
  }
  if (from._internal_has_gamedata()) {
    gamedata_ = new ::fantasybit::GameData(*from.gamedata_);
  } else {
    gamedata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameMeta)
}

void GameMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameMeta_StateData_2eproto.base);
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamedata_ = nullptr;
}

GameMeta::~GameMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.GameMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  txmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gamedata_;
}

void GameMeta::ArenaDtor(void* object) {
  GameMeta* _this = reinterpret_cast< GameMeta* >(object);
  (void)_this;
}
void GameMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMeta& GameMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void GameMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      txmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gamedata_ != nullptr);
      gamedata_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes txmetaid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_txmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.GameData gamedata = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes txmetaid = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_txmetaid(), target);
  }

  // optional .fantasybit.GameData gamedata = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::gamedata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameMeta)
  return target;
}

size_t GameMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes txmetaid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txmetaid());
    }

    // optional .fantasybit.GameData gamedata = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamedata_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameMeta)
    MergeFrom(*source);
  }
}

void GameMeta::MergeFrom(const GameMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_txmetaid(from._internal_txmetaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gamedata()->::fantasybit::GameData::MergeFrom(from._internal_gamedata());
    }
  }
}

void GameMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMeta::CopyFrom(const GameMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMeta::IsInitialized() const {
  return true;
}

void GameMeta::InternalSwap(GameMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  txmetaid_.Swap(&other->txmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(gamedata_, other->gamedata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataMeta::InitAsDefaultInstance() {
  ::fantasybit::_DataMeta_default_instance_._instance.get_mutable()->data_ = const_cast< ::fantasybit::Data*>(
      ::fantasybit::Data::internal_default_instance());
}
class DataMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<DataMeta>()._has_bits_);
  static void set_has_txmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::Data& data(const DataMeta* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::Data&
DataMeta::_Internal::data(const DataMeta* msg) {
  return *msg->data_;
}
void DataMeta::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DataMeta::DataMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.DataMeta)
}
DataMeta::DataMeta(const DataMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txmetaid()) {
    txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txmetaid(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::fantasybit::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.DataMeta)
}

void DataMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataMeta_StateData_2eproto.base);
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

DataMeta::~DataMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.DataMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  txmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void DataMeta::ArenaDtor(void* object) {
  DataMeta* _this = reinterpret_cast< DataMeta* >(object);
  (void)_this;
}
void DataMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataMeta& DataMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void DataMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.DataMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      txmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes txmetaid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_txmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.Data data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.DataMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes txmetaid = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_txmetaid(), target);
  }

  // optional .fantasybit.Data data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.DataMeta)
  return target;
}

size_t DataMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.DataMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes txmetaid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txmetaid());
    }

    // optional .fantasybit.Data data = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.DataMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const DataMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.DataMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.DataMeta)
    MergeFrom(*source);
  }
}

void DataMeta::MergeFrom(const DataMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.DataMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_txmetaid(from._internal_txmetaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data()->::fantasybit::Data::MergeFrom(from._internal_data());
    }
  }
}

void DataMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.DataMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMeta::CopyFrom(const DataMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.DataMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMeta::IsInitialized() const {
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void DataMeta::InternalSwap(DataMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  txmetaid_.Swap(&other->txmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaderBoardMeta::InitAsDefaultInstance() {
}
class LeaderBoardMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaderBoardMeta>()._has_bits_);
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fnbalmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_next(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LeaderBoardMeta::LeaderBoardMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.LeaderBoardMeta)
}
LeaderBoardMeta::LeaderBoardMeta(const LeaderBoardMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fnbalmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fnbalmetaroot()) {
    fnbalmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fnbalmetaroot(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_next()) {
    next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next(),
      GetArena());
  }
  week_ = from.week_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.LeaderBoardMeta)
}

void LeaderBoardMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderBoardMeta_StateData_2eproto.base);
  fnbalmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  week_ = 0u;
}

LeaderBoardMeta::~LeaderBoardMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.LeaderBoardMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderBoardMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fnbalmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaderBoardMeta::ArenaDtor(void* object) {
  LeaderBoardMeta* _this = reinterpret_cast< LeaderBoardMeta* >(object);
  (void)_this;
}
void LeaderBoardMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderBoardMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderBoardMeta& LeaderBoardMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderBoardMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void LeaderBoardMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.LeaderBoardMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fnbalmetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      prev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      next_.ClearNonDefaultToEmpty();
    }
  }
  week_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderBoardMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 week = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes fnbalmetaroot = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_fnbalmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes next = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderBoardMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.LeaderBoardMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 week = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_week(), target);
  }

  // optional bytes fnbalmetaroot = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_fnbalmetaroot(), target);
  }

  // optional bytes prev = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_prev(), target);
  }

  // optional bytes next = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.LeaderBoardMeta)
  return target;
}

size_t LeaderBoardMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.LeaderBoardMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes fnbalmetaroot = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fnbalmetaroot());
    }

    // optional bytes prev = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional bytes next = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_next());
    }

    // optional uint32 week = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderBoardMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.LeaderBoardMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderBoardMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderBoardMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.LeaderBoardMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.LeaderBoardMeta)
    MergeFrom(*source);
  }
}

void LeaderBoardMeta::MergeFrom(const LeaderBoardMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.LeaderBoardMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fnbalmetaroot(from._internal_fnbalmetaroot());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_next(from._internal_next());
    }
    if (cached_has_bits & 0x00000008u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaderBoardMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.LeaderBoardMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderBoardMeta::CopyFrom(const LeaderBoardMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.LeaderBoardMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderBoardMeta::IsInitialized() const {
  return true;
}

void LeaderBoardMeta::InternalSwap(LeaderBoardMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fnbalmetaroot_.Swap(&other->fnbalmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_.Swap(&other->next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(week_, other->week_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderBoardMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FantasyNameBalMeta::InitAsDefaultInstance() {
}
class FantasyNameBalMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<FantasyNameBalMeta>()._has_bits_);
  static void set_has_txmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_stake(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_awardmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pnlmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_next(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

FantasyNameBalMeta::FantasyNameBalMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.FantasyNameBalMeta)
}
FantasyNameBalMeta::FantasyNameBalMeta(const FantasyNameBalMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txmetaid()) {
    txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txmetaid(),
      GetArena());
  }
  trmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trmetaid()) {
    trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trmetaid(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_key()) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_key(),
      GetArena());
  }
  awardmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_awardmetaroot()) {
    awardmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_awardmetaroot(),
      GetArena());
  }
  pnlmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pnlmetaroot()) {
    pnlmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pnlmetaroot(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_next()) {
    next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next(),
      GetArena());
  }
  ::memcpy(&bits_, &from.bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&bits_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyNameBalMeta)
}

void FantasyNameBalMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FantasyNameBalMeta_StateData_2eproto.base);
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awardmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pnlmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&bits_)) + sizeof(nonce_));
}

FantasyNameBalMeta::~FantasyNameBalMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyNameBalMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FantasyNameBalMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  txmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awardmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pnlmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FantasyNameBalMeta::ArenaDtor(void* object) {
  FantasyNameBalMeta* _this = reinterpret_cast< FantasyNameBalMeta* >(object);
  (void)_this;
}
void FantasyNameBalMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FantasyNameBalMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FantasyNameBalMeta& FantasyNameBalMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FantasyNameBalMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void FantasyNameBalMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyNameBalMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      txmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      trmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      public_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      awardmetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      pnlmetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      prev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      next_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&bits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nonce_) -
        reinterpret_cast<char*>(&bits_)) + sizeof(nonce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FantasyNameBalMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes txmetaid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_txmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes trmetaid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_trmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyNameBalMeta.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string public_key = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyNameBalMeta.public_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bits = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bits(&has_bits);
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 stake = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_stake(&has_bits);
          stake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 block = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_block(&has_bits);
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nonce = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_nonce(&has_bits);
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes awardmetaroot = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_awardmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pnlmetaroot = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_pnlmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes next = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FantasyNameBalMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyNameBalMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes txmetaid = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_txmetaid(), target);
  }

  // optional bytes trmetaid = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_trmetaid(), target);
  }

  // optional string name = 25;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameBalMeta.name");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_name(), target);
  }

  // optional string public_key = 30;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameBalMeta.public_key");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_public_key(), target);
  }

  // optional uint64 bits = 35;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(35, this->_internal_bits(), target);
  }

  // optional int64 stake = 40;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(40, this->_internal_stake(), target);
  }

  // optional int32 block = 41;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_block(), target);
  }

  // optional int32 count = 42;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_count(), target);
  }

  // optional uint64 nonce = 45;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(45, this->_internal_nonce(), target);
  }

  // optional bytes awardmetaroot = 50;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_awardmetaroot(), target);
  }

  // optional bytes pnlmetaroot = 60;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_pnlmetaroot(), target);
  }

  // optional bytes prev = 70;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_prev(), target);
  }

  // optional bytes next = 80;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        80, this->_internal_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyNameBalMeta)
  return target;
}

size_t FantasyNameBalMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyNameBalMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes txmetaid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txmetaid());
    }

    // optional bytes trmetaid = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_trmetaid());
    }

    // optional string name = 25;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string public_key = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_public_key());
    }

    // optional bytes awardmetaroot = 50;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_awardmetaroot());
    }

    // optional bytes pnlmetaroot = 60;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pnlmetaroot());
    }

    // optional bytes prev = 70;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional bytes next = 80;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_next());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint64 bits = 35;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bits());
    }

    // optional int64 stake = 40;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_stake());
    }

    // optional int32 block = 41;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_block());
    }

    // optional int32 count = 42;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count());
    }

    // optional uint64 nonce = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_nonce());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FantasyNameBalMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyNameBalMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyNameBalMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FantasyNameBalMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyNameBalMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyNameBalMeta)
    MergeFrom(*source);
  }
}

void FantasyNameBalMeta::MergeFrom(const FantasyNameBalMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyNameBalMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_txmetaid(from._internal_txmetaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_trmetaid(from._internal_trmetaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_public_key(from._internal_public_key());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_awardmetaroot(from._internal_awardmetaroot());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_pnlmetaroot(from._internal_pnlmetaroot());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_next(from._internal_next());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      bits_ = from.bits_;
    }
    if (cached_has_bits & 0x00000200u) {
      stake_ = from.stake_;
    }
    if (cached_has_bits & 0x00000400u) {
      block_ = from.block_;
    }
    if (cached_has_bits & 0x00000800u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00001000u) {
      nonce_ = from.nonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyNameBalMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyNameBalMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyNameBalMeta::CopyFrom(const FantasyNameBalMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyNameBalMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyNameBalMeta::IsInitialized() const {
  return true;
}

void FantasyNameBalMeta::InternalSwap(FantasyNameBalMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  txmetaid_.Swap(&other->txmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trmetaid_.Swap(&other->trmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  awardmetaroot_.Swap(&other->awardmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pnlmetaroot_.Swap(&other->pnlmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_.Swap(&other->next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FantasyNameBalMeta, nonce_)
      + sizeof(FantasyNameBalMeta::nonce_)
      - PROTOBUF_FIELD_OFFSET(FantasyNameBalMeta, bits_)>(
          reinterpret_cast<char*>(&bits_),
          reinterpret_cast<char*>(&other->bits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FantasyNameBalMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FantasyNameState::InitAsDefaultInstance() {
}
class FantasyNameState::_Internal {
 public:
  using HasBits = decltype(std::declval<FantasyNameState>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fantasynamebalmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_posmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ordersmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_projmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_next(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_txmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

FantasyNameState::FantasyNameState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.FantasyNameState)
}
FantasyNameState::FantasyNameState(const FantasyNameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  fantasynamebalmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasynamebalmetaid()) {
    fantasynamebalmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fantasynamebalmetaid(),
      GetArena());
  }
  posmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_posmetaroot()) {
    posmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_posmetaroot(),
      GetArena());
  }
  ordersmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ordersmetaroot()) {
    ordersmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordersmetaroot(),
      GetArena());
  }
  projmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_projmetaroot()) {
    projmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_projmetaroot(),
      GetArena());
  }
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txmetaid()) {
    txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txmetaid(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_next()) {
    next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyNameState)
}

void FantasyNameState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FantasyNameState_StateData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fantasynamebalmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordersmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FantasyNameState::~FantasyNameState() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyNameState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FantasyNameState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fantasynamebalmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordersmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FantasyNameState::ArenaDtor(void* object) {
  FantasyNameState* _this = reinterpret_cast< FantasyNameState* >(object);
  (void)_this;
}
void FantasyNameState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FantasyNameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FantasyNameState& FantasyNameState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FantasyNameState_StateData_2eproto.base);
  return *internal_default_instance();
}


void FantasyNameState::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyNameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      fantasynamebalmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      posmetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ordersmetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      projmetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      txmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      prev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      next_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FantasyNameState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyNameState.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes fantasynamebalmetaid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_fantasynamebalmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes posmetaroot = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_posmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ordersmetaroot = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_ordersmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes projmetaroot = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_projmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes txmetaid = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_txmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes next = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FantasyNameState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyNameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameState.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bytes fantasynamebalmetaid = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_fantasynamebalmetaid(), target);
  }

  // optional bytes posmetaroot = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_posmetaroot(), target);
  }

  // optional bytes ordersmetaroot = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_ordersmetaroot(), target);
  }

  // optional bytes projmetaroot = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_projmetaroot(), target);
  }

  // optional bytes txmetaid = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_txmetaid(), target);
  }

  // optional bytes prev = 70;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_prev(), target);
  }

  // optional bytes next = 80;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        80, this->_internal_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyNameState)
  return target;
}

size_t FantasyNameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyNameState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes fantasynamebalmetaid = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fantasynamebalmetaid());
    }

    // optional bytes posmetaroot = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_posmetaroot());
    }

    // optional bytes ordersmetaroot = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ordersmetaroot());
    }

    // optional bytes projmetaroot = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_projmetaroot());
    }

    // optional bytes txmetaid = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txmetaid());
    }

    // optional bytes prev = 70;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional bytes next = 80;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_next());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FantasyNameState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyNameState)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyNameState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FantasyNameState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyNameState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyNameState)
    MergeFrom(*source);
  }
}

void FantasyNameState::MergeFrom(const FantasyNameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyNameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_fantasynamebalmetaid(from._internal_fantasynamebalmetaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_posmetaroot(from._internal_posmetaroot());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ordersmetaroot(from._internal_ordersmetaroot());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_projmetaroot(from._internal_projmetaroot());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_txmetaid(from._internal_txmetaid());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_next(from._internal_next());
    }
  }
}

void FantasyNameState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyNameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyNameState::CopyFrom(const FantasyNameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyNameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyNameState::IsInitialized() const {
  return true;
}

void FantasyNameState::InternalSwap(FantasyNameState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fantasynamebalmetaid_.Swap(&other->fantasynamebalmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  posmetaroot_.Swap(&other->posmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordersmetaroot_.Swap(&other->ordersmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  projmetaroot_.Swap(&other->projmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txmetaid_.Swap(&other->txmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_.Swap(&other->next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FantasyNameState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeekGameStatusMeta::InitAsDefaultInstance() {
}
class WeekGameStatusMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<WeekGameStatusMeta>()._has_bits_);
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gameresultmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ingameprojmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opengamestatusroot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_next(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

WeekGameStatusMeta::WeekGameStatusMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.WeekGameStatusMeta)
}
WeekGameStatusMeta::WeekGameStatusMeta(const WeekGameStatusMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameresultmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameresultmetaroot()) {
    gameresultmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameresultmetaroot(),
      GetArena());
  }
  ingameprojmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ingameprojmetaroot()) {
    ingameprojmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ingameprojmetaroot(),
      GetArena());
  }
  opengamestatusroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_opengamestatusroot()) {
    opengamestatusroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_opengamestatusroot(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_next()) {
    next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next(),
      GetArena());
  }
  week_ = from.week_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.WeekGameStatusMeta)
}

void WeekGameStatusMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WeekGameStatusMeta_StateData_2eproto.base);
  gameresultmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ingameprojmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opengamestatusroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  week_ = 0u;
}

WeekGameStatusMeta::~WeekGameStatusMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.WeekGameStatusMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WeekGameStatusMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameresultmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ingameprojmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opengamestatusroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WeekGameStatusMeta::ArenaDtor(void* object) {
  WeekGameStatusMeta* _this = reinterpret_cast< WeekGameStatusMeta* >(object);
  (void)_this;
}
void WeekGameStatusMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WeekGameStatusMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeekGameStatusMeta& WeekGameStatusMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeekGameStatusMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void WeekGameStatusMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.WeekGameStatusMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gameresultmetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ingameprojmetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      opengamestatusroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      prev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      next_.ClearNonDefaultToEmpty();
    }
  }
  week_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeekGameStatusMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 week = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gameresultmetaroot = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_gameresultmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ingameprojmetaroot = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_ingameprojmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes opengamestatusroot = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_opengamestatusroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes next = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeekGameStatusMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.WeekGameStatusMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 week = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_week(), target);
  }

  // optional bytes gameresultmetaroot = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_gameresultmetaroot(), target);
  }

  // optional bytes ingameprojmetaroot = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_ingameprojmetaroot(), target);
  }

  // optional bytes opengamestatusroot = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_opengamestatusroot(), target);
  }

  // optional bytes prev = 50;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_prev(), target);
  }

  // optional bytes next = 60;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.WeekGameStatusMeta)
  return target;
}

size_t WeekGameStatusMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.WeekGameStatusMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes gameresultmetaroot = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gameresultmetaroot());
    }

    // optional bytes ingameprojmetaroot = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ingameprojmetaroot());
    }

    // optional bytes opengamestatusroot = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_opengamestatusroot());
    }

    // optional bytes prev = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional bytes next = 60;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_next());
    }

    // optional uint32 week = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeekGameStatusMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.WeekGameStatusMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const WeekGameStatusMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeekGameStatusMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.WeekGameStatusMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.WeekGameStatusMeta)
    MergeFrom(*source);
  }
}

void WeekGameStatusMeta::MergeFrom(const WeekGameStatusMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.WeekGameStatusMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameresultmetaroot(from._internal_gameresultmetaroot());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ingameprojmetaroot(from._internal_ingameprojmetaroot());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_opengamestatusroot(from._internal_opengamestatusroot());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_next(from._internal_next());
    }
    if (cached_has_bits & 0x00000020u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeekGameStatusMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.WeekGameStatusMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeekGameStatusMeta::CopyFrom(const WeekGameStatusMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.WeekGameStatusMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeekGameStatusMeta::IsInitialized() const {
  return true;
}

void WeekGameStatusMeta::InternalSwap(WeekGameStatusMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameresultmetaroot_.Swap(&other->gameresultmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ingameprojmetaroot_.Swap(&other->ingameprojmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opengamestatusroot_.Swap(&other->opengamestatusroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_.Swap(&other->next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(week_, other->week_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeekGameStatusMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InGameProjMeta::InitAsDefaultInstance() {
}
class InGameProjMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<InGameProjMeta>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamestatusmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_homeprojmeta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_awayprojmeta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gamedatametaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

InGameProjMeta::InGameProjMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.InGameProjMeta)
}
InGameProjMeta::InGameProjMeta(const InGameProjMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameid()) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameid(),
      GetArena());
  }
  gamestatusmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamestatusmetaid()) {
    gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamestatusmetaid(),
      GetArena());
  }
  gamedatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamedatametaid()) {
    gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamedatametaid(),
      GetArena());
  }
  homeprojmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_homeprojmeta()) {
    homeprojmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_homeprojmeta(),
      GetArena());
  }
  awayprojmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_awayprojmeta()) {
    awayprojmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_awayprojmeta(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.InGameProjMeta)
}

void InGameProjMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InGameProjMeta_StateData_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamestatusmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamedatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homeprojmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awayprojmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InGameProjMeta::~InGameProjMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.InGameProjMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InGameProjMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamestatusmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamedatametaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homeprojmeta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awayprojmeta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InGameProjMeta::ArenaDtor(void* object) {
  InGameProjMeta* _this = reinterpret_cast< InGameProjMeta* >(object);
  (void)_this;
}
void InGameProjMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InGameProjMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InGameProjMeta& InGameProjMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InGameProjMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void InGameProjMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.InGameProjMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gamestatusmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      gamedatametaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      homeprojmeta_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      awayprojmeta_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InGameProjMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.InGameProjMeta.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gamestatusmetaid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_gamestatusmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gamedatametaid = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_gamedatametaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes homeprojmeta = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_homeprojmeta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes awayprojmeta = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_awayprojmeta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InGameProjMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.InGameProjMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.InGameProjMeta.gameid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_gameid(), target);
  }

  // optional bytes gamestatusmetaid = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_gamestatusmetaid(), target);
  }

  // optional bytes gamedatametaid = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_gamedatametaid(), target);
  }

  // optional bytes homeprojmeta = 60;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_homeprojmeta(), target);
  }

  // optional bytes awayprojmeta = 70;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_awayprojmeta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.InGameProjMeta)
  return target;
}

size_t InGameProjMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.InGameProjMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string gameid = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameid());
    }

    // optional bytes gamestatusmetaid = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gamestatusmetaid());
    }

    // optional bytes gamedatametaid = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gamedatametaid());
    }

    // optional bytes homeprojmeta = 60;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_homeprojmeta());
    }

    // optional bytes awayprojmeta = 70;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_awayprojmeta());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InGameProjMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.InGameProjMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const InGameProjMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InGameProjMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.InGameProjMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.InGameProjMeta)
    MergeFrom(*source);
  }
}

void InGameProjMeta::MergeFrom(const InGameProjMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.InGameProjMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameid(from._internal_gameid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gamestatusmetaid(from._internal_gamestatusmetaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_gamedatametaid(from._internal_gamedatametaid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_homeprojmeta(from._internal_homeprojmeta());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_awayprojmeta(from._internal_awayprojmeta());
    }
  }
}

void InGameProjMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.InGameProjMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InGameProjMeta::CopyFrom(const InGameProjMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.InGameProjMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InGameProjMeta::IsInitialized() const {
  return true;
}

void InGameProjMeta::InternalSwap(InGameProjMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamestatusmetaid_.Swap(&other->gamestatusmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamedatametaid_.Swap(&other->gamedatametaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  homeprojmeta_.Swap(&other->homeprojmeta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  awayprojmeta_.Swap(&other->awayprojmeta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InGameProjMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameResultsMeta::InitAsDefaultInstance() {
}
class GameResultsMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<GameResultsMeta>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamestatusmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_homeresultmeta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_awayresultmeta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_resultdatametaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GameResultsMeta::GameResultsMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GameResultsMeta)
}
GameResultsMeta::GameResultsMeta(const GameResultsMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameid()) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameid(),
      GetArena());
  }
  gamestatusmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamestatusmetaid()) {
    gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamestatusmetaid(),
      GetArena());
  }
  resultdatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resultdatametaid()) {
    resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resultdatametaid(),
      GetArena());
  }
  homeresultmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_homeresultmeta()) {
    homeresultmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_homeresultmeta(),
      GetArena());
  }
  awayresultmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_awayresultmeta()) {
    awayresultmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_awayresultmeta(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameResultsMeta)
}

void GameResultsMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameResultsMeta_StateData_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamestatusmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resultdatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homeresultmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awayresultmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameResultsMeta::~GameResultsMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.GameResultsMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameResultsMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamestatusmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resultdatametaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homeresultmeta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awayresultmeta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameResultsMeta::ArenaDtor(void* object) {
  GameResultsMeta* _this = reinterpret_cast< GameResultsMeta* >(object);
  (void)_this;
}
void GameResultsMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameResultsMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameResultsMeta& GameResultsMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameResultsMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void GameResultsMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameResultsMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gamestatusmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      resultdatametaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      homeresultmeta_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      awayresultmeta_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameResultsMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GameResultsMeta.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gamestatusmetaid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_gamestatusmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes resultdatametaid = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_resultdatametaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes homeresultmeta = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_homeresultmeta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes awayresultmeta = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_awayresultmeta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameResultsMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameResultsMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GameResultsMeta.gameid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_gameid(), target);
  }

  // optional bytes gamestatusmetaid = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_gamestatusmetaid(), target);
  }

  // optional bytes resultdatametaid = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_resultdatametaid(), target);
  }

  // optional bytes homeresultmeta = 60;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_homeresultmeta(), target);
  }

  // optional bytes awayresultmeta = 70;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_awayresultmeta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameResultsMeta)
  return target;
}

size_t GameResultsMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameResultsMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string gameid = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameid());
    }

    // optional bytes gamestatusmetaid = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gamestatusmetaid());
    }

    // optional bytes resultdatametaid = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_resultdatametaid());
    }

    // optional bytes homeresultmeta = 60;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_homeresultmeta());
    }

    // optional bytes awayresultmeta = 70;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_awayresultmeta());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameResultsMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameResultsMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResultsMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameResultsMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameResultsMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameResultsMeta)
    MergeFrom(*source);
  }
}

void GameResultsMeta::MergeFrom(const GameResultsMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameResultsMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameid(from._internal_gameid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gamestatusmetaid(from._internal_gamestatusmetaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_resultdatametaid(from._internal_resultdatametaid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_homeresultmeta(from._internal_homeresultmeta());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_awayresultmeta(from._internal_awayresultmeta());
    }
  }
}

void GameResultsMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameResultsMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResultsMeta::CopyFrom(const GameResultsMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameResultsMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResultsMeta::IsInitialized() const {
  return true;
}

void GameResultsMeta::InternalSwap(GameResultsMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamestatusmetaid_.Swap(&other->gamestatusmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resultdatametaid_.Swap(&other->resultdatametaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  homeresultmeta_.Swap(&other->homeresultmeta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  awayresultmeta_.Swap(&other->awayresultmeta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GameResultsMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameStatusMeta::InitAsDefaultInstance() {
  ::fantasybit::_GameStatusMeta_default_instance_._instance.get_mutable()->gameinfo_ = const_cast< ::fantasybit::GameInfo*>(
      ::fantasybit::GameInfo::internal_default_instance());
  ::fantasybit::_GameStatusMeta_default_instance_._instance.get_mutable()->gamesatus_ = const_cast< ::fantasybit::GameStatus*>(
      ::fantasybit::GameStatus::internal_default_instance());
}
class GameStatusMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<GameStatusMeta>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::fantasybit::GameInfo& gameinfo(const GameStatusMeta* msg);
  static void set_has_gameinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::fantasybit::GameStatus& gamesatus(const GameStatusMeta* msg);
  static void set_has_gamesatus(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gamemetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_datametaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_next(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::fantasybit::GameInfo&
GameStatusMeta::_Internal::gameinfo(const GameStatusMeta* msg) {
  return *msg->gameinfo_;
}
const ::fantasybit::GameStatus&
GameStatusMeta::_Internal::gamesatus(const GameStatusMeta* msg) {
  return *msg->gamesatus_;
}
void GameStatusMeta::clear_gameinfo() {
  if (gameinfo_ != nullptr) gameinfo_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GameStatusMeta::clear_gamesatus() {
  if (gamesatus_ != nullptr) gamesatus_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
GameStatusMeta::GameStatusMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GameStatusMeta)
}
GameStatusMeta::GameStatusMeta(const GameStatusMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  gamemetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamemetaid()) {
    gamemetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamemetaid(),
      GetArena());
  }
  datametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_datametaid()) {
    datametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_datametaid(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_next()) {
    next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next(),
      GetArena());
  }
  if (from._internal_has_gameinfo()) {
    gameinfo_ = new ::fantasybit::GameInfo(*from.gameinfo_);
  } else {
    gameinfo_ = nullptr;
  }
  if (from._internal_has_gamesatus()) {
    gamesatus_ = new ::fantasybit::GameStatus(*from.gamesatus_);
  } else {
    gamesatus_ = nullptr;
  }
  ::memcpy(&week_, &from.week_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_) -
    reinterpret_cast<char*>(&week_)) + sizeof(season_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameStatusMeta)
}

void GameStatusMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameStatusMeta_StateData_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamemetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&gameinfo_)) + sizeof(season_));
}

GameStatusMeta::~GameStatusMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.GameStatusMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameStatusMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamemetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datametaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gameinfo_;
  if (this != internal_default_instance()) delete gamesatus_;
}

void GameStatusMeta::ArenaDtor(void* object) {
  GameStatusMeta* _this = reinterpret_cast< GameStatusMeta* >(object);
  (void)_this;
}
void GameStatusMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameStatusMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStatusMeta& GameStatusMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStatusMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void GameStatusMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameStatusMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gamemetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      datametaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      prev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      next_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gameinfo_ != nullptr);
      gameinfo_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(gamesatus_ != nullptr);
      gamesatus_->Clear();
    }
  }
  week_ = 0;
  season_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStatusMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GameStatusMeta.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 week = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.GameInfo gameinfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.GameStatus gamesatus = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamesatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gamemetaid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_gamemetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes datametaid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_datametaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes next = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 season = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStatusMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameStatusMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GameStatusMeta.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional int32 week = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_week(), target);
  }

  // optional .fantasybit.GameInfo gameinfo = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::gameinfo(this), target, stream);
  }

  // optional .fantasybit.GameStatus gamesatus = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::gamesatus(this), target, stream);
  }

  // optional bytes gamemetaid = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_gamemetaid(), target);
  }

  // optional bytes datametaid = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_datametaid(), target);
  }

  // optional bytes prev = 50;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_prev(), target);
  }

  // optional bytes next = 60;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_next(), target);
  }

  // optional int32 season = 70;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_season(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameStatusMeta)
  return target;
}

size_t GameStatusMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameStatusMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional bytes gamemetaid = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gamemetaid());
    }

    // optional bytes datametaid = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_datametaid());
    }

    // optional bytes prev = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional bytes next = 60;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_next());
    }

    // optional .fantasybit.GameInfo gameinfo = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gameinfo_);
    }

    // optional .fantasybit.GameStatus gamesatus = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamesatus_);
    }

    // optional int32 week = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_week());
    }

  }
  // optional int32 season = 70;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_season());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStatusMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameStatusMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStatusMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStatusMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameStatusMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameStatusMeta)
    MergeFrom(*source);
  }
}

void GameStatusMeta::MergeFrom(const GameStatusMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameStatusMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gamemetaid(from._internal_gamemetaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_datametaid(from._internal_datametaid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_next(from._internal_next());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_gameinfo()->::fantasybit::GameInfo::MergeFrom(from._internal_gameinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_gamesatus()->::fantasybit::GameStatus::MergeFrom(from._internal_gamesatus());
    }
    if (cached_has_bits & 0x00000080u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_season(from._internal_season());
  }
}

void GameStatusMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameStatusMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStatusMeta::CopyFrom(const GameStatusMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameStatusMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatusMeta::IsInitialized() const {
  return true;
}

void GameStatusMeta::InternalSwap(GameStatusMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamemetaid_.Swap(&other->gamemetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  datametaid_.Swap(&other->datametaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_.Swap(&other->next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStatusMeta, season_)
      + sizeof(GameStatusMeta::season_)
      - PROTOBUF_FIELD_OFFSET(GameStatusMeta, gameinfo_)>(
          reinterpret_cast<char*>(&gameinfo_),
          reinterpret_cast<char*>(&other->gameinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStatusMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamProjMeta::InitAsDefaultInstance() {
}
class TeamProjMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamProjMeta>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kickofftime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gameplayerprojmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gamedatametaid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TeamProjMeta::TeamProjMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.TeamProjMeta)
}
TeamProjMeta::TeamProjMeta(const TeamProjMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameid()) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameid(),
      GetArena());
  }
  team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team()) {
    team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_team(),
      GetArena());
  }
  gameplayerprojmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameplayerprojmetaroot()) {
    gameplayerprojmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameplayerprojmetaroot(),
      GetArena());
  }
  gamedatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamedatametaid()) {
    gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamedatametaid(),
      GetArena());
  }
  ::memcpy(&kickofftime_, &from.kickofftime_,
    static_cast<size_t>(reinterpret_cast<char*>(&week_) -
    reinterpret_cast<char*>(&kickofftime_)) + sizeof(week_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.TeamProjMeta)
}

void TeamProjMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamProjMeta_StateData_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameplayerprojmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamedatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&kickofftime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&kickofftime_)) + sizeof(week_));
}

TeamProjMeta::~TeamProjMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.TeamProjMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamProjMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameplayerprojmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamedatametaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeamProjMeta::ArenaDtor(void* object) {
  TeamProjMeta* _this = reinterpret_cast< TeamProjMeta* >(object);
  (void)_this;
}
void TeamProjMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamProjMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamProjMeta& TeamProjMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamProjMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void TeamProjMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TeamProjMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      gameplayerprojmetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      gamedatametaid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&kickofftime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&kickofftime_)) + sizeof(week_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamProjMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TeamProjMeta.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_team();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TeamProjMeta.team");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kickofftime = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_kickofftime(&has_bits);
          kickofftime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 week = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gameplayerprojmetaroot = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_gameplayerprojmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gamedatametaid = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_gamedatametaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamProjMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TeamProjMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamProjMeta.gameid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_gameid(), target);
  }

  // optional string team = 30;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team().data(), static_cast<int>(this->_internal_team().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamProjMeta.team");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_team(), target);
  }

  // optional uint32 kickofftime = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_kickofftime(), target);
  }

  // optional uint32 week = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_week(), target);
  }

  // optional bytes gameplayerprojmetaroot = 60;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_gameplayerprojmetaroot(), target);
  }

  // optional bytes gamedatametaid = 70;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_gamedatametaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TeamProjMeta)
  return target;
}

size_t TeamProjMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TeamProjMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string gameid = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameid());
    }

    // optional string team = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team());
    }

    // optional bytes gameplayerprojmetaroot = 60;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gameplayerprojmetaroot());
    }

    // optional bytes gamedatametaid = 70;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gamedatametaid());
    }

    // optional uint32 kickofftime = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kickofftime());
    }

    // optional uint32 week = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamProjMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TeamProjMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamProjMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamProjMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TeamProjMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TeamProjMeta)
    MergeFrom(*source);
  }
}

void TeamProjMeta::MergeFrom(const TeamProjMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TeamProjMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameid(from._internal_gameid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team(from._internal_team());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_gameplayerprojmetaroot(from._internal_gameplayerprojmetaroot());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_gamedatametaid(from._internal_gamedatametaid());
    }
    if (cached_has_bits & 0x00000010u) {
      kickofftime_ = from.kickofftime_;
    }
    if (cached_has_bits & 0x00000020u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamProjMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TeamProjMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamProjMeta::CopyFrom(const TeamProjMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TeamProjMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamProjMeta::IsInitialized() const {
  return true;
}

void TeamProjMeta::InternalSwap(TeamProjMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_.Swap(&other->team_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gameplayerprojmetaroot_.Swap(&other->gameplayerprojmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamedatametaid_.Swap(&other->gamedatametaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamProjMeta, week_)
      + sizeof(TeamProjMeta::week_)
      - PROTOBUF_FIELD_OFFSET(TeamProjMeta, kickofftime_)>(
          reinterpret_cast<char*>(&kickofftime_),
          reinterpret_cast<char*>(&other->kickofftime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamProjMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamResultMeta::InitAsDefaultInstance() {
}
class TeamResultMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamResultMeta>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kickofftime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_playerresultmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_resultdatametaid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TeamResultMeta::TeamResultMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.TeamResultMeta)
}
TeamResultMeta::TeamResultMeta(const TeamResultMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameid()) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameid(),
      GetArena());
  }
  team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team()) {
    team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_team(),
      GetArena());
  }
  playerresultmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerresultmetaroot()) {
    playerresultmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerresultmetaroot(),
      GetArena());
  }
  resultdatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resultdatametaid()) {
    resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resultdatametaid(),
      GetArena());
  }
  ::memcpy(&kickofftime_, &from.kickofftime_,
    static_cast<size_t>(reinterpret_cast<char*>(&week_) -
    reinterpret_cast<char*>(&kickofftime_)) + sizeof(week_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.TeamResultMeta)
}

void TeamResultMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamResultMeta_StateData_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerresultmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resultdatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&kickofftime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&kickofftime_)) + sizeof(week_));
}

TeamResultMeta::~TeamResultMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.TeamResultMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamResultMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerresultmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resultdatametaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeamResultMeta::ArenaDtor(void* object) {
  TeamResultMeta* _this = reinterpret_cast< TeamResultMeta* >(object);
  (void)_this;
}
void TeamResultMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamResultMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamResultMeta& TeamResultMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamResultMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void TeamResultMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TeamResultMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      playerresultmetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      resultdatametaid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&kickofftime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&kickofftime_)) + sizeof(week_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamResultMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TeamResultMeta.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_team();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TeamResultMeta.team");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kickofftime = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_kickofftime(&has_bits);
          kickofftime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 week = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes playerresultmetaroot = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_playerresultmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes resultdatametaid = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_resultdatametaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamResultMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TeamResultMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamResultMeta.gameid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_gameid(), target);
  }

  // optional string team = 30;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team().data(), static_cast<int>(this->_internal_team().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamResultMeta.team");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_team(), target);
  }

  // optional uint32 kickofftime = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_kickofftime(), target);
  }

  // optional uint32 week = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_week(), target);
  }

  // optional bytes playerresultmetaroot = 60;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_playerresultmetaroot(), target);
  }

  // optional bytes resultdatametaid = 70;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_resultdatametaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TeamResultMeta)
  return target;
}

size_t TeamResultMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TeamResultMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string gameid = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameid());
    }

    // optional string team = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team());
    }

    // optional bytes playerresultmetaroot = 60;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_playerresultmetaroot());
    }

    // optional bytes resultdatametaid = 70;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_resultdatametaid());
    }

    // optional uint32 kickofftime = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kickofftime());
    }

    // optional uint32 week = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_week());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamResultMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TeamResultMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamResultMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamResultMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TeamResultMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TeamResultMeta)
    MergeFrom(*source);
  }
}

void TeamResultMeta::MergeFrom(const TeamResultMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TeamResultMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameid(from._internal_gameid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team(from._internal_team());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_playerresultmetaroot(from._internal_playerresultmetaroot());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_resultdatametaid(from._internal_resultdatametaid());
    }
    if (cached_has_bits & 0x00000010u) {
      kickofftime_ = from.kickofftime_;
    }
    if (cached_has_bits & 0x00000020u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamResultMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TeamResultMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamResultMeta::CopyFrom(const TeamResultMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TeamResultMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamResultMeta::IsInitialized() const {
  return true;
}

void TeamResultMeta::InternalSwap(TeamResultMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_.Swap(&other->team_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerresultmetaroot_.Swap(&other->playerresultmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resultdatametaid_.Swap(&other->resultdatametaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamResultMeta, week_)
      + sizeof(TeamResultMeta::week_)
      - PROTOBUF_FIELD_OFFSET(TeamResultMeta, kickofftime_)>(
          reinterpret_cast<char*>(&kickofftime_),
          reinterpret_cast<char*>(&other->kickofftime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamResultMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GamePlayerProjMeta::InitAsDefaultInstance() {
}
class GamePlayerProjMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<GamePlayerProjMeta>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamestatusmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_projmetaplayerroot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_posmetaplayerroot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gamedatametaid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

GamePlayerProjMeta::GamePlayerProjMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GamePlayerProjMeta)
}
GamePlayerProjMeta::GamePlayerProjMeta(const GamePlayerProjMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  gamestatusmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamestatusmetaid()) {
    gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamestatusmetaid(),
      GetArena());
  }
  projmetaplayerroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_projmetaplayerroot()) {
    projmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_projmetaplayerroot(),
      GetArena());
  }
  posmetaplayerroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_posmetaplayerroot()) {
    posmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_posmetaplayerroot(),
      GetArena());
  }
  gamedatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamedatametaid()) {
    gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamedatametaid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GamePlayerProjMeta)
}

void GamePlayerProjMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GamePlayerProjMeta_StateData_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamestatusmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projmetaplayerroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posmetaplayerroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamedatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GamePlayerProjMeta::~GamePlayerProjMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.GamePlayerProjMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GamePlayerProjMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamestatusmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projmetaplayerroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posmetaplayerroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamedatametaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GamePlayerProjMeta::ArenaDtor(void* object) {
  GamePlayerProjMeta* _this = reinterpret_cast< GamePlayerProjMeta* >(object);
  (void)_this;
}
void GamePlayerProjMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GamePlayerProjMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePlayerProjMeta& GamePlayerProjMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GamePlayerProjMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void GamePlayerProjMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GamePlayerProjMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gamestatusmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      projmetaplayerroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      posmetaplayerroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      gamedatametaid_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamePlayerProjMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string playerid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GamePlayerProjMeta.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gamestatusmetaid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_gamestatusmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes projmetaplayerroot = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_projmetaplayerroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes posmetaplayerroot = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_posmetaplayerroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gamedatametaid = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gamedatametaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GamePlayerProjMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GamePlayerProjMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GamePlayerProjMeta.playerid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_playerid(), target);
  }

  // optional bytes gamestatusmetaid = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_gamestatusmetaid(), target);
  }

  // optional bytes projmetaplayerroot = 60;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_projmetaplayerroot(), target);
  }

  // optional bytes posmetaplayerroot = 70;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_posmetaplayerroot(), target);
  }

  // optional bytes gamedatametaid = 80;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        80, this->_internal_gamedatametaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GamePlayerProjMeta)
  return target;
}

size_t GamePlayerProjMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GamePlayerProjMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string playerid = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional bytes gamestatusmetaid = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gamestatusmetaid());
    }

    // optional bytes projmetaplayerroot = 60;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_projmetaplayerroot());
    }

    // optional bytes posmetaplayerroot = 70;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_posmetaplayerroot());
    }

    // optional bytes gamedatametaid = 80;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gamedatametaid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePlayerProjMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GamePlayerProjMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const GamePlayerProjMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GamePlayerProjMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GamePlayerProjMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GamePlayerProjMeta)
    MergeFrom(*source);
  }
}

void GamePlayerProjMeta::MergeFrom(const GamePlayerProjMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GamePlayerProjMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gamestatusmetaid(from._internal_gamestatusmetaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_projmetaplayerroot(from._internal_projmetaplayerroot());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_posmetaplayerroot(from._internal_posmetaplayerroot());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_gamedatametaid(from._internal_gamedatametaid());
    }
  }
}

void GamePlayerProjMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GamePlayerProjMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerProjMeta::CopyFrom(const GamePlayerProjMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GamePlayerProjMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerProjMeta::IsInitialized() const {
  return true;
}

void GamePlayerProjMeta::InternalSwap(GamePlayerProjMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamestatusmetaid_.Swap(&other->gamestatusmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  projmetaplayerroot_.Swap(&other->projmetaplayerroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  posmetaplayerroot_.Swap(&other->posmetaplayerroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamedatametaid_.Swap(&other->gamedatametaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GamePlayerProjMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjMeta::InitAsDefaultInstance() {
}
class ProjMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjMeta>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proj(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_txmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ProjMeta::ProjMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ProjMeta)
}
ProjMeta::ProjMeta(const ProjMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txmetaid()) {
    txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txmetaid(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  proj_ = from.proj_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjMeta)
}

void ProjMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjMeta_StateData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proj_ = 0;
}

ProjMeta::~ProjMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProjMeta::ArenaDtor(void* object) {
  ProjMeta* _this = reinterpret_cast< ProjMeta* >(object);
  (void)_this;
}
void ProjMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjMeta& ProjMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void ProjMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      txmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      prev_.ClearNonDefaultToEmpty();
    }
  }
  proj_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.ProjMeta.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 proj = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_proj(&has_bits);
          proj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.ProjMeta.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes txmetaid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_txmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.ProjMeta.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional int32 proj = 20;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_proj(), target);
  }

  // optional string playerid = 30;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.ProjMeta.playerid");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_playerid(), target);
  }

  // optional bytes txmetaid = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_txmetaid(), target);
  }

  // optional bytes prev = 50;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_prev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjMeta)
  return target;
}

size_t ProjMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string playerid = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional bytes txmetaid = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txmetaid());
    }

    // optional bytes prev = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional int32 proj = 20;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_proj());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjMeta)
    MergeFrom(*source);
  }
}

void ProjMeta::MergeFrom(const ProjMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_txmetaid(from._internal_txmetaid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000010u) {
      proj_ = from.proj_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjMeta::CopyFrom(const ProjMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjMeta::IsInitialized() const {
  return true;
}

void ProjMeta::InternalSwap(ProjMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txmetaid_.Swap(&other->txmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(proj_, other->proj_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PosMeta::InitAsDefaultInstance() {
}
class PosMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<PosMeta>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_txmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PosMeta::PosMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PosMeta)
}
PosMeta::PosMeta(const PosMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txmetaid()) {
    txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txmetaid(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  ::memcpy(&qty_, &from.qty_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&qty_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.PosMeta)
}

void PosMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PosMeta_StateData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&qty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&qty_)) + sizeof(price_));
}

PosMeta::~PosMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.PosMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PosMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PosMeta::ArenaDtor(void* object) {
  PosMeta* _this = reinterpret_cast< PosMeta* >(object);
  (void)_this;
}
void PosMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PosMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PosMeta& PosMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PosMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void PosMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PosMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      txmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      prev_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&qty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&qty_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PosMeta.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 qty = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_qty(&has_bits);
          qty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 price = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PosMeta.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes txmetaid = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_txmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PosMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PosMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PosMeta.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional int32 qty = 20;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_qty(), target);
  }

  // optional int32 price = 30;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_price(), target);
  }

  // optional string playerid = 40;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PosMeta.playerid");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_playerid(), target);
  }

  // optional bytes txmetaid = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_txmetaid(), target);
  }

  // optional bytes prev = 60;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_prev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PosMeta)
  return target;
}

size_t PosMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PosMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string playerid = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional bytes txmetaid = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txmetaid());
    }

    // optional bytes prev = 60;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional int32 qty = 20;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_qty());
    }

    // optional int32 price = 30;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PosMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PosMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const PosMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PosMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PosMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PosMeta)
    MergeFrom(*source);
  }
}

void PosMeta::MergeFrom(const PosMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PosMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_txmetaid(from._internal_txmetaid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000010u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000020u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PosMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PosMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosMeta::CopyFrom(const PosMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PosMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosMeta::IsInitialized() const {
  return true;
}

void PosMeta::InternalSwap(PosMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txmetaid_.Swap(&other->txmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PosMeta, price_)
      + sizeof(PosMeta::price_)
      - PROTOBUF_FIELD_OFFSET(PosMeta, qty_)>(
          reinterpret_cast<char*>(&qty_),
          reinterpret_cast<char*>(&other->qty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PosMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerResultMeta::InitAsDefaultInstance() {
}
class PlayerResultMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerResultMeta>()._has_bits_);
  static void set_has_playergamestatsid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamestatusmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_awardmetaplayerroot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pnlmetaplayerroot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resultdatametaid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PlayerResultMeta::PlayerResultMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PlayerResultMeta)
}
PlayerResultMeta::PlayerResultMeta(const PlayerResultMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playergamestatsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playergamestatsid()) {
    playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playergamestatsid(),
      GetArena());
  }
  gamestatusmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamestatusmetaid()) {
    gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamestatusmetaid(),
      GetArena());
  }
  awardmetaplayerroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_awardmetaplayerroot()) {
    awardmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_awardmetaplayerroot(),
      GetArena());
  }
  pnlmetaplayerroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pnlmetaplayerroot()) {
    pnlmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pnlmetaplayerroot(),
      GetArena());
  }
  resultdatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resultdatametaid()) {
    resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resultdatametaid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerResultMeta)
}

void PlayerResultMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerResultMeta_StateData_2eproto.base);
  playergamestatsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamestatusmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awardmetaplayerroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pnlmetaplayerroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resultdatametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlayerResultMeta::~PlayerResultMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerResultMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerResultMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playergamestatsid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamestatusmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awardmetaplayerroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pnlmetaplayerroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resultdatametaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerResultMeta::ArenaDtor(void* object) {
  PlayerResultMeta* _this = reinterpret_cast< PlayerResultMeta* >(object);
  (void)_this;
}
void PlayerResultMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerResultMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerResultMeta& PlayerResultMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerResultMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void PlayerResultMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerResultMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      playergamestatsid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gamestatusmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      awardmetaplayerroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      pnlmetaplayerroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      resultdatametaid_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerResultMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes playergamestatsid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_playergamestatsid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gamestatusmetaid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_gamestatusmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes awardmetaplayerroot = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_awardmetaplayerroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pnlmetaplayerroot = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_pnlmetaplayerroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes resultdatametaid = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_resultdatametaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerResultMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerResultMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes playergamestatsid = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_playergamestatsid(), target);
  }

  // optional bytes gamestatusmetaid = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_gamestatusmetaid(), target);
  }

  // optional bytes awardmetaplayerroot = 60;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_awardmetaplayerroot(), target);
  }

  // optional bytes pnlmetaplayerroot = 70;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_pnlmetaplayerroot(), target);
  }

  // optional bytes resultdatametaid = 80;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        80, this->_internal_resultdatametaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerResultMeta)
  return target;
}

size_t PlayerResultMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerResultMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes playergamestatsid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_playergamestatsid());
    }

    // optional bytes gamestatusmetaid = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gamestatusmetaid());
    }

    // optional bytes awardmetaplayerroot = 60;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_awardmetaplayerroot());
    }

    // optional bytes pnlmetaplayerroot = 70;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pnlmetaplayerroot());
    }

    // optional bytes resultdatametaid = 80;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_resultdatametaid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerResultMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerResultMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerResultMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerResultMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerResultMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerResultMeta)
    MergeFrom(*source);
  }
}

void PlayerResultMeta::MergeFrom(const PlayerResultMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerResultMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playergamestatsid(from._internal_playergamestatsid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gamestatusmetaid(from._internal_gamestatusmetaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_awardmetaplayerroot(from._internal_awardmetaplayerroot());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_pnlmetaplayerroot(from._internal_pnlmetaplayerroot());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_resultdatametaid(from._internal_resultdatametaid());
    }
  }
}

void PlayerResultMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerResultMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResultMeta::CopyFrom(const PlayerResultMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerResultMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResultMeta::IsInitialized() const {
  return true;
}

void PlayerResultMeta::InternalSwap(PlayerResultMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playergamestatsid_.Swap(&other->playergamestatsid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamestatusmetaid_.Swap(&other->gamestatusmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  awardmetaplayerroot_.Swap(&other->awardmetaplayerroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pnlmetaplayerroot_.Swap(&other->pnlmetaplayerroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resultdatametaid_.Swap(&other->resultdatametaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerResultMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerGameStats::InitAsDefaultInstance() {
  ::fantasybit::_PlayerGameStats_default_instance_._instance.get_mutable()->stats_ = const_cast< ::fantasybit::Stats*>(
      ::fantasybit::Stats::internal_default_instance());
}
class PlayerGameStats::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerGameStats>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::fantasybit::Stats& stats(const PlayerGameStats* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::Stats&
PlayerGameStats::_Internal::stats(const PlayerGameStats* msg) {
  return *msg->stats_;
}
void PlayerGameStats::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PlayerGameStats::PlayerGameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PlayerGameStats)
}
PlayerGameStats::PlayerGameStats(const PlayerGameStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameid()) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameid(),
      GetArena());
  }
  if (from._internal_has_stats()) {
    stats_ = new ::fantasybit::Stats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerGameStats)
}

void PlayerGameStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerGameStats_StateData_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(result_));
}

PlayerGameStats::~PlayerGameStats() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerGameStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerGameStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stats_;
}

void PlayerGameStats::ArenaDtor(void* object) {
  PlayerGameStats* _this = reinterpret_cast< PlayerGameStats* >(object);
  (void)_this;
}
void PlayerGameStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerGameStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerGameStats& PlayerGameStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerGameStats_StateData_2eproto.base);
  return *internal_default_instance();
}


void PlayerGameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerGameStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stats_ != nullptr);
      stats_->Clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGameStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string playerid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerGameStats.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float result = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.Stats stats = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gameid = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerGameStats.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerGameStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerGameStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerGameStats.playerid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_playerid(), target);
  }

  // optional float result = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(40, this->_internal_result(), target);
  }

  // optional .fantasybit.Stats stats = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::stats(this), target, stream);
  }

  // optional string gameid = 60;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerGameStats.gameid");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerGameStats)
  return target;
}

size_t PlayerGameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerGameStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string playerid = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional string gameid = 60;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameid());
    }

    // optional .fantasybit.Stats stats = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional float result = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerGameStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerGameStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerGameStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerGameStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerGameStats)
    MergeFrom(*source);
  }
}

void PlayerGameStats::MergeFrom(const PlayerGameStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gameid(from._internal_gameid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stats()->::fantasybit::Stats::MergeFrom(from._internal_stats());
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerGameStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGameStats::CopyFrom(const PlayerGameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGameStats::IsInitialized() const {
  return true;
}

void PlayerGameStats::InternalSwap(PlayerGameStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGameStats, result_)
      + sizeof(PlayerGameStats::result_)
      - PROTOBUF_FIELD_OFFSET(PlayerGameStats, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGameStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AwardMeta::InitAsDefaultInstance() {
}
class AwardMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<AwardMeta>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proj(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_award(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_projmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playergamestatsid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AwardMeta::AwardMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.AwardMeta)
}
AwardMeta::AwardMeta(const AwardMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  projmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_projmetaid()) {
    projmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_projmetaid(),
      GetArena());
  }
  playergamestatsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playergamestatsid()) {
    playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playergamestatsid(),
      GetArena());
  }
  ::memcpy(&proj_, &from.proj_,
    static_cast<size_t>(reinterpret_cast<char*>(&award_) -
    reinterpret_cast<char*>(&proj_)) + sizeof(award_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.AwardMeta)
}

void AwardMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AwardMeta_StateData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playergamestatsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proj_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&award_) -
      reinterpret_cast<char*>(&proj_)) + sizeof(award_));
}

AwardMeta::~AwardMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.AwardMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AwardMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playergamestatsid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AwardMeta::ArenaDtor(void* object) {
  AwardMeta* _this = reinterpret_cast< AwardMeta* >(object);
  (void)_this;
}
void AwardMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AwardMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AwardMeta& AwardMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AwardMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void AwardMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.AwardMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      projmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      playergamestatsid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&proj_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&award_) -
        reinterpret_cast<char*>(&proj_)) + sizeof(award_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AwardMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.AwardMeta.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 proj = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_proj(&has_bits);
          proj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 award = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_award(&has_bits);
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes projmetaid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_projmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes playergamestatsid = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_playergamestatsid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AwardMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.AwardMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.AwardMeta.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional int32 proj = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_proj(), target);
  }

  // optional uint64 award = 30;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_award(), target);
  }

  // optional bytes projmetaid = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_projmetaid(), target);
  }

  // optional bytes playergamestatsid = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_playergamestatsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.AwardMeta)
  return target;
}

size_t AwardMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.AwardMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes projmetaid = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_projmetaid());
    }

    // optional bytes playergamestatsid = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_playergamestatsid());
    }

    // optional int32 proj = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_proj());
    }

    // optional uint64 award = 30;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_award());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AwardMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.AwardMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const AwardMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AwardMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.AwardMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.AwardMeta)
    MergeFrom(*source);
  }
}

void AwardMeta::MergeFrom(const AwardMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.AwardMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_projmetaid(from._internal_projmetaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_playergamestatsid(from._internal_playergamestatsid());
    }
    if (cached_has_bits & 0x00000008u) {
      proj_ = from.proj_;
    }
    if (cached_has_bits & 0x00000010u) {
      award_ = from.award_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AwardMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.AwardMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardMeta::CopyFrom(const AwardMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.AwardMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardMeta::IsInitialized() const {
  return true;
}

void AwardMeta::InternalSwap(AwardMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  projmetaid_.Swap(&other->projmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playergamestatsid_.Swap(&other->playergamestatsid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AwardMeta, award_)
      + sizeof(AwardMeta::award_)
      - PROTOBUF_FIELD_OFFSET(AwardMeta, proj_)>(
          reinterpret_cast<char*>(&proj_),
          reinterpret_cast<char*>(&other->proj_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AwardMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PnlMeta::InitAsDefaultInstance() {
}
class PnlMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<PnlMeta>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pnl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_posmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playergamestatsid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PnlMeta::PnlMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PnlMeta)
}
PnlMeta::PnlMeta(const PnlMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  posmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_posmetaid()) {
    posmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_posmetaid(),
      GetArena());
  }
  playergamestatsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playergamestatsid()) {
    playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playergamestatsid(),
      GetArena());
  }
  ::memcpy(&qty_, &from.qty_,
    static_cast<size_t>(reinterpret_cast<char*>(&pnl_) -
    reinterpret_cast<char*>(&qty_)) + sizeof(pnl_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.PnlMeta)
}

void PnlMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PnlMeta_StateData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playergamestatsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&qty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pnl_) -
      reinterpret_cast<char*>(&qty_)) + sizeof(pnl_));
}

PnlMeta::~PnlMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.PnlMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PnlMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playergamestatsid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PnlMeta::ArenaDtor(void* object) {
  PnlMeta* _this = reinterpret_cast< PnlMeta* >(object);
  (void)_this;
}
void PnlMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PnlMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PnlMeta& PnlMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PnlMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void PnlMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PnlMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      posmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      playergamestatsid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&qty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pnl_) -
        reinterpret_cast<char*>(&qty_)) + sizeof(pnl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PnlMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PnlMeta.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 qty = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_qty(&has_bits);
          qty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 price = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 pnl = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pnl(&has_bits);
          pnl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes posmetaid = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_posmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes playergamestatsid = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_playergamestatsid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PnlMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PnlMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PnlMeta.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional int32 qty = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_qty(), target);
  }

  // optional int32 price = 30;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_price(), target);
  }

  // optional int64 pnl = 40;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(40, this->_internal_pnl(), target);
  }

  // optional bytes posmetaid = 50;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_posmetaid(), target);
  }

  // optional bytes playergamestatsid = 60;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_playergamestatsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PnlMeta)
  return target;
}

size_t PnlMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PnlMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes posmetaid = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_posmetaid());
    }

    // optional bytes playergamestatsid = 60;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_playergamestatsid());
    }

    // optional int32 qty = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_qty());
    }

    // optional int32 price = 30;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

    // optional int64 pnl = 40;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_pnl());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PnlMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PnlMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const PnlMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PnlMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PnlMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PnlMeta)
    MergeFrom(*source);
  }
}

void PnlMeta::MergeFrom(const PnlMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PnlMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_posmetaid(from._internal_posmetaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_playergamestatsid(from._internal_playergamestatsid());
    }
    if (cached_has_bits & 0x00000008u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000020u) {
      pnl_ = from.pnl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PnlMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PnlMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PnlMeta::CopyFrom(const PnlMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PnlMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PnlMeta::IsInitialized() const {
  return true;
}

void PnlMeta::InternalSwap(PnlMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  posmetaid_.Swap(&other->posmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playergamestatsid_.Swap(&other->playergamestatsid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PnlMeta, pnl_)
      + sizeof(PnlMeta::pnl_)
      - PROTOBUF_FIELD_OFFSET(PnlMeta, qty_)>(
          reinterpret_cast<char*>(&qty_),
          reinterpret_cast<char*>(&other->qty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PnlMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerMarketState::InitAsDefaultInstance() {
}
class PlayerMarketState::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerMarketState>()._has_bits_);
  static void set_has_limitbookmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_marketticmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_next(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PlayerMarketState::PlayerMarketState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PlayerMarketState)
}
PlayerMarketState::PlayerMarketState(const PlayerMarketState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limitbookmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_limitbookmetaid()) {
    limitbookmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_limitbookmetaid(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  marketticmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marketticmetaid()) {
    marketticmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_marketticmetaid(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_next()) {
    next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next(),
      GetArena());
  }
  locked_ = from.locked_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerMarketState)
}

void PlayerMarketState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerMarketState_StateData_2eproto.base);
  limitbookmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketticmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locked_ = false;
}

PlayerMarketState::~PlayerMarketState() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerMarketState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerMarketState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  limitbookmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketticmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerMarketState::ArenaDtor(void* object) {
  PlayerMarketState* _this = reinterpret_cast< PlayerMarketState* >(object);
  (void)_this;
}
void PlayerMarketState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerMarketState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerMarketState& PlayerMarketState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerMarketState_StateData_2eproto.base);
  return *internal_default_instance();
}


void PlayerMarketState::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerMarketState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      limitbookmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      marketticmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      prev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      next_.ClearNonDefaultToEmpty();
    }
  }
  locked_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerMarketState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes limitbookmetaid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_limitbookmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerMarketState.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes marketticmetaid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_marketticmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool locked = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_locked(&has_bits);
          locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes next = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerMarketState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerMarketState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes limitbookmetaid = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_limitbookmetaid(), target);
  }

  // optional string playerid = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerMarketState.playerid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_playerid(), target);
  }

  // optional bytes marketticmetaid = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_marketticmetaid(), target);
  }

  // optional bool locked = 31;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_locked(), target);
  }

  // optional bytes prev = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_prev(), target);
  }

  // optional bytes next = 50;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerMarketState)
  return target;
}

size_t PlayerMarketState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerMarketState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes limitbookmetaid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_limitbookmetaid());
    }

    // optional string playerid = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional bytes marketticmetaid = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_marketticmetaid());
    }

    // optional bytes prev = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional bytes next = 50;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_next());
    }

    // optional bool locked = 31;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerMarketState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerMarketState)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerMarketState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerMarketState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerMarketState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerMarketState)
    MergeFrom(*source);
  }
}

void PlayerMarketState::MergeFrom(const PlayerMarketState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerMarketState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_limitbookmetaid(from._internal_limitbookmetaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_marketticmetaid(from._internal_marketticmetaid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_next(from._internal_next());
    }
    if (cached_has_bits & 0x00000020u) {
      locked_ = from.locked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerMarketState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerMarketState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMarketState::CopyFrom(const PlayerMarketState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerMarketState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMarketState::IsInitialized() const {
  return true;
}

void PlayerMarketState::InternalSwap(PlayerMarketState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  limitbookmetaid_.Swap(&other->limitbookmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketticmetaid_.Swap(&other->marketticmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_.Swap(&other->next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(locked_, other->locked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerMarketState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LimitBookMeta::InitAsDefaultInstance() {
}
class LimitBookMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<LimitBookMeta>()._has_bits_);
  static void set_has_bid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bidsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_asksize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ask(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bidordermetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_askordermetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LimitBookMeta::LimitBookMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.LimitBookMeta)
}
LimitBookMeta::LimitBookMeta(const LimitBookMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bidordermetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bidordermetaroot()) {
    bidordermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bidordermetaroot(),
      GetArena());
  }
  askordermetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_askordermetaroot()) {
    askordermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_askordermetaroot(),
      GetArena());
  }
  ::memcpy(&bid_, &from.bid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ask_) -
    reinterpret_cast<char*>(&bid_)) + sizeof(ask_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.LimitBookMeta)
}

void LimitBookMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LimitBookMeta_StateData_2eproto.base);
  bidordermetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  askordermetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ask_) -
      reinterpret_cast<char*>(&bid_)) + sizeof(ask_));
}

LimitBookMeta::~LimitBookMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.LimitBookMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LimitBookMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bidordermetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  askordermetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LimitBookMeta::ArenaDtor(void* object) {
  LimitBookMeta* _this = reinterpret_cast< LimitBookMeta* >(object);
  (void)_this;
}
void LimitBookMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LimitBookMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LimitBookMeta& LimitBookMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LimitBookMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void LimitBookMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.LimitBookMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bidordermetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      askordermetaroot_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&bid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ask_) -
        reinterpret_cast<char*>(&bid_)) + sizeof(ask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LimitBookMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 bid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_bid(&has_bits);
          bid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bidsize = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_bidsize(&has_bits);
          bidsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 asksize = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_asksize(&has_bits);
          asksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ask = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ask(&has_bits);
          ask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bidordermetaroot = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_bidordermetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes askordermetaroot = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_askordermetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LimitBookMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.LimitBookMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bid = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_bid(), target);
  }

  // optional int32 bidsize = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_bidsize(), target);
  }

  // optional int32 asksize = 30;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_asksize(), target);
  }

  // optional int32 ask = 40;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_ask(), target);
  }

  // optional bytes bidordermetaroot = 50;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_bidordermetaroot(), target);
  }

  // optional bytes askordermetaroot = 60;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_askordermetaroot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.LimitBookMeta)
  return target;
}

size_t LimitBookMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.LimitBookMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes bidordermetaroot = 50;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bidordermetaroot());
    }

    // optional bytes askordermetaroot = 60;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_askordermetaroot());
    }

    // optional int32 bid = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bid());
    }

    // optional int32 bidsize = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bidsize());
    }

    // optional int32 asksize = 30;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_asksize());
    }

    // optional int32 ask = 40;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ask());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LimitBookMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.LimitBookMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const LimitBookMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LimitBookMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.LimitBookMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.LimitBookMeta)
    MergeFrom(*source);
  }
}

void LimitBookMeta::MergeFrom(const LimitBookMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.LimitBookMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bidordermetaroot(from._internal_bidordermetaroot());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_askordermetaroot(from._internal_askordermetaroot());
    }
    if (cached_has_bits & 0x00000004u) {
      bid_ = from.bid_;
    }
    if (cached_has_bits & 0x00000008u) {
      bidsize_ = from.bidsize_;
    }
    if (cached_has_bits & 0x00000010u) {
      asksize_ = from.asksize_;
    }
    if (cached_has_bits & 0x00000020u) {
      ask_ = from.ask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LimitBookMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.LimitBookMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitBookMeta::CopyFrom(const LimitBookMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.LimitBookMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitBookMeta::IsInitialized() const {
  return true;
}

void LimitBookMeta::InternalSwap(LimitBookMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bidordermetaroot_.Swap(&other->bidordermetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  askordermetaroot_.Swap(&other->askordermetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LimitBookMeta, ask_)
      + sizeof(LimitBookMeta::ask_)
      - PROTOBUF_FIELD_OFFSET(LimitBookMeta, bid_)>(
          reinterpret_cast<char*>(&bid_),
          reinterpret_cast<char*>(&other->bid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LimitBookMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketTicMeta::InitAsDefaultInstance() {
}
class MarketTicMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<MarketTicMeta>()._has_bits_);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_orderfillhead(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MarketTicMeta::MarketTicMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.MarketTicMeta)
}
MarketTicMeta::MarketTicMeta(const MarketTicMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderfillhead_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_orderfillhead()) {
    orderfillhead_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderfillhead(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&price_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.MarketTicMeta)
}

void MarketTicMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketTicMeta_StateData_2eproto.base);
  orderfillhead_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&price_)) + sizeof(size_));
}

MarketTicMeta::~MarketTicMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.MarketTicMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketTicMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderfillhead_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketTicMeta::ArenaDtor(void* object) {
  MarketTicMeta* _this = reinterpret_cast< MarketTicMeta* >(object);
  (void)_this;
}
void MarketTicMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketTicMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketTicMeta& MarketTicMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketTicMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void MarketTicMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MarketTicMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      orderfillhead_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      prev_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&price_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketTicMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 price = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes orderfillhead = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_orderfillhead();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketTicMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MarketTicMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 price = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_price(), target);
  }

  // optional int32 size = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_size(), target);
  }

  // optional bytes orderfillhead = 40;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_orderfillhead(), target);
  }

  // optional bytes prev = 50;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_prev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MarketTicMeta)
  return target;
}

size_t MarketTicMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MarketTicMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes orderfillhead = 40;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_orderfillhead());
    }

    // optional bytes prev = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional int32 price = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

    // optional int32 size = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketTicMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MarketTicMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketTicMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketTicMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MarketTicMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MarketTicMeta)
    MergeFrom(*source);
  }
}

void MarketTicMeta::MergeFrom(const MarketTicMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MarketTicMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_orderfillhead(from._internal_orderfillhead());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketTicMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MarketTicMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketTicMeta::CopyFrom(const MarketTicMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MarketTicMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketTicMeta::IsInitialized() const {
  return true;
}

void MarketTicMeta::InternalSwap(MarketTicMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  orderfillhead_.Swap(&other->orderfillhead_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketTicMeta, size_)
      + sizeof(MarketTicMeta::size_)
      - PROTOBUF_FIELD_OFFSET(MarketTicMeta, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketTicMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderMeta::InitAsDefaultInstance() {
}
class OrderMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderMeta>()._has_bits_);
  static void set_has_refnum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_buyside(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_txmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_orderfillmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

OrderMeta::OrderMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.OrderMeta)
}
OrderMeta::OrderMeta(const OrderMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fname()) {
    fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fname(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txmetaid()) {
    txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txmetaid(),
      GetArena());
  }
  orderfillmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_orderfillmetaid()) {
    orderfillmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderfillmetaid(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.OrderMeta)
}

void OrderMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderMeta_StateData_2eproto.base);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderfillmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(price_));
}

OrderMeta::~OrderMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.OrderMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderfillmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderMeta::ArenaDtor(void* object) {
  OrderMeta* _this = reinterpret_cast< OrderMeta* >(object);
  (void)_this;
}
void OrderMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderMeta& OrderMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void OrderMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.OrderMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      fname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      txmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      orderfillmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      prev_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buyside_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(buyside_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&size_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 refnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_refnum(&has_bits);
          refnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fname = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_fname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.OrderMeta.fname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.OrderMeta.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool buyside = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_buyside(&has_bits);
          buyside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 price = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes txmetaid = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_txmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes orderfillmetaid = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_orderfillmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 timestamp = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.OrderMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 refnum = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_refnum(), target);
  }

  // optional string fname = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.OrderMeta.fname");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_fname(), target);
  }

  // optional string playerid = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.OrderMeta.playerid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_playerid(), target);
  }

  // optional bool buyside = 30;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_buyside(), target);
  }

  // optional int32 size = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_size(), target);
  }

  // optional int32 price = 50;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_price(), target);
  }

  // optional bytes txmetaid = 60;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_txmetaid(), target);
  }

  // optional bytes orderfillmetaid = 70;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_orderfillmetaid(), target);
  }

  // optional int32 timestamp = 75;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(75, this->_internal_timestamp(), target);
  }

  // optional bytes prev = 80;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        80, this->_internal_prev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.OrderMeta)
  return target;
}

size_t OrderMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.OrderMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string fname = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fname());
    }

    // optional string playerid = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional bytes txmetaid = 60;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txmetaid());
    }

    // optional bytes orderfillmetaid = 70;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_orderfillmetaid());
    }

    // optional bytes prev = 80;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional int32 timestamp = 75;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_timestamp());
    }

    // optional int32 refnum = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_refnum());
    }

    // optional bool buyside = 30;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 size = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

    // optional int32 price = 50;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.OrderMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.OrderMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.OrderMeta)
    MergeFrom(*source);
  }
}

void OrderMeta::MergeFrom(const OrderMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.OrderMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fname(from._internal_fname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_txmetaid(from._internal_txmetaid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_orderfillmetaid(from._internal_orderfillmetaid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      refnum_ = from.refnum_;
    }
    if (cached_has_bits & 0x00000080u) {
      buyside_ = from.buyside_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000200u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.OrderMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderMeta::CopyFrom(const OrderMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.OrderMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderMeta::IsInitialized() const {
  return true;
}

void OrderMeta::InternalSwap(OrderMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fname_.Swap(&other->fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txmetaid_.Swap(&other->txmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderfillmetaid_.Swap(&other->orderfillmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderMeta, price_)
      + sizeof(OrderMeta::price_)
      - PROTOBUF_FIELD_OFFSET(OrderMeta, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderFillMeta::InitAsDefaultInstance() {
}
class OrderFillMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderFillMeta>()._has_bits_);
  static void set_has_refnum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fillprice(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fillsize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_buyside(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_txmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

OrderFillMeta::OrderFillMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.OrderFillMeta)
}
OrderFillMeta::OrderFillMeta(const OrderFillMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fname()) {
    fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fname(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txmetaid()) {
    txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txmetaid(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  ::memcpy(&refnum_, &from.refnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&refnum_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.OrderFillMeta)
}

void OrderFillMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderFillMeta_StateData_2eproto.base);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&refnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&refnum_)) + sizeof(timestamp_));
}

OrderFillMeta::~OrderFillMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.OrderFillMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderFillMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderFillMeta::ArenaDtor(void* object) {
  OrderFillMeta* _this = reinterpret_cast< OrderFillMeta* >(object);
  (void)_this;
}
void OrderFillMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderFillMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderFillMeta& OrderFillMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderFillMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void OrderFillMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.OrderFillMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      txmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      prev_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&refnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buyside_) -
        reinterpret_cast<char*>(&refnum_)) + sizeof(buyside_));
  }
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderFillMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 refnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_refnum(&has_bits);
          refnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fname = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_fname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.OrderFillMeta.fname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.OrderFillMeta.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fillprice = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_fillprice(&has_bits);
          fillprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fillsize = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_fillsize(&has_bits);
          fillsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool buyside = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_buyside(&has_bits);
          buyside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timestamp = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes txmetaid = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_txmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderFillMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.OrderFillMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 refnum = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_refnum(), target);
  }

  // optional string fname = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.OrderFillMeta.fname");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_fname(), target);
  }

  // optional string playerid = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.OrderFillMeta.playerid");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_playerid(), target);
  }

  // optional int32 fillprice = 20;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_fillprice(), target);
  }

  // optional int32 fillsize = 30;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_fillsize(), target);
  }

  // optional bool buyside = 35;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_buyside(), target);
  }

  // optional uint64 timestamp = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(40, this->_internal_timestamp(), target);
  }

  // optional bytes txmetaid = 60;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_txmetaid(), target);
  }

  // optional bytes prev = 70;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_prev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.OrderFillMeta)
  return target;
}

size_t OrderFillMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.OrderFillMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string fname = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fname());
    }

    // optional string playerid = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional bytes txmetaid = 60;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txmetaid());
    }

    // optional bytes prev = 70;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional int32 refnum = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_refnum());
    }

    // optional int32 fillprice = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fillprice());
    }

    // optional int32 fillsize = 30;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fillsize());
    }

    // optional bool buyside = 35;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  // optional uint64 timestamp = 40;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderFillMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.OrderFillMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderFillMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderFillMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.OrderFillMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.OrderFillMeta)
    MergeFrom(*source);
  }
}

void OrderFillMeta::MergeFrom(const OrderFillMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.OrderFillMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fname(from._internal_fname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_txmetaid(from._internal_txmetaid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000010u) {
      refnum_ = from.refnum_;
    }
    if (cached_has_bits & 0x00000020u) {
      fillprice_ = from.fillprice_;
    }
    if (cached_has_bits & 0x00000040u) {
      fillsize_ = from.fillsize_;
    }
    if (cached_has_bits & 0x00000080u) {
      buyside_ = from.buyside_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void OrderFillMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.OrderFillMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderFillMeta::CopyFrom(const OrderFillMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.OrderFillMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderFillMeta::IsInitialized() const {
  return true;
}

void OrderFillMeta::InternalSwap(OrderFillMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fname_.Swap(&other->fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txmetaid_.Swap(&other->txmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderFillMeta, timestamp_)
      + sizeof(OrderFillMeta::timestamp_)
      - PROTOBUF_FIELD_OFFSET(OrderFillMeta, refnum_)>(
          reinterpret_cast<char*>(&refnum_),
          reinterpret_cast<char*>(&other->refnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderFillMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GlobalStateMeta::InitAsDefaultInstance() {
  ::fantasybit::_GlobalStateMeta_default_instance_._instance.get_mutable()->globalstate_ = const_cast< ::fantasybit::GlobalState*>(
      ::fantasybit::GlobalState::internal_default_instance());
}
class GlobalStateMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalStateMeta>()._has_bits_);
  static const ::fantasybit::GlobalState& globalstate(const GlobalStateMeta* msg);
  static void set_has_globalstate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trmetaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_next(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::fantasybit::GlobalState&
GlobalStateMeta::_Internal::globalstate(const GlobalStateMeta* msg) {
  return *msg->globalstate_;
}
void GlobalStateMeta::clear_globalstate() {
  if (globalstate_ != nullptr) globalstate_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GlobalStateMeta::GlobalStateMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GlobalStateMeta)
}
GlobalStateMeta::GlobalStateMeta(const GlobalStateMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trmetaid()) {
    trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trmetaid(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_next()) {
    next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next(),
      GetArena());
  }
  if (from._internal_has_globalstate()) {
    globalstate_ = new ::fantasybit::GlobalState(*from.globalstate_);
  } else {
    globalstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GlobalStateMeta)
}

void GlobalStateMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalStateMeta_StateData_2eproto.base);
  trmetaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  globalstate_ = nullptr;
}

GlobalStateMeta::~GlobalStateMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.GlobalStateMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GlobalStateMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trmetaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete globalstate_;
}

void GlobalStateMeta::ArenaDtor(void* object) {
  GlobalStateMeta* _this = reinterpret_cast< GlobalStateMeta* >(object);
  (void)_this;
}
void GlobalStateMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalStateMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalStateMeta& GlobalStateMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalStateMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void GlobalStateMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GlobalStateMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      trmetaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      prev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      next_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(globalstate_ != nullptr);
      globalstate_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalStateMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.GlobalState globalstate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes trmetaid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_trmetaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes next = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalStateMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GlobalStateMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.GlobalState globalstate = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::globalstate(this), target, stream);
  }

  // optional bytes trmetaid = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_trmetaid(), target);
  }

  // optional bytes prev = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_prev(), target);
  }

  // optional bytes next = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GlobalStateMeta)
  return target;
}

size_t GlobalStateMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GlobalStateMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes trmetaid = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_trmetaid());
    }

    // optional bytes prev = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional bytes next = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_next());
    }

    // optional .fantasybit.GlobalState globalstate = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *globalstate_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalStateMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GlobalStateMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalStateMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobalStateMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GlobalStateMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GlobalStateMeta)
    MergeFrom(*source);
  }
}

void GlobalStateMeta::MergeFrom(const GlobalStateMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GlobalStateMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_trmetaid(from._internal_trmetaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_next(from._internal_next());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_globalstate()->::fantasybit::GlobalState::MergeFrom(from._internal_globalstate());
    }
  }
}

void GlobalStateMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GlobalStateMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalStateMeta::CopyFrom(const GlobalStateMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GlobalStateMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalStateMeta::IsInitialized() const {
  return true;
}

void GlobalStateMeta::InternalSwap(GlobalStateMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trmetaid_.Swap(&other->trmetaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_.Swap(&other->next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(globalstate_, other->globalstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalStateMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerMeta::InitAsDefaultInstance() {
  ::fantasybit::_PlayerMeta_default_instance_._instance.get_mutable()->player_base_ = const_cast< ::fantasybit::PlayerBase*>(
      ::fantasybit::PlayerBase::internal_default_instance());
  ::fantasybit::_PlayerMeta_default_instance_._instance.get_mutable()->player_status_ = const_cast< ::fantasybit::PlayerStatus*>(
      ::fantasybit::PlayerStatus::internal_default_instance());
}
class PlayerMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerMeta>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::PlayerBase& player_base(const PlayerMeta* msg);
  static void set_has_player_base(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::fantasybit::PlayerStatus& player_status(const PlayerMeta* msg);
  static void set_has_player_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_datametaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::fantasybit::PlayerBase&
PlayerMeta::_Internal::player_base(const PlayerMeta* msg) {
  return *msg->player_base_;
}
const ::fantasybit::PlayerStatus&
PlayerMeta::_Internal::player_status(const PlayerMeta* msg) {
  return *msg->player_status_;
}
void PlayerMeta::clear_player_base() {
  if (player_base_ != nullptr) player_base_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerMeta::clear_player_status() {
  if (player_status_ != nullptr) player_status_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
PlayerMeta::PlayerMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PlayerMeta)
}
PlayerMeta::PlayerMeta(const PlayerMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  datametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_datametaid()) {
    datametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_datametaid(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  if (from._internal_has_player_base()) {
    player_base_ = new ::fantasybit::PlayerBase(*from.player_base_);
  } else {
    player_base_ = nullptr;
  }
  if (from._internal_has_player_status()) {
    player_status_ = new ::fantasybit::PlayerStatus(*from.player_status_);
  } else {
    player_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerMeta)
}

void PlayerMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerMeta_StateData_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datametaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_status_) -
      reinterpret_cast<char*>(&player_base_)) + sizeof(player_status_));
}

PlayerMeta::~PlayerMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datametaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_base_;
  if (this != internal_default_instance()) delete player_status_;
}

void PlayerMeta::ArenaDtor(void* object) {
  PlayerMeta* _this = reinterpret_cast< PlayerMeta* >(object);
  (void)_this;
}
void PlayerMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerMeta& PlayerMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void PlayerMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      datametaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      prev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(player_base_ != nullptr);
      player_base_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(player_status_ != nullptr);
      player_status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string playerid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerMeta.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.PlayerBase player_base = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.PlayerStatus player_status = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes datametaid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_datametaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerMeta.playerid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_playerid(), target);
  }

  // optional .fantasybit.PlayerBase player_base = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::player_base(this), target, stream);
  }

  // optional .fantasybit.PlayerStatus player_status = 30;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::player_status(this), target, stream);
  }

  // optional bytes datametaid = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_datametaid(), target);
  }

  // optional bytes prev = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_prev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerMeta)
  return target;
}

size_t PlayerMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string playerid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional bytes datametaid = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_datametaid());
    }

    // optional bytes prev = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

    // optional .fantasybit.PlayerBase player_base = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_base_);
    }

    // optional .fantasybit.PlayerStatus player_status = 30;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerMeta)
    MergeFrom(*source);
  }
}

void PlayerMeta::MergeFrom(const PlayerMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_datametaid(from._internal_datametaid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_prev(from._internal_prev());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_player_base()->::fantasybit::PlayerBase::MergeFrom(from._internal_player_base());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_player_status()->::fantasybit::PlayerStatus::MergeFrom(from._internal_player_status());
    }
  }
}

void PlayerMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMeta::CopyFrom(const PlayerMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMeta::IsInitialized() const {
  return true;
}

void PlayerMeta::InternalSwap(PlayerMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  datametaid_.Swap(&other->datametaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerMeta, player_status_)
      + sizeof(PlayerMeta::player_status_)
      - PROTOBUF_FIELD_OFFSET(PlayerMeta, player_base_)>(
          reinterpret_cast<char*>(&player_base_),
          reinterpret_cast<char*>(&other->player_base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamMeta::InitAsDefaultInstance() {
}
class TeamMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamMeta>()._has_bits_);
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playermetaidroot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TeamMeta::TeamMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.TeamMeta)
}
TeamMeta::TeamMeta(const TeamMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_teamid()) {
    teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_teamid(),
      GetArena());
  }
  playermetaidroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playermetaidroot()) {
    playermetaidroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playermetaidroot(),
      GetArena());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prev()) {
    prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.TeamMeta)
}

void TeamMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamMeta_StateData_2eproto.base);
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playermetaidroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TeamMeta::~TeamMeta() {
  // @@protoc_insertion_point(destructor:fantasybit.TeamMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  teamid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playermetaidroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeamMeta::ArenaDtor(void* object) {
  TeamMeta* _this = reinterpret_cast< TeamMeta* >(object);
  (void)_this;
}
void TeamMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamMeta& TeamMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamMeta_StateData_2eproto.base);
  return *internal_default_instance();
}


void TeamMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TeamMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      teamid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playermetaidroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      prev_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string teamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_teamid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TeamMeta.teamid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes playermetaidroot = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_playermetaidroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prev = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TeamMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string teamid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_teamid().data(), static_cast<int>(this->_internal_teamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamMeta.teamid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_teamid(), target);
  }

  // optional bytes playermetaidroot = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_playermetaidroot(), target);
  }

  // optional bytes prev = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_prev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TeamMeta)
  return target;
}

size_t TeamMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TeamMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string teamid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_teamid());
    }

    // optional bytes playermetaidroot = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_playermetaidroot());
    }

    // optional bytes prev = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prev());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TeamMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TeamMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TeamMeta)
    MergeFrom(*source);
  }
}

void TeamMeta::MergeFrom(const TeamMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TeamMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_teamid(from._internal_teamid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playermetaidroot(from._internal_playermetaidroot());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_prev(from._internal_prev());
    }
  }
}

void TeamMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TeamMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMeta::CopyFrom(const TeamMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TeamMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMeta::IsInitialized() const {
  return true;
}

void TeamMeta::InternalSwap(TeamMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teamid_.Swap(&other->teamid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playermetaidroot_.Swap(&other->playermetaidroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_.Swap(&other->prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void pbstate::InitAsDefaultInstance() {
}
class pbstate::_Internal {
 public:
  using HasBits = decltype(std::declval<pbstate>()._has_bits_);
  static void set_has_schedulestateid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leaderboardstateid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_projstateid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_posstateid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_orderstateid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_marketstateid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_globalstateid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_teamstatemid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fantasynamestateid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

pbstate::pbstate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.pbstate)
}
pbstate::pbstate(const pbstate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  schedulestateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_schedulestateid()) {
    schedulestateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_schedulestateid(),
      GetArena());
  }
  leaderboardstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_leaderboardstateid()) {
    leaderboardstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leaderboardstateid(),
      GetArena());
  }
  projstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_projstateid()) {
    projstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_projstateid(),
      GetArena());
  }
  posstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_posstateid()) {
    posstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_posstateid(),
      GetArena());
  }
  orderstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_orderstateid()) {
    orderstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderstateid(),
      GetArena());
  }
  marketstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marketstateid()) {
    marketstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_marketstateid(),
      GetArena());
  }
  globalstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_globalstateid()) {
    globalstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_globalstateid(),
      GetArena());
  }
  teamstatemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_teamstatemid()) {
    teamstatemid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_teamstatemid(),
      GetArena());
  }
  fantasynamestateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasynamestateid()) {
    fantasynamestateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fantasynamestateid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.pbstate)
}

void pbstate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_pbstate_StateData_2eproto.base);
  schedulestateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leaderboardstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  globalstateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamstatemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fantasynamestateid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

pbstate::~pbstate() {
  // @@protoc_insertion_point(destructor:fantasybit.pbstate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pbstate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  schedulestateid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leaderboardstateid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projstateid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posstateid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderstateid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketstateid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  globalstateid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamstatemid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fantasynamestateid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pbstate::ArenaDtor(void* object) {
  pbstate* _this = reinterpret_cast< pbstate* >(object);
  (void)_this;
}
void pbstate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pbstate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pbstate& pbstate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pbstate_StateData_2eproto.base);
  return *internal_default_instance();
}


void pbstate::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.pbstate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      schedulestateid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      leaderboardstateid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      projstateid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      posstateid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      orderstateid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      marketstateid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      globalstateid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      teamstatemid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    fantasynamestateid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pbstate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes schedulestateid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_schedulestateid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes leaderboardstateid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_leaderboardstateid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes projstateid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_projstateid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes posstateid = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_posstateid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes orderstateid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_orderstateid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes marketstateid = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_marketstateid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes globalstateid = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_globalstateid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes teamstatemid = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_teamstatemid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes fantasynamestateid = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_fantasynamestateid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pbstate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.pbstate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes schedulestateid = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_schedulestateid(), target);
  }

  // optional bytes leaderboardstateid = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_leaderboardstateid(), target);
  }

  // optional bytes projstateid = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_projstateid(), target);
  }

  // optional bytes posstateid = 35;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        35, this->_internal_posstateid(), target);
  }

  // optional bytes orderstateid = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_orderstateid(), target);
  }

  // optional bytes marketstateid = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_marketstateid(), target);
  }

  // optional bytes globalstateid = 60;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_globalstateid(), target);
  }

  // optional bytes teamstatemid = 70;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_teamstatemid(), target);
  }

  // optional bytes fantasynamestateid = 80;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        80, this->_internal_fantasynamestateid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.pbstate)
  return target;
}

size_t pbstate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.pbstate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes schedulestateid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_schedulestateid());
    }

    // optional bytes leaderboardstateid = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_leaderboardstateid());
    }

    // optional bytes projstateid = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_projstateid());
    }

    // optional bytes posstateid = 35;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_posstateid());
    }

    // optional bytes orderstateid = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_orderstateid());
    }

    // optional bytes marketstateid = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_marketstateid());
    }

    // optional bytes globalstateid = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_globalstateid());
    }

    // optional bytes teamstatemid = 70;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_teamstatemid());
    }

  }
  // optional bytes fantasynamestateid = 80;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fantasynamestateid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pbstate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.pbstate)
  GOOGLE_DCHECK_NE(&from, this);
  const pbstate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pbstate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.pbstate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.pbstate)
    MergeFrom(*source);
  }
}

void pbstate::MergeFrom(const pbstate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.pbstate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_schedulestateid(from._internal_schedulestateid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_leaderboardstateid(from._internal_leaderboardstateid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_projstateid(from._internal_projstateid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_posstateid(from._internal_posstateid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_orderstateid(from._internal_orderstateid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_marketstateid(from._internal_marketstateid());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_globalstateid(from._internal_globalstateid());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_teamstatemid(from._internal_teamstatemid());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_fantasynamestateid(from._internal_fantasynamestateid());
  }
}

void pbstate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.pbstate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbstate::CopyFrom(const pbstate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.pbstate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbstate::IsInitialized() const {
  return true;
}

void pbstate::InternalSwap(pbstate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  schedulestateid_.Swap(&other->schedulestateid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  leaderboardstateid_.Swap(&other->leaderboardstateid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  projstateid_.Swap(&other->projstateid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  posstateid_.Swap(&other->posstateid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderstateid_.Swap(&other->orderstateid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketstateid_.Swap(&other->marketstateid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  globalstateid_.Swap(&other->globalstateid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  teamstatemid_.Swap(&other->teamstatemid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fantasynamestateid_.Swap(&other->fantasynamestateid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata pbstate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MerkleTree::InitAsDefaultInstance() {
}
class MerkleTree::_Internal {
 public:
  using HasBits = decltype(std::declval<MerkleTree>()._has_bits_);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MerkleTree::MerkleTree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leaves_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.MerkleTree)
}
MerkleTree::MerkleTree(const MerkleTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      leaves_(from.leaves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_root()) {
    root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_root(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.MerkleTree)
}

void MerkleTree::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MerkleTree_StateData_2eproto.base);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MerkleTree::~MerkleTree() {
  // @@protoc_insertion_point(destructor:fantasybit.MerkleTree)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MerkleTree::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MerkleTree::ArenaDtor(void* object) {
  MerkleTree* _this = reinterpret_cast< MerkleTree* >(object);
  (void)_this;
}
void MerkleTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MerkleTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MerkleTree& MerkleTree::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MerkleTree_StateData_2eproto.base);
  return *internal_default_instance();
}


void MerkleTree::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MerkleTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaves_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    root_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MerkleTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes root = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes leaves = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_leaves();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MerkleTree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MerkleTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes root = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_root(), target);
  }

  // repeated bytes leaves = 20;
  for (int i = 0, n = this->_internal_leaves_size(); i < n; i++) {
    const auto& s = this->_internal_leaves(i);
    target = stream->WriteBytes(20, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MerkleTree)
  return target;
}

size_t MerkleTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MerkleTree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes leaves = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(leaves_.size());
  for (int i = 0, n = leaves_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      leaves_.Get(i));
  }

  // optional bytes root = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_root());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MerkleTree::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MerkleTree)
  GOOGLE_DCHECK_NE(&from, this);
  const MerkleTree* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MerkleTree>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MerkleTree)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MerkleTree)
    MergeFrom(*source);
  }
}

void MerkleTree::MergeFrom(const MerkleTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MerkleTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leaves_.MergeFrom(from.leaves_);
  if (from._internal_has_root()) {
    _internal_set_root(from._internal_root());
  }
}

void MerkleTree::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MerkleTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerkleTree::CopyFrom(const MerkleTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MerkleTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerkleTree::IsInitialized() const {
  return true;
}

void MerkleTree::InternalSwap(MerkleTree* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  leaves_.InternalSwap(&other->leaves_);
  root_.Swap(&other->root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MerkleTree::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewPlayerModel::InitAsDefaultInstance() {
}
class NewPlayerModel::_Internal {
 public:
};

NewPlayerModel::NewPlayerModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.NewPlayerModel)
}
NewPlayerModel::NewPlayerModel(const NewPlayerModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fantasybit.NewPlayerModel)
}

void NewPlayerModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewPlayerModel_StateData_2eproto.base);
}

NewPlayerModel::~NewPlayerModel() {
  // @@protoc_insertion_point(destructor:fantasybit.NewPlayerModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewPlayerModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NewPlayerModel::ArenaDtor(void* object) {
  NewPlayerModel* _this = reinterpret_cast< NewPlayerModel* >(object);
  (void)_this;
}
void NewPlayerModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewPlayerModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewPlayerModel& NewPlayerModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewPlayerModel_StateData_2eproto.base);
  return *internal_default_instance();
}


void NewPlayerModel::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.NewPlayerModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewPlayerModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fantasybit.PlayerMeta players = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewPlayerModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NewPlayerModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fantasybit.PlayerMeta players = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NewPlayerModel)
  return target;
}

size_t NewPlayerModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.NewPlayerModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.PlayerMeta players = 10;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewPlayerModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.NewPlayerModel)
  GOOGLE_DCHECK_NE(&from, this);
  const NewPlayerModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewPlayerModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.NewPlayerModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.NewPlayerModel)
    MergeFrom(*source);
  }
}

void NewPlayerModel::MergeFrom(const NewPlayerModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.NewPlayerModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void NewPlayerModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.NewPlayerModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewPlayerModel::CopyFrom(const NewPlayerModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.NewPlayerModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPlayerModel::IsInitialized() const {
  return true;
}

void NewPlayerModel::InternalSwap(NewPlayerModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewPlayerModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WsReq::InitAsDefaultInstance() {
}
class WsReq::_Internal {
 public:
  using HasBits = decltype(std::declval<WsReq>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ctype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WsReq::WsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.WsReq)
}
WsReq::WsReq(const WsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctype_) -
    reinterpret_cast<char*>(&version_)) + sizeof(ctype_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.WsReq)
}

void WsReq::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctype_) -
      reinterpret_cast<char*>(&version_)) + sizeof(ctype_));
}

WsReq::~WsReq() {
  // @@protoc_insertion_point(destructor:fantasybit.WsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WsReq::ArenaDtor(void* object) {
  WsReq* _this = reinterpret_cast< WsReq* >(object);
  (void)_this;
}
void WsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WsReq& WsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WsReq_StateData_2eproto.base);
  return *internal_default_instance();
}


void WsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.WsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ctype_) -
        reinterpret_cast<char*>(&version_)) + sizeof(ctype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.CType ctype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::CType_IsValid(val))) {
            _internal_set_ctype(static_cast<::fantasybit::CType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.WsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // optional .fantasybit.CType ctype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ctype(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
      100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.WsReq)
  return target;
}

size_t WsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.WsReq)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

    // optional .fantasybit.CType ctype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ctype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.WsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.WsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.WsReq)
    MergeFrom(*source);
  }
}

void WsReq::MergeFrom(const WsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.WsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      ctype_ = from.ctype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.WsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WsReq::CopyFrom(const WsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.WsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WsReq::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void WsReq::InternalSwap(WsReq* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WsReq, ctype_)
      + sizeof(WsReq::ctype_)
      - PROTOBUF_FIELD_OFFSET(WsReq, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WSReply::InitAsDefaultInstance() {
  ::fantasybit::_WSReply_default_instance_._instance.get_mutable()->req_ = const_cast< ::fantasybit::WsReq*>(
      ::fantasybit::WsReq::internal_default_instance());
}
class WSReply::_Internal {
 public:
  using HasBits = decltype(std::declval<WSReply>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ctype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::fantasybit::WsReq& req(const WSReply* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::WsReq&
WSReply::_Internal::req(const WSReply* msg) {
  return *msg->req_;
}
WSReply::WSReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.WSReply)
}
WSReply::WSReply(const WSReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_req()) {
    req_ = new ::fantasybit::WsReq(*from.req_);
  } else {
    req_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctype_) -
    reinterpret_cast<char*>(&version_)) + sizeof(ctype_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.WSReply)
}

void WSReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WSReply_StateData_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctype_) -
      reinterpret_cast<char*>(&req_)) + sizeof(ctype_));
}

WSReply::~WSReply() {
  // @@protoc_insertion_point(destructor:fantasybit.WSReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WSReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
}

void WSReply::ArenaDtor(void* object) {
  WSReply* _this = reinterpret_cast< WSReply* >(object);
  (void)_this;
}
void WSReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WSReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WSReply& WSReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WSReply_StateData_2eproto.base);
  return *internal_default_instance();
}


void WSReply::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.WSReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(req_ != nullptr);
      req_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ctype_) -
        reinterpret_cast<char*>(&version_)) + sizeof(ctype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WSReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.CType ctype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::CType_IsValid(val))) {
            _internal_set_ctype(static_cast<::fantasybit::CType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.WsReq req = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string data = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.WSReply.data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WSReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.WSReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // optional .fantasybit.CType ctype = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ctype(), target);
  }

  // optional .fantasybit.WsReq req = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::req(this), target, stream);
  }

  // optional string data = 30;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.WSReply.data");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_data(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
      100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.WSReply)
  return target;
}

size_t WSReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.WSReply)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string data = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data());
    }

    // optional .fantasybit.WsReq req = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional int32 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

    // optional .fantasybit.CType ctype = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ctype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WSReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.WSReply)
  GOOGLE_DCHECK_NE(&from, this);
  const WSReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WSReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.WSReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.WSReply)
    MergeFrom(*source);
  }
}

void WSReply::MergeFrom(const WSReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.WSReply)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_req()->::fantasybit::WsReq::MergeFrom(from._internal_req());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      ctype_ = from.ctype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WSReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.WSReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSReply::CopyFrom(const WSReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.WSReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSReply::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_req()) {
    if (!req_->IsInitialized()) return false;
  }
  return true;
}

void WSReply::InternalSwap(WSReply* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WSReply, ctype_)
      + sizeof(WSReply::ctype_)
      - PROTOBUF_FIELD_OFFSET(WSReply, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WSReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGlobalStateRep::InitAsDefaultInstance() {
  ::fantasybit::_GetGlobalStateRep_default_instance_._instance.get_mutable()->globalstate_ = const_cast< ::fantasybit::GlobalState*>(
      ::fantasybit::GlobalState::internal_default_instance());
}
class GetGlobalStateRep::_Internal {
 public:
  using HasBits = decltype(std::declval<GetGlobalStateRep>()._has_bits_);
  static const ::fantasybit::GlobalState& globalstate(const GetGlobalStateRep* msg);
  static void set_has_globalstate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::GlobalState&
GetGlobalStateRep::_Internal::globalstate(const GetGlobalStateRep* msg) {
  return *msg->globalstate_;
}
void GetGlobalStateRep::clear_globalstate() {
  if (globalstate_ != nullptr) globalstate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetGlobalStateRep::GetGlobalStateRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GetGlobalStateRep)
}
GetGlobalStateRep::GetGlobalStateRep(const GetGlobalStateRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_globalstate()) {
    globalstate_ = new ::fantasybit::GlobalState(*from.globalstate_);
  } else {
    globalstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GetGlobalStateRep)
}

void GetGlobalStateRep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGlobalStateRep_StateData_2eproto.base);
  globalstate_ = nullptr;
}

GetGlobalStateRep::~GetGlobalStateRep() {
  // @@protoc_insertion_point(destructor:fantasybit.GetGlobalStateRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetGlobalStateRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete globalstate_;
}

void GetGlobalStateRep::ArenaDtor(void* object) {
  GetGlobalStateRep* _this = reinterpret_cast< GetGlobalStateRep* >(object);
  (void)_this;
}
void GetGlobalStateRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetGlobalStateRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGlobalStateRep& GetGlobalStateRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGlobalStateRep_StateData_2eproto.base);
  return *internal_default_instance();
}


void GetGlobalStateRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GetGlobalStateRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(globalstate_ != nullptr);
    globalstate_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGlobalStateRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.GlobalState globalstate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGlobalStateRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GetGlobalStateRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.GlobalState globalstate = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::globalstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GetGlobalStateRep)
  return target;
}

size_t GetGlobalStateRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GetGlobalStateRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .fantasybit.GlobalState globalstate = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalstate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGlobalStateRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GetGlobalStateRep)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGlobalStateRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGlobalStateRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GetGlobalStateRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GetGlobalStateRep)
    MergeFrom(*source);
  }
}

void GetGlobalStateRep::MergeFrom(const GetGlobalStateRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GetGlobalStateRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_globalstate()) {
    _internal_mutable_globalstate()->::fantasybit::GlobalState::MergeFrom(from._internal_globalstate());
  }
}

void GetGlobalStateRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GetGlobalStateRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGlobalStateRep::CopyFrom(const GetGlobalStateRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GetGlobalStateRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGlobalStateRep::IsInitialized() const {
  return true;
}

void GetGlobalStateRep::InternalSwap(GetGlobalStateRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(globalstate_, other->globalstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGlobalStateRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetScheduleRep::InitAsDefaultInstance() {
  ::fantasybit::_GetScheduleRep_default_instance_._instance.get_mutable()->scheduledata_ = const_cast< ::fantasybit::ScheduleData*>(
      ::fantasybit::ScheduleData::internal_default_instance());
}
class GetScheduleRep::_Internal {
 public:
  using HasBits = decltype(std::declval<GetScheduleRep>()._has_bits_);
  static const ::fantasybit::ScheduleData& scheduledata(const GetScheduleRep* msg);
  static void set_has_scheduledata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::ScheduleData&
GetScheduleRep::_Internal::scheduledata(const GetScheduleRep* msg) {
  return *msg->scheduledata_;
}
void GetScheduleRep::clear_scheduledata() {
  if (scheduledata_ != nullptr) scheduledata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetScheduleRep::GetScheduleRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GetScheduleRep)
}
GetScheduleRep::GetScheduleRep(const GetScheduleRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scheduledata()) {
    scheduledata_ = new ::fantasybit::ScheduleData(*from.scheduledata_);
  } else {
    scheduledata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GetScheduleRep)
}

void GetScheduleRep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetScheduleRep_StateData_2eproto.base);
  scheduledata_ = nullptr;
}

GetScheduleRep::~GetScheduleRep() {
  // @@protoc_insertion_point(destructor:fantasybit.GetScheduleRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetScheduleRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scheduledata_;
}

void GetScheduleRep::ArenaDtor(void* object) {
  GetScheduleRep* _this = reinterpret_cast< GetScheduleRep* >(object);
  (void)_this;
}
void GetScheduleRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetScheduleRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetScheduleRep& GetScheduleRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetScheduleRep_StateData_2eproto.base);
  return *internal_default_instance();
}


void GetScheduleRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GetScheduleRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scheduledata_ != nullptr);
    scheduledata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetScheduleRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.ScheduleData scheduledata = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduledata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetScheduleRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GetScheduleRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.ScheduleData scheduledata = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::scheduledata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GetScheduleRep)
  return target;
}

size_t GetScheduleRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GetScheduleRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .fantasybit.ScheduleData scheduledata = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scheduledata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetScheduleRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GetScheduleRep)
  GOOGLE_DCHECK_NE(&from, this);
  const GetScheduleRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetScheduleRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GetScheduleRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GetScheduleRep)
    MergeFrom(*source);
  }
}

void GetScheduleRep::MergeFrom(const GetScheduleRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GetScheduleRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_scheduledata()) {
    _internal_mutable_scheduledata()->::fantasybit::ScheduleData::MergeFrom(from._internal_scheduledata());
  }
}

void GetScheduleRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GetScheduleRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScheduleRep::CopyFrom(const GetScheduleRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GetScheduleRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScheduleRep::IsInitialized() const {
  return true;
}

void GetScheduleRep::InternalSwap(GetScheduleRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scheduledata_, other->scheduledata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetScheduleRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckNameReq::InitAsDefaultInstance() {
}
class CheckNameReq::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckNameReq>()._has_bits_);
  static void set_has_fantasy_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CheckNameReq::CheckNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.CheckNameReq)
}
CheckNameReq::CheckNameReq(const CheckNameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasy_name()) {
    fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fantasy_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.CheckNameReq)
}

void CheckNameReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckNameReq_StateData_2eproto.base);
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CheckNameReq::~CheckNameReq() {
  // @@protoc_insertion_point(destructor:fantasybit.CheckNameReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckNameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fantasy_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckNameReq::ArenaDtor(void* object) {
  CheckNameReq* _this = reinterpret_cast< CheckNameReq* >(object);
  (void)_this;
}
void CheckNameReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckNameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckNameReq& CheckNameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckNameReq_StateData_2eproto.base);
  return *internal_default_instance();
}


void CheckNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.CheckNameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    fantasy_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckNameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string fantasy_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_fantasy_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.CheckNameReq.fantasy_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckNameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.CheckNameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string fantasy_name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fantasy_name().data(), static_cast<int>(this->_internal_fantasy_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.CheckNameReq.fantasy_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_fantasy_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.CheckNameReq)
  return target;
}

size_t CheckNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.CheckNameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string fantasy_name = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fantasy_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckNameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.CheckNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckNameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckNameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.CheckNameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.CheckNameReq)
    MergeFrom(*source);
  }
}

void CheckNameReq::MergeFrom(const CheckNameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.CheckNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fantasy_name()) {
    _internal_set_fantasy_name(from._internal_fantasy_name());
  }
}

void CheckNameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.CheckNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNameReq::CopyFrom(const CheckNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.CheckNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNameReq::IsInitialized() const {
  return true;
}

void CheckNameReq::InternalSwap(CheckNameReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fantasy_name_.Swap(&other->fantasy_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckNameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckNameRep::InitAsDefaultInstance() {
  ::fantasybit::_CheckNameRep_default_instance_._instance.get_mutable()->req_ = const_cast< ::fantasybit::CheckNameReq*>(
      ::fantasybit::CheckNameReq::internal_default_instance());
}
class CheckNameRep::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckNameRep>()._has_bits_);
  static void set_has_isavail(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::CheckNameReq& req(const CheckNameRep* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::CheckNameReq&
CheckNameRep::_Internal::req(const CheckNameRep* msg) {
  return *msg->req_;
}
CheckNameRep::CheckNameRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.CheckNameRep)
}
CheckNameRep::CheckNameRep(const CheckNameRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isavail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_isavail()) {
    isavail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_isavail(),
      GetArena());
  }
  if (from._internal_has_req()) {
    req_ = new ::fantasybit::CheckNameReq(*from.req_);
  } else {
    req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.CheckNameRep)
}

void CheckNameRep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckNameRep_StateData_2eproto.base);
  isavail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  req_ = nullptr;
}

CheckNameRep::~CheckNameRep() {
  // @@protoc_insertion_point(destructor:fantasybit.CheckNameRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckNameRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  isavail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
}

void CheckNameRep::ArenaDtor(void* object) {
  CheckNameRep* _this = reinterpret_cast< CheckNameRep* >(object);
  (void)_this;
}
void CheckNameRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckNameRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckNameRep& CheckNameRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckNameRep_StateData_2eproto.base);
  return *internal_default_instance();
}


void CheckNameRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.CheckNameRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      isavail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(req_ != nullptr);
      req_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckNameRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string isavail = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_isavail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.CheckNameRep.isavail");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.CheckNameReq req = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckNameRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.CheckNameRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string isavail = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_isavail().data(), static_cast<int>(this->_internal_isavail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.CheckNameRep.isavail");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_isavail(), target);
  }

  // optional .fantasybit.CheckNameReq req = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.CheckNameRep)
  return target;
}

size_t CheckNameRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.CheckNameRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string isavail = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_isavail());
    }

    // optional .fantasybit.CheckNameReq req = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *req_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckNameRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.CheckNameRep)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckNameRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckNameRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.CheckNameRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.CheckNameRep)
    MergeFrom(*source);
  }
}

void CheckNameRep::MergeFrom(const CheckNameRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.CheckNameRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_isavail(from._internal_isavail());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_req()->::fantasybit::CheckNameReq::MergeFrom(from._internal_req());
    }
  }
}

void CheckNameRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.CheckNameRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNameRep::CopyFrom(const CheckNameRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.CheckNameRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNameRep::IsInitialized() const {
  return true;
}

void CheckNameRep::InternalSwap(CheckNameRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  isavail_.Swap(&other->isavail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(req_, other->req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckNameRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pk2FnameReq::InitAsDefaultInstance() {
}
class Pk2FnameReq::_Internal {
 public:
  using HasBits = decltype(std::declval<Pk2FnameReq>()._has_bits_);
  static void set_has_pk(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Pk2FnameReq::Pk2FnameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Pk2FnameReq)
}
Pk2FnameReq::Pk2FnameReq(const Pk2FnameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pk()) {
    pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pk(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Pk2FnameReq)
}

void Pk2FnameReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pk2FnameReq_StateData_2eproto.base);
  pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Pk2FnameReq::~Pk2FnameReq() {
  // @@protoc_insertion_point(destructor:fantasybit.Pk2FnameReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pk2FnameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pk2FnameReq::ArenaDtor(void* object) {
  Pk2FnameReq* _this = reinterpret_cast< Pk2FnameReq* >(object);
  (void)_this;
}
void Pk2FnameReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pk2FnameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pk2FnameReq& Pk2FnameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pk2FnameReq_StateData_2eproto.base);
  return *internal_default_instance();
}


void Pk2FnameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Pk2FnameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pk_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pk2FnameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_pk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Pk2FnameReq.pk");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pk2FnameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Pk2FnameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pk = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pk().data(), static_cast<int>(this->_internal_pk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Pk2FnameReq.pk");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_pk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Pk2FnameReq)
  return target;
}

size_t Pk2FnameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Pk2FnameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string pk = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pk2FnameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Pk2FnameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const Pk2FnameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pk2FnameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Pk2FnameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Pk2FnameReq)
    MergeFrom(*source);
  }
}

void Pk2FnameReq::MergeFrom(const Pk2FnameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Pk2FnameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pk()) {
    _internal_set_pk(from._internal_pk());
  }
}

void Pk2FnameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Pk2FnameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pk2FnameReq::CopyFrom(const Pk2FnameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Pk2FnameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pk2FnameReq::IsInitialized() const {
  return true;
}

void Pk2FnameReq::InternalSwap(Pk2FnameReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pk_.Swap(&other->pk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Pk2FnameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pk2FnameRep::InitAsDefaultInstance() {
  ::fantasybit::_Pk2FnameRep_default_instance_._instance.get_mutable()->req_ = const_cast< ::fantasybit::Pk2FnameReq*>(
      ::fantasybit::Pk2FnameReq::internal_default_instance());
  ::fantasybit::_Pk2FnameRep_default_instance_._instance.get_mutable()->fnb_ = const_cast< ::fantasybit::FantasyNameBal*>(
      ::fantasybit::FantasyNameBal::internal_default_instance());
}
class Pk2FnameRep::_Internal {
 public:
  using HasBits = decltype(std::declval<Pk2FnameRep>()._has_bits_);
  static void set_has_fname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::Pk2FnameReq& req(const Pk2FnameRep* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::FantasyNameBal& fnb(const Pk2FnameRep* msg);
  static void set_has_fnb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::fantasybit::Pk2FnameReq&
Pk2FnameRep::_Internal::req(const Pk2FnameRep* msg) {
  return *msg->req_;
}
const ::fantasybit::FantasyNameBal&
Pk2FnameRep::_Internal::fnb(const Pk2FnameRep* msg) {
  return *msg->fnb_;
}
void Pk2FnameRep::clear_fnb() {
  if (fnb_ != nullptr) fnb_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Pk2FnameRep::Pk2FnameRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Pk2FnameRep)
}
Pk2FnameRep::Pk2FnameRep(const Pk2FnameRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fname()) {
    fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fname(),
      GetArena());
  }
  if (from._internal_has_req()) {
    req_ = new ::fantasybit::Pk2FnameReq(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_fnb()) {
    fnb_ = new ::fantasybit::FantasyNameBal(*from.fnb_);
  } else {
    fnb_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Pk2FnameRep)
}

void Pk2FnameRep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pk2FnameRep_StateData_2eproto.base);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fnb_) -
      reinterpret_cast<char*>(&req_)) + sizeof(fnb_));
}

Pk2FnameRep::~Pk2FnameRep() {
  // @@protoc_insertion_point(destructor:fantasybit.Pk2FnameRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pk2FnameRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete fnb_;
}

void Pk2FnameRep::ArenaDtor(void* object) {
  Pk2FnameRep* _this = reinterpret_cast< Pk2FnameRep* >(object);
  (void)_this;
}
void Pk2FnameRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pk2FnameRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pk2FnameRep& Pk2FnameRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pk2FnameRep_StateData_2eproto.base);
  return *internal_default_instance();
}


void Pk2FnameRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Pk2FnameRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(req_ != nullptr);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fnb_ != nullptr);
      fnb_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pk2FnameRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string fname = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_fname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Pk2FnameRep.fname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.Pk2FnameReq req = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.FantasyNameBal fnb = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_fnb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pk2FnameRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Pk2FnameRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string fname = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Pk2FnameRep.fname");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_fname(), target);
  }

  // optional .fantasybit.Pk2FnameReq req = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::req(this), target, stream);
  }

  // optional .fantasybit.FantasyNameBal fnb = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::fnb(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Pk2FnameRep)
  return target;
}

size_t Pk2FnameRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Pk2FnameRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string fname = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fname());
    }

    // optional .fantasybit.Pk2FnameReq req = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .fantasybit.FantasyNameBal fnb = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fnb_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pk2FnameRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Pk2FnameRep)
  GOOGLE_DCHECK_NE(&from, this);
  const Pk2FnameRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pk2FnameRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Pk2FnameRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Pk2FnameRep)
    MergeFrom(*source);
  }
}

void Pk2FnameRep::MergeFrom(const Pk2FnameRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Pk2FnameRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fname(from._internal_fname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_req()->::fantasybit::Pk2FnameReq::MergeFrom(from._internal_req());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_fnb()->::fantasybit::FantasyNameBal::MergeFrom(from._internal_fnb());
    }
  }
}

void Pk2FnameRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Pk2FnameRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pk2FnameRep::CopyFrom(const Pk2FnameRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Pk2FnameRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pk2FnameRep::IsInitialized() const {
  return true;
}

void Pk2FnameRep::InternalSwap(Pk2FnameRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fname_.Swap(&other->fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pk2FnameRep, fnb_)
      + sizeof(Pk2FnameRep::fnb_)
      - PROTOBUF_FIELD_OFFSET(Pk2FnameRep, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pk2FnameRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeReq::InitAsDefaultInstance() {
}
class SubscribeReq::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeReq>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fchash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SubscribeReq::SubscribeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.SubscribeReq)
}
SubscribeReq::SubscribeReq(const SubscribeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  fchash_ = from.fchash_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.SubscribeReq)
}

void SubscribeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeReq_StateData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fchash_ = PROTOBUF_ULONGLONG(0);
}

SubscribeReq::~SubscribeReq() {
  // @@protoc_insertion_point(destructor:fantasybit.SubscribeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribeReq::ArenaDtor(void* object) {
  SubscribeReq* _this = reinterpret_cast< SubscribeReq* >(object);
  (void)_this;
}
void SubscribeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeReq& SubscribeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeReq_StateData_2eproto.base);
  return *internal_default_instance();
}


void SubscribeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SubscribeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  fchash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.SubscribeReq.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fchash = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_fchash(&has_bits);
          fchash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SubscribeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.SubscribeReq.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional uint64 fchash = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_fchash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SubscribeReq)
  return target;
}

size_t SubscribeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SubscribeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 fchash = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_fchash());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SubscribeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SubscribeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SubscribeReq)
    MergeFrom(*source);
  }
}

void SubscribeReq::MergeFrom(const SubscribeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SubscribeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      fchash_ = from.fchash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SubscribeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeReq::CopyFrom(const SubscribeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SubscribeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeReq::IsInitialized() const {
  return true;
}

void SubscribeReq::InternalSwap(SubscribeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(fchash_, other->fchash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NameStatusReq::InitAsDefaultInstance() {
}
class NameStatusReq::_Internal {
 public:
  using HasBits = decltype(std::declval<NameStatusReq>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NameStatusReq::NameStatusReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.NameStatusReq)
}
NameStatusReq::NameStatusReq(const NameStatusReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pk()) {
    pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pk(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.NameStatusReq)
}

void NameStatusReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NameStatusReq_StateData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NameStatusReq::~NameStatusReq() {
  // @@protoc_insertion_point(destructor:fantasybit.NameStatusReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NameStatusReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NameStatusReq::ArenaDtor(void* object) {
  NameStatusReq* _this = reinterpret_cast< NameStatusReq* >(object);
  (void)_this;
}
void NameStatusReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NameStatusReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NameStatusReq& NameStatusReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NameStatusReq_StateData_2eproto.base);
  return *internal_default_instance();
}


void NameStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.NameStatusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pk_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NameStatusReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.NameStatusReq.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pk = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_pk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.NameStatusReq.pk");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NameStatusReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NameStatusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.NameStatusReq.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional string pk = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pk().data(), static_cast<int>(this->_internal_pk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.NameStatusReq.pk");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_pk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NameStatusReq)
  return target;
}

size_t NameStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.NameStatusReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string pk = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pk());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NameStatusReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.NameStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const NameStatusReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NameStatusReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.NameStatusReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.NameStatusReq)
    MergeFrom(*source);
  }
}

void NameStatusReq::MergeFrom(const NameStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.NameStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pk(from._internal_pk());
    }
  }
}

void NameStatusReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.NameStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameStatusReq::CopyFrom(const NameStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.NameStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameStatusReq::IsInitialized() const {
  return true;
}

void NameStatusReq::InternalSwap(NameStatusReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pk_.Swap(&other->pk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NameStatusReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NameStatusRep::InitAsDefaultInstance() {
  ::fantasybit::_NameStatusRep_default_instance_._instance.get_mutable()->req_ = const_cast< ::fantasybit::NameStatusReq*>(
      ::fantasybit::NameStatusReq::internal_default_instance());
}
class NameStatusRep::_Internal {
 public:
  using HasBits = decltype(std::declval<NameStatusRep>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::NameStatusReq& req(const NameStatusRep* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::NameStatusReq&
NameStatusRep::_Internal::req(const NameStatusRep* msg) {
  return *msg->req_;
}
NameStatusRep::NameStatusRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.NameStatusRep)
}
NameStatusRep::NameStatusRep(const NameStatusRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::fantasybit::NameStatusReq(*from.req_);
  } else {
    req_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.NameStatusRep)
}

void NameStatusRep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NameStatusRep_StateData_2eproto.base);
  req_ = nullptr;
  status_ = 1;
}

NameStatusRep::~NameStatusRep() {
  // @@protoc_insertion_point(destructor:fantasybit.NameStatusRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NameStatusRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
}

void NameStatusRep::ArenaDtor(void* object) {
  NameStatusRep* _this = reinterpret_cast< NameStatusRep* >(object);
  (void)_this;
}
void NameStatusRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NameStatusRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NameStatusRep& NameStatusRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NameStatusRep_StateData_2eproto.base);
  return *internal_default_instance();
}


void NameStatusRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.NameStatusRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != nullptr);
      req_->Clear();
    }
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NameStatusRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.MyNameStatus status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::MyNameStatus_IsValid(val))) {
            _internal_set_status(static_cast<::fantasybit::MyNameStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.NameStatusReq req = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NameStatusRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NameStatusRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.MyNameStatus status = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_status(), target);
  }

  // optional .fantasybit.NameStatusReq req = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NameStatusRep)
  return target;
}

size_t NameStatusRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.NameStatusRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .fantasybit.NameStatusReq req = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .fantasybit.MyNameStatus status = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NameStatusRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.NameStatusRep)
  GOOGLE_DCHECK_NE(&from, this);
  const NameStatusRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NameStatusRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.NameStatusRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.NameStatusRep)
    MergeFrom(*source);
  }
}

void NameStatusRep::MergeFrom(const NameStatusRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.NameStatusRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_req()->::fantasybit::NameStatusReq::MergeFrom(from._internal_req());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NameStatusRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.NameStatusRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameStatusRep::CopyFrom(const NameStatusRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.NameStatusRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameStatusRep::IsInitialized() const {
  return true;
}

void NameStatusRep::InternalSwap(NameStatusRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(req_, other->req_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NameStatusRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAllNamesRep::InitAsDefaultInstance() {
}
class GetAllNamesRep::_Internal {
 public:
};

void GetAllNamesRep::clear_fnb() {
  fnb_.Clear();
}
GetAllNamesRep::GetAllNamesRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena),
  fnb_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GetAllNamesRep)
}
GetAllNamesRep::GetAllNamesRep(const GetAllNamesRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_),
      fnb_(from.fnb_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fantasybit.GetAllNamesRep)
}

void GetAllNamesRep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllNamesRep_StateData_2eproto.base);
}

GetAllNamesRep::~GetAllNamesRep() {
  // @@protoc_insertion_point(destructor:fantasybit.GetAllNamesRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAllNamesRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAllNamesRep::ArenaDtor(void* object) {
  GetAllNamesRep* _this = reinterpret_cast< GetAllNamesRep* >(object);
  (void)_this;
}
void GetAllNamesRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllNamesRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllNamesRep& GetAllNamesRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllNamesRep_StateData_2eproto.base);
  return *internal_default_instance();
}


void GetAllNamesRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GetAllNamesRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  fnb_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAllNamesRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string names = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GetAllNamesRep.names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.FantasyNameBal fnb = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fnb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllNamesRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GetAllNamesRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 10;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GetAllNamesRep.names");
    target = stream->WriteString(10, s, target);
  }

  // repeated .fantasybit.FantasyNameBal fnb = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fnb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_fnb(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GetAllNamesRep)
  return target;
}

size_t GetAllNamesRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GetAllNamesRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // repeated .fantasybit.FantasyNameBal fnb = 20;
  total_size += 2UL * this->_internal_fnb_size();
  for (const auto& msg : this->fnb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllNamesRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GetAllNamesRep)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllNamesRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAllNamesRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GetAllNamesRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GetAllNamesRep)
    MergeFrom(*source);
  }
}

void GetAllNamesRep::MergeFrom(const GetAllNamesRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GetAllNamesRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  fnb_.MergeFrom(from.fnb_);
}

void GetAllNamesRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GetAllNamesRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllNamesRep::CopyFrom(const GetAllNamesRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GetAllNamesRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllNamesRep::IsInitialized() const {
  return true;
}

void GetAllNamesRep::InternalSwap(GetAllNamesRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  fnb_.InternalSwap(&other->fnb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAllNamesRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamRoster::InitAsDefaultInstance() {
}
class TeamRoster::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamRoster>()._has_bits_);
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void TeamRoster::clear_players() {
  players_.Clear();
}
TeamRoster::TeamRoster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.TeamRoster)
}
TeamRoster::TeamRoster(const TeamRoster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_teamid()) {
    teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_teamid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.TeamRoster)
}

void TeamRoster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamRoster_StateData_2eproto.base);
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TeamRoster::~TeamRoster() {
  // @@protoc_insertion_point(destructor:fantasybit.TeamRoster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamRoster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  teamid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeamRoster::ArenaDtor(void* object) {
  TeamRoster* _this = reinterpret_cast< TeamRoster* >(object);
  (void)_this;
}
void TeamRoster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamRoster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamRoster& TeamRoster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamRoster_StateData_2eproto.base);
  return *internal_default_instance();
}


void TeamRoster::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TeamRoster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    teamid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamRoster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string teamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_teamid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TeamRoster.teamid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.PlayerData players = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamRoster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TeamRoster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string teamid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_teamid().data(), static_cast<int>(this->_internal_teamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamRoster.teamid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_teamid(), target);
  }

  // repeated .fantasybit.PlayerData players = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TeamRoster)
  return target;
}

size_t TeamRoster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TeamRoster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.PlayerData players = 20;
  total_size += 2UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string teamid = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teamid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamRoster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TeamRoster)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRoster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamRoster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TeamRoster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TeamRoster)
    MergeFrom(*source);
  }
}

void TeamRoster::MergeFrom(const TeamRoster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TeamRoster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from._internal_has_teamid()) {
    _internal_set_teamid(from._internal_teamid());
  }
}

void TeamRoster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TeamRoster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRoster::CopyFrom(const TeamRoster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TeamRoster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRoster::IsInitialized() const {
  return true;
}

void TeamRoster::InternalSwap(TeamRoster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  teamid_.Swap(&other->teamid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamRoster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameDataRoster::InitAsDefaultInstance() {
  ::fantasybit::_GameDataRoster_default_instance_._instance.get_mutable()->game_data_ = const_cast< ::fantasybit::GameData*>(
      ::fantasybit::GameData::internal_default_instance());
  ::fantasybit::_GameDataRoster_default_instance_._instance.get_mutable()->homeroster_ = const_cast< ::fantasybit::TeamRoster*>(
      ::fantasybit::TeamRoster::internal_default_instance());
  ::fantasybit::_GameDataRoster_default_instance_._instance.get_mutable()->awayroster_ = const_cast< ::fantasybit::TeamRoster*>(
      ::fantasybit::TeamRoster::internal_default_instance());
}
class GameDataRoster::_Internal {
 public:
  using HasBits = decltype(std::declval<GameDataRoster>()._has_bits_);
  static const ::fantasybit::GameData& game_data(const GameDataRoster* msg);
  static void set_has_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::TeamRoster& homeroster(const GameDataRoster* msg);
  static void set_has_homeroster(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::TeamRoster& awayroster(const GameDataRoster* msg);
  static void set_has_awayroster(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::fantasybit::GameData&
GameDataRoster::_Internal::game_data(const GameDataRoster* msg) {
  return *msg->game_data_;
}
const ::fantasybit::TeamRoster&
GameDataRoster::_Internal::homeroster(const GameDataRoster* msg) {
  return *msg->homeroster_;
}
const ::fantasybit::TeamRoster&
GameDataRoster::_Internal::awayroster(const GameDataRoster* msg) {
  return *msg->awayroster_;
}
void GameDataRoster::clear_game_data() {
  if (game_data_ != nullptr) game_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameDataRoster::GameDataRoster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GameDataRoster)
}
GameDataRoster::GameDataRoster(const GameDataRoster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_data()) {
    game_data_ = new ::fantasybit::GameData(*from.game_data_);
  } else {
    game_data_ = nullptr;
  }
  if (from._internal_has_homeroster()) {
    homeroster_ = new ::fantasybit::TeamRoster(*from.homeroster_);
  } else {
    homeroster_ = nullptr;
  }
  if (from._internal_has_awayroster()) {
    awayroster_ = new ::fantasybit::TeamRoster(*from.awayroster_);
  } else {
    awayroster_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameDataRoster)
}

void GameDataRoster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameDataRoster_StateData_2eproto.base);
  ::memset(&game_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&awayroster_) -
      reinterpret_cast<char*>(&game_data_)) + sizeof(awayroster_));
}

GameDataRoster::~GameDataRoster() {
  // @@protoc_insertion_point(destructor:fantasybit.GameDataRoster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameDataRoster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_data_;
  if (this != internal_default_instance()) delete homeroster_;
  if (this != internal_default_instance()) delete awayroster_;
}

void GameDataRoster::ArenaDtor(void* object) {
  GameDataRoster* _this = reinterpret_cast< GameDataRoster* >(object);
  (void)_this;
}
void GameDataRoster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameDataRoster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameDataRoster& GameDataRoster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameDataRoster_StateData_2eproto.base);
  return *internal_default_instance();
}


void GameDataRoster::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameDataRoster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(game_data_ != nullptr);
      game_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(homeroster_ != nullptr);
      homeroster_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(awayroster_ != nullptr);
      awayroster_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameDataRoster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.GameData game_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.TeamRoster homeroster = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_homeroster(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.TeamRoster awayroster = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_awayroster(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameDataRoster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameDataRoster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.GameData game_data = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::game_data(this), target, stream);
  }

  // optional .fantasybit.TeamRoster homeroster = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::homeroster(this), target, stream);
  }

  // optional .fantasybit.TeamRoster awayroster = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::awayroster(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameDataRoster)
  return target;
}

size_t GameDataRoster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameDataRoster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .fantasybit.GameData game_data = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_data_);
    }

    // optional .fantasybit.TeamRoster homeroster = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *homeroster_);
    }

    // optional .fantasybit.TeamRoster awayroster = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *awayroster_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameDataRoster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameDataRoster)
  GOOGLE_DCHECK_NE(&from, this);
  const GameDataRoster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameDataRoster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameDataRoster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameDataRoster)
    MergeFrom(*source);
  }
}

void GameDataRoster::MergeFrom(const GameDataRoster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameDataRoster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_game_data()->::fantasybit::GameData::MergeFrom(from._internal_game_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_homeroster()->::fantasybit::TeamRoster::MergeFrom(from._internal_homeroster());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_awayroster()->::fantasybit::TeamRoster::MergeFrom(from._internal_awayroster());
    }
  }
}

void GameDataRoster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameDataRoster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameDataRoster::CopyFrom(const GameDataRoster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameDataRoster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDataRoster::IsInitialized() const {
  return true;
}

void GameDataRoster::InternalSwap(GameDataRoster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameDataRoster, awayroster_)
      + sizeof(GameDataRoster::awayroster_)
      - PROTOBUF_FIELD_OFFSET(GameDataRoster, game_data_)>(
          reinterpret_cast<char*>(&game_data_),
          reinterpret_cast<char*>(&other->game_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameDataRoster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCurrRostersRep::InitAsDefaultInstance() {
}
class GetCurrRostersRep::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCurrRostersRep>()._has_bits_);
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetCurrRostersRep::GetCurrRostersRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gamerosters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GetCurrRostersRep)
}
GetCurrRostersRep::GetCurrRostersRep(const GetCurrRostersRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gamerosters_(from.gamerosters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  week_ = from.week_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.GetCurrRostersRep)
}

void GetCurrRostersRep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCurrRostersRep_StateData_2eproto.base);
  week_ = 0;
}

GetCurrRostersRep::~GetCurrRostersRep() {
  // @@protoc_insertion_point(destructor:fantasybit.GetCurrRostersRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCurrRostersRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetCurrRostersRep::ArenaDtor(void* object) {
  GetCurrRostersRep* _this = reinterpret_cast< GetCurrRostersRep* >(object);
  (void)_this;
}
void GetCurrRostersRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCurrRostersRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCurrRostersRep& GetCurrRostersRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCurrRostersRep_StateData_2eproto.base);
  return *internal_default_instance();
}


void GetCurrRostersRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GetCurrRostersRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamerosters_.Clear();
  week_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCurrRostersRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 week = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.GameDataRoster gamerosters = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gamerosters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCurrRostersRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GetCurrRostersRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 week = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_week(), target);
  }

  // repeated .fantasybit.GameDataRoster gamerosters = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gamerosters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_gamerosters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GetCurrRostersRep)
  return target;
}

size_t GetCurrRostersRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GetCurrRostersRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.GameDataRoster gamerosters = 20;
  total_size += 2UL * this->_internal_gamerosters_size();
  for (const auto& msg : this->gamerosters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 week = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_week());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCurrRostersRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GetCurrRostersRep)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCurrRostersRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCurrRostersRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GetCurrRostersRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GetCurrRostersRep)
    MergeFrom(*source);
  }
}

void GetCurrRostersRep::MergeFrom(const GetCurrRostersRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GetCurrRostersRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamerosters_.MergeFrom(from.gamerosters_);
  if (from._internal_has_week()) {
    _internal_set_week(from._internal_week());
  }
}

void GetCurrRostersRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GetCurrRostersRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurrRostersRep::CopyFrom(const GetCurrRostersRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GetCurrRostersRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrRostersRep::IsInitialized() const {
  return true;
}

void GetCurrRostersRep::InternalSwap(GetCurrRostersRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamerosters_.InternalSwap(&other->gamerosters_);
  swap(week_, other->week_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCurrRostersRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROWMarket::InitAsDefaultInstance() {
  ::fantasybit::_ROWMarket_default_instance_._instance.get_mutable()->quote_ = const_cast< ::fantasybit::MarketQuote*>(
      ::fantasybit::MarketQuote::internal_default_instance());
  ::fantasybit::_ROWMarket_default_instance_._instance.get_mutable()->playerdata_ = const_cast< ::fantasybit::PlayerData*>(
      ::fantasybit::PlayerData::internal_default_instance());
  ::fantasybit::_ROWMarket_default_instance_._instance.get_mutable()->ohlc_ = const_cast< ::fantasybit::ContractOHLC*>(
      ::fantasybit::ContractOHLC::internal_default_instance());
}
class ROWMarket::_Internal {
 public:
  using HasBits = decltype(std::declval<ROWMarket>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::MarketQuote& quote(const ROWMarket* msg);
  static void set_has_quote(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::PlayerData& playerdata(const ROWMarket* msg);
  static void set_has_playerdata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::fantasybit::ContractOHLC& ohlc(const ROWMarket* msg);
  static void set_has_ohlc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::fantasybit::MarketQuote&
ROWMarket::_Internal::quote(const ROWMarket* msg) {
  return *msg->quote_;
}
const ::fantasybit::PlayerData&
ROWMarket::_Internal::playerdata(const ROWMarket* msg) {
  return *msg->playerdata_;
}
const ::fantasybit::ContractOHLC&
ROWMarket::_Internal::ohlc(const ROWMarket* msg) {
  return *msg->ohlc_;
}
void ROWMarket::clear_quote() {
  if (quote_ != nullptr) quote_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ROWMarket::clear_playerdata() {
  if (playerdata_ != nullptr) playerdata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ROWMarket::clear_ohlc() {
  if (ohlc_ != nullptr) ohlc_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ROWMarket::ROWMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ROWMarket)
}
ROWMarket::ROWMarket(const ROWMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pid()) {
    pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pid(),
      GetArena());
  }
  if (from._internal_has_quote()) {
    quote_ = new ::fantasybit::MarketQuote(*from.quote_);
  } else {
    quote_ = nullptr;
  }
  if (from._internal_has_playerdata()) {
    playerdata_ = new ::fantasybit::PlayerData(*from.playerdata_);
  } else {
    playerdata_ = nullptr;
  }
  if (from._internal_has_ohlc()) {
    ohlc_ = new ::fantasybit::ContractOHLC(*from.ohlc_);
  } else {
    ohlc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.ROWMarket)
}

void ROWMarket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ROWMarket_StateData_2eproto.base);
  pid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&quote_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ohlc_) -
      reinterpret_cast<char*>(&quote_)) + sizeof(ohlc_));
}

ROWMarket::~ROWMarket() {
  // @@protoc_insertion_point(destructor:fantasybit.ROWMarket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ROWMarket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quote_;
  if (this != internal_default_instance()) delete playerdata_;
  if (this != internal_default_instance()) delete ohlc_;
}

void ROWMarket::ArenaDtor(void* object) {
  ROWMarket* _this = reinterpret_cast< ROWMarket* >(object);
  (void)_this;
}
void ROWMarket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ROWMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROWMarket& ROWMarket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROWMarket_StateData_2eproto.base);
  return *internal_default_instance();
}


void ROWMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ROWMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      pid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quote_ != nullptr);
      quote_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(playerdata_ != nullptr);
      playerdata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ohlc_ != nullptr);
      ohlc_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROWMarket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_pid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.ROWMarket.pid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.MarketQuote quote = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_quote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.PlayerData playerdata = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.ContractOHLC ohlc = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_ohlc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROWMarket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ROWMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.ROWMarket.pid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_pid(), target);
  }

  // optional .fantasybit.MarketQuote quote = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::quote(this), target, stream);
  }

  // optional .fantasybit.PlayerData playerdata = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::playerdata(this), target, stream);
  }

  // optional .fantasybit.ContractOHLC ohlc = 50;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::ohlc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ROWMarket)
  return target;
}

size_t ROWMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ROWMarket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string pid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pid());
    }

    // optional .fantasybit.MarketQuote quote = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quote_);
    }

    // optional .fantasybit.PlayerData playerdata = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playerdata_);
    }

    // optional .fantasybit.ContractOHLC ohlc = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ohlc_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROWMarket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ROWMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const ROWMarket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROWMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ROWMarket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ROWMarket)
    MergeFrom(*source);
  }
}

void ROWMarket::MergeFrom(const ROWMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ROWMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pid(from._internal_pid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_quote()->::fantasybit::MarketQuote::MergeFrom(from._internal_quote());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_playerdata()->::fantasybit::PlayerData::MergeFrom(from._internal_playerdata());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ohlc()->::fantasybit::ContractOHLC::MergeFrom(from._internal_ohlc());
    }
  }
}

void ROWMarket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ROWMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROWMarket::CopyFrom(const ROWMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ROWMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROWMarket::IsInitialized() const {
  return true;
}

void ROWMarket::InternalSwap(ROWMarket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pid_.Swap(&other->pid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ROWMarket, ohlc_)
      + sizeof(ROWMarket::ohlc_)
      - PROTOBUF_FIELD_OFFSET(ROWMarket, quote_)>(
          reinterpret_cast<char*>(&quote_),
          reinterpret_cast<char*>(&other->quote_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ROWMarket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetROWMarketRep::InitAsDefaultInstance() {
}
class GetROWMarketRep::_Internal {
 public:
};

GetROWMarketRep::GetROWMarketRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rowmarket_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GetROWMarketRep)
}
GetROWMarketRep::GetROWMarketRep(const GetROWMarketRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rowmarket_(from.rowmarket_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fantasybit.GetROWMarketRep)
}

void GetROWMarketRep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetROWMarketRep_StateData_2eproto.base);
}

GetROWMarketRep::~GetROWMarketRep() {
  // @@protoc_insertion_point(destructor:fantasybit.GetROWMarketRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetROWMarketRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetROWMarketRep::ArenaDtor(void* object) {
  GetROWMarketRep* _this = reinterpret_cast< GetROWMarketRep* >(object);
  (void)_this;
}
void GetROWMarketRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetROWMarketRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetROWMarketRep& GetROWMarketRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetROWMarketRep_StateData_2eproto.base);
  return *internal_default_instance();
}


void GetROWMarketRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GetROWMarketRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rowmarket_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetROWMarketRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fantasybit.ROWMarket rowmarket = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rowmarket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetROWMarketRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GetROWMarketRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fantasybit.ROWMarket rowmarket = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rowmarket_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_rowmarket(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GetROWMarketRep)
  return target;
}

size_t GetROWMarketRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GetROWMarketRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.ROWMarket rowmarket = 10;
  total_size += 1UL * this->_internal_rowmarket_size();
  for (const auto& msg : this->rowmarket_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetROWMarketRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GetROWMarketRep)
  GOOGLE_DCHECK_NE(&from, this);
  const GetROWMarketRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetROWMarketRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GetROWMarketRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GetROWMarketRep)
    MergeFrom(*source);
  }
}

void GetROWMarketRep::MergeFrom(const GetROWMarketRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GetROWMarketRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rowmarket_.MergeFrom(from.rowmarket_);
}

void GetROWMarketRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GetROWMarketRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetROWMarketRep::CopyFrom(const GetROWMarketRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GetROWMarketRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetROWMarketRep::IsInitialized() const {
  return true;
}

void GetROWMarketRep::InternalSwap(GetROWMarketRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rowmarket_.InternalSwap(&other->rowmarket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetROWMarketRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDepthReq::InitAsDefaultInstance() {
}
class GetDepthReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDepthReq>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetDepthReq::GetDepthReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GetDepthReq)
}
GetDepthReq::GetDepthReq(const GetDepthReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pid()) {
    pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GetDepthReq)
}

void GetDepthReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDepthReq_StateData_2eproto.base);
  pid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDepthReq::~GetDepthReq() {
  // @@protoc_insertion_point(destructor:fantasybit.GetDepthReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDepthReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDepthReq::ArenaDtor(void* object) {
  GetDepthReq* _this = reinterpret_cast< GetDepthReq* >(object);
  (void)_this;
}
void GetDepthReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDepthReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDepthReq& GetDepthReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDepthReq_StateData_2eproto.base);
  return *internal_default_instance();
}


void GetDepthReq::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GetDepthReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDepthReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_pid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GetDepthReq.pid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDepthReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GetDepthReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GetDepthReq.pid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GetDepthReq)
  return target;
}

size_t GetDepthReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GetDepthReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string pid = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDepthReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GetDepthReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDepthReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDepthReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GetDepthReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GetDepthReq)
    MergeFrom(*source);
  }
}

void GetDepthReq::MergeFrom(const GetDepthReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GetDepthReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pid()) {
    _internal_set_pid(from._internal_pid());
  }
}

void GetDepthReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GetDepthReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDepthReq::CopyFrom(const GetDepthReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GetDepthReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDepthReq::IsInitialized() const {
  return true;
}

void GetDepthReq::InternalSwap(GetDepthReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pid_.Swap(&other->pid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDepthReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDepthRep::InitAsDefaultInstance() {
  ::fantasybit::_GetDepthRep_default_instance_._instance.get_mutable()->rowmarket_ = const_cast< ::fantasybit::ROWMarket*>(
      ::fantasybit::ROWMarket::internal_default_instance());
}
class GetDepthRep::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDepthRep>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::ROWMarket& rowmarket(const GetDepthRep* msg);
  static void set_has_rowmarket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::ROWMarket&
GetDepthRep::_Internal::rowmarket(const GetDepthRep* msg) {
  return *msg->rowmarket_;
}
void GetDepthRep::clear_depthitems() {
  depthitems_.Clear();
}
GetDepthRep::GetDepthRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  depthitems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GetDepthRep)
}
GetDepthRep::GetDepthRep(const GetDepthRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      depthitems_(from.depthitems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pid()) {
    pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pid(),
      GetArena());
  }
  if (from._internal_has_rowmarket()) {
    rowmarket_ = new ::fantasybit::ROWMarket(*from.rowmarket_);
  } else {
    rowmarket_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GetDepthRep)
}

void GetDepthRep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDepthRep_StateData_2eproto.base);
  pid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rowmarket_ = nullptr;
}

GetDepthRep::~GetDepthRep() {
  // @@protoc_insertion_point(destructor:fantasybit.GetDepthRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDepthRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rowmarket_;
}

void GetDepthRep::ArenaDtor(void* object) {
  GetDepthRep* _this = reinterpret_cast< GetDepthRep* >(object);
  (void)_this;
}
void GetDepthRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDepthRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDepthRep& GetDepthRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDepthRep_StateData_2eproto.base);
  return *internal_default_instance();
}


void GetDepthRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GetDepthRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depthitems_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rowmarket_ != nullptr);
      rowmarket_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDepthRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_pid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GetDepthRep.pid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.DepthItem depthitems = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_depthitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.ROWMarket rowmarket = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_rowmarket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDepthRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GetDepthRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GetDepthRep.pid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_pid(), target);
  }

  // repeated .fantasybit.DepthItem depthitems = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_depthitems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_depthitems(i), target, stream);
  }

  // optional .fantasybit.ROWMarket rowmarket = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::rowmarket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GetDepthRep)
  return target;
}

size_t GetDepthRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GetDepthRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.DepthItem depthitems = 20;
  total_size += 2UL * this->_internal_depthitems_size();
  for (const auto& msg : this->depthitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string pid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pid());
    }

    // optional .fantasybit.ROWMarket rowmarket = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rowmarket_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDepthRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GetDepthRep)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDepthRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDepthRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GetDepthRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GetDepthRep)
    MergeFrom(*source);
  }
}

void GetDepthRep::MergeFrom(const GetDepthRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GetDepthRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  depthitems_.MergeFrom(from.depthitems_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pid(from._internal_pid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rowmarket()->::fantasybit::ROWMarket::MergeFrom(from._internal_rowmarket());
    }
  }
}

void GetDepthRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GetDepthRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDepthRep::CopyFrom(const GetDepthRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GetDepthRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDepthRep::IsInitialized() const {
  return true;
}

void GetDepthRep::InternalSwap(GetDepthRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  depthitems_.InternalSwap(&other->depthitems_);
  pid_.Swap(&other->pid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rowmarket_, other->rowmarket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDepthRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllOdersSymbol::InitAsDefaultInstance() {
}
class AllOdersSymbol::_Internal {
 public:
  using HasBits = decltype(std::declval<AllOdersSymbol>()._has_bits_);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_netqty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_netprice(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pnl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

void AllOdersSymbol::clear_orders() {
  orders_.Clear();
}
AllOdersSymbol::AllOdersSymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.AllOdersSymbol)
}
AllOdersSymbol::AllOdersSymbol(const AllOdersSymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  ::memcpy(&netqty_, &from.netqty_,
    static_cast<size_t>(reinterpret_cast<char*>(&pnl_) -
    reinterpret_cast<char*>(&netqty_)) + sizeof(pnl_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.AllOdersSymbol)
}

void AllOdersSymbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllOdersSymbol_StateData_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&netqty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pnl_) -
      reinterpret_cast<char*>(&netqty_)) + sizeof(pnl_));
}

AllOdersSymbol::~AllOdersSymbol() {
  // @@protoc_insertion_point(destructor:fantasybit.AllOdersSymbol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllOdersSymbol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AllOdersSymbol::ArenaDtor(void* object) {
  AllOdersSymbol* _this = reinterpret_cast< AllOdersSymbol* >(object);
  (void)_this;
}
void AllOdersSymbol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllOdersSymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllOdersSymbol& AllOdersSymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllOdersSymbol_StateData_2eproto.base);
  return *internal_default_instance();
}


void AllOdersSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.AllOdersSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    symbol_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&netqty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pnl_) -
        reinterpret_cast<char*>(&netqty_)) + sizeof(pnl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllOdersSymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string symbol = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.AllOdersSymbol.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.Order orders = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 netqty = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_netqty(&has_bits);
          netqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 netprice = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_netprice(&has_bits);
          netprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double avg = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_avg(&has_bits);
          avg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pnl = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_pnl(&has_bits);
          pnl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllOdersSymbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.AllOdersSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string symbol = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.AllOdersSymbol.symbol");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_symbol(), target);
  }

  // repeated .fantasybit.Order orders = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_orders(i), target, stream);
  }

  // optional int32 netqty = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_netqty(), target);
  }

  // optional int32 netprice = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_netprice(), target);
  }

  // optional double avg = 50;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(50, this->_internal_avg(), target);
  }

  // optional double pnl = 60;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(60, this->_internal_pnl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.AllOdersSymbol)
  return target;
}

size_t AllOdersSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.AllOdersSymbol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.Order orders = 20;
  total_size += 2UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string symbol = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional int32 netqty = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_netqty());
    }

    // optional int32 netprice = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_netprice());
    }

    // optional double avg = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double pnl = 60;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllOdersSymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.AllOdersSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const AllOdersSymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllOdersSymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.AllOdersSymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.AllOdersSymbol)
    MergeFrom(*source);
  }
}

void AllOdersSymbol::MergeFrom(const AllOdersSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.AllOdersSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      netqty_ = from.netqty_;
    }
    if (cached_has_bits & 0x00000004u) {
      netprice_ = from.netprice_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_ = from.avg_;
    }
    if (cached_has_bits & 0x00000010u) {
      pnl_ = from.pnl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AllOdersSymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.AllOdersSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllOdersSymbol::CopyFrom(const AllOdersSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.AllOdersSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllOdersSymbol::IsInitialized() const {
  return true;
}

void AllOdersSymbol::InternalSwap(AllOdersSymbol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  orders_.InternalSwap(&other->orders_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllOdersSymbol, pnl_)
      + sizeof(AllOdersSymbol::pnl_)
      - PROTOBUF_FIELD_OFFSET(AllOdersSymbol, netqty_)>(
          reinterpret_cast<char*>(&netqty_),
          reinterpret_cast<char*>(&other->netqty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllOdersSymbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllOdersFname::InitAsDefaultInstance() {
}
class AllOdersFname::_Internal {
 public:
  using HasBits = decltype(std::declval<AllOdersFname>()._has_bits_);
  static void set_has_fname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AllOdersFname::AllOdersFname(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pidorders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.AllOdersFname)
}
AllOdersFname::AllOdersFname(const AllOdersFname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pidorders_(from.pidorders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fname()) {
    fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.AllOdersFname)
}

void AllOdersFname::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllOdersFname_StateData_2eproto.base);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AllOdersFname::~AllOdersFname() {
  // @@protoc_insertion_point(destructor:fantasybit.AllOdersFname)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllOdersFname::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AllOdersFname::ArenaDtor(void* object) {
  AllOdersFname* _this = reinterpret_cast< AllOdersFname* >(object);
  (void)_this;
}
void AllOdersFname::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllOdersFname::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllOdersFname& AllOdersFname::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllOdersFname_StateData_2eproto.base);
  return *internal_default_instance();
}


void AllOdersFname::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.AllOdersFname)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pidorders_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    fname_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllOdersFname::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string fname = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_fname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.AllOdersFname.fname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.AllOdersSymbol pidorders = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pidorders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllOdersFname::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.AllOdersFname)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string fname = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.AllOdersFname.fname");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_fname(), target);
  }

  // repeated .fantasybit.AllOdersSymbol pidorders = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pidorders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_pidorders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.AllOdersFname)
  return target;
}

size_t AllOdersFname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.AllOdersFname)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.AllOdersSymbol pidorders = 20;
  total_size += 2UL * this->_internal_pidorders_size();
  for (const auto& msg : this->pidorders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string fname = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllOdersFname::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.AllOdersFname)
  GOOGLE_DCHECK_NE(&from, this);
  const AllOdersFname* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllOdersFname>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.AllOdersFname)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.AllOdersFname)
    MergeFrom(*source);
  }
}

void AllOdersFname::MergeFrom(const AllOdersFname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.AllOdersFname)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pidorders_.MergeFrom(from.pidorders_);
  if (from._internal_has_fname()) {
    _internal_set_fname(from._internal_fname());
  }
}

void AllOdersFname::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.AllOdersFname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllOdersFname::CopyFrom(const AllOdersFname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.AllOdersFname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllOdersFname::IsInitialized() const {
  return true;
}

void AllOdersFname::InternalSwap(AllOdersFname* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pidorders_.InternalSwap(&other->pidorders_);
  fname_.Swap(&other->fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AllOdersFname::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOrdersRep::InitAsDefaultInstance() {
  ::fantasybit::_GetOrdersRep_default_instance_._instance.get_mutable()->req_ = const_cast< ::fantasybit::GetOrdersReq*>(
      ::fantasybit::GetOrdersReq::internal_default_instance());
  ::fantasybit::_GetOrdersRep_default_instance_._instance.get_mutable()->oorders_ = const_cast< ::fantasybit::AllOdersFname*>(
      ::fantasybit::AllOdersFname::internal_default_instance());
}
class GetOrdersRep::_Internal {
 public:
  using HasBits = decltype(std::declval<GetOrdersRep>()._has_bits_);
  static const ::fantasybit::GetOrdersReq& req(const GetOrdersRep* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::AllOdersFname& oorders(const GetOrdersRep* msg);
  static void set_has_oorders(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::GetOrdersReq&
GetOrdersRep::_Internal::req(const GetOrdersRep* msg) {
  return *msg->req_;
}
const ::fantasybit::AllOdersFname&
GetOrdersRep::_Internal::oorders(const GetOrdersRep* msg) {
  return *msg->oorders_;
}
GetOrdersRep::GetOrdersRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GetOrdersRep)
}
GetOrdersRep::GetOrdersRep(const GetOrdersRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::fantasybit::GetOrdersReq(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_oorders()) {
    oorders_ = new ::fantasybit::AllOdersFname(*from.oorders_);
  } else {
    oorders_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GetOrdersRep)
}

void GetOrdersRep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOrdersRep_StateData_2eproto.base);
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oorders_) -
      reinterpret_cast<char*>(&req_)) + sizeof(oorders_));
}

GetOrdersRep::~GetOrdersRep() {
  // @@protoc_insertion_point(destructor:fantasybit.GetOrdersRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetOrdersRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete oorders_;
}

void GetOrdersRep::ArenaDtor(void* object) {
  GetOrdersRep* _this = reinterpret_cast< GetOrdersRep* >(object);
  (void)_this;
}
void GetOrdersRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOrdersRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOrdersRep& GetOrdersRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOrdersRep_StateData_2eproto.base);
  return *internal_default_instance();
}


void GetOrdersRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GetOrdersRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != nullptr);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(oorders_ != nullptr);
      oorders_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrdersRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.GetOrdersReq req = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.AllOdersFname oorders = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_oorders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOrdersRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GetOrdersRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.GetOrdersReq req = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::req(this), target, stream);
  }

  // optional .fantasybit.AllOdersFname oorders = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::oorders(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GetOrdersRep)
  return target;
}

size_t GetOrdersRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GetOrdersRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .fantasybit.GetOrdersReq req = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .fantasybit.AllOdersFname oorders = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oorders_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOrdersRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GetOrdersRep)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOrdersRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOrdersRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GetOrdersRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GetOrdersRep)
    MergeFrom(*source);
  }
}

void GetOrdersRep::MergeFrom(const GetOrdersRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GetOrdersRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_req()->::fantasybit::GetOrdersReq::MergeFrom(from._internal_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_oorders()->::fantasybit::AllOdersFname::MergeFrom(from._internal_oorders());
    }
  }
}

void GetOrdersRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GetOrdersRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrdersRep::CopyFrom(const GetOrdersRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GetOrdersRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrdersRep::IsInitialized() const {
  return true;
}

void GetOrdersRep::InternalSwap(GetOrdersRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOrdersRep, oorders_)
      + sizeof(GetOrdersRep::oorders_)
      - PROTOBUF_FIELD_OFFSET(GetOrdersRep, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrdersRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOrdersReq::InitAsDefaultInstance() {
}
class GetOrdersReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetOrdersReq>()._has_bits_);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fchash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GetOrdersReq::GetOrdersReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GetOrdersReq)
}
GetOrdersReq::GetOrdersReq(const GetOrdersReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fname()) {
    fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fname(),
      GetArena());
  }
  fchash_ = from.fchash_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.GetOrdersReq)
}

void GetOrdersReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOrdersReq_StateData_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fchash_ = PROTOBUF_ULONGLONG(0);
}

GetOrdersReq::~GetOrdersReq() {
  // @@protoc_insertion_point(destructor:fantasybit.GetOrdersReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetOrdersReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOrdersReq::ArenaDtor(void* object) {
  GetOrdersReq* _this = reinterpret_cast< GetOrdersReq* >(object);
  (void)_this;
}
void GetOrdersReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOrdersReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOrdersReq& GetOrdersReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOrdersReq_StateData_2eproto.base);
  return *internal_default_instance();
}


void GetOrdersReq::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GetOrdersReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      fname_.ClearNonDefaultToEmpty();
    }
  }
  fchash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrdersReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string symbol = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GetOrdersReq.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fname = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_fname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GetOrdersReq.fname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fchash = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_fchash(&has_bits);
          fchash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOrdersReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GetOrdersReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string symbol = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GetOrdersReq.symbol");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_symbol(), target);
  }

  // optional string fname = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GetOrdersReq.fname");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_fname(), target);
  }

  // optional uint64 fchash = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_fchash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GetOrdersReq)
  return target;
}

size_t GetOrdersReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GetOrdersReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string symbol = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional string fname = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fname());
    }

    // optional uint64 fchash = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_fchash());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOrdersReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GetOrdersReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOrdersReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOrdersReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GetOrdersReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GetOrdersReq)
    MergeFrom(*source);
  }
}

void GetOrdersReq::MergeFrom(const GetOrdersReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GetOrdersReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_fname(from._internal_fname());
    }
    if (cached_has_bits & 0x00000004u) {
      fchash_ = from.fchash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetOrdersReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GetOrdersReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrdersReq::CopyFrom(const GetOrdersReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GetOrdersReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrdersReq::IsInitialized() const {
  return true;
}

void GetOrdersReq::InternalSwap(GetOrdersReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fname_.Swap(&other->fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(fchash_, other->fchash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrdersReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProjectionReq::InitAsDefaultInstance() {
}
class GetProjectionReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetProjectionReq>()._has_bits_);
  static void set_has_fname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_getavg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetProjectionReq::GetProjectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GetProjectionReq)
}
GetProjectionReq::GetProjectionReq(const GetProjectionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fname()) {
    fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fname(),
      GetArena());
  }
  getavg_ = from.getavg_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.GetProjectionReq)
}

void GetProjectionReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProjectionReq_StateData_2eproto.base);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  getavg_ = false;
}

GetProjectionReq::~GetProjectionReq() {
  // @@protoc_insertion_point(destructor:fantasybit.GetProjectionReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProjectionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProjectionReq::ArenaDtor(void* object) {
  GetProjectionReq* _this = reinterpret_cast< GetProjectionReq* >(object);
  (void)_this;
}
void GetProjectionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProjectionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProjectionReq& GetProjectionReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProjectionReq_StateData_2eproto.base);
  return *internal_default_instance();
}


void GetProjectionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GetProjectionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    fname_.ClearNonDefaultToEmpty();
  }
  getavg_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProjectionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string fname = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_fname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GetProjectionReq.fname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool getavg = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_getavg(&has_bits);
          getavg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GetProjectionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string fname = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GetProjectionReq.fname");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_fname(), target);
  }

  // optional bool getavg = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_getavg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GetProjectionReq)
  return target;
}

size_t GetProjectionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GetProjectionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string fname = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fname());
    }

    // optional bool getavg = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProjectionReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GetProjectionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProjectionReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProjectionReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GetProjectionReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GetProjectionReq)
    MergeFrom(*source);
  }
}

void GetProjectionReq::MergeFrom(const GetProjectionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GetProjectionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fname(from._internal_fname());
    }
    if (cached_has_bits & 0x00000002u) {
      getavg_ = from.getavg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetProjectionReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GetProjectionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectionReq::CopyFrom(const GetProjectionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GetProjectionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectionReq::IsInitialized() const {
  return true;
}

void GetProjectionReq::InternalSwap(GetProjectionReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fname_.Swap(&other->fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(getavg_, other->getavg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectionReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerProj::InitAsDefaultInstance() {
}
class PlayerProj::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerProj>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proj(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlayerProj::PlayerProj(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.PlayerProj)
}
PlayerProj::PlayerProj(const PlayerProj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  proj_ = from.proj_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerProj)
}

void PlayerProj::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerProj_StateData_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proj_ = 0;
}

PlayerProj::~PlayerProj() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerProj)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerProj::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerProj::ArenaDtor(void* object) {
  PlayerProj* _this = reinterpret_cast< PlayerProj* >(object);
  (void)_this;
}
void PlayerProj::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerProj::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerProj& PlayerProj::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerProj_StateData_2eproto.base);
  return *internal_default_instance();
}


void PlayerProj::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerProj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playerid_.ClearNonDefaultToEmpty();
  }
  proj_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerProj::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string playerid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.PlayerProj.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 proj = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_proj(&has_bits);
          proj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerProj::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerProj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerProj.playerid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_playerid(), target);
  }

  // optional int32 proj = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_proj(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerProj)
  return target;
}

size_t PlayerProj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerProj)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string playerid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional int32 proj = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_proj());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerProj::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerProj)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerProj* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerProj>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerProj)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerProj)
    MergeFrom(*source);
  }
}

void PlayerProj::MergeFrom(const PlayerProj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerProj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      proj_ = from.proj_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerProj::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerProj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerProj::CopyFrom(const PlayerProj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerProj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerProj::IsInitialized() const {
  return true;
}

void PlayerProj::InternalSwap(PlayerProj* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(proj_, other->proj_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerProj::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjByName::InitAsDefaultInstance() {
}
class ProjByName::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjByName>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ProjByName::ProjByName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  playerproj_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ProjByName)
}
ProjByName::ProjByName(const ProjByName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      playerproj_(from.playerproj_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_) -
    reinterpret_cast<char*>(&count_)) + sizeof(block_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjByName)
}

void ProjByName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjByName_StateData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&count_)) + sizeof(block_));
}

ProjByName::~ProjByName() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjByName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjByName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProjByName::ArenaDtor(void* object) {
  ProjByName* _this = reinterpret_cast< ProjByName* >(object);
  (void)_this;
}
void ProjByName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjByName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjByName& ProjByName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjByName_StateData_2eproto.base);
  return *internal_default_instance();
}


void ProjByName::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjByName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerproj_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_) -
        reinterpret_cast<char*>(&count_)) + sizeof(block_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjByName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.ProjByName.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.PlayerProj playerproj = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_playerproj(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 count = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 block = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_block(&has_bits);
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjByName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjByName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.ProjByName.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // repeated .fantasybit.PlayerProj playerproj = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerproj_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_playerproj(i), target, stream);
  }

  // optional int32 count = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_count(), target);
  }

  // optional int32 block = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjByName)
  return target;
}

size_t ProjByName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjByName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.PlayerProj playerproj = 20;
  total_size += 2UL * this->_internal_playerproj_size();
  for (const auto& msg : this->playerproj_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 count = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count());
    }

    // optional int32 block = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_block());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjByName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjByName)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjByName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjByName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjByName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjByName)
    MergeFrom(*source);
  }
}

void ProjByName::MergeFrom(const ProjByName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjByName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerproj_.MergeFrom(from.playerproj_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      block_ = from.block_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjByName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjByName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjByName::CopyFrom(const ProjByName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjByName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjByName::IsInitialized() const {
  return true;
}

void ProjByName::InternalSwap(ProjByName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerproj_.InternalSwap(&other->playerproj_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjByName, block_)
      + sizeof(ProjByName::block_)
      - PROTOBUF_FIELD_OFFSET(ProjByName, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjByName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProjectionRep::InitAsDefaultInstance() {
  ::fantasybit::_GetProjectionRep_default_instance_._instance.get_mutable()->projs_ = const_cast< ::fantasybit::ProjByName*>(
      ::fantasybit::ProjByName::internal_default_instance());
  ::fantasybit::_GetProjectionRep_default_instance_._instance.get_mutable()->avg_ = const_cast< ::fantasybit::ProjByName*>(
      ::fantasybit::ProjByName::internal_default_instance());
}
class GetProjectionRep::_Internal {
 public:
  using HasBits = decltype(std::declval<GetProjectionRep>()._has_bits_);
  static const ::fantasybit::ProjByName& projs(const GetProjectionRep* msg);
  static void set_has_projs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::ProjByName& avg(const GetProjectionRep* msg);
  static void set_has_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::ProjByName&
GetProjectionRep::_Internal::projs(const GetProjectionRep* msg) {
  return *msg->projs_;
}
const ::fantasybit::ProjByName&
GetProjectionRep::_Internal::avg(const GetProjectionRep* msg) {
  return *msg->avg_;
}
GetProjectionRep::GetProjectionRep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GetProjectionRep)
}
GetProjectionRep::GetProjectionRep(const GetProjectionRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_projs()) {
    projs_ = new ::fantasybit::ProjByName(*from.projs_);
  } else {
    projs_ = nullptr;
  }
  if (from._internal_has_avg()) {
    avg_ = new ::fantasybit::ProjByName(*from.avg_);
  } else {
    avg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GetProjectionRep)
}

void GetProjectionRep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProjectionRep_StateData_2eproto.base);
  ::memset(&projs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_) -
      reinterpret_cast<char*>(&projs_)) + sizeof(avg_));
}

GetProjectionRep::~GetProjectionRep() {
  // @@protoc_insertion_point(destructor:fantasybit.GetProjectionRep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProjectionRep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete projs_;
  if (this != internal_default_instance()) delete avg_;
}

void GetProjectionRep::ArenaDtor(void* object) {
  GetProjectionRep* _this = reinterpret_cast< GetProjectionRep* >(object);
  (void)_this;
}
void GetProjectionRep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProjectionRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProjectionRep& GetProjectionRep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProjectionRep_StateData_2eproto.base);
  return *internal_default_instance();
}


void GetProjectionRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GetProjectionRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(projs_ != nullptr);
      projs_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(avg_ != nullptr);
      avg_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProjectionRep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.ProjByName projs = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_projs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.ProjByName avg = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_avg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProjectionRep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GetProjectionRep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.ProjByName projs = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::projs(this), target, stream);
  }

  // optional .fantasybit.ProjByName avg = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::avg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GetProjectionRep)
  return target;
}

size_t GetProjectionRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GetProjectionRep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .fantasybit.ProjByName projs = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *projs_);
    }

    // optional .fantasybit.ProjByName avg = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avg_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProjectionRep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GetProjectionRep)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProjectionRep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProjectionRep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GetProjectionRep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GetProjectionRep)
    MergeFrom(*source);
  }
}

void GetProjectionRep::MergeFrom(const GetProjectionRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GetProjectionRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_projs()->::fantasybit::ProjByName::MergeFrom(from._internal_projs());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_avg()->::fantasybit::ProjByName::MergeFrom(from._internal_avg());
    }
  }
}

void GetProjectionRep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GetProjectionRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProjectionRep::CopyFrom(const GetProjectionRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GetProjectionRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProjectionRep::IsInitialized() const {
  return true;
}

void GetProjectionRep::InternalSwap(GetProjectionRep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetProjectionRep, avg_)
      + sizeof(GetProjectionRep::avg_)
      - PROTOBUF_FIELD_OFFSET(GetProjectionRep, projs_)>(
          reinterpret_cast<char*>(&projs_),
          reinterpret_cast<char*>(&other->projs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProjectionRep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyValue::InitAsDefaultInstance() {
}
class KeyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyValue>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

KeyValue::KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.KeyValue)
}

void KeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValue_StateData_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:fantasybit.KeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyValue::ArenaDtor(void* object) {
  KeyValue* _this = reinterpret_cast< KeyValue* >(object);
  (void)_this;
}
void KeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValue& KeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValue_StateData_2eproto.base);
  return *internal_default_instance();
}


void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes key = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes value = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_key(), target);
  }

  // optional bytes value = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.KeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes key = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key());
    }

    // optional bytes value = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.KeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void KeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Bootstrap::InitAsDefaultInstance() {
}
class Bootstrap::_Internal {
 public:
  using HasBits = decltype(std::declval<Bootstrap>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_blocknum(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gamemetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playermetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fnamemetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_previd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gameresultroot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_posmetaroot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Bootstrap::Bootstrap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Bootstrap)
}
Bootstrap::Bootstrap(const Bootstrap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  gamemetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamemetaroot()) {
    gamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamemetaroot(),
      GetArena());
  }
  playermetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playermetaroot()) {
    playermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playermetaroot(),
      GetArena());
  }
  fnamemetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fnamemetaroot()) {
    fnamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fnamemetaroot(),
      GetArena());
  }
  previd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_previd()) {
    previd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_previd(),
      GetArena());
  }
  gameresultroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameresultroot()) {
    gameresultroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameresultroot(),
      GetArena());
  }
  posmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_posmetaroot()) {
    posmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_posmetaroot(),
      GetArena());
  }
  ::memcpy(&blocknum_, &from.blocknum_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_) -
    reinterpret_cast<char*>(&blocknum_)) + sizeof(season_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Bootstrap)
}

void Bootstrap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bootstrap_StateData_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamemetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playermetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fnamemetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameresultroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posmetaroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&blocknum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&blocknum_)) + sizeof(season_));
}

Bootstrap::~Bootstrap() {
  // @@protoc_insertion_point(destructor:fantasybit.Bootstrap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bootstrap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamemetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playermetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fnamemetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameresultroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posmetaroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Bootstrap::ArenaDtor(void* object) {
  Bootstrap* _this = reinterpret_cast< Bootstrap* >(object);
  (void)_this;
}
void Bootstrap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bootstrap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bootstrap& Bootstrap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bootstrap_StateData_2eproto.base);
  return *internal_default_instance();
}


void Bootstrap::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Bootstrap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gamemetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      playermetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      fnamemetaroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      previd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      gameresultroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      posmetaroot_.ClearNonDefaultToEmpty();
    }
  }
  blocknum_ = 0;
  if (cached_has_bits & 0x00000300u) {
    ::memset(&week_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_) -
        reinterpret_cast<char*>(&week_)) + sizeof(season_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bootstrap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Bootstrap.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 blocknum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_blocknum(&has_bits);
          blocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 week = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 season = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gamemetaroot = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_gamemetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes playermetaroot = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_playermetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes fnamemetaroot = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_fnamemetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes previd = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_previd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes gameresultroot = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_gameresultroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes posmetaroot = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_posmetaroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bootstrap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Bootstrap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Bootstrap.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional int32 blocknum = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_blocknum(), target);
  }

  // optional int32 week = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_week(), target);
  }

  // optional int32 season = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_season(), target);
  }

  // optional bytes gamemetaroot = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_gamemetaroot(), target);
  }

  // optional bytes playermetaroot = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_playermetaroot(), target);
  }

  // optional bytes fnamemetaroot = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_fnamemetaroot(), target);
  }

  // optional bytes previd = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_previd(), target);
  }

  // optional bytes gameresultroot = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        50, this->_internal_gameresultroot(), target);
  }

  // optional bytes posmetaroot = 60;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_posmetaroot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Bootstrap)
  return target;
}

size_t Bootstrap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Bootstrap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional bytes gamemetaroot = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gamemetaroot());
    }

    // optional bytes playermetaroot = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_playermetaroot());
    }

    // optional bytes fnamemetaroot = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fnamemetaroot());
    }

    // optional bytes previd = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_previd());
    }

    // optional bytes gameresultroot = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gameresultroot());
    }

    // optional bytes posmetaroot = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_posmetaroot());
    }

    // optional int32 blocknum = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_blocknum());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 week = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_week());
    }

    // optional int32 season = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_season());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bootstrap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Bootstrap)
  GOOGLE_DCHECK_NE(&from, this);
  const Bootstrap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bootstrap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Bootstrap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Bootstrap)
    MergeFrom(*source);
  }
}

void Bootstrap::MergeFrom(const Bootstrap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Bootstrap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gamemetaroot(from._internal_gamemetaroot());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_playermetaroot(from._internal_playermetaroot());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_fnamemetaroot(from._internal_fnamemetaroot());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_previd(from._internal_previd());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_gameresultroot(from._internal_gameresultroot());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_posmetaroot(from._internal_posmetaroot());
    }
    if (cached_has_bits & 0x00000080u) {
      blocknum_ = from.blocknum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000200u) {
      season_ = from.season_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Bootstrap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Bootstrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bootstrap::CopyFrom(const Bootstrap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Bootstrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bootstrap::IsInitialized() const {
  return true;
}

void Bootstrap::InternalSwap(Bootstrap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamemetaroot_.Swap(&other->gamemetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playermetaroot_.Swap(&other->playermetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fnamemetaroot_.Swap(&other->fnamemetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previd_.Swap(&other->previd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gameresultroot_.Swap(&other->gameresultroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  posmetaroot_.Swap(&other->posmetaroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bootstrap, season_)
      + sizeof(Bootstrap::season_)
      - PROTOBUF_FIELD_OFFSET(Bootstrap, blocknum_)>(
          reinterpret_cast<char*>(&blocknum_),
          reinterpret_cast<char*>(&other->blocknum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bootstrap::GetMetadata() const {
  return GetMetadataStatic();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGlobalStateRep::kRepFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetGlobalStateRep >, 11, false >
  GetGlobalStateRep::rep(kRepFieldNumber, ::fantasybit::GetGlobalStateRep::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetScheduleRep::kRepFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetScheduleRep >, 11, false >
  GetScheduleRep::rep(kRepFieldNumber, ::fantasybit::GetScheduleRep::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckNameReq::kReqFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::CheckNameReq >, 11, false >
  CheckNameReq::req(kReqFieldNumber, ::fantasybit::CheckNameReq::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckNameRep::kRepFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::CheckNameRep >, 11, false >
  CheckNameRep::rep(kRepFieldNumber, ::fantasybit::CheckNameRep::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pk2FnameReq::kReqFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::Pk2FnameReq >, 11, false >
  Pk2FnameReq::req(kReqFieldNumber, ::fantasybit::Pk2FnameReq::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pk2FnameRep::kRepFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::Pk2FnameRep >, 11, false >
  Pk2FnameRep::rep(kRepFieldNumber, ::fantasybit::Pk2FnameRep::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeReq::kReqFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::SubscribeReq >, 11, false >
  SubscribeReq::req(kReqFieldNumber, ::fantasybit::SubscribeReq::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameStatusReq::kReqFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::NameStatusReq >, 11, false >
  NameStatusReq::req(kReqFieldNumber, ::fantasybit::NameStatusReq::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameStatusRep::kRepFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::NameStatusRep >, 11, false >
  NameStatusRep::rep(kRepFieldNumber, ::fantasybit::NameStatusRep::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAllNamesRep::kRepFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetAllNamesRep >, 11, false >
  GetAllNamesRep::rep(kRepFieldNumber, ::fantasybit::GetAllNamesRep::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCurrRostersRep::kRepFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetCurrRostersRep >, 11, false >
  GetCurrRostersRep::rep(kRepFieldNumber, ::fantasybit::GetCurrRostersRep::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetROWMarketRep::kRepFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetROWMarketRep >, 11, false >
  GetROWMarketRep::rep(kRepFieldNumber, ::fantasybit::GetROWMarketRep::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDepthReq::kReqFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetDepthReq >, 11, false >
  GetDepthReq::req(kReqFieldNumber, ::fantasybit::GetDepthReq::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDepthRep::kRepFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetDepthRep >, 11, false >
  GetDepthRep::rep(kRepFieldNumber, ::fantasybit::GetDepthRep::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOrdersRep::kRepFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetOrdersRep >, 11, false >
  GetOrdersRep::rep(kRepFieldNumber, ::fantasybit::GetOrdersRep::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOrdersReq::kReqFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetOrdersReq >, 11, false >
  GetOrdersReq::req(kReqFieldNumber, ::fantasybit::GetOrdersReq::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProjectionReq::kReqFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetProjectionReq >, 11, false >
  GetProjectionReq::req(kReqFieldNumber, ::fantasybit::GetProjectionReq::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProjectionRep::kRepFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetProjectionRep >, 11, false >
  GetProjectionRep::rep(kRepFieldNumber, ::fantasybit::GetProjectionRep::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fantasybit::BlockMeta* Arena::CreateMaybeMessage< ::fantasybit::BlockMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::BlockMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::TxMeta* Arena::CreateMaybeMessage< ::fantasybit::TxMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::TxMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::TrMeta* Arena::CreateMaybeMessage< ::fantasybit::TrMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::TrMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GameMeta* Arena::CreateMaybeMessage< ::fantasybit::GameMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GameMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::DataMeta* Arena::CreateMaybeMessage< ::fantasybit::DataMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::DataMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::LeaderBoardMeta* Arena::CreateMaybeMessage< ::fantasybit::LeaderBoardMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::LeaderBoardMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::FantasyNameBalMeta* Arena::CreateMaybeMessage< ::fantasybit::FantasyNameBalMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::FantasyNameBalMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::FantasyNameState* Arena::CreateMaybeMessage< ::fantasybit::FantasyNameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::FantasyNameState >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::WeekGameStatusMeta* Arena::CreateMaybeMessage< ::fantasybit::WeekGameStatusMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::WeekGameStatusMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::InGameProjMeta* Arena::CreateMaybeMessage< ::fantasybit::InGameProjMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::InGameProjMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GameResultsMeta* Arena::CreateMaybeMessage< ::fantasybit::GameResultsMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GameResultsMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GameStatusMeta* Arena::CreateMaybeMessage< ::fantasybit::GameStatusMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GameStatusMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::TeamProjMeta* Arena::CreateMaybeMessage< ::fantasybit::TeamProjMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::TeamProjMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::TeamResultMeta* Arena::CreateMaybeMessage< ::fantasybit::TeamResultMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::TeamResultMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GamePlayerProjMeta* Arena::CreateMaybeMessage< ::fantasybit::GamePlayerProjMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GamePlayerProjMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ProjMeta* Arena::CreateMaybeMessage< ::fantasybit::ProjMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ProjMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::PosMeta* Arena::CreateMaybeMessage< ::fantasybit::PosMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PosMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::PlayerResultMeta* Arena::CreateMaybeMessage< ::fantasybit::PlayerResultMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PlayerResultMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::PlayerGameStats* Arena::CreateMaybeMessage< ::fantasybit::PlayerGameStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PlayerGameStats >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::AwardMeta* Arena::CreateMaybeMessage< ::fantasybit::AwardMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::AwardMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::PnlMeta* Arena::CreateMaybeMessage< ::fantasybit::PnlMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PnlMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::PlayerMarketState* Arena::CreateMaybeMessage< ::fantasybit::PlayerMarketState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PlayerMarketState >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::LimitBookMeta* Arena::CreateMaybeMessage< ::fantasybit::LimitBookMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::LimitBookMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::MarketTicMeta* Arena::CreateMaybeMessage< ::fantasybit::MarketTicMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::MarketTicMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::OrderMeta* Arena::CreateMaybeMessage< ::fantasybit::OrderMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::OrderMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::OrderFillMeta* Arena::CreateMaybeMessage< ::fantasybit::OrderFillMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::OrderFillMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GlobalStateMeta* Arena::CreateMaybeMessage< ::fantasybit::GlobalStateMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GlobalStateMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::PlayerMeta* Arena::CreateMaybeMessage< ::fantasybit::PlayerMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PlayerMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::TeamMeta* Arena::CreateMaybeMessage< ::fantasybit::TeamMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::TeamMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::pbstate* Arena::CreateMaybeMessage< ::fantasybit::pbstate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::pbstate >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::MerkleTree* Arena::CreateMaybeMessage< ::fantasybit::MerkleTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::MerkleTree >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::NewPlayerModel* Arena::CreateMaybeMessage< ::fantasybit::NewPlayerModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::NewPlayerModel >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::WsReq* Arena::CreateMaybeMessage< ::fantasybit::WsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::WsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::WSReply* Arena::CreateMaybeMessage< ::fantasybit::WSReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::WSReply >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GetGlobalStateRep* Arena::CreateMaybeMessage< ::fantasybit::GetGlobalStateRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GetGlobalStateRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GetScheduleRep* Arena::CreateMaybeMessage< ::fantasybit::GetScheduleRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GetScheduleRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::CheckNameReq* Arena::CreateMaybeMessage< ::fantasybit::CheckNameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::CheckNameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::CheckNameRep* Arena::CreateMaybeMessage< ::fantasybit::CheckNameRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::CheckNameRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Pk2FnameReq* Arena::CreateMaybeMessage< ::fantasybit::Pk2FnameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Pk2FnameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Pk2FnameRep* Arena::CreateMaybeMessage< ::fantasybit::Pk2FnameRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Pk2FnameRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::SubscribeReq* Arena::CreateMaybeMessage< ::fantasybit::SubscribeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::SubscribeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::NameStatusReq* Arena::CreateMaybeMessage< ::fantasybit::NameStatusReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::NameStatusReq >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::NameStatusRep* Arena::CreateMaybeMessage< ::fantasybit::NameStatusRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::NameStatusRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GetAllNamesRep* Arena::CreateMaybeMessage< ::fantasybit::GetAllNamesRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GetAllNamesRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::TeamRoster* Arena::CreateMaybeMessage< ::fantasybit::TeamRoster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::TeamRoster >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GameDataRoster* Arena::CreateMaybeMessage< ::fantasybit::GameDataRoster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GameDataRoster >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GetCurrRostersRep* Arena::CreateMaybeMessage< ::fantasybit::GetCurrRostersRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GetCurrRostersRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ROWMarket* Arena::CreateMaybeMessage< ::fantasybit::ROWMarket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ROWMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GetROWMarketRep* Arena::CreateMaybeMessage< ::fantasybit::GetROWMarketRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GetROWMarketRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GetDepthReq* Arena::CreateMaybeMessage< ::fantasybit::GetDepthReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GetDepthReq >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GetDepthRep* Arena::CreateMaybeMessage< ::fantasybit::GetDepthRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GetDepthRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::AllOdersSymbol* Arena::CreateMaybeMessage< ::fantasybit::AllOdersSymbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::AllOdersSymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::AllOdersFname* Arena::CreateMaybeMessage< ::fantasybit::AllOdersFname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::AllOdersFname >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GetOrdersRep* Arena::CreateMaybeMessage< ::fantasybit::GetOrdersRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GetOrdersRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GetOrdersReq* Arena::CreateMaybeMessage< ::fantasybit::GetOrdersReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GetOrdersReq >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GetProjectionReq* Arena::CreateMaybeMessage< ::fantasybit::GetProjectionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GetProjectionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::PlayerProj* Arena::CreateMaybeMessage< ::fantasybit::PlayerProj >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::PlayerProj >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ProjByName* Arena::CreateMaybeMessage< ::fantasybit::ProjByName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ProjByName >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GetProjectionRep* Arena::CreateMaybeMessage< ::fantasybit::GetProjectionRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GetProjectionRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::KeyValue* Arena::CreateMaybeMessage< ::fantasybit::KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Bootstrap* Arena::CreateMaybeMessage< ::fantasybit::Bootstrap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Bootstrap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
