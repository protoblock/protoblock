// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExData.proto

#include "ExData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BookPos_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractOHLC_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthItem_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketQuote_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketTicker_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderCore_ExData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettlePos_ExData_2eproto;
namespace fantasybit {
class SettlePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SettlePos> _instance;
} _SettlePos_default_instance_;
class StorePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorePos> _instance;
} _StorePos_default_instance_;
class BookPosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BookPos> _instance;
} _BookPos_default_instance_;
class GameSettlePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameSettlePos> _instance;
} _GameSettlePos_default_instance_;
class OrderCoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderCore> _instance;
} _OrderCore_default_instance_;
class OrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Order> _instance;
} _Order_default_instance_;
class OrderFillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderFill> _instance;
} _OrderFill_default_instance_;
class MarketTickerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketTicker> _instance;
} _MarketTicker_default_instance_;
class TradeTicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeTic> _instance;
} _TradeTic_default_instance_;
class DepthFeedDeltaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthFeedDelta> _instance;
} _DepthFeedDelta_default_instance_;
class ContractOHLCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractOHLC> _instance;
} _ContractOHLC_default_instance_;
class DepthItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthItem> _instance;
} _DepthItem_default_instance_;
class BookDeltaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BookDelta> _instance;
} _BookDelta_default_instance_;
class MarketQuoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketQuote> _instance;
} _MarketQuote_default_instance_;
class MarketSnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketSnapshot> _instance;
} _MarketSnapshot_default_instance_;
class FutContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FutContract> _instance;
} _FutContract_default_instance_;
}  // namespace fantasybit
static void InitDefaultsscc_info_BookDelta_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_BookDelta_default_instance_;
    new (ptr) ::fantasybit::BookDelta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::BookDelta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BookDelta_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_BookDelta_ExData_2eproto}, {
      &scc_info_OrderCore_ExData_2eproto.base,
      &scc_info_ContractOHLC_ExData_2eproto.base,
      &scc_info_Order_ExData_2eproto.base,
      &scc_info_MarketTicker_ExData_2eproto.base,}};

static void InitDefaultsscc_info_BookPos_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_BookPos_default_instance_;
    new (ptr) ::fantasybit::BookPos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::BookPos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BookPos_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BookPos_ExData_2eproto}, {
      &scc_info_SettlePos_ExData_2eproto.base,}};

static void InitDefaultsscc_info_ContractOHLC_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ContractOHLC_default_instance_;
    new (ptr) ::fantasybit::ContractOHLC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ContractOHLC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractOHLC_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractOHLC_ExData_2eproto}, {}};

static void InitDefaultsscc_info_DepthFeedDelta_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_DepthFeedDelta_default_instance_;
    new (ptr) ::fantasybit::DepthFeedDelta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::DepthFeedDelta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthFeedDelta_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepthFeedDelta_ExData_2eproto}, {}};

static void InitDefaultsscc_info_DepthItem_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_DepthItem_default_instance_;
    new (ptr) ::fantasybit::DepthItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::DepthItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthItem_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepthItem_ExData_2eproto}, {}};

static void InitDefaultsscc_info_FutContract_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_FutContract_default_instance_;
    new (ptr) ::fantasybit::FutContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FutContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FutContract_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FutContract_ExData_2eproto}, {}};

static void InitDefaultsscc_info_GameSettlePos_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GameSettlePos_default_instance_;
    new (ptr) ::fantasybit::GameSettlePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameSettlePos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameSettlePos_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameSettlePos_ExData_2eproto}, {
      &scc_info_BookPos_ExData_2eproto.base,}};

static void InitDefaultsscc_info_MarketQuote_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_MarketQuote_default_instance_;
    new (ptr) ::fantasybit::MarketQuote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MarketQuote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketQuote_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketQuote_ExData_2eproto}, {}};

static void InitDefaultsscc_info_MarketSnapshot_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_MarketSnapshot_default_instance_;
    new (ptr) ::fantasybit::MarketSnapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MarketSnapshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MarketSnapshot_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MarketSnapshot_ExData_2eproto}, {
      &scc_info_DepthItem_ExData_2eproto.base,
      &scc_info_ContractOHLC_ExData_2eproto.base,
      &scc_info_MarketQuote_ExData_2eproto.base,}};

static void InitDefaultsscc_info_MarketTicker_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_MarketTicker_default_instance_;
    new (ptr) ::fantasybit::MarketTicker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MarketTicker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketTicker_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketTicker_ExData_2eproto}, {}};

static void InitDefaultsscc_info_Order_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Order_default_instance_;
    new (ptr) ::fantasybit::Order();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Order::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Order_ExData_2eproto}, {
      &scc_info_OrderCore_ExData_2eproto.base,}};

static void InitDefaultsscc_info_OrderCore_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_OrderCore_default_instance_;
    new (ptr) ::fantasybit::OrderCore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::OrderCore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderCore_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderCore_ExData_2eproto}, {}};

static void InitDefaultsscc_info_OrderFill_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_OrderFill_default_instance_;
    new (ptr) ::fantasybit::OrderFill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::OrderFill::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderFill_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderFill_ExData_2eproto}, {
      &scc_info_Order_ExData_2eproto.base,}};

static void InitDefaultsscc_info_SettlePos_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_SettlePos_default_instance_;
    new (ptr) ::fantasybit::SettlePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SettlePos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettlePos_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SettlePos_ExData_2eproto}, {}};

static void InitDefaultsscc_info_StorePos_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_StorePos_default_instance_;
    new (ptr) ::fantasybit::StorePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::StorePos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StorePos_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StorePos_ExData_2eproto}, {}};

static void InitDefaultsscc_info_TradeTic_ExData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_TradeTic_default_instance_;
    new (ptr) ::fantasybit::TradeTic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TradeTic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeTic_ExData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradeTic_ExData_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ExData_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ExData_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ExData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ExData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fantasybit::SettlePos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SettlePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::SettlePos, pk_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SettlePos, qty_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SettlePos, price_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::StorePos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::StorePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::StorePos, qty_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::StorePos, price_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookPos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookPos, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookPos, positions_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookPos, symbol_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameSettlePos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameSettlePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameSettlePos, gameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameSettlePos, home_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameSettlePos, away_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderCore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderCore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderCore, buyside_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderCore, size_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderCore, price_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Order, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Order, refnum_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Order, core_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFill, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFill, left_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFill, fillprice_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFill, fillsize_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::OrderFill, timestamp_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicker, type_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicker, symbol_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicker, size_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketTicker, price_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::TradeTic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TradeTic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::TradeTic, symbol_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TradeTic, size_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TradeTic, price_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TradeTic, ishigh_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TradeTic, islow_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TradeTic, change_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::TradeTic, tic_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthFeedDelta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthFeedDelta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthFeedDelta, symbol_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthFeedDelta, isbid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthFeedDelta, size_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthFeedDelta, price_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ContractOHLC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ContractOHLC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ContractOHLC, symbol_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ContractOHLC, open_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ContractOHLC, high_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ContractOHLC, low_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ContractOHLC, close_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ContractOHLC, volume_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ContractOHLC, change_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthItem, level_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthItem, b_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthItem, a_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthItem, bs_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::DepthItem, as_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, fantasy_name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, seqnum_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, newnew_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, ohlc_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, removes_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, level2tic_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, level1tic_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, blocknum_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::BookDelta, symbol_),
  0,
  5,
  1,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  6,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketQuote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketQuote, bs_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketQuote, b_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketQuote, a_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketQuote, as_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketQuote, l_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketQuote, ls_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketQuote, udn_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketSnapshot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketSnapshot, symbol_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketSnapshot, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketSnapshot, depth_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketSnapshot, ohlc_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketSnapshot, quote_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::MarketSnapshot, blocknum_),
  0,
  3,
  ~0u,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::fantasybit::FutContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FutContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::FutContract, type_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FutContract, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FutContract, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FutContract, symbol_),
  3,
  1,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::fantasybit::SettlePos)},
  { 11, 18, sizeof(::fantasybit::StorePos)},
  { 20, 28, sizeof(::fantasybit::BookPos)},
  { 31, 39, sizeof(::fantasybit::GameSettlePos)},
  { 42, 50, sizeof(::fantasybit::OrderCore)},
  { 53, 60, sizeof(::fantasybit::Order)},
  { 62, 71, sizeof(::fantasybit::OrderFill)},
  { 75, 84, sizeof(::fantasybit::MarketTicker)},
  { 88, 100, sizeof(::fantasybit::TradeTic)},
  { 107, 116, sizeof(::fantasybit::DepthFeedDelta)},
  { 120, 132, sizeof(::fantasybit::ContractOHLC)},
  { 139, 149, sizeof(::fantasybit::DepthItem)},
  { 154, 169, sizeof(::fantasybit::BookDelta)},
  { 179, 191, sizeof(::fantasybit::MarketQuote)},
  { 198, 209, sizeof(::fantasybit::MarketSnapshot)},
  { 215, 224, sizeof(::fantasybit::FutContract)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_SettlePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_StorePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_BookPos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GameSettlePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_OrderCore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_OrderFill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_MarketTicker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_TradeTic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_DepthFeedDelta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ContractOHLC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_DepthItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_BookDelta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_MarketQuote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_MarketSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_FutContract_default_instance_),
};

const char descriptor_table_protodef_ExData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014ExData.proto\022\nfantasybit\"3\n\tSettlePos\022"
  "\n\n\002pk\030\n \001(\t\022\013\n\003qty\030\024 \001(\005\022\r\n\005price\030\031 \001(\005\""
  "&\n\010StorePos\022\013\n\003qty\030\024 \001(\005\022\r\n\005price\030\031 \001(\005\""
  "U\n\007BookPos\022\020\n\010playerid\030\036 \001(\t\022(\n\tposition"
  "s\030( \003(\0132\025.fantasybit.SettlePos\022\016\n\006symbol"
  "\0302 \001(\t\"e\n\rGameSettlePos\022\016\n\006gameid\030\n \001(\t\022"
  "!\n\004home\030\024 \003(\0132\023.fantasybit.BookPos\022!\n\004aw"
  "ay\030\036 \003(\0132\023.fantasybit.BookPos\"9\n\tOrderCo"
  "re\022\017\n\007buyside\030\n \001(\010\022\014\n\004size\030\024 \001(\005\022\r\n\005pri"
  "ce\030\036 \001(\005\"<\n\005Order\022\016\n\006refnum\030\n \001(\005\022#\n\004cor"
  "e\030\024 \001(\0132\025.fantasybit.OrderCore\"d\n\tOrderF"
  "ill\022\037\n\004left\030\n \001(\0132\021.fantasybit.Order\022\021\n\t"
  "fillprice\030\024 \001(\005\022\020\n\010fillsize\030\036 \001(\005\022\021\n\ttim"
  "estamp\030( \001(\005\"\214\001\n\014MarketTicker\022+\n\004type\030\001 "
  "\001(\0162\035.fantasybit.MarketTicker.Type\022\016\n\006sy"
  "mbol\030\002 \001(\t\022\014\n\004size\030\024 \001(\005\022\r\n\005price\030\036 \001(\005\""
  "\"\n\004Type\022\007\n\003BID\020\001\022\007\n\003ASK\020\002\022\010\n\004LAST\020\003\"s\n\010T"
  "radeTic\022\016\n\006symbol\030\002 \001(\t\022\014\n\004size\030\024 \001(\005\022\r\n"
  "\005price\030\036 \001(\005\022\016\n\006ishigh\030( \001(\005\022\r\n\005islow\030- "
  "\001(\005\022\016\n\006change\0302 \001(\005\022\013\n\003tic\030< \001(\005\"L\n\016Dept"
  "hFeedDelta\022\016\n\006symbol\030\001 \001(\t\022\r\n\005isbid\030\n \001("
  "\010\022\014\n\004size\030\024 \001(\005\022\r\n\005price\030\036 \001(\005\"v\n\014Contra"
  "ctOHLC\022\016\n\006symbol\030\n \001(\t\022\014\n\004open\030\024 \001(\005\022\014\n\004"
  "high\030\036 \001(\005\022\013\n\003low\030( \001(\005\022\r\n\005close\0302 \001(\005\022\016"
  "\n\006volume\030< \001(\005\022\016\n\006change\030F \001(\005\"H\n\tDepthI"
  "tem\022\r\n\005level\030\n \001(\005\022\t\n\001b\030\036 \001(\005\022\t\n\001a\030( \001(\005"
  "\022\n\n\002bs\0302 \001(\005\022\n\n\002as\030< \001(\005\"\262\002\n\tBookDelta\022\024"
  "\n\014fantasy_name\030\n \001(\t\022\016\n\006seqnum\030\024 \001(\005\022\020\n\010"
  "playerid\030\036 \001(\t\022%\n\006newnew\030( \001(\0132\025.fantasy"
  "bit.OrderCore\022&\n\004ohlc\030) \001(\0132\030.fantasybit"
  ".ContractOHLC\022\"\n\007removes\0302 \003(\0132\021.fantasy"
  "bit.Order\022+\n\tlevel2tic\030< \003(\0132\030.fantasybi"
  "t.MarketTicker\022+\n\tlevel1tic\030F \003(\0132\030.fant"
  "asybit.MarketTicker\022\020\n\010blocknum\030P \001(\005\022\016\n"
  "\006symbol\030Z \001(\t\"_\n\013MarketQuote\022\n\n\002bs\030\n \001(\005"
  "\022\t\n\001b\030\024 \001(\005\022\t\n\001a\030\036 \001(\005\022\n\n\002as\030( \001(\005\022\t\n\001l\030"
  "2 \001(\005\022\n\n\002ls\030< \001(\005\022\013\n\003udn\030F \001(\005\"\266\001\n\016Marke"
  "tSnapshot\022\016\n\006symbol\030\n \001(\t\022\014\n\004week\030\013 \001(\005\022"
  "$\n\005depth\030F \003(\0132\025.fantasybit.DepthItem\022&\n"
  "\004ohlc\030\024 \001(\0132\030.fantasybit.ContractOHLC\022&\n"
  "\005quote\030\036 \001(\0132\027.fantasybit.MarketQuote\022\020\n"
  "\010blocknum\030( \001(\005\"\233\001\n\013FutContract\022*\n\004type\030"
  "\n \001(\0162\034.fantasybit.FutContract.Type\022\016\n\006s"
  "eason\030\024 \001(\005\022\014\n\004week\030\036 \001(\005\022\016\n\006symbol\030( \001("
  "\t\"2\n\004Type\022\n\n\006WEEKLY\020\001\022\n\n\006SEASON\020\002\022\007\n\003ROW"
  "\020\003\022\t\n\005OTHER\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ExData_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ExData_2eproto_sccs[16] = {
  &scc_info_BookDelta_ExData_2eproto.base,
  &scc_info_BookPos_ExData_2eproto.base,
  &scc_info_ContractOHLC_ExData_2eproto.base,
  &scc_info_DepthFeedDelta_ExData_2eproto.base,
  &scc_info_DepthItem_ExData_2eproto.base,
  &scc_info_FutContract_ExData_2eproto.base,
  &scc_info_GameSettlePos_ExData_2eproto.base,
  &scc_info_MarketQuote_ExData_2eproto.base,
  &scc_info_MarketSnapshot_ExData_2eproto.base,
  &scc_info_MarketTicker_ExData_2eproto.base,
  &scc_info_Order_ExData_2eproto.base,
  &scc_info_OrderCore_ExData_2eproto.base,
  &scc_info_OrderFill_ExData_2eproto.base,
  &scc_info_SettlePos_ExData_2eproto.base,
  &scc_info_StorePos_ExData_2eproto.base,
  &scc_info_TradeTic_ExData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ExData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ExData_2eproto = {
  false, false, descriptor_table_protodef_ExData_2eproto, "ExData.proto", 1813,
  &descriptor_table_ExData_2eproto_once, descriptor_table_ExData_2eproto_sccs, descriptor_table_ExData_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_ExData_2eproto::offsets,
  file_level_metadata_ExData_2eproto, 16, file_level_enum_descriptors_ExData_2eproto, file_level_service_descriptors_ExData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ExData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ExData_2eproto)), true);
namespace fantasybit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketTicker_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ExData_2eproto);
  return file_level_enum_descriptors_ExData_2eproto[0];
}
bool MarketTicker_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MarketTicker_Type MarketTicker::BID;
constexpr MarketTicker_Type MarketTicker::ASK;
constexpr MarketTicker_Type MarketTicker::LAST;
constexpr MarketTicker_Type MarketTicker::Type_MIN;
constexpr MarketTicker_Type MarketTicker::Type_MAX;
constexpr int MarketTicker::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FutContract_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ExData_2eproto);
  return file_level_enum_descriptors_ExData_2eproto[1];
}
bool FutContract_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FutContract_Type FutContract::WEEKLY;
constexpr FutContract_Type FutContract::SEASON;
constexpr FutContract_Type FutContract::ROW;
constexpr FutContract_Type FutContract::OTHER;
constexpr FutContract_Type FutContract::Type_MIN;
constexpr FutContract_Type FutContract::Type_MAX;
constexpr int FutContract::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SettlePos::InitAsDefaultInstance() {
}
class SettlePos::_Internal {
 public:
  using HasBits = decltype(std::declval<SettlePos>()._has_bits_);
  static void set_has_pk(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SettlePos::SettlePos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.SettlePos)
}
SettlePos::SettlePos(const SettlePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pk()) {
    pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pk(),
      GetArena());
  }
  ::memcpy(&qty_, &from.qty_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&qty_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.SettlePos)
}

void SettlePos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SettlePos_ExData_2eproto.base);
  pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&qty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&qty_)) + sizeof(price_));
}

SettlePos::~SettlePos() {
  // @@protoc_insertion_point(destructor:fantasybit.SettlePos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SettlePos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SettlePos::ArenaDtor(void* object) {
  SettlePos* _this = reinterpret_cast< SettlePos* >(object);
  (void)_this;
}
void SettlePos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SettlePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettlePos& SettlePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SettlePos_ExData_2eproto.base);
  return *internal_default_instance();
}


void SettlePos::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SettlePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pk_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&qty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&qty_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettlePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_pk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.SettlePos.pk");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 qty = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_qty(&has_bits);
          qty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 price = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettlePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SettlePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pk = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pk().data(), static_cast<int>(this->_internal_pk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.SettlePos.pk");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_pk(), target);
  }

  // optional int32 qty = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_qty(), target);
  }

  // optional int32 price = 25;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SettlePos)
  return target;
}

size_t SettlePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SettlePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string pk = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pk());
    }

    // optional int32 qty = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_qty());
    }

    // optional int32 price = 25;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettlePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SettlePos)
  GOOGLE_DCHECK_NE(&from, this);
  const SettlePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettlePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SettlePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SettlePos)
    MergeFrom(*source);
  }
}

void SettlePos::MergeFrom(const SettlePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SettlePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pk(from._internal_pk());
    }
    if (cached_has_bits & 0x00000002u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SettlePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SettlePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettlePos::CopyFrom(const SettlePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SettlePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettlePos::IsInitialized() const {
  return true;
}

void SettlePos::InternalSwap(SettlePos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pk_.Swap(&other->pk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SettlePos, price_)
      + sizeof(SettlePos::price_)
      - PROTOBUF_FIELD_OFFSET(SettlePos, qty_)>(
          reinterpret_cast<char*>(&qty_),
          reinterpret_cast<char*>(&other->qty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SettlePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StorePos::InitAsDefaultInstance() {
}
class StorePos::_Internal {
 public:
  using HasBits = decltype(std::declval<StorePos>()._has_bits_);
  static void set_has_qty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StorePos::StorePos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.StorePos)
}
StorePos::StorePos(const StorePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&qty_, &from.qty_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&qty_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.StorePos)
}

void StorePos::SharedCtor() {
  ::memset(&qty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&qty_)) + sizeof(price_));
}

StorePos::~StorePos() {
  // @@protoc_insertion_point(destructor:fantasybit.StorePos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StorePos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StorePos::ArenaDtor(void* object) {
  StorePos* _this = reinterpret_cast< StorePos* >(object);
  (void)_this;
}
void StorePos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorePos& StorePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorePos_ExData_2eproto.base);
  return *internal_default_instance();
}


void StorePos::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.StorePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&qty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&qty_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 qty = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_qty(&has_bits);
          qty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 price = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.StorePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 qty = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_qty(), target);
  }

  // optional int32 price = 25;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.StorePos)
  return target;
}

size_t StorePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.StorePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 qty = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_qty());
    }

    // optional int32 price = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.StorePos)
  GOOGLE_DCHECK_NE(&from, this);
  const StorePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.StorePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.StorePos)
    MergeFrom(*source);
  }
}

void StorePos::MergeFrom(const StorePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.StorePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000002u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StorePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.StorePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePos::CopyFrom(const StorePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.StorePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorePos::IsInitialized() const {
  return true;
}

void StorePos::InternalSwap(StorePos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StorePos, price_)
      + sizeof(StorePos::price_)
      - PROTOBUF_FIELD_OFFSET(StorePos, qty_)>(
          reinterpret_cast<char*>(&qty_),
          reinterpret_cast<char*>(&other->qty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StorePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BookPos::InitAsDefaultInstance() {
}
class BookPos::_Internal {
 public:
  using HasBits = decltype(std::declval<BookPos>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BookPos::BookPos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  positions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.BookPos)
}
BookPos::BookPos(const BookPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.BookPos)
}

void BookPos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BookPos_ExData_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BookPos::~BookPos() {
  // @@protoc_insertion_point(destructor:fantasybit.BookPos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BookPos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BookPos::ArenaDtor(void* object) {
  BookPos* _this = reinterpret_cast< BookPos* >(object);
  (void)_this;
}
void BookPos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BookPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BookPos& BookPos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BookPos_ExData_2eproto.base);
  return *internal_default_instance();
}


void BookPos::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.BookPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      symbol_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookPos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string playerid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.BookPos.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.SettlePos positions = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string symbol = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.BookPos.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BookPos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.BookPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 30;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.BookPos.playerid");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_playerid(), target);
  }

  // repeated .fantasybit.SettlePos positions = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_positions(i), target, stream);
  }

  // optional string symbol = 50;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.BookPos.symbol");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.BookPos)
  return target;
}

size_t BookPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.BookPos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.SettlePos positions = 40;
  total_size += 2UL * this->_internal_positions_size();
  for (const auto& msg : this->positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string playerid = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional string symbol = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BookPos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.BookPos)
  GOOGLE_DCHECK_NE(&from, this);
  const BookPos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BookPos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.BookPos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.BookPos)
    MergeFrom(*source);
  }
}

void BookPos::MergeFrom(const BookPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.BookPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_symbol(from._internal_symbol());
    }
  }
}

void BookPos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.BookPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BookPos::CopyFrom(const BookPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.BookPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookPos::IsInitialized() const {
  return true;
}

void BookPos::InternalSwap(BookPos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  positions_.InternalSwap(&other->positions_);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BookPos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameSettlePos::InitAsDefaultInstance() {
}
class GameSettlePos::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSettlePos>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GameSettlePos::GameSettlePos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  home_(arena),
  away_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GameSettlePos)
}
GameSettlePos::GameSettlePos(const GameSettlePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      home_(from.home_),
      away_(from.away_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameid()) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameSettlePos)
}

void GameSettlePos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameSettlePos_ExData_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameSettlePos::~GameSettlePos() {
  // @@protoc_insertion_point(destructor:fantasybit.GameSettlePos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameSettlePos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameSettlePos::ArenaDtor(void* object) {
  GameSettlePos* _this = reinterpret_cast< GameSettlePos* >(object);
  (void)_this;
}
void GameSettlePos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSettlePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSettlePos& GameSettlePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameSettlePos_ExData_2eproto.base);
  return *internal_default_instance();
}


void GameSettlePos::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameSettlePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  home_.Clear();
  away_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gameid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSettlePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GameSettlePos.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.BookPos home = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_home(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.BookPos away = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_away(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameSettlePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameSettlePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GameSettlePos.gameid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gameid(), target);
  }

  // repeated .fantasybit.BookPos home = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_home_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_home(i), target, stream);
  }

  // repeated .fantasybit.BookPos away = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_away_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_away(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameSettlePos)
  return target;
}

size_t GameSettlePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameSettlePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.BookPos home = 20;
  total_size += 2UL * this->_internal_home_size();
  for (const auto& msg : this->home_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fantasybit.BookPos away = 30;
  total_size += 2UL * this->_internal_away_size();
  for (const auto& msg : this->away_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string gameid = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSettlePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameSettlePos)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSettlePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameSettlePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameSettlePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameSettlePos)
    MergeFrom(*source);
  }
}

void GameSettlePos::MergeFrom(const GameSettlePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameSettlePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  home_.MergeFrom(from.home_);
  away_.MergeFrom(from.away_);
  if (from._internal_has_gameid()) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void GameSettlePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameSettlePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSettlePos::CopyFrom(const GameSettlePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameSettlePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSettlePos::IsInitialized() const {
  return true;
}

void GameSettlePos::InternalSwap(GameSettlePos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  home_.InternalSwap(&other->home_);
  away_.InternalSwap(&other->away_);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSettlePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderCore::InitAsDefaultInstance() {
}
class OrderCore::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderCore>()._has_bits_);
  static void set_has_buyside(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OrderCore::OrderCore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.OrderCore)
}
OrderCore::OrderCore(const OrderCore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&price_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.OrderCore)
}

void OrderCore::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&price_)) + sizeof(size_));
}

OrderCore::~OrderCore() {
  // @@protoc_insertion_point(destructor:fantasybit.OrderCore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderCore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrderCore::ArenaDtor(void* object) {
  OrderCore* _this = reinterpret_cast< OrderCore* >(object);
  (void)_this;
}
void OrderCore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderCore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderCore& OrderCore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderCore_ExData_2eproto.base);
  return *internal_default_instance();
}


void OrderCore::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.OrderCore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&price_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderCore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool buyside = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_buyside(&has_bits);
          buyside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 price = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderCore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.OrderCore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool buyside = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_buyside(), target);
  }

  // optional int32 size = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_size(), target);
  }

  // optional int32 price = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.OrderCore)
  return target;
}

size_t OrderCore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.OrderCore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 price = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

    // optional bool buyside = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 size = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderCore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.OrderCore)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderCore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderCore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.OrderCore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.OrderCore)
    MergeFrom(*source);
  }
}

void OrderCore::MergeFrom(const OrderCore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.OrderCore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000002u) {
      buyside_ = from.buyside_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderCore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.OrderCore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCore::CopyFrom(const OrderCore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.OrderCore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCore::IsInitialized() const {
  return true;
}

void OrderCore::InternalSwap(OrderCore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderCore, size_)
      + sizeof(OrderCore::size_)
      - PROTOBUF_FIELD_OFFSET(OrderCore, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderCore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Order::InitAsDefaultInstance() {
  ::fantasybit::_Order_default_instance_._instance.get_mutable()->core_ = const_cast< ::fantasybit::OrderCore*>(
      ::fantasybit::OrderCore::internal_default_instance());
}
class Order::_Internal {
 public:
  using HasBits = decltype(std::declval<Order>()._has_bits_);
  static void set_has_refnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::OrderCore& core(const Order* msg);
  static void set_has_core(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::fantasybit::OrderCore&
Order::_Internal::core(const Order* msg) {
  return *msg->core_;
}
Order::Order(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Order)
}
Order::Order(const Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_core()) {
    core_ = new ::fantasybit::OrderCore(*from.core_);
  } else {
    core_ = nullptr;
  }
  refnum_ = from.refnum_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.Order)
}

void Order::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Order_ExData_2eproto.base);
  ::memset(&core_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refnum_) -
      reinterpret_cast<char*>(&core_)) + sizeof(refnum_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:fantasybit.Order)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Order::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete core_;
}

void Order::ArenaDtor(void* object) {
  Order* _this = reinterpret_cast< Order* >(object);
  (void)_this;
}
void Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Order& Order::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Order_ExData_2eproto.base);
  return *internal_default_instance();
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(core_ != nullptr);
    core_->Clear();
  }
  refnum_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 refnum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_refnum(&has_bits);
          refnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.OrderCore core = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_core(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 refnum = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_refnum(), target);
  }

  // optional .fantasybit.OrderCore core = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::core(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Order)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .fantasybit.OrderCore core = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *core_);
    }

    // optional int32 refnum = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_refnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_core()->::fantasybit::OrderCore::MergeFrom(from._internal_core());
    }
    if (cached_has_bits & 0x00000002u) {
      refnum_ = from.refnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, refnum_)
      + sizeof(Order::refnum_)
      - PROTOBUF_FIELD_OFFSET(Order, core_)>(
          reinterpret_cast<char*>(&core_),
          reinterpret_cast<char*>(&other->core_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderFill::InitAsDefaultInstance() {
  ::fantasybit::_OrderFill_default_instance_._instance.get_mutable()->left_ = const_cast< ::fantasybit::Order*>(
      ::fantasybit::Order::internal_default_instance());
}
class OrderFill::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderFill>()._has_bits_);
  static const ::fantasybit::Order& left(const OrderFill* msg);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fillprice(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fillsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::fantasybit::Order&
OrderFill::_Internal::left(const OrderFill* msg) {
  return *msg->left_;
}
OrderFill::OrderFill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.OrderFill)
}
OrderFill::OrderFill(const OrderFill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left()) {
    left_ = new ::fantasybit::Order(*from.left_);
  } else {
    left_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&fillsize_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(fillsize_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.OrderFill)
}

void OrderFill::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderFill_ExData_2eproto.base);
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fillsize_) -
      reinterpret_cast<char*>(&left_)) + sizeof(fillsize_));
}

OrderFill::~OrderFill() {
  // @@protoc_insertion_point(destructor:fantasybit.OrderFill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderFill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete left_;
}

void OrderFill::ArenaDtor(void* object) {
  OrderFill* _this = reinterpret_cast< OrderFill* >(object);
  (void)_this;
}
void OrderFill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderFill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderFill& OrderFill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderFill_ExData_2eproto.base);
  return *internal_default_instance();
}


void OrderFill::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.OrderFill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(left_ != nullptr);
    left_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fillsize_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(fillsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderFill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.Order left = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fillprice = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_fillprice(&has_bits);
          fillprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fillsize = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_fillsize(&has_bits);
          fillsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 timestamp = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderFill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.OrderFill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.Order left = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::left(this), target, stream);
  }

  // optional int32 fillprice = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_fillprice(), target);
  }

  // optional int32 fillsize = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_fillsize(), target);
  }

  // optional int32 timestamp = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.OrderFill)
  return target;
}

size_t OrderFill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.OrderFill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .fantasybit.Order left = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_);
    }

    // optional int32 timestamp = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_timestamp());
    }

    // optional int32 fillprice = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fillprice());
    }

    // optional int32 fillsize = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fillsize());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderFill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.OrderFill)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderFill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderFill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.OrderFill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.OrderFill)
    MergeFrom(*source);
  }
}

void OrderFill::MergeFrom(const OrderFill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.OrderFill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_left()->::fantasybit::Order::MergeFrom(from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      fillprice_ = from.fillprice_;
    }
    if (cached_has_bits & 0x00000008u) {
      fillsize_ = from.fillsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderFill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.OrderFill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderFill::CopyFrom(const OrderFill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.OrderFill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderFill::IsInitialized() const {
  return true;
}

void OrderFill::InternalSwap(OrderFill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderFill, fillsize_)
      + sizeof(OrderFill::fillsize_)
      - PROTOBUF_FIELD_OFFSET(OrderFill, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderFill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketTicker::InitAsDefaultInstance() {
}
class MarketTicker::_Internal {
 public:
  using HasBits = decltype(std::declval<MarketTicker>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MarketTicker::MarketTicker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.MarketTicker)
}
MarketTicker::MarketTicker(const MarketTicker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&size_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.MarketTicker)
}

void MarketTicker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketTicker_ExData_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&size_)) + sizeof(price_));
  type_ = 1;
}

MarketTicker::~MarketTicker() {
  // @@protoc_insertion_point(destructor:fantasybit.MarketTicker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketTicker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketTicker::ArenaDtor(void* object) {
  MarketTicker* _this = reinterpret_cast< MarketTicker* >(object);
  (void)_this;
}
void MarketTicker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketTicker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketTicker& MarketTicker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketTicker_ExData_2eproto.base);
  return *internal_default_instance();
}


void MarketTicker::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MarketTicker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    symbol_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&size_)) + sizeof(price_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketTicker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.MarketTicker.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::MarketTicker_Type_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::MarketTicker_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.MarketTicker.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 price = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketTicker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MarketTicker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.MarketTicker.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional string symbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.MarketTicker.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // optional int32 size = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_size(), target);
  }

  // optional int32 price = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MarketTicker)
  return target;
}

size_t MarketTicker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MarketTicker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string symbol = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional int32 size = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

    // optional int32 price = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

    // optional .fantasybit.MarketTicker.Type type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketTicker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MarketTicker)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketTicker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketTicker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MarketTicker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MarketTicker)
    MergeFrom(*source);
  }
}

void MarketTicker::MergeFrom(const MarketTicker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MarketTicker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketTicker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MarketTicker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketTicker::CopyFrom(const MarketTicker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MarketTicker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketTicker::IsInitialized() const {
  return true;
}

void MarketTicker::InternalSwap(MarketTicker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketTicker, price_)
      + sizeof(MarketTicker::price_)
      - PROTOBUF_FIELD_OFFSET(MarketTicker, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketTicker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeTic::InitAsDefaultInstance() {
}
class TradeTic::_Internal {
 public:
  using HasBits = decltype(std::declval<TradeTic>()._has_bits_);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ishigh(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_islow(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tic(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

TradeTic::TradeTic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.TradeTic)
}
TradeTic::TradeTic(const TradeTic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&tic_) -
    reinterpret_cast<char*>(&size_)) + sizeof(tic_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.TradeTic)
}

void TradeTic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeTic_ExData_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tic_) -
      reinterpret_cast<char*>(&size_)) + sizeof(tic_));
}

TradeTic::~TradeTic() {
  // @@protoc_insertion_point(destructor:fantasybit.TradeTic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeTic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradeTic::ArenaDtor(void* object) {
  TradeTic* _this = reinterpret_cast< TradeTic* >(object);
  (void)_this;
}
void TradeTic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeTic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeTic& TradeTic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeTic_ExData_2eproto.base);
  return *internal_default_instance();
}


void TradeTic::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TradeTic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    symbol_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tic_) -
        reinterpret_cast<char*>(&size_)) + sizeof(tic_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeTic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.TradeTic.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 price = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ishigh = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ishigh(&has_bits);
          ishigh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 islow = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_islow(&has_bits);
          islow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 change = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_change(&has_bits);
          change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tic = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tic(&has_bits);
          tic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeTic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TradeTic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string symbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.TradeTic.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // optional int32 size = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_size(), target);
  }

  // optional int32 price = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_price(), target);
  }

  // optional int32 ishigh = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_ishigh(), target);
  }

  // optional int32 islow = 45;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(45, this->_internal_islow(), target);
  }

  // optional int32 change = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_change(), target);
  }

  // optional int32 tic = 60;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_tic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TradeTic)
  return target;
}

size_t TradeTic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TradeTic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string symbol = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional int32 size = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

    // optional int32 price = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

    // optional int32 ishigh = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ishigh());
    }

    // optional int32 islow = 45;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_islow());
    }

    // optional int32 change = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_change());
    }

    // optional int32 tic = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tic());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeTic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TradeTic)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeTic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeTic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TradeTic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TradeTic)
    MergeFrom(*source);
  }
}

void TradeTic::MergeFrom(const TradeTic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TradeTic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      ishigh_ = from.ishigh_;
    }
    if (cached_has_bits & 0x00000010u) {
      islow_ = from.islow_;
    }
    if (cached_has_bits & 0x00000020u) {
      change_ = from.change_;
    }
    if (cached_has_bits & 0x00000040u) {
      tic_ = from.tic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TradeTic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TradeTic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeTic::CopyFrom(const TradeTic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TradeTic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeTic::IsInitialized() const {
  return true;
}

void TradeTic::InternalSwap(TradeTic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeTic, tic_)
      + sizeof(TradeTic::tic_)
      - PROTOBUF_FIELD_OFFSET(TradeTic, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeTic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepthFeedDelta::InitAsDefaultInstance() {
}
class DepthFeedDelta::_Internal {
 public:
  using HasBits = decltype(std::declval<DepthFeedDelta>()._has_bits_);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isbid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DepthFeedDelta::DepthFeedDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.DepthFeedDelta)
}
DepthFeedDelta::DepthFeedDelta(const DepthFeedDelta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&price_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.DepthFeedDelta)
}

void DepthFeedDelta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepthFeedDelta_ExData_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&price_)) + sizeof(size_));
}

DepthFeedDelta::~DepthFeedDelta() {
  // @@protoc_insertion_point(destructor:fantasybit.DepthFeedDelta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepthFeedDelta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepthFeedDelta::ArenaDtor(void* object) {
  DepthFeedDelta* _this = reinterpret_cast< DepthFeedDelta* >(object);
  (void)_this;
}
void DepthFeedDelta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepthFeedDelta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthFeedDelta& DepthFeedDelta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthFeedDelta_ExData_2eproto.base);
  return *internal_default_instance();
}


void DepthFeedDelta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.DepthFeedDelta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    symbol_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&price_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepthFeedDelta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.DepthFeedDelta.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isbid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_isbid(&has_bits);
          isbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 price = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthFeedDelta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.DepthFeedDelta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.DepthFeedDelta.symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_symbol(), target);
  }

  // optional bool isbid = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_isbid(), target);
  }

  // optional int32 size = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_size(), target);
  }

  // optional int32 price = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.DepthFeedDelta)
  return target;
}

size_t DepthFeedDelta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.DepthFeedDelta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string symbol = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional int32 price = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_price());
    }

    // optional bool isbid = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 size = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthFeedDelta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.DepthFeedDelta)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthFeedDelta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepthFeedDelta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.DepthFeedDelta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.DepthFeedDelta)
    MergeFrom(*source);
  }
}

void DepthFeedDelta::MergeFrom(const DepthFeedDelta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.DepthFeedDelta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000004u) {
      isbid_ = from.isbid_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DepthFeedDelta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.DepthFeedDelta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthFeedDelta::CopyFrom(const DepthFeedDelta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.DepthFeedDelta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthFeedDelta::IsInitialized() const {
  return true;
}

void DepthFeedDelta::InternalSwap(DepthFeedDelta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DepthFeedDelta, size_)
      + sizeof(DepthFeedDelta::size_)
      - PROTOBUF_FIELD_OFFSET(DepthFeedDelta, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthFeedDelta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractOHLC::InitAsDefaultInstance() {
}
class ContractOHLC::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractOHLC>()._has_bits_);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_high(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_close(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ContractOHLC::ContractOHLC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ContractOHLC)
}
ContractOHLC::ContractOHLC(const ContractOHLC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_) -
    reinterpret_cast<char*>(&open_)) + sizeof(change_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ContractOHLC)
}

void ContractOHLC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractOHLC_ExData_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_) -
      reinterpret_cast<char*>(&open_)) + sizeof(change_));
}

ContractOHLC::~ContractOHLC() {
  // @@protoc_insertion_point(destructor:fantasybit.ContractOHLC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractOHLC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractOHLC::ArenaDtor(void* object) {
  ContractOHLC* _this = reinterpret_cast< ContractOHLC* >(object);
  (void)_this;
}
void ContractOHLC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractOHLC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractOHLC& ContractOHLC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractOHLC_ExData_2eproto.base);
  return *internal_default_instance();
}


void ContractOHLC::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ContractOHLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    symbol_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&open_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_) -
        reinterpret_cast<char*>(&open_)) + sizeof(change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractOHLC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string symbol = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.ContractOHLC.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 open = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_open(&has_bits);
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 high = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_high(&has_bits);
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 low = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_low(&has_bits);
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 close = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_close(&has_bits);
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 volume = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_volume(&has_bits);
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 change = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_change(&has_bits);
          change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractOHLC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ContractOHLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string symbol = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.ContractOHLC.symbol");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_symbol(), target);
  }

  // optional int32 open = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_open(), target);
  }

  // optional int32 high = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_high(), target);
  }

  // optional int32 low = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_low(), target);
  }

  // optional int32 close = 50;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_close(), target);
  }

  // optional int32 volume = 60;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_volume(), target);
  }

  // optional int32 change = 70;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ContractOHLC)
  return target;
}

size_t ContractOHLC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ContractOHLC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string symbol = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional int32 open = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_open());
    }

    // optional int32 high = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_high());
    }

    // optional int32 low = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_low());
    }

    // optional int32 close = 50;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_close());
    }

    // optional int32 volume = 60;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_volume());
    }

    // optional int32 change = 70;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_change());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractOHLC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ContractOHLC)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractOHLC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractOHLC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ContractOHLC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ContractOHLC)
    MergeFrom(*source);
  }
}

void ContractOHLC::MergeFrom(const ContractOHLC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ContractOHLC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      open_ = from.open_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_ = from.high_;
    }
    if (cached_has_bits & 0x00000008u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000010u) {
      close_ = from.close_;
    }
    if (cached_has_bits & 0x00000020u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000040u) {
      change_ = from.change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractOHLC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ContractOHLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractOHLC::CopyFrom(const ContractOHLC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ContractOHLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractOHLC::IsInitialized() const {
  return true;
}

void ContractOHLC::InternalSwap(ContractOHLC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractOHLC, change_)
      + sizeof(ContractOHLC::change_)
      - PROTOBUF_FIELD_OFFSET(ContractOHLC, open_)>(
          reinterpret_cast<char*>(&open_),
          reinterpret_cast<char*>(&other->open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractOHLC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepthItem::InitAsDefaultInstance() {
}
class DepthItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DepthItem>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_as(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DepthItem::DepthItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.DepthItem)
}
DepthItem::DepthItem(const DepthItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&as_, &from.as_,
    static_cast<size_t>(reinterpret_cast<char*>(&bs_) -
    reinterpret_cast<char*>(&as_)) + sizeof(bs_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.DepthItem)
}

void DepthItem::SharedCtor() {
  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bs_) -
      reinterpret_cast<char*>(&as_)) + sizeof(bs_));
}

DepthItem::~DepthItem() {
  // @@protoc_insertion_point(destructor:fantasybit.DepthItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepthItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DepthItem::ArenaDtor(void* object) {
  DepthItem* _this = reinterpret_cast< DepthItem* >(object);
  (void)_this;
}
void DepthItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepthItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthItem& DepthItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthItem_ExData_2eproto.base);
  return *internal_default_instance();
}


void DepthItem::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.DepthItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&as_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bs_) -
        reinterpret_cast<char*>(&as_)) + sizeof(bs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepthItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 b = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 a = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bs = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_bs(&has_bits);
          bs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 as = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_as(&has_bits);
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.DepthItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_level(), target);
  }

  // optional int32 b = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_b(), target);
  }

  // optional int32 a = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_a(), target);
  }

  // optional int32 bs = 50;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_bs(), target);
  }

  // optional int32 as = 60;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_as(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.DepthItem)
  return target;
}

size_t DepthItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.DepthItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 as = 60;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_as());
    }

    // optional int32 level = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_level());
    }

    // optional int32 b = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_b());
    }

    // optional int32 a = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a());
    }

    // optional int32 bs = 50;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bs());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.DepthItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepthItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.DepthItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.DepthItem)
    MergeFrom(*source);
  }
}

void DepthItem::MergeFrom(const DepthItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.DepthItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      as_ = from.as_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      bs_ = from.bs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DepthItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.DepthItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthItem::CopyFrom(const DepthItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.DepthItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthItem::IsInitialized() const {
  return true;
}

void DepthItem::InternalSwap(DepthItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DepthItem, bs_)
      + sizeof(DepthItem::bs_)
      - PROTOBUF_FIELD_OFFSET(DepthItem, as_)>(
          reinterpret_cast<char*>(&as_),
          reinterpret_cast<char*>(&other->as_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BookDelta::InitAsDefaultInstance() {
  ::fantasybit::_BookDelta_default_instance_._instance.get_mutable()->newnew_ = const_cast< ::fantasybit::OrderCore*>(
      ::fantasybit::OrderCore::internal_default_instance());
  ::fantasybit::_BookDelta_default_instance_._instance.get_mutable()->ohlc_ = const_cast< ::fantasybit::ContractOHLC*>(
      ::fantasybit::ContractOHLC::internal_default_instance());
}
class BookDelta::_Internal {
 public:
  using HasBits = decltype(std::declval<BookDelta>()._has_bits_);
  static void set_has_fantasy_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::OrderCore& newnew(const BookDelta* msg);
  static void set_has_newnew(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::fantasybit::ContractOHLC& ohlc(const BookDelta* msg);
  static void set_has_ohlc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_blocknum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::fantasybit::OrderCore&
BookDelta::_Internal::newnew(const BookDelta* msg) {
  return *msg->newnew_;
}
const ::fantasybit::ContractOHLC&
BookDelta::_Internal::ohlc(const BookDelta* msg) {
  return *msg->ohlc_;
}
BookDelta::BookDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  removes_(arena),
  level2tic_(arena),
  level1tic_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.BookDelta)
}
BookDelta::BookDelta(const BookDelta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      removes_(from.removes_),
      level2tic_(from.level2tic_),
      level1tic_(from.level1tic_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fantasy_name()) {
    fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fantasy_name(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  if (from._internal_has_newnew()) {
    newnew_ = new ::fantasybit::OrderCore(*from.newnew_);
  } else {
    newnew_ = nullptr;
  }
  if (from._internal_has_ohlc()) {
    ohlc_ = new ::fantasybit::ContractOHLC(*from.ohlc_);
  } else {
    ohlc_ = nullptr;
  }
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocknum_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(blocknum_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.BookDelta)
}

void BookDelta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BookDelta_ExData_2eproto.base);
  fantasy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&newnew_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocknum_) -
      reinterpret_cast<char*>(&newnew_)) + sizeof(blocknum_));
}

BookDelta::~BookDelta() {
  // @@protoc_insertion_point(destructor:fantasybit.BookDelta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BookDelta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fantasy_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete newnew_;
  if (this != internal_default_instance()) delete ohlc_;
}

void BookDelta::ArenaDtor(void* object) {
  BookDelta* _this = reinterpret_cast< BookDelta* >(object);
  (void)_this;
}
void BookDelta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BookDelta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BookDelta& BookDelta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BookDelta_ExData_2eproto.base);
  return *internal_default_instance();
}


void BookDelta::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.BookDelta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  removes_.Clear();
  level2tic_.Clear();
  level1tic_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(newnew_ != nullptr);
      newnew_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(ohlc_ != nullptr);
      ohlc_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blocknum_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(blocknum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookDelta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string fantasy_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_fantasy_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.BookDelta.fantasy_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 seqnum = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.BookDelta.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.OrderCore newnew = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_newnew(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.ContractOHLC ohlc = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ohlc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.Order removes = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_removes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.MarketTicker level2tic = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_level2tic(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<482>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.MarketTicker level1tic = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_level1tic(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<562>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 blocknum = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_blocknum(&has_bits);
          blocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string symbol = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.BookDelta.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BookDelta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.BookDelta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string fantasy_name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fantasy_name().data(), static_cast<int>(this->_internal_fantasy_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.BookDelta.fantasy_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_fantasy_name(), target);
  }

  // optional int32 seqnum = 20;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_seqnum(), target);
  }

  // optional string playerid = 30;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.BookDelta.playerid");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_playerid(), target);
  }

  // optional .fantasybit.OrderCore newnew = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::newnew(this), target, stream);
  }

  // optional .fantasybit.ContractOHLC ohlc = 41;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::ohlc(this), target, stream);
  }

  // repeated .fantasybit.Order removes = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_removes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, this->_internal_removes(i), target, stream);
  }

  // repeated .fantasybit.MarketTicker level2tic = 60;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_level2tic_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, this->_internal_level2tic(i), target, stream);
  }

  // repeated .fantasybit.MarketTicker level1tic = 70;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_level1tic_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, this->_internal_level1tic(i), target, stream);
  }

  // optional int32 blocknum = 80;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(80, this->_internal_blocknum(), target);
  }

  // optional string symbol = 90;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.BookDelta.symbol");
    target = stream->WriteStringMaybeAliased(
        90, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.BookDelta)
  return target;
}

size_t BookDelta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.BookDelta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.Order removes = 50;
  total_size += 2UL * this->_internal_removes_size();
  for (const auto& msg : this->removes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fantasybit.MarketTicker level2tic = 60;
  total_size += 2UL * this->_internal_level2tic_size();
  for (const auto& msg : this->level2tic_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fantasybit.MarketTicker level1tic = 70;
  total_size += 2UL * this->_internal_level1tic_size();
  for (const auto& msg : this->level1tic_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string fantasy_name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fantasy_name());
    }

    // optional string playerid = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional string symbol = 90;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional .fantasybit.OrderCore newnew = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *newnew_);
    }

    // optional .fantasybit.ContractOHLC ohlc = 41;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ohlc_);
    }

    // optional int32 seqnum = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_seqnum());
    }

    // optional int32 blocknum = 80;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_blocknum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BookDelta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.BookDelta)
  GOOGLE_DCHECK_NE(&from, this);
  const BookDelta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BookDelta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.BookDelta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.BookDelta)
    MergeFrom(*source);
  }
}

void BookDelta::MergeFrom(const BookDelta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.BookDelta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  removes_.MergeFrom(from.removes_);
  level2tic_.MergeFrom(from.level2tic_);
  level1tic_.MergeFrom(from.level1tic_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fantasy_name(from._internal_fantasy_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_newnew()->::fantasybit::OrderCore::MergeFrom(from._internal_newnew());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_ohlc()->::fantasybit::ContractOHLC::MergeFrom(from._internal_ohlc());
    }
    if (cached_has_bits & 0x00000020u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000040u) {
      blocknum_ = from.blocknum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BookDelta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.BookDelta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BookDelta::CopyFrom(const BookDelta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.BookDelta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookDelta::IsInitialized() const {
  return true;
}

void BookDelta::InternalSwap(BookDelta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  removes_.InternalSwap(&other->removes_);
  level2tic_.InternalSwap(&other->level2tic_);
  level1tic_.InternalSwap(&other->level1tic_);
  fantasy_name_.Swap(&other->fantasy_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BookDelta, blocknum_)
      + sizeof(BookDelta::blocknum_)
      - PROTOBUF_FIELD_OFFSET(BookDelta, newnew_)>(
          reinterpret_cast<char*>(&newnew_),
          reinterpret_cast<char*>(&other->newnew_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BookDelta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketQuote::InitAsDefaultInstance() {
}
class MarketQuote::_Internal {
 public:
  using HasBits = decltype(std::declval<MarketQuote>()._has_bits_);
  static void set_has_bs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_as(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ls(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_udn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MarketQuote::MarketQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.MarketQuote)
}
MarketQuote::MarketQuote(const MarketQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&udn_, &from.udn_,
    static_cast<size_t>(reinterpret_cast<char*>(&ls_) -
    reinterpret_cast<char*>(&udn_)) + sizeof(ls_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.MarketQuote)
}

void MarketQuote::SharedCtor() {
  ::memset(&udn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ls_) -
      reinterpret_cast<char*>(&udn_)) + sizeof(ls_));
}

MarketQuote::~MarketQuote() {
  // @@protoc_insertion_point(destructor:fantasybit.MarketQuote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketQuote::ArenaDtor(void* object) {
  MarketQuote* _this = reinterpret_cast< MarketQuote* >(object);
  (void)_this;
}
void MarketQuote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketQuote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketQuote& MarketQuote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketQuote_ExData_2eproto.base);
  return *internal_default_instance();
}


void MarketQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MarketQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&udn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ls_) -
        reinterpret_cast<char*>(&udn_)) + sizeof(ls_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketQuote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 bs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_bs(&has_bits);
          bs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 b = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 a = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 as = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_as(&has_bits);
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 l = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_l(&has_bits);
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ls = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_ls(&has_bits);
          ls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 udn = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_udn(&has_bits);
          udn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketQuote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MarketQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bs = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_bs(), target);
  }

  // optional int32 b = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_b(), target);
  }

  // optional int32 a = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_a(), target);
  }

  // optional int32 as = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_as(), target);
  }

  // optional int32 l = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_l(), target);
  }

  // optional int32 ls = 60;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_ls(), target);
  }

  // optional int32 udn = 70;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_udn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MarketQuote)
  return target;
}

size_t MarketQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MarketQuote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 udn = 70;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_udn());
    }

    // optional int32 bs = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bs());
    }

    // optional int32 b = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_b());
    }

    // optional int32 a = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a());
    }

    // optional int32 as = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_as());
    }

    // optional int32 l = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_l());
    }

    // optional int32 ls = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ls());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketQuote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MarketQuote)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketQuote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketQuote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MarketQuote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MarketQuote)
    MergeFrom(*source);
  }
}

void MarketQuote::MergeFrom(const MarketQuote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MarketQuote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      udn_ = from.udn_;
    }
    if (cached_has_bits & 0x00000002u) {
      bs_ = from.bs_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      as_ = from.as_;
    }
    if (cached_has_bits & 0x00000020u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000040u) {
      ls_ = from.ls_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketQuote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MarketQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketQuote::CopyFrom(const MarketQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MarketQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketQuote::IsInitialized() const {
  return true;
}

void MarketQuote::InternalSwap(MarketQuote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketQuote, ls_)
      + sizeof(MarketQuote::ls_)
      - PROTOBUF_FIELD_OFFSET(MarketQuote, udn_)>(
          reinterpret_cast<char*>(&udn_),
          reinterpret_cast<char*>(&other->udn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketQuote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketSnapshot::InitAsDefaultInstance() {
  ::fantasybit::_MarketSnapshot_default_instance_._instance.get_mutable()->ohlc_ = const_cast< ::fantasybit::ContractOHLC*>(
      ::fantasybit::ContractOHLC::internal_default_instance());
  ::fantasybit::_MarketSnapshot_default_instance_._instance.get_mutable()->quote_ = const_cast< ::fantasybit::MarketQuote*>(
      ::fantasybit::MarketQuote::internal_default_instance());
}
class MarketSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<MarketSnapshot>()._has_bits_);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::fantasybit::ContractOHLC& ohlc(const MarketSnapshot* msg);
  static void set_has_ohlc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::MarketQuote& quote(const MarketSnapshot* msg);
  static void set_has_quote(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blocknum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::fantasybit::ContractOHLC&
MarketSnapshot::_Internal::ohlc(const MarketSnapshot* msg) {
  return *msg->ohlc_;
}
const ::fantasybit::MarketQuote&
MarketSnapshot::_Internal::quote(const MarketSnapshot* msg) {
  return *msg->quote_;
}
MarketSnapshot::MarketSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  depth_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.MarketSnapshot)
}
MarketSnapshot::MarketSnapshot(const MarketSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      depth_(from.depth_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  if (from._internal_has_ohlc()) {
    ohlc_ = new ::fantasybit::ContractOHLC(*from.ohlc_);
  } else {
    ohlc_ = nullptr;
  }
  if (from._internal_has_quote()) {
    quote_ = new ::fantasybit::MarketQuote(*from.quote_);
  } else {
    quote_ = nullptr;
  }
  ::memcpy(&week_, &from.week_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocknum_) -
    reinterpret_cast<char*>(&week_)) + sizeof(blocknum_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.MarketSnapshot)
}

void MarketSnapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketSnapshot_ExData_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ohlc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocknum_) -
      reinterpret_cast<char*>(&ohlc_)) + sizeof(blocknum_));
}

MarketSnapshot::~MarketSnapshot() {
  // @@protoc_insertion_point(destructor:fantasybit.MarketSnapshot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ohlc_;
  if (this != internal_default_instance()) delete quote_;
}

void MarketSnapshot::ArenaDtor(void* object) {
  MarketSnapshot* _this = reinterpret_cast< MarketSnapshot* >(object);
  (void)_this;
}
void MarketSnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketSnapshot& MarketSnapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketSnapshot_ExData_2eproto.base);
  return *internal_default_instance();
}


void MarketSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MarketSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depth_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ohlc_ != nullptr);
      ohlc_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(quote_ != nullptr);
      quote_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&week_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blocknum_) -
        reinterpret_cast<char*>(&week_)) + sizeof(blocknum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string symbol = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.MarketSnapshot.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 week = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.ContractOHLC ohlc = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ohlc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.MarketQuote quote = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_quote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 blocknum = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_blocknum(&has_bits);
          blocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.DepthItem depth = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_depth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<562>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketSnapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MarketSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string symbol = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.MarketSnapshot.symbol");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_symbol(), target);
  }

  // optional int32 week = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_week(), target);
  }

  // optional .fantasybit.ContractOHLC ohlc = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::ohlc(this), target, stream);
  }

  // optional .fantasybit.MarketQuote quote = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::quote(this), target, stream);
  }

  // optional int32 blocknum = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_blocknum(), target);
  }

  // repeated .fantasybit.DepthItem depth = 70;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_depth_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, this->_internal_depth(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MarketSnapshot)
  return target;
}

size_t MarketSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MarketSnapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.DepthItem depth = 70;
  total_size += 2UL * this->_internal_depth_size();
  for (const auto& msg : this->depth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string symbol = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional .fantasybit.ContractOHLC ohlc = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ohlc_);
    }

    // optional .fantasybit.MarketQuote quote = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quote_);
    }

    // optional int32 week = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_week());
    }

    // optional int32 blocknum = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_blocknum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketSnapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MarketSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketSnapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MarketSnapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MarketSnapshot)
    MergeFrom(*source);
  }
}

void MarketSnapshot::MergeFrom(const MarketSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MarketSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  depth_.MergeFrom(from.depth_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ohlc()->::fantasybit::ContractOHLC::MergeFrom(from._internal_ohlc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_quote()->::fantasybit::MarketQuote::MergeFrom(from._internal_quote());
    }
    if (cached_has_bits & 0x00000008u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000010u) {
      blocknum_ = from.blocknum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketSnapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MarketSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketSnapshot::CopyFrom(const MarketSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MarketSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketSnapshot::IsInitialized() const {
  return true;
}

void MarketSnapshot::InternalSwap(MarketSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  depth_.InternalSwap(&other->depth_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketSnapshot, blocknum_)
      + sizeof(MarketSnapshot::blocknum_)
      - PROTOBUF_FIELD_OFFSET(MarketSnapshot, ohlc_)>(
          reinterpret_cast<char*>(&ohlc_),
          reinterpret_cast<char*>(&other->ohlc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketSnapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FutContract::InitAsDefaultInstance() {
}
class FutContract::_Internal {
 public:
  using HasBits = decltype(std::declval<FutContract>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FutContract::FutContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.FutContract)
}
FutContract::FutContract(const FutContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&season_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.FutContract)
}

void FutContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FutContract_ExData_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&season_)) + sizeof(week_));
  type_ = 1;
}

FutContract::~FutContract() {
  // @@protoc_insertion_point(destructor:fantasybit.FutContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FutContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FutContract::ArenaDtor(void* object) {
  FutContract* _this = reinterpret_cast< FutContract* >(object);
  (void)_this;
}
void FutContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FutContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FutContract& FutContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FutContract_ExData_2eproto.base);
  return *internal_default_instance();
}


void FutContract::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FutContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    symbol_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&season_)) + sizeof(week_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FutContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.FutContract.Type type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::fantasybit::FutContract_Type_IsValid(val))) {
            _internal_set_type(static_cast<::fantasybit::FutContract_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 season = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 week = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string symbol = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FutContract.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FutContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FutContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.FutContract.Type type = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // optional int32 season = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_season(), target);
  }

  // optional int32 week = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_week(), target);
  }

  // optional string symbol = 40;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FutContract.symbol");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FutContract)
  return target;
}

size_t FutContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FutContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string symbol = 40;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // optional int32 season = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_season());
    }

    // optional int32 week = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_week());
    }

    // optional .fantasybit.FutContract.Type type = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FutContract)
  GOOGLE_DCHECK_NE(&from, this);
  const FutContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FutContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FutContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FutContract)
    MergeFrom(*source);
  }
}

void FutContract::MergeFrom(const FutContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FutContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000004u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FutContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutContract::CopyFrom(const FutContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FutContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutContract::IsInitialized() const {
  return true;
}

void FutContract::InternalSwap(FutContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FutContract, week_)
      + sizeof(FutContract::week_)
      - PROTOBUF_FIELD_OFFSET(FutContract, season_)>(
          reinterpret_cast<char*>(&season_),
          reinterpret_cast<char*>(&other->season_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FutContract::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fantasybit::SettlePos* Arena::CreateMaybeMessage< ::fantasybit::SettlePos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::SettlePos >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::StorePos* Arena::CreateMaybeMessage< ::fantasybit::StorePos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::StorePos >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::BookPos* Arena::CreateMaybeMessage< ::fantasybit::BookPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::BookPos >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GameSettlePos* Arena::CreateMaybeMessage< ::fantasybit::GameSettlePos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GameSettlePos >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::OrderCore* Arena::CreateMaybeMessage< ::fantasybit::OrderCore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::OrderCore >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Order* Arena::CreateMaybeMessage< ::fantasybit::Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::OrderFill* Arena::CreateMaybeMessage< ::fantasybit::OrderFill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::OrderFill >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::MarketTicker* Arena::CreateMaybeMessage< ::fantasybit::MarketTicker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::MarketTicker >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::TradeTic* Arena::CreateMaybeMessage< ::fantasybit::TradeTic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::TradeTic >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::DepthFeedDelta* Arena::CreateMaybeMessage< ::fantasybit::DepthFeedDelta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::DepthFeedDelta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ContractOHLC* Arena::CreateMaybeMessage< ::fantasybit::ContractOHLC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ContractOHLC >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::DepthItem* Arena::CreateMaybeMessage< ::fantasybit::DepthItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::DepthItem >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::BookDelta* Arena::CreateMaybeMessage< ::fantasybit::BookDelta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::BookDelta >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::MarketQuote* Arena::CreateMaybeMessage< ::fantasybit::MarketQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::MarketQuote >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::MarketSnapshot* Arena::CreateMaybeMessage< ::fantasybit::MarketSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::MarketSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::FutContract* Arena::CreateMaybeMessage< ::fantasybit::FutContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::FutContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
