// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SwapData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SwapData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* SwapOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapOrder_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SwapData_2eproto() {
  protobuf_AddDesc_SwapData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SwapData.proto");
  GOOGLE_CHECK(file != NULL);
  SwapOrder_descriptor_ = file->message_type(0);
  static const int SwapOrder_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, isask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, satoshi_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, satoshi_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, openq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, pendq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, fillq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, fname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, directed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, double_spent_),
  };
  SwapOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapOrder_descriptor_,
      SwapOrder::default_instance_,
      SwapOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapOrder));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SwapData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapOrder_descriptor_, &SwapOrder::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SwapData_2eproto() {
  delete SwapOrder::default_instance_;
  delete SwapOrder_reflection_;
}

void protobuf_AddDesc_SwapData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016SwapData.proto\022\nfantasybit\"\320\001\n\tSwapOrd"
    "er\022\r\n\005isask\030\n \001(\010\022\023\n\013satoshi_min\030\024 \001(\004\022\023"
    "\n\013satoshi_max\030\036 \001(\004\022\014\n\004rate\030( \001(\004\022\r\n\005ope"
    "nq\0302 \001(\004\022\r\n\005pendq\030< \001(\004\022\r\n\005fillq\030F \001(\004\022\r"
    "\n\005fname\030P \001(\t\022\013\n\003msg\030Z \001(\t\022\013\n\003ref\030d \001(\t\022"
    "\020\n\010directed\030n \001(\t\022\024\n\014double_spent\030x \001(\010", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SwapData.proto", &protobuf_RegisterTypes);
  SwapOrder::default_instance_ = new SwapOrder();
  SwapOrder::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SwapData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SwapData_2eproto {
  StaticDescriptorInitializer_SwapData_2eproto() {
    protobuf_AddDesc_SwapData_2eproto();
  }
} static_descriptor_initializer_SwapData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SwapOrder::kIsaskFieldNumber;
const int SwapOrder::kSatoshiMinFieldNumber;
const int SwapOrder::kSatoshiMaxFieldNumber;
const int SwapOrder::kRateFieldNumber;
const int SwapOrder::kOpenqFieldNumber;
const int SwapOrder::kPendqFieldNumber;
const int SwapOrder::kFillqFieldNumber;
const int SwapOrder::kFnameFieldNumber;
const int SwapOrder::kMsgFieldNumber;
const int SwapOrder::kRefFieldNumber;
const int SwapOrder::kDirectedFieldNumber;
const int SwapOrder::kDoubleSpentFieldNumber;
#endif  // !_MSC_VER

SwapOrder::SwapOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapOrder::InitAsDefaultInstance() {
}

SwapOrder::SwapOrder(const SwapOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapOrder::SharedCtor() {
  _cached_size_ = 0;
  isask_ = false;
  satoshi_min_ = GOOGLE_ULONGLONG(0);
  satoshi_max_ = GOOGLE_ULONGLONG(0);
  rate_ = GOOGLE_ULONGLONG(0);
  openq_ = GOOGLE_ULONGLONG(0);
  pendq_ = GOOGLE_ULONGLONG(0);
  fillq_ = GOOGLE_ULONGLONG(0);
  fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  directed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  double_spent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapOrder::~SwapOrder() {
  SharedDtor();
}

void SwapOrder::SharedDtor() {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    delete fname_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (ref_ != &::google::protobuf::internal::kEmptyString) {
    delete ref_;
  }
  if (directed_ != &::google::protobuf::internal::kEmptyString) {
    delete directed_;
  }
  if (this != default_instance_) {
  }
}

void SwapOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapOrder_descriptor_;
}

const SwapOrder& SwapOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwapData_2eproto();
  return *default_instance_;
}

SwapOrder* SwapOrder::default_instance_ = NULL;

SwapOrder* SwapOrder::New() const {
  return new SwapOrder;
}

void SwapOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isask_ = false;
    satoshi_min_ = GOOGLE_ULONGLONG(0);
    satoshi_max_ = GOOGLE_ULONGLONG(0);
    rate_ = GOOGLE_ULONGLONG(0);
    openq_ = GOOGLE_ULONGLONG(0);
    pendq_ = GOOGLE_ULONGLONG(0);
    fillq_ = GOOGLE_ULONGLONG(0);
    if (has_fname()) {
      if (fname_ != &::google::protobuf::internal::kEmptyString) {
        fname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_ref()) {
      if (ref_ != &::google::protobuf::internal::kEmptyString) {
        ref_->clear();
      }
    }
    if (has_directed()) {
      if (directed_ != &::google::protobuf::internal::kEmptyString) {
        directed_->clear();
      }
    }
    double_spent_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isask = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isask_)));
          set_has_isask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_satoshi_min;
        break;
      }

      // optional uint64 satoshi_min = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_satoshi_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &satoshi_min_)));
          set_has_satoshi_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_satoshi_max;
        break;
      }

      // optional uint64 satoshi_max = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_satoshi_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &satoshi_max_)));
          set_has_satoshi_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_rate;
        break;
      }

      // optional uint64 rate = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_openq;
        break;
      }

      // optional uint64 openq = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &openq_)));
          set_has_openq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_pendq;
        break;
      }

      // optional uint64 pendq = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pendq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pendq_)));
          set_has_pendq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_fillq;
        break;
      }

      // optional uint64 fillq = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fillq_)));
          set_has_fillq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_fname;
        break;
      }

      // optional string fname = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fname().data(), this->fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(722)) goto parse_msg;
        break;
      }

      // optional string msg = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_ref;
        break;
      }

      // optional string ref = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(882)) goto parse_directed;
        break;
      }

      // optional string directed = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directed().data(), this->directed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(960)) goto parse_double_spent;
        break;
      }

      // optional bool double_spent = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_spent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &double_spent_)));
          set_has_double_spent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isask = 10;
  if (has_isask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isask(), output);
  }

  // optional uint64 satoshi_min = 20;
  if (has_satoshi_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->satoshi_min(), output);
  }

  // optional uint64 satoshi_max = 30;
  if (has_satoshi_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->satoshi_max(), output);
  }

  // optional uint64 rate = 40;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->rate(), output);
  }

  // optional uint64 openq = 50;
  if (has_openq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->openq(), output);
  }

  // optional uint64 pendq = 60;
  if (has_pendq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(60, this->pendq(), output);
  }

  // optional uint64 fillq = 70;
  if (has_fillq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(70, this->fillq(), output);
  }

  // optional string fname = 80;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      80, this->fname(), output);
  }

  // optional string msg = 90;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      90, this->msg(), output);
  }

  // optional string ref = 100;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->ref(), output);
  }

  // optional string directed = 110;
  if (has_directed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directed().data(), this->directed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      110, this->directed(), output);
  }

  // optional bool double_spent = 120;
  if (has_double_spent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(120, this->double_spent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isask = 10;
  if (has_isask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isask(), target);
  }

  // optional uint64 satoshi_min = 20;
  if (has_satoshi_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->satoshi_min(), target);
  }

  // optional uint64 satoshi_max = 30;
  if (has_satoshi_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->satoshi_max(), target);
  }

  // optional uint64 rate = 40;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->rate(), target);
  }

  // optional uint64 openq = 50;
  if (has_openq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->openq(), target);
  }

  // optional uint64 pendq = 60;
  if (has_pendq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(60, this->pendq(), target);
  }

  // optional uint64 fillq = 70;
  if (has_fillq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(70, this->fillq(), target);
  }

  // optional string fname = 80;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->fname(), target);
  }

  // optional string msg = 90;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        90, this->msg(), target);
  }

  // optional string ref = 100;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->ref(), target);
  }

  // optional string directed = 110;
  if (has_directed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directed().data(), this->directed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        110, this->directed(), target);
  }

  // optional bool double_spent = 120;
  if (has_double_spent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(120, this->double_spent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isask = 10;
    if (has_isask()) {
      total_size += 1 + 1;
    }

    // optional uint64 satoshi_min = 20;
    if (has_satoshi_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->satoshi_min());
    }

    // optional uint64 satoshi_max = 30;
    if (has_satoshi_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->satoshi_max());
    }

    // optional uint64 rate = 40;
    if (has_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rate());
    }

    // optional uint64 openq = 50;
    if (has_openq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->openq());
    }

    // optional uint64 pendq = 60;
    if (has_pendq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pendq());
    }

    // optional uint64 fillq = 70;
    if (has_fillq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fillq());
    }

    // optional string fname = 80;
    if (has_fname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string msg = 90;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional string ref = 100;
    if (has_ref()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

    // optional string directed = 110;
    if (has_directed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directed());
    }

    // optional bool double_spent = 120;
    if (has_double_spent()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapOrder::MergeFrom(const SwapOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isask()) {
      set_isask(from.isask());
    }
    if (from.has_satoshi_min()) {
      set_satoshi_min(from.satoshi_min());
    }
    if (from.has_satoshi_max()) {
      set_satoshi_max(from.satoshi_max());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_openq()) {
      set_openq(from.openq());
    }
    if (from.has_pendq()) {
      set_pendq(from.pendq());
    }
    if (from.has_fillq()) {
      set_fillq(from.fillq());
    }
    if (from.has_fname()) {
      set_fname(from.fname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_directed()) {
      set_directed(from.directed());
    }
    if (from.has_double_spent()) {
      set_double_spent(from.double_spent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapOrder::CopyFrom(const SwapOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapOrder::IsInitialized() const {

  return true;
}

void SwapOrder::Swap(SwapOrder* other) {
  if (other != this) {
    std::swap(isask_, other->isask_);
    std::swap(satoshi_min_, other->satoshi_min_);
    std::swap(satoshi_max_, other->satoshi_max_);
    std::swap(rate_, other->rate_);
    std::swap(openq_, other->openq_);
    std::swap(pendq_, other->pendq_);
    std::swap(fillq_, other->fillq_);
    std::swap(fname_, other->fname_);
    std::swap(msg_, other->msg_);
    std::swap(ref_, other->ref_);
    std::swap(directed_, other->directed_);
    std::swap(double_spent_, other->double_spent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapOrder_descriptor_;
  metadata.reflection = SwapOrder_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
