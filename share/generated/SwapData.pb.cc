// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SwapData.proto

#include "SwapData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace fantasybit {
class SwapOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapOrder> _instance;
} _SwapOrder_default_instance_;
}  // namespace fantasybit
static void InitDefaultsscc_info_SwapOrder_SwapData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_SwapOrder_default_instance_;
    new (ptr) ::fantasybit::SwapOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SwapOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapOrder_SwapData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwapOrder_SwapData_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SwapData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SwapData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SwapData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SwapData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, isask_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, satoshi_min_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, satoshi_max_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, rate_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, openq_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, pendq_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, fillq_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, fname_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, msg_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, ref_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, directed_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::SwapOrder, double_spent_),
  4,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
  1,
  2,
  3,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::fantasybit::SwapOrder)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_SwapOrder_default_instance_),
};

const char descriptor_table_protodef_SwapData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016SwapData.proto\022\nfantasybit\"\320\001\n\tSwapOrd"
  "er\022\r\n\005isask\030\n \001(\010\022\023\n\013satoshi_min\030\024 \001(\004\022\023"
  "\n\013satoshi_max\030\036 \001(\004\022\014\n\004rate\030( \001(\004\022\r\n\005ope"
  "nq\0302 \001(\004\022\r\n\005pendq\030< \001(\004\022\r\n\005fillq\030F \001(\004\022\r"
  "\n\005fname\030P \001(\t\022\013\n\003msg\030Z \001(\t\022\013\n\003ref\030d \001(\t\022"
  "\020\n\010directed\030n \001(\t\022\024\n\014double_spent\030x \001(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SwapData_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SwapData_2eproto_sccs[1] = {
  &scc_info_SwapOrder_SwapData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SwapData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SwapData_2eproto = {
  false, false, descriptor_table_protodef_SwapData_2eproto, "SwapData.proto", 239,
  &descriptor_table_SwapData_2eproto_once, descriptor_table_SwapData_2eproto_sccs, descriptor_table_SwapData_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_SwapData_2eproto::offsets,
  file_level_metadata_SwapData_2eproto, 1, file_level_enum_descriptors_SwapData_2eproto, file_level_service_descriptors_SwapData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SwapData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SwapData_2eproto)), true);
namespace fantasybit {

// ===================================================================

void SwapOrder::InitAsDefaultInstance() {
}
class SwapOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<SwapOrder>()._has_bits_);
  static void set_has_isask(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_satoshi_min(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_satoshi_max(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_openq(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pendq(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_fillq(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_directed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_double_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SwapOrder::SwapOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.SwapOrder)
}
SwapOrder::SwapOrder(const SwapOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fname()) {
    fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fname(),
      GetArena());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ref()) {
    ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ref(),
      GetArena());
  }
  directed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_directed()) {
    directed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_directed(),
      GetArena());
  }
  ::memcpy(&isask_, &from.isask_,
    static_cast<size_t>(reinterpret_cast<char*>(&fillq_) -
    reinterpret_cast<char*>(&isask_)) + sizeof(fillq_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.SwapOrder)
}

void SwapOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapOrder_SwapData_2eproto.base);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  directed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&isask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fillq_) -
      reinterpret_cast<char*>(&isask_)) + sizeof(fillq_));
}

SwapOrder::~SwapOrder() {
  // @@protoc_insertion_point(destructor:fantasybit.SwapOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwapOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  directed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SwapOrder::ArenaDtor(void* object) {
  SwapOrder* _this = reinterpret_cast< SwapOrder* >(object);
  (void)_this;
}
void SwapOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapOrder& SwapOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapOrder_SwapData_2eproto.base);
  return *internal_default_instance();
}


void SwapOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SwapOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ref_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      directed_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&isask_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&satoshi_max_) -
        reinterpret_cast<char*>(&isask_)) + sizeof(satoshi_max_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fillq_) -
        reinterpret_cast<char*>(&rate_)) + sizeof(fillq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool isask = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_isask(&has_bits);
          isask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 satoshi_min = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_satoshi_min(&has_bits);
          satoshi_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 satoshi_max = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_satoshi_max(&has_bits);
          satoshi_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rate = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_rate(&has_bits);
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 openq = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_openq(&has_bits);
          openq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 pendq = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_pendq(&has_bits);
          pendq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fillq = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_fillq(&has_bits);
          fillq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fname = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_fname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.SwapOrder.fname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string msg = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.SwapOrder.msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ref = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.SwapOrder.ref");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string directed = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_directed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.SwapOrder.directed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool double_spent = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_double_spent(&has_bits);
          double_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SwapOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isask = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_isask(), target);
  }

  // optional uint64 satoshi_min = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_satoshi_min(), target);
  }

  // optional uint64 satoshi_max = 30;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_satoshi_max(), target);
  }

  // optional uint64 rate = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(40, this->_internal_rate(), target);
  }

  // optional uint64 openq = 50;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(50, this->_internal_openq(), target);
  }

  // optional uint64 pendq = 60;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(60, this->_internal_pendq(), target);
  }

  // optional uint64 fillq = 70;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(70, this->_internal_fillq(), target);
  }

  // optional string fname = 80;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.SwapOrder.fname");
    target = stream->WriteStringMaybeAliased(
        80, this->_internal_fname(), target);
  }

  // optional string msg = 90;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.SwapOrder.msg");
    target = stream->WriteStringMaybeAliased(
        90, this->_internal_msg(), target);
  }

  // optional string ref = 100;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ref().data(), static_cast<int>(this->_internal_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.SwapOrder.ref");
    target = stream->WriteStringMaybeAliased(
        100, this->_internal_ref(), target);
  }

  // optional string directed = 110;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directed().data(), static_cast<int>(this->_internal_directed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.SwapOrder.directed");
    target = stream->WriteStringMaybeAliased(
        110, this->_internal_directed(), target);
  }

  // optional bool double_spent = 120;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(120, this->_internal_double_spent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SwapOrder)
  return target;
}

size_t SwapOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SwapOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string fname = 80;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fname());
    }

    // optional string msg = 90;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
    }

    // optional string ref = 100;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ref());
    }

    // optional string directed = 110;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directed());
    }

    // optional bool isask = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool double_spent = 120;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional uint64 satoshi_min = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_satoshi_min());
    }

    // optional uint64 satoshi_max = 30;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_satoshi_max());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 rate = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_rate());
    }

    // optional uint64 openq = 50;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_openq());
    }

    // optional uint64 pendq = 60;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_pendq());
    }

    // optional uint64 fillq = 70;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_fillq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SwapOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SwapOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SwapOrder)
    MergeFrom(*source);
  }
}

void SwapOrder::MergeFrom(const SwapOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SwapOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fname(from._internal_fname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ref(from._internal_ref());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_directed(from._internal_directed());
    }
    if (cached_has_bits & 0x00000010u) {
      isask_ = from.isask_;
    }
    if (cached_has_bits & 0x00000020u) {
      double_spent_ = from.double_spent_;
    }
    if (cached_has_bits & 0x00000040u) {
      satoshi_min_ = from.satoshi_min_;
    }
    if (cached_has_bits & 0x00000080u) {
      satoshi_max_ = from.satoshi_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      rate_ = from.rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      openq_ = from.openq_;
    }
    if (cached_has_bits & 0x00000400u) {
      pendq_ = from.pendq_;
    }
    if (cached_has_bits & 0x00000800u) {
      fillq_ = from.fillq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SwapOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SwapOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapOrder::CopyFrom(const SwapOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SwapOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapOrder::IsInitialized() const {
  return true;
}

void SwapOrder::InternalSwap(SwapOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fname_.Swap(&other->fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ref_.Swap(&other->ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  directed_.Swap(&other->directed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapOrder, fillq_)
      + sizeof(SwapOrder::fillq_)
      - PROTOBUF_FIELD_OFFSET(SwapOrder, isask_)>(
          reinterpret_cast<char*>(&isask_),
          reinterpret_cast<char*>(&other->isask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fantasybit::SwapOrder* Arena::CreateMaybeMessage< ::fantasybit::SwapOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::SwapOrder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
