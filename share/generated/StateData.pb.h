// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StateData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_StateData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_StateData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoData.pb.h"
#include "NameData.pb.h"
#include "StaticData.pb.h"
#include "StatusData.pb.h"
#include "ExData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_StateData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_StateData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[61]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_StateData_2eproto;
namespace fantasybit {
class AllOdersFname;
class AllOdersFnameDefaultTypeInternal;
extern AllOdersFnameDefaultTypeInternal _AllOdersFname_default_instance_;
class AllOdersSymbol;
class AllOdersSymbolDefaultTypeInternal;
extern AllOdersSymbolDefaultTypeInternal _AllOdersSymbol_default_instance_;
class AwardMeta;
class AwardMetaDefaultTypeInternal;
extern AwardMetaDefaultTypeInternal _AwardMeta_default_instance_;
class BlockMeta;
class BlockMetaDefaultTypeInternal;
extern BlockMetaDefaultTypeInternal _BlockMeta_default_instance_;
class Bootstrap;
class BootstrapDefaultTypeInternal;
extern BootstrapDefaultTypeInternal _Bootstrap_default_instance_;
class CheckNameRep;
class CheckNameRepDefaultTypeInternal;
extern CheckNameRepDefaultTypeInternal _CheckNameRep_default_instance_;
class CheckNameReq;
class CheckNameReqDefaultTypeInternal;
extern CheckNameReqDefaultTypeInternal _CheckNameReq_default_instance_;
class DataMeta;
class DataMetaDefaultTypeInternal;
extern DataMetaDefaultTypeInternal _DataMeta_default_instance_;
class FantasyNameBalMeta;
class FantasyNameBalMetaDefaultTypeInternal;
extern FantasyNameBalMetaDefaultTypeInternal _FantasyNameBalMeta_default_instance_;
class FantasyNameState;
class FantasyNameStateDefaultTypeInternal;
extern FantasyNameStateDefaultTypeInternal _FantasyNameState_default_instance_;
class GameDataRoster;
class GameDataRosterDefaultTypeInternal;
extern GameDataRosterDefaultTypeInternal _GameDataRoster_default_instance_;
class GameMeta;
class GameMetaDefaultTypeInternal;
extern GameMetaDefaultTypeInternal _GameMeta_default_instance_;
class GamePlayerProjMeta;
class GamePlayerProjMetaDefaultTypeInternal;
extern GamePlayerProjMetaDefaultTypeInternal _GamePlayerProjMeta_default_instance_;
class GameResultsMeta;
class GameResultsMetaDefaultTypeInternal;
extern GameResultsMetaDefaultTypeInternal _GameResultsMeta_default_instance_;
class GameStatusMeta;
class GameStatusMetaDefaultTypeInternal;
extern GameStatusMetaDefaultTypeInternal _GameStatusMeta_default_instance_;
class GetAllNamesRep;
class GetAllNamesRepDefaultTypeInternal;
extern GetAllNamesRepDefaultTypeInternal _GetAllNamesRep_default_instance_;
class GetCurrRostersRep;
class GetCurrRostersRepDefaultTypeInternal;
extern GetCurrRostersRepDefaultTypeInternal _GetCurrRostersRep_default_instance_;
class GetDepthRep;
class GetDepthRepDefaultTypeInternal;
extern GetDepthRepDefaultTypeInternal _GetDepthRep_default_instance_;
class GetDepthReq;
class GetDepthReqDefaultTypeInternal;
extern GetDepthReqDefaultTypeInternal _GetDepthReq_default_instance_;
class GetGlobalStateRep;
class GetGlobalStateRepDefaultTypeInternal;
extern GetGlobalStateRepDefaultTypeInternal _GetGlobalStateRep_default_instance_;
class GetOrdersRep;
class GetOrdersRepDefaultTypeInternal;
extern GetOrdersRepDefaultTypeInternal _GetOrdersRep_default_instance_;
class GetOrdersReq;
class GetOrdersReqDefaultTypeInternal;
extern GetOrdersReqDefaultTypeInternal _GetOrdersReq_default_instance_;
class GetProjectionRep;
class GetProjectionRepDefaultTypeInternal;
extern GetProjectionRepDefaultTypeInternal _GetProjectionRep_default_instance_;
class GetProjectionReq;
class GetProjectionReqDefaultTypeInternal;
extern GetProjectionReqDefaultTypeInternal _GetProjectionReq_default_instance_;
class GetROWMarketRep;
class GetROWMarketRepDefaultTypeInternal;
extern GetROWMarketRepDefaultTypeInternal _GetROWMarketRep_default_instance_;
class GetScheduleRep;
class GetScheduleRepDefaultTypeInternal;
extern GetScheduleRepDefaultTypeInternal _GetScheduleRep_default_instance_;
class GlobalStateMeta;
class GlobalStateMetaDefaultTypeInternal;
extern GlobalStateMetaDefaultTypeInternal _GlobalStateMeta_default_instance_;
class InGameProjMeta;
class InGameProjMetaDefaultTypeInternal;
extern InGameProjMetaDefaultTypeInternal _InGameProjMeta_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class LeaderBoardMeta;
class LeaderBoardMetaDefaultTypeInternal;
extern LeaderBoardMetaDefaultTypeInternal _LeaderBoardMeta_default_instance_;
class LimitBookMeta;
class LimitBookMetaDefaultTypeInternal;
extern LimitBookMetaDefaultTypeInternal _LimitBookMeta_default_instance_;
class MarketTicMeta;
class MarketTicMetaDefaultTypeInternal;
extern MarketTicMetaDefaultTypeInternal _MarketTicMeta_default_instance_;
class MerkleTree;
class MerkleTreeDefaultTypeInternal;
extern MerkleTreeDefaultTypeInternal _MerkleTree_default_instance_;
class NameStatusRep;
class NameStatusRepDefaultTypeInternal;
extern NameStatusRepDefaultTypeInternal _NameStatusRep_default_instance_;
class NameStatusReq;
class NameStatusReqDefaultTypeInternal;
extern NameStatusReqDefaultTypeInternal _NameStatusReq_default_instance_;
class NewPlayerModel;
class NewPlayerModelDefaultTypeInternal;
extern NewPlayerModelDefaultTypeInternal _NewPlayerModel_default_instance_;
class OrderFillMeta;
class OrderFillMetaDefaultTypeInternal;
extern OrderFillMetaDefaultTypeInternal _OrderFillMeta_default_instance_;
class OrderMeta;
class OrderMetaDefaultTypeInternal;
extern OrderMetaDefaultTypeInternal _OrderMeta_default_instance_;
class Pk2FnameRep;
class Pk2FnameRepDefaultTypeInternal;
extern Pk2FnameRepDefaultTypeInternal _Pk2FnameRep_default_instance_;
class Pk2FnameReq;
class Pk2FnameReqDefaultTypeInternal;
extern Pk2FnameReqDefaultTypeInternal _Pk2FnameReq_default_instance_;
class PlayerGameStats;
class PlayerGameStatsDefaultTypeInternal;
extern PlayerGameStatsDefaultTypeInternal _PlayerGameStats_default_instance_;
class PlayerMarketState;
class PlayerMarketStateDefaultTypeInternal;
extern PlayerMarketStateDefaultTypeInternal _PlayerMarketState_default_instance_;
class PlayerMeta;
class PlayerMetaDefaultTypeInternal;
extern PlayerMetaDefaultTypeInternal _PlayerMeta_default_instance_;
class PlayerProj;
class PlayerProjDefaultTypeInternal;
extern PlayerProjDefaultTypeInternal _PlayerProj_default_instance_;
class PlayerResultMeta;
class PlayerResultMetaDefaultTypeInternal;
extern PlayerResultMetaDefaultTypeInternal _PlayerResultMeta_default_instance_;
class PnlMeta;
class PnlMetaDefaultTypeInternal;
extern PnlMetaDefaultTypeInternal _PnlMeta_default_instance_;
class PosMeta;
class PosMetaDefaultTypeInternal;
extern PosMetaDefaultTypeInternal _PosMeta_default_instance_;
class ProjByName;
class ProjByNameDefaultTypeInternal;
extern ProjByNameDefaultTypeInternal _ProjByName_default_instance_;
class ProjMeta;
class ProjMetaDefaultTypeInternal;
extern ProjMetaDefaultTypeInternal _ProjMeta_default_instance_;
class ROWMarket;
class ROWMarketDefaultTypeInternal;
extern ROWMarketDefaultTypeInternal _ROWMarket_default_instance_;
class SubscribeReq;
class SubscribeReqDefaultTypeInternal;
extern SubscribeReqDefaultTypeInternal _SubscribeReq_default_instance_;
class TeamMeta;
class TeamMetaDefaultTypeInternal;
extern TeamMetaDefaultTypeInternal _TeamMeta_default_instance_;
class TeamProjMeta;
class TeamProjMetaDefaultTypeInternal;
extern TeamProjMetaDefaultTypeInternal _TeamProjMeta_default_instance_;
class TeamResultMeta;
class TeamResultMetaDefaultTypeInternal;
extern TeamResultMetaDefaultTypeInternal _TeamResultMeta_default_instance_;
class TeamRoster;
class TeamRosterDefaultTypeInternal;
extern TeamRosterDefaultTypeInternal _TeamRoster_default_instance_;
class TrMeta;
class TrMetaDefaultTypeInternal;
extern TrMetaDefaultTypeInternal _TrMeta_default_instance_;
class TxMeta;
class TxMetaDefaultTypeInternal;
extern TxMetaDefaultTypeInternal _TxMeta_default_instance_;
class WSReply;
class WSReplyDefaultTypeInternal;
extern WSReplyDefaultTypeInternal _WSReply_default_instance_;
class WeekGameStatusMeta;
class WeekGameStatusMetaDefaultTypeInternal;
extern WeekGameStatusMetaDefaultTypeInternal _WeekGameStatusMeta_default_instance_;
class WsReq;
class WsReqDefaultTypeInternal;
extern WsReqDefaultTypeInternal _WsReq_default_instance_;
class pbstate;
class pbstateDefaultTypeInternal;
extern pbstateDefaultTypeInternal _pbstate_default_instance_;
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> ::fantasybit::AllOdersFname* Arena::CreateMaybeMessage<::fantasybit::AllOdersFname>(Arena*);
template<> ::fantasybit::AllOdersSymbol* Arena::CreateMaybeMessage<::fantasybit::AllOdersSymbol>(Arena*);
template<> ::fantasybit::AwardMeta* Arena::CreateMaybeMessage<::fantasybit::AwardMeta>(Arena*);
template<> ::fantasybit::BlockMeta* Arena::CreateMaybeMessage<::fantasybit::BlockMeta>(Arena*);
template<> ::fantasybit::Bootstrap* Arena::CreateMaybeMessage<::fantasybit::Bootstrap>(Arena*);
template<> ::fantasybit::CheckNameRep* Arena::CreateMaybeMessage<::fantasybit::CheckNameRep>(Arena*);
template<> ::fantasybit::CheckNameReq* Arena::CreateMaybeMessage<::fantasybit::CheckNameReq>(Arena*);
template<> ::fantasybit::DataMeta* Arena::CreateMaybeMessage<::fantasybit::DataMeta>(Arena*);
template<> ::fantasybit::FantasyNameBalMeta* Arena::CreateMaybeMessage<::fantasybit::FantasyNameBalMeta>(Arena*);
template<> ::fantasybit::FantasyNameState* Arena::CreateMaybeMessage<::fantasybit::FantasyNameState>(Arena*);
template<> ::fantasybit::GameDataRoster* Arena::CreateMaybeMessage<::fantasybit::GameDataRoster>(Arena*);
template<> ::fantasybit::GameMeta* Arena::CreateMaybeMessage<::fantasybit::GameMeta>(Arena*);
template<> ::fantasybit::GamePlayerProjMeta* Arena::CreateMaybeMessage<::fantasybit::GamePlayerProjMeta>(Arena*);
template<> ::fantasybit::GameResultsMeta* Arena::CreateMaybeMessage<::fantasybit::GameResultsMeta>(Arena*);
template<> ::fantasybit::GameStatusMeta* Arena::CreateMaybeMessage<::fantasybit::GameStatusMeta>(Arena*);
template<> ::fantasybit::GetAllNamesRep* Arena::CreateMaybeMessage<::fantasybit::GetAllNamesRep>(Arena*);
template<> ::fantasybit::GetCurrRostersRep* Arena::CreateMaybeMessage<::fantasybit::GetCurrRostersRep>(Arena*);
template<> ::fantasybit::GetDepthRep* Arena::CreateMaybeMessage<::fantasybit::GetDepthRep>(Arena*);
template<> ::fantasybit::GetDepthReq* Arena::CreateMaybeMessage<::fantasybit::GetDepthReq>(Arena*);
template<> ::fantasybit::GetGlobalStateRep* Arena::CreateMaybeMessage<::fantasybit::GetGlobalStateRep>(Arena*);
template<> ::fantasybit::GetOrdersRep* Arena::CreateMaybeMessage<::fantasybit::GetOrdersRep>(Arena*);
template<> ::fantasybit::GetOrdersReq* Arena::CreateMaybeMessage<::fantasybit::GetOrdersReq>(Arena*);
template<> ::fantasybit::GetProjectionRep* Arena::CreateMaybeMessage<::fantasybit::GetProjectionRep>(Arena*);
template<> ::fantasybit::GetProjectionReq* Arena::CreateMaybeMessage<::fantasybit::GetProjectionReq>(Arena*);
template<> ::fantasybit::GetROWMarketRep* Arena::CreateMaybeMessage<::fantasybit::GetROWMarketRep>(Arena*);
template<> ::fantasybit::GetScheduleRep* Arena::CreateMaybeMessage<::fantasybit::GetScheduleRep>(Arena*);
template<> ::fantasybit::GlobalStateMeta* Arena::CreateMaybeMessage<::fantasybit::GlobalStateMeta>(Arena*);
template<> ::fantasybit::InGameProjMeta* Arena::CreateMaybeMessage<::fantasybit::InGameProjMeta>(Arena*);
template<> ::fantasybit::KeyValue* Arena::CreateMaybeMessage<::fantasybit::KeyValue>(Arena*);
template<> ::fantasybit::LeaderBoardMeta* Arena::CreateMaybeMessage<::fantasybit::LeaderBoardMeta>(Arena*);
template<> ::fantasybit::LimitBookMeta* Arena::CreateMaybeMessage<::fantasybit::LimitBookMeta>(Arena*);
template<> ::fantasybit::MarketTicMeta* Arena::CreateMaybeMessage<::fantasybit::MarketTicMeta>(Arena*);
template<> ::fantasybit::MerkleTree* Arena::CreateMaybeMessage<::fantasybit::MerkleTree>(Arena*);
template<> ::fantasybit::NameStatusRep* Arena::CreateMaybeMessage<::fantasybit::NameStatusRep>(Arena*);
template<> ::fantasybit::NameStatusReq* Arena::CreateMaybeMessage<::fantasybit::NameStatusReq>(Arena*);
template<> ::fantasybit::NewPlayerModel* Arena::CreateMaybeMessage<::fantasybit::NewPlayerModel>(Arena*);
template<> ::fantasybit::OrderFillMeta* Arena::CreateMaybeMessage<::fantasybit::OrderFillMeta>(Arena*);
template<> ::fantasybit::OrderMeta* Arena::CreateMaybeMessage<::fantasybit::OrderMeta>(Arena*);
template<> ::fantasybit::Pk2FnameRep* Arena::CreateMaybeMessage<::fantasybit::Pk2FnameRep>(Arena*);
template<> ::fantasybit::Pk2FnameReq* Arena::CreateMaybeMessage<::fantasybit::Pk2FnameReq>(Arena*);
template<> ::fantasybit::PlayerGameStats* Arena::CreateMaybeMessage<::fantasybit::PlayerGameStats>(Arena*);
template<> ::fantasybit::PlayerMarketState* Arena::CreateMaybeMessage<::fantasybit::PlayerMarketState>(Arena*);
template<> ::fantasybit::PlayerMeta* Arena::CreateMaybeMessage<::fantasybit::PlayerMeta>(Arena*);
template<> ::fantasybit::PlayerProj* Arena::CreateMaybeMessage<::fantasybit::PlayerProj>(Arena*);
template<> ::fantasybit::PlayerResultMeta* Arena::CreateMaybeMessage<::fantasybit::PlayerResultMeta>(Arena*);
template<> ::fantasybit::PnlMeta* Arena::CreateMaybeMessage<::fantasybit::PnlMeta>(Arena*);
template<> ::fantasybit::PosMeta* Arena::CreateMaybeMessage<::fantasybit::PosMeta>(Arena*);
template<> ::fantasybit::ProjByName* Arena::CreateMaybeMessage<::fantasybit::ProjByName>(Arena*);
template<> ::fantasybit::ProjMeta* Arena::CreateMaybeMessage<::fantasybit::ProjMeta>(Arena*);
template<> ::fantasybit::ROWMarket* Arena::CreateMaybeMessage<::fantasybit::ROWMarket>(Arena*);
template<> ::fantasybit::SubscribeReq* Arena::CreateMaybeMessage<::fantasybit::SubscribeReq>(Arena*);
template<> ::fantasybit::TeamMeta* Arena::CreateMaybeMessage<::fantasybit::TeamMeta>(Arena*);
template<> ::fantasybit::TeamProjMeta* Arena::CreateMaybeMessage<::fantasybit::TeamProjMeta>(Arena*);
template<> ::fantasybit::TeamResultMeta* Arena::CreateMaybeMessage<::fantasybit::TeamResultMeta>(Arena*);
template<> ::fantasybit::TeamRoster* Arena::CreateMaybeMessage<::fantasybit::TeamRoster>(Arena*);
template<> ::fantasybit::TrMeta* Arena::CreateMaybeMessage<::fantasybit::TrMeta>(Arena*);
template<> ::fantasybit::TxMeta* Arena::CreateMaybeMessage<::fantasybit::TxMeta>(Arena*);
template<> ::fantasybit::WSReply* Arena::CreateMaybeMessage<::fantasybit::WSReply>(Arena*);
template<> ::fantasybit::WeekGameStatusMeta* Arena::CreateMaybeMessage<::fantasybit::WeekGameStatusMeta>(Arena*);
template<> ::fantasybit::WsReq* Arena::CreateMaybeMessage<::fantasybit::WsReq>(Arena*);
template<> ::fantasybit::pbstate* Arena::CreateMaybeMessage<::fantasybit::pbstate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fantasybit {

enum CType : int {
  NONE = 0,
  CHECKNAME = 1,
  NEWTX = 2,
  PK2FNAME = 3,
  GETSTATUS = 4,
  GETALLNAMES = 5,
  GETROWMARKET = 6,
  GETDEPTH = 7,
  GETORDERS = 8,
  GETPOSITIONS = 9,
  SUBSCRIBEFNAME = 10,
  GETGLOBALSTATE = 11,
  GETSCHEDULE = 12,
  GETGAMEROSTER = 13,
  GETPROJECTIONS = 15,
  GETGAMESTART = 16
};
bool CType_IsValid(int value);
constexpr CType CType_MIN = NONE;
constexpr CType CType_MAX = GETGAMESTART;
constexpr int CType_ARRAYSIZE = CType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CType_descriptor();
template<typename T>
inline const std::string& CType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CType_descriptor(), enum_t_value);
}
inline bool CType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CType>(
    CType_descriptor(), name, value);
}
// ===================================================================

class BlockMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.BlockMeta) */ {
 public:
  inline BlockMeta() : BlockMeta(nullptr) {};
  virtual ~BlockMeta();

  BlockMeta(const BlockMeta& from);
  BlockMeta(BlockMeta&& from) noexcept
    : BlockMeta() {
    *this = ::std::move(from);
  }

  inline BlockMeta& operator=(const BlockMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockMeta& operator=(BlockMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockMeta* internal_default_instance() {
    return reinterpret_cast<const BlockMeta*>(
               &_BlockMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockMeta& a, BlockMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockMeta* New() const final {
    return CreateMaybeMessage<BlockMeta>(nullptr);
  }

  BlockMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockMeta& from);
  void MergeFrom(const BlockMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.BlockMeta";
  }
  protected:
  explicit BlockMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxmetarootFieldNumber = 10,
    kPrevFieldNumber = 20,
    kNextFieldNumber = 30,
    kTrmetaidFieldNumber = 50,
    kPbstateidFieldNumber = 60,
    kBlocknumFieldNumber = 40,
  };
  // optional bytes txmetaroot = 10;
  bool has_txmetaroot() const;
  private:
  bool _internal_has_txmetaroot() const;
  public:
  void clear_txmetaroot();
  const std::string& txmetaroot() const;
  void set_txmetaroot(const std::string& value);
  void set_txmetaroot(std::string&& value);
  void set_txmetaroot(const char* value);
  void set_txmetaroot(const void* value, size_t size);
  std::string* mutable_txmetaroot();
  std::string* release_txmetaroot();
  void set_allocated_txmetaroot(std::string* txmetaroot);
  private:
  const std::string& _internal_txmetaroot() const;
  void _internal_set_txmetaroot(const std::string& value);
  std::string* _internal_mutable_txmetaroot();
  public:

  // optional bytes prev = 20;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional bytes next = 30;
  bool has_next() const;
  private:
  bool _internal_has_next() const;
  public:
  void clear_next();
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);
  private:
  const std::string& _internal_next() const;
  void _internal_set_next(const std::string& value);
  std::string* _internal_mutable_next();
  public:

  // optional bytes trmetaid = 50;
  bool has_trmetaid() const;
  private:
  bool _internal_has_trmetaid() const;
  public:
  void clear_trmetaid();
  const std::string& trmetaid() const;
  void set_trmetaid(const std::string& value);
  void set_trmetaid(std::string&& value);
  void set_trmetaid(const char* value);
  void set_trmetaid(const void* value, size_t size);
  std::string* mutable_trmetaid();
  std::string* release_trmetaid();
  void set_allocated_trmetaid(std::string* trmetaid);
  private:
  const std::string& _internal_trmetaid() const;
  void _internal_set_trmetaid(const std::string& value);
  std::string* _internal_mutable_trmetaid();
  public:

  // optional bytes pbstateid = 60;
  bool has_pbstateid() const;
  private:
  bool _internal_has_pbstateid() const;
  public:
  void clear_pbstateid();
  const std::string& pbstateid() const;
  void set_pbstateid(const std::string& value);
  void set_pbstateid(std::string&& value);
  void set_pbstateid(const char* value);
  void set_pbstateid(const void* value, size_t size);
  std::string* mutable_pbstateid();
  std::string* release_pbstateid();
  void set_allocated_pbstateid(std::string* pbstateid);
  private:
  const std::string& _internal_pbstateid() const;
  void _internal_set_pbstateid(const std::string& value);
  std::string* _internal_mutable_pbstateid();
  public:

  // optional int32 blocknum = 40;
  bool has_blocknum() const;
  private:
  bool _internal_has_blocknum() const;
  public:
  void clear_blocknum();
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum() const;
  void set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocknum() const;
  void _internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.BlockMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pbstateid_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class TxMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.TxMeta) */ {
 public:
  inline TxMeta() : TxMeta(nullptr) {};
  virtual ~TxMeta();

  TxMeta(const TxMeta& from);
  TxMeta(TxMeta&& from) noexcept
    : TxMeta() {
    *this = ::std::move(from);
  }

  inline TxMeta& operator=(const TxMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxMeta& operator=(TxMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxMeta* internal_default_instance() {
    return reinterpret_cast<const TxMeta*>(
               &_TxMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TxMeta& a, TxMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(TxMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxMeta* New() const final {
    return CreateMaybeMessage<TxMeta>(nullptr);
  }

  TxMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxMeta& from);
  void MergeFrom(const TxMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.TxMeta";
  }
  protected:
  explicit TxMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyNameFieldNumber = 60,
    kIdFieldNumber = 70,
    kTxFieldNumber = 50,
    kTxtypeFieldNumber = 40,
    kBlocknumFieldNumber = 10,
    kTxnumFieldNumber = 20,
  };
  // optional string fantasy_name = 60;
  bool has_fantasy_name() const;
  private:
  bool _internal_has_fantasy_name() const;
  public:
  void clear_fantasy_name();
  const std::string& fantasy_name() const;
  void set_fantasy_name(const std::string& value);
  void set_fantasy_name(std::string&& value);
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  std::string* mutable_fantasy_name();
  std::string* release_fantasy_name();
  void set_allocated_fantasy_name(std::string* fantasy_name);
  private:
  const std::string& _internal_fantasy_name() const;
  void _internal_set_fantasy_name(const std::string& value);
  std::string* _internal_mutable_fantasy_name();
  public:

  // optional bytes id = 70;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .fantasybit.Transaction tx = 50;
  bool has_tx() const;
  private:
  bool _internal_has_tx() const;
  public:
  void clear_tx();
  const ::fantasybit::Transaction& tx() const;
  ::fantasybit::Transaction* release_tx();
  ::fantasybit::Transaction* mutable_tx();
  void set_allocated_tx(::fantasybit::Transaction* tx);
  private:
  const ::fantasybit::Transaction& _internal_tx() const;
  ::fantasybit::Transaction* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::fantasybit::Transaction* tx);
  ::fantasybit::Transaction* unsafe_arena_release_tx();

  // optional .fantasybit.TransType txtype = 40;
  bool has_txtype() const;
  private:
  bool _internal_has_txtype() const;
  public:
  void clear_txtype();
  ::fantasybit::TransType txtype() const;
  void set_txtype(::fantasybit::TransType value);
  private:
  ::fantasybit::TransType _internal_txtype() const;
  void _internal_set_txtype(::fantasybit::TransType value);
  public:

  // optional int32 blocknum = 10;
  bool has_blocknum() const;
  private:
  bool _internal_has_blocknum() const;
  public:
  void clear_blocknum();
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum() const;
  void set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocknum() const;
  void _internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 txnum = 20;
  bool has_txnum() const;
  private:
  bool _internal_has_txnum() const;
  public:
  void clear_txnum();
  ::PROTOBUF_NAMESPACE_ID::int32 txnum() const;
  void set_txnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_txnum() const;
  void _internal_set_txnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.TxMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fantasy_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::fantasybit::Transaction* tx_;
  int txtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum_;
  ::PROTOBUF_NAMESPACE_ID::int32 txnum_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class TrMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.TrMeta) */ {
 public:
  inline TrMeta() : TrMeta(nullptr) {};
  virtual ~TrMeta();

  TrMeta(const TrMeta& from);
  TrMeta(TrMeta&& from) noexcept
    : TrMeta() {
    *this = ::std::move(from);
  }

  inline TrMeta& operator=(const TrMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrMeta& operator=(TrMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrMeta* internal_default_instance() {
    return reinterpret_cast<const TrMeta*>(
               &_TrMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrMeta& a, TrMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(TrMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrMeta* New() const final {
    return CreateMaybeMessage<TrMeta>(nullptr);
  }

  TrMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrMeta& from);
  void MergeFrom(const TrMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.TrMeta";
  }
  protected:
  explicit TrMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamemetarootFieldNumber = 70,
    kDatametarootFieldNumber = 80,
    kTxmetaidFieldNumber = 100,
    kWeekFieldNumber = 60,
    kBlocknumFieldNumber = 10,
    kSeasonFieldNumber = 50,
    kTypeFieldNumber = 40,
  };
  // optional bytes gamemetaroot = 70;
  bool has_gamemetaroot() const;
  private:
  bool _internal_has_gamemetaroot() const;
  public:
  void clear_gamemetaroot();
  const std::string& gamemetaroot() const;
  void set_gamemetaroot(const std::string& value);
  void set_gamemetaroot(std::string&& value);
  void set_gamemetaroot(const char* value);
  void set_gamemetaroot(const void* value, size_t size);
  std::string* mutable_gamemetaroot();
  std::string* release_gamemetaroot();
  void set_allocated_gamemetaroot(std::string* gamemetaroot);
  private:
  const std::string& _internal_gamemetaroot() const;
  void _internal_set_gamemetaroot(const std::string& value);
  std::string* _internal_mutable_gamemetaroot();
  public:

  // optional bytes datametaroot = 80;
  bool has_datametaroot() const;
  private:
  bool _internal_has_datametaroot() const;
  public:
  void clear_datametaroot();
  const std::string& datametaroot() const;
  void set_datametaroot(const std::string& value);
  void set_datametaroot(std::string&& value);
  void set_datametaroot(const char* value);
  void set_datametaroot(const void* value, size_t size);
  std::string* mutable_datametaroot();
  std::string* release_datametaroot();
  void set_allocated_datametaroot(std::string* datametaroot);
  private:
  const std::string& _internal_datametaroot() const;
  void _internal_set_datametaroot(const std::string& value);
  std::string* _internal_mutable_datametaroot();
  public:

  // optional bytes txmetaid = 100;
  bool has_txmetaid() const;
  private:
  bool _internal_has_txmetaid() const;
  public:
  void clear_txmetaid();
  const std::string& txmetaid() const;
  void set_txmetaid(const std::string& value);
  void set_txmetaid(std::string&& value);
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  std::string* mutable_txmetaid();
  std::string* release_txmetaid();
  void set_allocated_txmetaid(std::string* txmetaid);
  private:
  const std::string& _internal_txmetaid() const;
  void _internal_set_txmetaid(const std::string& value);
  std::string* _internal_mutable_txmetaid();
  public:

  // optional uint32 week = 60;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 blocknum = 10;
  bool has_blocknum() const;
  private:
  bool _internal_has_blocknum() const;
  public:
  void clear_blocknum();
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum() const;
  void set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocknum() const;
  void _internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 season = 50;
  bool has_season() const;
  private:
  bool _internal_has_season() const;
  public:
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::uint32 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .fantasybit.TrType type = 40;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::fantasybit::TrType type() const;
  void set_type(::fantasybit::TrType value);
  private:
  ::fantasybit::TrType _internal_type() const;
  void _internal_set_type(::fantasybit::TrType value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.TrMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamemetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datametaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txmetaid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 week_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 season_;
  int type_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GameMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameMeta) */ {
 public:
  inline GameMeta() : GameMeta(nullptr) {};
  virtual ~GameMeta();

  GameMeta(const GameMeta& from);
  GameMeta(GameMeta&& from) noexcept
    : GameMeta() {
    *this = ::std::move(from);
  }

  inline GameMeta& operator=(const GameMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameMeta& operator=(GameMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMeta* internal_default_instance() {
    return reinterpret_cast<const GameMeta*>(
               &_GameMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameMeta& a, GameMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(GameMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameMeta* New() const final {
    return CreateMaybeMessage<GameMeta>(nullptr);
  }

  GameMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameMeta& from);
  void MergeFrom(const GameMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GameMeta";
  }
  protected:
  explicit GameMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxmetaidFieldNumber = 10,
    kGamedataFieldNumber = 20,
  };
  // optional bytes txmetaid = 10;
  bool has_txmetaid() const;
  private:
  bool _internal_has_txmetaid() const;
  public:
  void clear_txmetaid();
  const std::string& txmetaid() const;
  void set_txmetaid(const std::string& value);
  void set_txmetaid(std::string&& value);
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  std::string* mutable_txmetaid();
  std::string* release_txmetaid();
  void set_allocated_txmetaid(std::string* txmetaid);
  private:
  const std::string& _internal_txmetaid() const;
  void _internal_set_txmetaid(const std::string& value);
  std::string* _internal_mutable_txmetaid();
  public:

  // optional .fantasybit.GameData gamedata = 20;
  bool has_gamedata() const;
  private:
  bool _internal_has_gamedata() const;
  public:
  void clear_gamedata();
  const ::fantasybit::GameData& gamedata() const;
  ::fantasybit::GameData* release_gamedata();
  ::fantasybit::GameData* mutable_gamedata();
  void set_allocated_gamedata(::fantasybit::GameData* gamedata);
  private:
  const ::fantasybit::GameData& _internal_gamedata() const;
  ::fantasybit::GameData* _internal_mutable_gamedata();
  public:
  void unsafe_arena_set_allocated_gamedata(
      ::fantasybit::GameData* gamedata);
  ::fantasybit::GameData* unsafe_arena_release_gamedata();

  // @@protoc_insertion_point(class_scope:fantasybit.GameMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txmetaid_;
  ::fantasybit::GameData* gamedata_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class DataMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.DataMeta) */ {
 public:
  inline DataMeta() : DataMeta(nullptr) {};
  virtual ~DataMeta();

  DataMeta(const DataMeta& from);
  DataMeta(DataMeta&& from) noexcept
    : DataMeta() {
    *this = ::std::move(from);
  }

  inline DataMeta& operator=(const DataMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMeta& operator=(DataMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataMeta* internal_default_instance() {
    return reinterpret_cast<const DataMeta*>(
               &_DataMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DataMeta& a, DataMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataMeta* New() const final {
    return CreateMaybeMessage<DataMeta>(nullptr);
  }

  DataMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataMeta& from);
  void MergeFrom(const DataMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.DataMeta";
  }
  protected:
  explicit DataMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxmetaidFieldNumber = 10,
    kDataFieldNumber = 20,
  };
  // optional bytes txmetaid = 10;
  bool has_txmetaid() const;
  private:
  bool _internal_has_txmetaid() const;
  public:
  void clear_txmetaid();
  const std::string& txmetaid() const;
  void set_txmetaid(const std::string& value);
  void set_txmetaid(std::string&& value);
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  std::string* mutable_txmetaid();
  std::string* release_txmetaid();
  void set_allocated_txmetaid(std::string* txmetaid);
  private:
  const std::string& _internal_txmetaid() const;
  void _internal_set_txmetaid(const std::string& value);
  std::string* _internal_mutable_txmetaid();
  public:

  // optional .fantasybit.Data data = 20;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::fantasybit::Data& data() const;
  ::fantasybit::Data* release_data();
  ::fantasybit::Data* mutable_data();
  void set_allocated_data(::fantasybit::Data* data);
  private:
  const ::fantasybit::Data& _internal_data() const;
  ::fantasybit::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::fantasybit::Data* data);
  ::fantasybit::Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:fantasybit.DataMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txmetaid_;
  ::fantasybit::Data* data_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class LeaderBoardMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.LeaderBoardMeta) */ {
 public:
  inline LeaderBoardMeta() : LeaderBoardMeta(nullptr) {};
  virtual ~LeaderBoardMeta();

  LeaderBoardMeta(const LeaderBoardMeta& from);
  LeaderBoardMeta(LeaderBoardMeta&& from) noexcept
    : LeaderBoardMeta() {
    *this = ::std::move(from);
  }

  inline LeaderBoardMeta& operator=(const LeaderBoardMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderBoardMeta& operator=(LeaderBoardMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaderBoardMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderBoardMeta* internal_default_instance() {
    return reinterpret_cast<const LeaderBoardMeta*>(
               &_LeaderBoardMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LeaderBoardMeta& a, LeaderBoardMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderBoardMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderBoardMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaderBoardMeta* New() const final {
    return CreateMaybeMessage<LeaderBoardMeta>(nullptr);
  }

  LeaderBoardMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaderBoardMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaderBoardMeta& from);
  void MergeFrom(const LeaderBoardMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderBoardMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.LeaderBoardMeta";
  }
  protected:
  explicit LeaderBoardMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFnbalmetarootFieldNumber = 20,
    kPrevFieldNumber = 30,
    kNextFieldNumber = 40,
    kWeekFieldNumber = 10,
  };
  // optional bytes fnbalmetaroot = 20;
  bool has_fnbalmetaroot() const;
  private:
  bool _internal_has_fnbalmetaroot() const;
  public:
  void clear_fnbalmetaroot();
  const std::string& fnbalmetaroot() const;
  void set_fnbalmetaroot(const std::string& value);
  void set_fnbalmetaroot(std::string&& value);
  void set_fnbalmetaroot(const char* value);
  void set_fnbalmetaroot(const void* value, size_t size);
  std::string* mutable_fnbalmetaroot();
  std::string* release_fnbalmetaroot();
  void set_allocated_fnbalmetaroot(std::string* fnbalmetaroot);
  private:
  const std::string& _internal_fnbalmetaroot() const;
  void _internal_set_fnbalmetaroot(const std::string& value);
  std::string* _internal_mutable_fnbalmetaroot();
  public:

  // optional bytes prev = 30;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional bytes next = 40;
  bool has_next() const;
  private:
  bool _internal_has_next() const;
  public:
  void clear_next();
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);
  private:
  const std::string& _internal_next() const;
  void _internal_set_next(const std::string& value);
  std::string* _internal_mutable_next();
  public:

  // optional uint32 week = 10;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.LeaderBoardMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fnbalmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  ::PROTOBUF_NAMESPACE_ID::uint32 week_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class FantasyNameBalMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyNameBalMeta) */ {
 public:
  inline FantasyNameBalMeta() : FantasyNameBalMeta(nullptr) {};
  virtual ~FantasyNameBalMeta();

  FantasyNameBalMeta(const FantasyNameBalMeta& from);
  FantasyNameBalMeta(FantasyNameBalMeta&& from) noexcept
    : FantasyNameBalMeta() {
    *this = ::std::move(from);
  }

  inline FantasyNameBalMeta& operator=(const FantasyNameBalMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline FantasyNameBalMeta& operator=(FantasyNameBalMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FantasyNameBalMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyNameBalMeta* internal_default_instance() {
    return reinterpret_cast<const FantasyNameBalMeta*>(
               &_FantasyNameBalMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FantasyNameBalMeta& a, FantasyNameBalMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(FantasyNameBalMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FantasyNameBalMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FantasyNameBalMeta* New() const final {
    return CreateMaybeMessage<FantasyNameBalMeta>(nullptr);
  }

  FantasyNameBalMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FantasyNameBalMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FantasyNameBalMeta& from);
  void MergeFrom(const FantasyNameBalMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FantasyNameBalMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.FantasyNameBalMeta";
  }
  protected:
  explicit FantasyNameBalMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxmetaidFieldNumber = 10,
    kTrmetaidFieldNumber = 20,
    kNameFieldNumber = 25,
    kPublicKeyFieldNumber = 30,
    kAwardmetarootFieldNumber = 50,
    kPnlmetarootFieldNumber = 60,
    kPrevFieldNumber = 70,
    kNextFieldNumber = 80,
    kBitsFieldNumber = 35,
    kStakeFieldNumber = 40,
    kBlockFieldNumber = 41,
    kCountFieldNumber = 42,
    kNonceFieldNumber = 45,
  };
  // optional bytes txmetaid = 10;
  bool has_txmetaid() const;
  private:
  bool _internal_has_txmetaid() const;
  public:
  void clear_txmetaid();
  const std::string& txmetaid() const;
  void set_txmetaid(const std::string& value);
  void set_txmetaid(std::string&& value);
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  std::string* mutable_txmetaid();
  std::string* release_txmetaid();
  void set_allocated_txmetaid(std::string* txmetaid);
  private:
  const std::string& _internal_txmetaid() const;
  void _internal_set_txmetaid(const std::string& value);
  std::string* _internal_mutable_txmetaid();
  public:

  // optional bytes trmetaid = 20;
  bool has_trmetaid() const;
  private:
  bool _internal_has_trmetaid() const;
  public:
  void clear_trmetaid();
  const std::string& trmetaid() const;
  void set_trmetaid(const std::string& value);
  void set_trmetaid(std::string&& value);
  void set_trmetaid(const char* value);
  void set_trmetaid(const void* value, size_t size);
  std::string* mutable_trmetaid();
  std::string* release_trmetaid();
  void set_allocated_trmetaid(std::string* trmetaid);
  private:
  const std::string& _internal_trmetaid() const;
  void _internal_set_trmetaid(const std::string& value);
  std::string* _internal_mutable_trmetaid();
  public:

  // optional string name = 25;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string public_key = 30;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // optional bytes awardmetaroot = 50;
  bool has_awardmetaroot() const;
  private:
  bool _internal_has_awardmetaroot() const;
  public:
  void clear_awardmetaroot();
  const std::string& awardmetaroot() const;
  void set_awardmetaroot(const std::string& value);
  void set_awardmetaroot(std::string&& value);
  void set_awardmetaroot(const char* value);
  void set_awardmetaroot(const void* value, size_t size);
  std::string* mutable_awardmetaroot();
  std::string* release_awardmetaroot();
  void set_allocated_awardmetaroot(std::string* awardmetaroot);
  private:
  const std::string& _internal_awardmetaroot() const;
  void _internal_set_awardmetaroot(const std::string& value);
  std::string* _internal_mutable_awardmetaroot();
  public:

  // optional bytes pnlmetaroot = 60;
  bool has_pnlmetaroot() const;
  private:
  bool _internal_has_pnlmetaroot() const;
  public:
  void clear_pnlmetaroot();
  const std::string& pnlmetaroot() const;
  void set_pnlmetaroot(const std::string& value);
  void set_pnlmetaroot(std::string&& value);
  void set_pnlmetaroot(const char* value);
  void set_pnlmetaroot(const void* value, size_t size);
  std::string* mutable_pnlmetaroot();
  std::string* release_pnlmetaroot();
  void set_allocated_pnlmetaroot(std::string* pnlmetaroot);
  private:
  const std::string& _internal_pnlmetaroot() const;
  void _internal_set_pnlmetaroot(const std::string& value);
  std::string* _internal_mutable_pnlmetaroot();
  public:

  // optional bytes prev = 70;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional bytes next = 80;
  bool has_next() const;
  private:
  bool _internal_has_next() const;
  public:
  void clear_next();
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);
  private:
  const std::string& _internal_next() const;
  void _internal_set_next(const std::string& value);
  std::string* _internal_mutable_next();
  public:

  // optional uint64 bits = 35;
  bool has_bits() const;
  private:
  bool _internal_has_bits() const;
  public:
  void clear_bits();
  ::PROTOBUF_NAMESPACE_ID::uint64 bits() const;
  void set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bits() const;
  void _internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 stake = 40;
  bool has_stake() const;
  private:
  bool _internal_has_stake() const;
  public:
  void clear_stake();
  ::PROTOBUF_NAMESPACE_ID::int64 stake() const;
  void set_stake(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stake() const;
  void _internal_set_stake(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 block = 41;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::int32 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block() const;
  void _internal_set_block(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 count = 42;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 nonce = 45;
  bool has_nonce() const;
  private:
  bool _internal_has_nonce() const;
  public:
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameBalMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr awardmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pnlmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bits_;
  ::PROTOBUF_NAMESPACE_ID::int64 stake_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class FantasyNameState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyNameState) */ {
 public:
  inline FantasyNameState() : FantasyNameState(nullptr) {};
  virtual ~FantasyNameState();

  FantasyNameState(const FantasyNameState& from);
  FantasyNameState(FantasyNameState&& from) noexcept
    : FantasyNameState() {
    *this = ::std::move(from);
  }

  inline FantasyNameState& operator=(const FantasyNameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FantasyNameState& operator=(FantasyNameState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FantasyNameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyNameState* internal_default_instance() {
    return reinterpret_cast<const FantasyNameState*>(
               &_FantasyNameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FantasyNameState& a, FantasyNameState& b) {
    a.Swap(&b);
  }
  inline void Swap(FantasyNameState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FantasyNameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FantasyNameState* New() const final {
    return CreateMaybeMessage<FantasyNameState>(nullptr);
  }

  FantasyNameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FantasyNameState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FantasyNameState& from);
  void MergeFrom(const FantasyNameState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FantasyNameState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.FantasyNameState";
  }
  protected:
  explicit FantasyNameState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFantasynamebalmetaidFieldNumber = 10,
    kPosmetarootFieldNumber = 20,
    kOrdersmetarootFieldNumber = 30,
    kProjmetarootFieldNumber = 40,
    kTxmetaidFieldNumber = 50,
    kPrevFieldNumber = 70,
    kNextFieldNumber = 80,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes fantasynamebalmetaid = 10;
  bool has_fantasynamebalmetaid() const;
  private:
  bool _internal_has_fantasynamebalmetaid() const;
  public:
  void clear_fantasynamebalmetaid();
  const std::string& fantasynamebalmetaid() const;
  void set_fantasynamebalmetaid(const std::string& value);
  void set_fantasynamebalmetaid(std::string&& value);
  void set_fantasynamebalmetaid(const char* value);
  void set_fantasynamebalmetaid(const void* value, size_t size);
  std::string* mutable_fantasynamebalmetaid();
  std::string* release_fantasynamebalmetaid();
  void set_allocated_fantasynamebalmetaid(std::string* fantasynamebalmetaid);
  private:
  const std::string& _internal_fantasynamebalmetaid() const;
  void _internal_set_fantasynamebalmetaid(const std::string& value);
  std::string* _internal_mutable_fantasynamebalmetaid();
  public:

  // optional bytes posmetaroot = 20;
  bool has_posmetaroot() const;
  private:
  bool _internal_has_posmetaroot() const;
  public:
  void clear_posmetaroot();
  const std::string& posmetaroot() const;
  void set_posmetaroot(const std::string& value);
  void set_posmetaroot(std::string&& value);
  void set_posmetaroot(const char* value);
  void set_posmetaroot(const void* value, size_t size);
  std::string* mutable_posmetaroot();
  std::string* release_posmetaroot();
  void set_allocated_posmetaroot(std::string* posmetaroot);
  private:
  const std::string& _internal_posmetaroot() const;
  void _internal_set_posmetaroot(const std::string& value);
  std::string* _internal_mutable_posmetaroot();
  public:

  // optional bytes ordersmetaroot = 30;
  bool has_ordersmetaroot() const;
  private:
  bool _internal_has_ordersmetaroot() const;
  public:
  void clear_ordersmetaroot();
  const std::string& ordersmetaroot() const;
  void set_ordersmetaroot(const std::string& value);
  void set_ordersmetaroot(std::string&& value);
  void set_ordersmetaroot(const char* value);
  void set_ordersmetaroot(const void* value, size_t size);
  std::string* mutable_ordersmetaroot();
  std::string* release_ordersmetaroot();
  void set_allocated_ordersmetaroot(std::string* ordersmetaroot);
  private:
  const std::string& _internal_ordersmetaroot() const;
  void _internal_set_ordersmetaroot(const std::string& value);
  std::string* _internal_mutable_ordersmetaroot();
  public:

  // optional bytes projmetaroot = 40;
  bool has_projmetaroot() const;
  private:
  bool _internal_has_projmetaroot() const;
  public:
  void clear_projmetaroot();
  const std::string& projmetaroot() const;
  void set_projmetaroot(const std::string& value);
  void set_projmetaroot(std::string&& value);
  void set_projmetaroot(const char* value);
  void set_projmetaroot(const void* value, size_t size);
  std::string* mutable_projmetaroot();
  std::string* release_projmetaroot();
  void set_allocated_projmetaroot(std::string* projmetaroot);
  private:
  const std::string& _internal_projmetaroot() const;
  void _internal_set_projmetaroot(const std::string& value);
  std::string* _internal_mutable_projmetaroot();
  public:

  // optional bytes txmetaid = 50;
  bool has_txmetaid() const;
  private:
  bool _internal_has_txmetaid() const;
  public:
  void clear_txmetaid();
  const std::string& txmetaid() const;
  void set_txmetaid(const std::string& value);
  void set_txmetaid(std::string&& value);
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  std::string* mutable_txmetaid();
  std::string* release_txmetaid();
  void set_allocated_txmetaid(std::string* txmetaid);
  private:
  const std::string& _internal_txmetaid() const;
  void _internal_set_txmetaid(const std::string& value);
  std::string* _internal_mutable_txmetaid();
  public:

  // optional bytes prev = 70;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional bytes next = 80;
  bool has_next() const;
  private:
  bool _internal_has_next() const;
  public:
  void clear_next();
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);
  private:
  const std::string& _internal_next() const;
  void _internal_set_next(const std::string& value);
  std::string* _internal_mutable_next();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fantasynamebalmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordersmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class WeekGameStatusMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.WeekGameStatusMeta) */ {
 public:
  inline WeekGameStatusMeta() : WeekGameStatusMeta(nullptr) {};
  virtual ~WeekGameStatusMeta();

  WeekGameStatusMeta(const WeekGameStatusMeta& from);
  WeekGameStatusMeta(WeekGameStatusMeta&& from) noexcept
    : WeekGameStatusMeta() {
    *this = ::std::move(from);
  }

  inline WeekGameStatusMeta& operator=(const WeekGameStatusMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeekGameStatusMeta& operator=(WeekGameStatusMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeekGameStatusMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeekGameStatusMeta* internal_default_instance() {
    return reinterpret_cast<const WeekGameStatusMeta*>(
               &_WeekGameStatusMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WeekGameStatusMeta& a, WeekGameStatusMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(WeekGameStatusMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeekGameStatusMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeekGameStatusMeta* New() const final {
    return CreateMaybeMessage<WeekGameStatusMeta>(nullptr);
  }

  WeekGameStatusMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeekGameStatusMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeekGameStatusMeta& from);
  void MergeFrom(const WeekGameStatusMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeekGameStatusMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.WeekGameStatusMeta";
  }
  protected:
  explicit WeekGameStatusMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameresultmetarootFieldNumber = 20,
    kIngameprojmetarootFieldNumber = 30,
    kOpengamestatusrootFieldNumber = 40,
    kPrevFieldNumber = 50,
    kNextFieldNumber = 60,
    kWeekFieldNumber = 10,
  };
  // optional bytes gameresultmetaroot = 20;
  bool has_gameresultmetaroot() const;
  private:
  bool _internal_has_gameresultmetaroot() const;
  public:
  void clear_gameresultmetaroot();
  const std::string& gameresultmetaroot() const;
  void set_gameresultmetaroot(const std::string& value);
  void set_gameresultmetaroot(std::string&& value);
  void set_gameresultmetaroot(const char* value);
  void set_gameresultmetaroot(const void* value, size_t size);
  std::string* mutable_gameresultmetaroot();
  std::string* release_gameresultmetaroot();
  void set_allocated_gameresultmetaroot(std::string* gameresultmetaroot);
  private:
  const std::string& _internal_gameresultmetaroot() const;
  void _internal_set_gameresultmetaroot(const std::string& value);
  std::string* _internal_mutable_gameresultmetaroot();
  public:

  // optional bytes ingameprojmetaroot = 30;
  bool has_ingameprojmetaroot() const;
  private:
  bool _internal_has_ingameprojmetaroot() const;
  public:
  void clear_ingameprojmetaroot();
  const std::string& ingameprojmetaroot() const;
  void set_ingameprojmetaroot(const std::string& value);
  void set_ingameprojmetaroot(std::string&& value);
  void set_ingameprojmetaroot(const char* value);
  void set_ingameprojmetaroot(const void* value, size_t size);
  std::string* mutable_ingameprojmetaroot();
  std::string* release_ingameprojmetaroot();
  void set_allocated_ingameprojmetaroot(std::string* ingameprojmetaroot);
  private:
  const std::string& _internal_ingameprojmetaroot() const;
  void _internal_set_ingameprojmetaroot(const std::string& value);
  std::string* _internal_mutable_ingameprojmetaroot();
  public:

  // optional bytes opengamestatusroot = 40;
  bool has_opengamestatusroot() const;
  private:
  bool _internal_has_opengamestatusroot() const;
  public:
  void clear_opengamestatusroot();
  const std::string& opengamestatusroot() const;
  void set_opengamestatusroot(const std::string& value);
  void set_opengamestatusroot(std::string&& value);
  void set_opengamestatusroot(const char* value);
  void set_opengamestatusroot(const void* value, size_t size);
  std::string* mutable_opengamestatusroot();
  std::string* release_opengamestatusroot();
  void set_allocated_opengamestatusroot(std::string* opengamestatusroot);
  private:
  const std::string& _internal_opengamestatusroot() const;
  void _internal_set_opengamestatusroot(const std::string& value);
  std::string* _internal_mutable_opengamestatusroot();
  public:

  // optional bytes prev = 50;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional bytes next = 60;
  bool has_next() const;
  private:
  bool _internal_has_next() const;
  public:
  void clear_next();
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);
  private:
  const std::string& _internal_next() const;
  void _internal_set_next(const std::string& value);
  std::string* _internal_mutable_next();
  public:

  // optional uint32 week = 10;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.WeekGameStatusMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameresultmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ingameprojmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opengamestatusroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  ::PROTOBUF_NAMESPACE_ID::uint32 week_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class InGameProjMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.InGameProjMeta) */ {
 public:
  inline InGameProjMeta() : InGameProjMeta(nullptr) {};
  virtual ~InGameProjMeta();

  InGameProjMeta(const InGameProjMeta& from);
  InGameProjMeta(InGameProjMeta&& from) noexcept
    : InGameProjMeta() {
    *this = ::std::move(from);
  }

  inline InGameProjMeta& operator=(const InGameProjMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline InGameProjMeta& operator=(InGameProjMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InGameProjMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InGameProjMeta* internal_default_instance() {
    return reinterpret_cast<const InGameProjMeta*>(
               &_InGameProjMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InGameProjMeta& a, InGameProjMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(InGameProjMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InGameProjMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InGameProjMeta* New() const final {
    return CreateMaybeMessage<InGameProjMeta>(nullptr);
  }

  InGameProjMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InGameProjMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InGameProjMeta& from);
  void MergeFrom(const InGameProjMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InGameProjMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.InGameProjMeta";
  }
  protected:
  explicit InGameProjMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameidFieldNumber = 20,
    kGamestatusmetaidFieldNumber = 40,
    kGamedatametaidFieldNumber = 50,
    kHomeprojmetaFieldNumber = 60,
    kAwayprojmetaFieldNumber = 70,
  };
  // optional string gameid = 20;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  const std::string& gameid() const;
  void set_gameid(const std::string& value);
  void set_gameid(std::string&& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  std::string* mutable_gameid();
  std::string* release_gameid();
  void set_allocated_gameid(std::string* gameid);
  private:
  const std::string& _internal_gameid() const;
  void _internal_set_gameid(const std::string& value);
  std::string* _internal_mutable_gameid();
  public:

  // optional bytes gamestatusmetaid = 40;
  bool has_gamestatusmetaid() const;
  private:
  bool _internal_has_gamestatusmetaid() const;
  public:
  void clear_gamestatusmetaid();
  const std::string& gamestatusmetaid() const;
  void set_gamestatusmetaid(const std::string& value);
  void set_gamestatusmetaid(std::string&& value);
  void set_gamestatusmetaid(const char* value);
  void set_gamestatusmetaid(const void* value, size_t size);
  std::string* mutable_gamestatusmetaid();
  std::string* release_gamestatusmetaid();
  void set_allocated_gamestatusmetaid(std::string* gamestatusmetaid);
  private:
  const std::string& _internal_gamestatusmetaid() const;
  void _internal_set_gamestatusmetaid(const std::string& value);
  std::string* _internal_mutable_gamestatusmetaid();
  public:

  // optional bytes gamedatametaid = 50;
  bool has_gamedatametaid() const;
  private:
  bool _internal_has_gamedatametaid() const;
  public:
  void clear_gamedatametaid();
  const std::string& gamedatametaid() const;
  void set_gamedatametaid(const std::string& value);
  void set_gamedatametaid(std::string&& value);
  void set_gamedatametaid(const char* value);
  void set_gamedatametaid(const void* value, size_t size);
  std::string* mutable_gamedatametaid();
  std::string* release_gamedatametaid();
  void set_allocated_gamedatametaid(std::string* gamedatametaid);
  private:
  const std::string& _internal_gamedatametaid() const;
  void _internal_set_gamedatametaid(const std::string& value);
  std::string* _internal_mutable_gamedatametaid();
  public:

  // optional bytes homeprojmeta = 60;
  bool has_homeprojmeta() const;
  private:
  bool _internal_has_homeprojmeta() const;
  public:
  void clear_homeprojmeta();
  const std::string& homeprojmeta() const;
  void set_homeprojmeta(const std::string& value);
  void set_homeprojmeta(std::string&& value);
  void set_homeprojmeta(const char* value);
  void set_homeprojmeta(const void* value, size_t size);
  std::string* mutable_homeprojmeta();
  std::string* release_homeprojmeta();
  void set_allocated_homeprojmeta(std::string* homeprojmeta);
  private:
  const std::string& _internal_homeprojmeta() const;
  void _internal_set_homeprojmeta(const std::string& value);
  std::string* _internal_mutable_homeprojmeta();
  public:

  // optional bytes awayprojmeta = 70;
  bool has_awayprojmeta() const;
  private:
  bool _internal_has_awayprojmeta() const;
  public:
  void clear_awayprojmeta();
  const std::string& awayprojmeta() const;
  void set_awayprojmeta(const std::string& value);
  void set_awayprojmeta(std::string&& value);
  void set_awayprojmeta(const char* value);
  void set_awayprojmeta(const void* value, size_t size);
  std::string* mutable_awayprojmeta();
  std::string* release_awayprojmeta();
  void set_allocated_awayprojmeta(std::string* awayprojmeta);
  private:
  const std::string& _internal_awayprojmeta() const;
  void _internal_set_awayprojmeta(const std::string& value);
  std::string* _internal_mutable_awayprojmeta();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.InGameProjMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamestatusmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamedatametaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr homeprojmeta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr awayprojmeta_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GameResultsMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameResultsMeta) */ {
 public:
  inline GameResultsMeta() : GameResultsMeta(nullptr) {};
  virtual ~GameResultsMeta();

  GameResultsMeta(const GameResultsMeta& from);
  GameResultsMeta(GameResultsMeta&& from) noexcept
    : GameResultsMeta() {
    *this = ::std::move(from);
  }

  inline GameResultsMeta& operator=(const GameResultsMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameResultsMeta& operator=(GameResultsMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameResultsMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameResultsMeta* internal_default_instance() {
    return reinterpret_cast<const GameResultsMeta*>(
               &_GameResultsMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GameResultsMeta& a, GameResultsMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(GameResultsMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameResultsMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameResultsMeta* New() const final {
    return CreateMaybeMessage<GameResultsMeta>(nullptr);
  }

  GameResultsMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameResultsMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameResultsMeta& from);
  void MergeFrom(const GameResultsMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameResultsMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GameResultsMeta";
  }
  protected:
  explicit GameResultsMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameidFieldNumber = 20,
    kGamestatusmetaidFieldNumber = 40,
    kResultdatametaidFieldNumber = 50,
    kHomeresultmetaFieldNumber = 60,
    kAwayresultmetaFieldNumber = 70,
  };
  // optional string gameid = 20;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  const std::string& gameid() const;
  void set_gameid(const std::string& value);
  void set_gameid(std::string&& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  std::string* mutable_gameid();
  std::string* release_gameid();
  void set_allocated_gameid(std::string* gameid);
  private:
  const std::string& _internal_gameid() const;
  void _internal_set_gameid(const std::string& value);
  std::string* _internal_mutable_gameid();
  public:

  // optional bytes gamestatusmetaid = 40;
  bool has_gamestatusmetaid() const;
  private:
  bool _internal_has_gamestatusmetaid() const;
  public:
  void clear_gamestatusmetaid();
  const std::string& gamestatusmetaid() const;
  void set_gamestatusmetaid(const std::string& value);
  void set_gamestatusmetaid(std::string&& value);
  void set_gamestatusmetaid(const char* value);
  void set_gamestatusmetaid(const void* value, size_t size);
  std::string* mutable_gamestatusmetaid();
  std::string* release_gamestatusmetaid();
  void set_allocated_gamestatusmetaid(std::string* gamestatusmetaid);
  private:
  const std::string& _internal_gamestatusmetaid() const;
  void _internal_set_gamestatusmetaid(const std::string& value);
  std::string* _internal_mutable_gamestatusmetaid();
  public:

  // optional bytes resultdatametaid = 50;
  bool has_resultdatametaid() const;
  private:
  bool _internal_has_resultdatametaid() const;
  public:
  void clear_resultdatametaid();
  const std::string& resultdatametaid() const;
  void set_resultdatametaid(const std::string& value);
  void set_resultdatametaid(std::string&& value);
  void set_resultdatametaid(const char* value);
  void set_resultdatametaid(const void* value, size_t size);
  std::string* mutable_resultdatametaid();
  std::string* release_resultdatametaid();
  void set_allocated_resultdatametaid(std::string* resultdatametaid);
  private:
  const std::string& _internal_resultdatametaid() const;
  void _internal_set_resultdatametaid(const std::string& value);
  std::string* _internal_mutable_resultdatametaid();
  public:

  // optional bytes homeresultmeta = 60;
  bool has_homeresultmeta() const;
  private:
  bool _internal_has_homeresultmeta() const;
  public:
  void clear_homeresultmeta();
  const std::string& homeresultmeta() const;
  void set_homeresultmeta(const std::string& value);
  void set_homeresultmeta(std::string&& value);
  void set_homeresultmeta(const char* value);
  void set_homeresultmeta(const void* value, size_t size);
  std::string* mutable_homeresultmeta();
  std::string* release_homeresultmeta();
  void set_allocated_homeresultmeta(std::string* homeresultmeta);
  private:
  const std::string& _internal_homeresultmeta() const;
  void _internal_set_homeresultmeta(const std::string& value);
  std::string* _internal_mutable_homeresultmeta();
  public:

  // optional bytes awayresultmeta = 70;
  bool has_awayresultmeta() const;
  private:
  bool _internal_has_awayresultmeta() const;
  public:
  void clear_awayresultmeta();
  const std::string& awayresultmeta() const;
  void set_awayresultmeta(const std::string& value);
  void set_awayresultmeta(std::string&& value);
  void set_awayresultmeta(const char* value);
  void set_awayresultmeta(const void* value, size_t size);
  std::string* mutable_awayresultmeta();
  std::string* release_awayresultmeta();
  void set_allocated_awayresultmeta(std::string* awayresultmeta);
  private:
  const std::string& _internal_awayresultmeta() const;
  void _internal_set_awayresultmeta(const std::string& value);
  std::string* _internal_mutable_awayresultmeta();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.GameResultsMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamestatusmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resultdatametaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr homeresultmeta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr awayresultmeta_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GameStatusMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameStatusMeta) */ {
 public:
  inline GameStatusMeta() : GameStatusMeta(nullptr) {};
  virtual ~GameStatusMeta();

  GameStatusMeta(const GameStatusMeta& from);
  GameStatusMeta(GameStatusMeta&& from) noexcept
    : GameStatusMeta() {
    *this = ::std::move(from);
  }

  inline GameStatusMeta& operator=(const GameStatusMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStatusMeta& operator=(GameStatusMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStatusMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStatusMeta* internal_default_instance() {
    return reinterpret_cast<const GameStatusMeta*>(
               &_GameStatusMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GameStatusMeta& a, GameStatusMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStatusMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStatusMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStatusMeta* New() const final {
    return CreateMaybeMessage<GameStatusMeta>(nullptr);
  }

  GameStatusMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStatusMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStatusMeta& from);
  void MergeFrom(const GameStatusMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStatusMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GameStatusMeta";
  }
  protected:
  explicit GameStatusMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kGamemetaidFieldNumber = 30,
    kDatametaidFieldNumber = 40,
    kPrevFieldNumber = 50,
    kNextFieldNumber = 60,
    kGameinfoFieldNumber = 10,
    kGamesatusFieldNumber = 20,
    kWeekFieldNumber = 2,
    kSeasonFieldNumber = 70,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bytes gamemetaid = 30;
  bool has_gamemetaid() const;
  private:
  bool _internal_has_gamemetaid() const;
  public:
  void clear_gamemetaid();
  const std::string& gamemetaid() const;
  void set_gamemetaid(const std::string& value);
  void set_gamemetaid(std::string&& value);
  void set_gamemetaid(const char* value);
  void set_gamemetaid(const void* value, size_t size);
  std::string* mutable_gamemetaid();
  std::string* release_gamemetaid();
  void set_allocated_gamemetaid(std::string* gamemetaid);
  private:
  const std::string& _internal_gamemetaid() const;
  void _internal_set_gamemetaid(const std::string& value);
  std::string* _internal_mutable_gamemetaid();
  public:

  // optional bytes datametaid = 40;
  bool has_datametaid() const;
  private:
  bool _internal_has_datametaid() const;
  public:
  void clear_datametaid();
  const std::string& datametaid() const;
  void set_datametaid(const std::string& value);
  void set_datametaid(std::string&& value);
  void set_datametaid(const char* value);
  void set_datametaid(const void* value, size_t size);
  std::string* mutable_datametaid();
  std::string* release_datametaid();
  void set_allocated_datametaid(std::string* datametaid);
  private:
  const std::string& _internal_datametaid() const;
  void _internal_set_datametaid(const std::string& value);
  std::string* _internal_mutable_datametaid();
  public:

  // optional bytes prev = 50;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional bytes next = 60;
  bool has_next() const;
  private:
  bool _internal_has_next() const;
  public:
  void clear_next();
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);
  private:
  const std::string& _internal_next() const;
  void _internal_set_next(const std::string& value);
  std::string* _internal_mutable_next();
  public:

  // optional .fantasybit.GameInfo gameinfo = 10;
  bool has_gameinfo() const;
  private:
  bool _internal_has_gameinfo() const;
  public:
  void clear_gameinfo();
  const ::fantasybit::GameInfo& gameinfo() const;
  ::fantasybit::GameInfo* release_gameinfo();
  ::fantasybit::GameInfo* mutable_gameinfo();
  void set_allocated_gameinfo(::fantasybit::GameInfo* gameinfo);
  private:
  const ::fantasybit::GameInfo& _internal_gameinfo() const;
  ::fantasybit::GameInfo* _internal_mutable_gameinfo();
  public:
  void unsafe_arena_set_allocated_gameinfo(
      ::fantasybit::GameInfo* gameinfo);
  ::fantasybit::GameInfo* unsafe_arena_release_gameinfo();

  // optional .fantasybit.GameStatus gamesatus = 20;
  bool has_gamesatus() const;
  private:
  bool _internal_has_gamesatus() const;
  public:
  void clear_gamesatus();
  const ::fantasybit::GameStatus& gamesatus() const;
  ::fantasybit::GameStatus* release_gamesatus();
  ::fantasybit::GameStatus* mutable_gamesatus();
  void set_allocated_gamesatus(::fantasybit::GameStatus* gamesatus);
  private:
  const ::fantasybit::GameStatus& _internal_gamesatus() const;
  ::fantasybit::GameStatus* _internal_mutable_gamesatus();
  public:
  void unsafe_arena_set_allocated_gamesatus(
      ::fantasybit::GameStatus* gamesatus);
  ::fantasybit::GameStatus* unsafe_arena_release_gamesatus();

  // optional int32 week = 2;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::int32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 season = 70;
  bool has_season() const;
  private:
  bool _internal_has_season() const;
  public:
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::int32 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.GameStatusMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamemetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datametaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  ::fantasybit::GameInfo* gameinfo_;
  ::fantasybit::GameStatus* gamesatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 week_;
  ::PROTOBUF_NAMESPACE_ID::int32 season_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class TeamProjMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.TeamProjMeta) */ {
 public:
  inline TeamProjMeta() : TeamProjMeta(nullptr) {};
  virtual ~TeamProjMeta();

  TeamProjMeta(const TeamProjMeta& from);
  TeamProjMeta(TeamProjMeta&& from) noexcept
    : TeamProjMeta() {
    *this = ::std::move(from);
  }

  inline TeamProjMeta& operator=(const TeamProjMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamProjMeta& operator=(TeamProjMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamProjMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamProjMeta* internal_default_instance() {
    return reinterpret_cast<const TeamProjMeta*>(
               &_TeamProjMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TeamProjMeta& a, TeamProjMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamProjMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamProjMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamProjMeta* New() const final {
    return CreateMaybeMessage<TeamProjMeta>(nullptr);
  }

  TeamProjMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamProjMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamProjMeta& from);
  void MergeFrom(const TeamProjMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamProjMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.TeamProjMeta";
  }
  protected:
  explicit TeamProjMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameidFieldNumber = 20,
    kTeamFieldNumber = 30,
    kGameplayerprojmetarootFieldNumber = 60,
    kGamedatametaidFieldNumber = 70,
    kKickofftimeFieldNumber = 40,
    kWeekFieldNumber = 50,
  };
  // optional string gameid = 20;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  const std::string& gameid() const;
  void set_gameid(const std::string& value);
  void set_gameid(std::string&& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  std::string* mutable_gameid();
  std::string* release_gameid();
  void set_allocated_gameid(std::string* gameid);
  private:
  const std::string& _internal_gameid() const;
  void _internal_set_gameid(const std::string& value);
  std::string* _internal_mutable_gameid();
  public:

  // optional string team = 30;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  const std::string& team() const;
  void set_team(const std::string& value);
  void set_team(std::string&& value);
  void set_team(const char* value);
  void set_team(const char* value, size_t size);
  std::string* mutable_team();
  std::string* release_team();
  void set_allocated_team(std::string* team);
  private:
  const std::string& _internal_team() const;
  void _internal_set_team(const std::string& value);
  std::string* _internal_mutable_team();
  public:

  // optional bytes gameplayerprojmetaroot = 60;
  bool has_gameplayerprojmetaroot() const;
  private:
  bool _internal_has_gameplayerprojmetaroot() const;
  public:
  void clear_gameplayerprojmetaroot();
  const std::string& gameplayerprojmetaroot() const;
  void set_gameplayerprojmetaroot(const std::string& value);
  void set_gameplayerprojmetaroot(std::string&& value);
  void set_gameplayerprojmetaroot(const char* value);
  void set_gameplayerprojmetaroot(const void* value, size_t size);
  std::string* mutable_gameplayerprojmetaroot();
  std::string* release_gameplayerprojmetaroot();
  void set_allocated_gameplayerprojmetaroot(std::string* gameplayerprojmetaroot);
  private:
  const std::string& _internal_gameplayerprojmetaroot() const;
  void _internal_set_gameplayerprojmetaroot(const std::string& value);
  std::string* _internal_mutable_gameplayerprojmetaroot();
  public:

  // optional bytes gamedatametaid = 70;
  bool has_gamedatametaid() const;
  private:
  bool _internal_has_gamedatametaid() const;
  public:
  void clear_gamedatametaid();
  const std::string& gamedatametaid() const;
  void set_gamedatametaid(const std::string& value);
  void set_gamedatametaid(std::string&& value);
  void set_gamedatametaid(const char* value);
  void set_gamedatametaid(const void* value, size_t size);
  std::string* mutable_gamedatametaid();
  std::string* release_gamedatametaid();
  void set_allocated_gamedatametaid(std::string* gamedatametaid);
  private:
  const std::string& _internal_gamedatametaid() const;
  void _internal_set_gamedatametaid(const std::string& value);
  std::string* _internal_mutable_gamedatametaid();
  public:

  // optional uint32 kickofftime = 40;
  bool has_kickofftime() const;
  private:
  bool _internal_has_kickofftime() const;
  public:
  void clear_kickofftime();
  ::PROTOBUF_NAMESPACE_ID::uint32 kickofftime() const;
  void set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kickofftime() const;
  void _internal_set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 week = 50;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.TeamProjMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameplayerprojmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamedatametaid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kickofftime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 week_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class TeamResultMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.TeamResultMeta) */ {
 public:
  inline TeamResultMeta() : TeamResultMeta(nullptr) {};
  virtual ~TeamResultMeta();

  TeamResultMeta(const TeamResultMeta& from);
  TeamResultMeta(TeamResultMeta&& from) noexcept
    : TeamResultMeta() {
    *this = ::std::move(from);
  }

  inline TeamResultMeta& operator=(const TeamResultMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamResultMeta& operator=(TeamResultMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamResultMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamResultMeta* internal_default_instance() {
    return reinterpret_cast<const TeamResultMeta*>(
               &_TeamResultMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TeamResultMeta& a, TeamResultMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamResultMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamResultMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamResultMeta* New() const final {
    return CreateMaybeMessage<TeamResultMeta>(nullptr);
  }

  TeamResultMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamResultMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamResultMeta& from);
  void MergeFrom(const TeamResultMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamResultMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.TeamResultMeta";
  }
  protected:
  explicit TeamResultMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameidFieldNumber = 20,
    kTeamFieldNumber = 30,
    kPlayerresultmetarootFieldNumber = 60,
    kResultdatametaidFieldNumber = 70,
    kKickofftimeFieldNumber = 40,
    kWeekFieldNumber = 50,
  };
  // optional string gameid = 20;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  const std::string& gameid() const;
  void set_gameid(const std::string& value);
  void set_gameid(std::string&& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  std::string* mutable_gameid();
  std::string* release_gameid();
  void set_allocated_gameid(std::string* gameid);
  private:
  const std::string& _internal_gameid() const;
  void _internal_set_gameid(const std::string& value);
  std::string* _internal_mutable_gameid();
  public:

  // optional string team = 30;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  const std::string& team() const;
  void set_team(const std::string& value);
  void set_team(std::string&& value);
  void set_team(const char* value);
  void set_team(const char* value, size_t size);
  std::string* mutable_team();
  std::string* release_team();
  void set_allocated_team(std::string* team);
  private:
  const std::string& _internal_team() const;
  void _internal_set_team(const std::string& value);
  std::string* _internal_mutable_team();
  public:

  // optional bytes playerresultmetaroot = 60;
  bool has_playerresultmetaroot() const;
  private:
  bool _internal_has_playerresultmetaroot() const;
  public:
  void clear_playerresultmetaroot();
  const std::string& playerresultmetaroot() const;
  void set_playerresultmetaroot(const std::string& value);
  void set_playerresultmetaroot(std::string&& value);
  void set_playerresultmetaroot(const char* value);
  void set_playerresultmetaroot(const void* value, size_t size);
  std::string* mutable_playerresultmetaroot();
  std::string* release_playerresultmetaroot();
  void set_allocated_playerresultmetaroot(std::string* playerresultmetaroot);
  private:
  const std::string& _internal_playerresultmetaroot() const;
  void _internal_set_playerresultmetaroot(const std::string& value);
  std::string* _internal_mutable_playerresultmetaroot();
  public:

  // optional bytes resultdatametaid = 70;
  bool has_resultdatametaid() const;
  private:
  bool _internal_has_resultdatametaid() const;
  public:
  void clear_resultdatametaid();
  const std::string& resultdatametaid() const;
  void set_resultdatametaid(const std::string& value);
  void set_resultdatametaid(std::string&& value);
  void set_resultdatametaid(const char* value);
  void set_resultdatametaid(const void* value, size_t size);
  std::string* mutable_resultdatametaid();
  std::string* release_resultdatametaid();
  void set_allocated_resultdatametaid(std::string* resultdatametaid);
  private:
  const std::string& _internal_resultdatametaid() const;
  void _internal_set_resultdatametaid(const std::string& value);
  std::string* _internal_mutable_resultdatametaid();
  public:

  // optional uint32 kickofftime = 40;
  bool has_kickofftime() const;
  private:
  bool _internal_has_kickofftime() const;
  public:
  void clear_kickofftime();
  ::PROTOBUF_NAMESPACE_ID::uint32 kickofftime() const;
  void set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kickofftime() const;
  void _internal_set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 week = 50;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.TeamResultMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerresultmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resultdatametaid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kickofftime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 week_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GamePlayerProjMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GamePlayerProjMeta) */ {
 public:
  inline GamePlayerProjMeta() : GamePlayerProjMeta(nullptr) {};
  virtual ~GamePlayerProjMeta();

  GamePlayerProjMeta(const GamePlayerProjMeta& from);
  GamePlayerProjMeta(GamePlayerProjMeta&& from) noexcept
    : GamePlayerProjMeta() {
    *this = ::std::move(from);
  }

  inline GamePlayerProjMeta& operator=(const GamePlayerProjMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline GamePlayerProjMeta& operator=(GamePlayerProjMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GamePlayerProjMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GamePlayerProjMeta* internal_default_instance() {
    return reinterpret_cast<const GamePlayerProjMeta*>(
               &_GamePlayerProjMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GamePlayerProjMeta& a, GamePlayerProjMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(GamePlayerProjMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GamePlayerProjMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GamePlayerProjMeta* New() const final {
    return CreateMaybeMessage<GamePlayerProjMeta>(nullptr);
  }

  GamePlayerProjMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GamePlayerProjMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GamePlayerProjMeta& from);
  void MergeFrom(const GamePlayerProjMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GamePlayerProjMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GamePlayerProjMeta";
  }
  protected:
  explicit GamePlayerProjMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 20,
    kGamestatusmetaidFieldNumber = 30,
    kProjmetaplayerrootFieldNumber = 60,
    kPosmetaplayerrootFieldNumber = 70,
    kGamedatametaidFieldNumber = 80,
  };
  // optional string playerid = 20;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional bytes gamestatusmetaid = 30;
  bool has_gamestatusmetaid() const;
  private:
  bool _internal_has_gamestatusmetaid() const;
  public:
  void clear_gamestatusmetaid();
  const std::string& gamestatusmetaid() const;
  void set_gamestatusmetaid(const std::string& value);
  void set_gamestatusmetaid(std::string&& value);
  void set_gamestatusmetaid(const char* value);
  void set_gamestatusmetaid(const void* value, size_t size);
  std::string* mutable_gamestatusmetaid();
  std::string* release_gamestatusmetaid();
  void set_allocated_gamestatusmetaid(std::string* gamestatusmetaid);
  private:
  const std::string& _internal_gamestatusmetaid() const;
  void _internal_set_gamestatusmetaid(const std::string& value);
  std::string* _internal_mutable_gamestatusmetaid();
  public:

  // optional bytes projmetaplayerroot = 60;
  bool has_projmetaplayerroot() const;
  private:
  bool _internal_has_projmetaplayerroot() const;
  public:
  void clear_projmetaplayerroot();
  const std::string& projmetaplayerroot() const;
  void set_projmetaplayerroot(const std::string& value);
  void set_projmetaplayerroot(std::string&& value);
  void set_projmetaplayerroot(const char* value);
  void set_projmetaplayerroot(const void* value, size_t size);
  std::string* mutable_projmetaplayerroot();
  std::string* release_projmetaplayerroot();
  void set_allocated_projmetaplayerroot(std::string* projmetaplayerroot);
  private:
  const std::string& _internal_projmetaplayerroot() const;
  void _internal_set_projmetaplayerroot(const std::string& value);
  std::string* _internal_mutable_projmetaplayerroot();
  public:

  // optional bytes posmetaplayerroot = 70;
  bool has_posmetaplayerroot() const;
  private:
  bool _internal_has_posmetaplayerroot() const;
  public:
  void clear_posmetaplayerroot();
  const std::string& posmetaplayerroot() const;
  void set_posmetaplayerroot(const std::string& value);
  void set_posmetaplayerroot(std::string&& value);
  void set_posmetaplayerroot(const char* value);
  void set_posmetaplayerroot(const void* value, size_t size);
  std::string* mutable_posmetaplayerroot();
  std::string* release_posmetaplayerroot();
  void set_allocated_posmetaplayerroot(std::string* posmetaplayerroot);
  private:
  const std::string& _internal_posmetaplayerroot() const;
  void _internal_set_posmetaplayerroot(const std::string& value);
  std::string* _internal_mutable_posmetaplayerroot();
  public:

  // optional bytes gamedatametaid = 80;
  bool has_gamedatametaid() const;
  private:
  bool _internal_has_gamedatametaid() const;
  public:
  void clear_gamedatametaid();
  const std::string& gamedatametaid() const;
  void set_gamedatametaid(const std::string& value);
  void set_gamedatametaid(std::string&& value);
  void set_gamedatametaid(const char* value);
  void set_gamedatametaid(const void* value, size_t size);
  std::string* mutable_gamedatametaid();
  std::string* release_gamedatametaid();
  void set_allocated_gamedatametaid(std::string* gamedatametaid);
  private:
  const std::string& _internal_gamedatametaid() const;
  void _internal_set_gamedatametaid(const std::string& value);
  std::string* _internal_mutable_gamedatametaid();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.GamePlayerProjMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamestatusmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projmetaplayerroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posmetaplayerroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamedatametaid_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class ProjMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjMeta) */ {
 public:
  inline ProjMeta() : ProjMeta(nullptr) {};
  virtual ~ProjMeta();

  ProjMeta(const ProjMeta& from);
  ProjMeta(ProjMeta&& from) noexcept
    : ProjMeta() {
    *this = ::std::move(from);
  }

  inline ProjMeta& operator=(const ProjMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjMeta& operator=(ProjMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjMeta* internal_default_instance() {
    return reinterpret_cast<const ProjMeta*>(
               &_ProjMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ProjMeta& a, ProjMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjMeta* New() const final {
    return CreateMaybeMessage<ProjMeta>(nullptr);
  }

  ProjMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjMeta& from);
  void MergeFrom(const ProjMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.ProjMeta";
  }
  protected:
  explicit ProjMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kPlayeridFieldNumber = 30,
    kTxmetaidFieldNumber = 40,
    kPrevFieldNumber = 50,
    kProjFieldNumber = 20,
  };
  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string playerid = 30;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional bytes txmetaid = 40;
  bool has_txmetaid() const;
  private:
  bool _internal_has_txmetaid() const;
  public:
  void clear_txmetaid();
  const std::string& txmetaid() const;
  void set_txmetaid(const std::string& value);
  void set_txmetaid(std::string&& value);
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  std::string* mutable_txmetaid();
  std::string* release_txmetaid();
  void set_allocated_txmetaid(std::string* txmetaid);
  private:
  const std::string& _internal_txmetaid() const;
  void _internal_set_txmetaid(const std::string& value);
  std::string* _internal_mutable_txmetaid();
  public:

  // optional bytes prev = 50;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional int32 proj = 20;
  bool has_proj() const;
  private:
  bool _internal_has_proj() const;
  public:
  void clear_proj();
  ::PROTOBUF_NAMESPACE_ID::int32 proj() const;
  void set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proj() const;
  void _internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.ProjMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::int32 proj_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class PosMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.PosMeta) */ {
 public:
  inline PosMeta() : PosMeta(nullptr) {};
  virtual ~PosMeta();

  PosMeta(const PosMeta& from);
  PosMeta(PosMeta&& from) noexcept
    : PosMeta() {
    *this = ::std::move(from);
  }

  inline PosMeta& operator=(const PosMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosMeta& operator=(PosMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PosMeta* internal_default_instance() {
    return reinterpret_cast<const PosMeta*>(
               &_PosMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PosMeta& a, PosMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(PosMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosMeta* New() const final {
    return CreateMaybeMessage<PosMeta>(nullptr);
  }

  PosMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosMeta& from);
  void MergeFrom(const PosMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.PosMeta";
  }
  protected:
  explicit PosMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kPlayeridFieldNumber = 40,
    kTxmetaidFieldNumber = 50,
    kPrevFieldNumber = 60,
    kQtyFieldNumber = 20,
    kPriceFieldNumber = 30,
  };
  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string playerid = 40;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional bytes txmetaid = 50;
  bool has_txmetaid() const;
  private:
  bool _internal_has_txmetaid() const;
  public:
  void clear_txmetaid();
  const std::string& txmetaid() const;
  void set_txmetaid(const std::string& value);
  void set_txmetaid(std::string&& value);
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  std::string* mutable_txmetaid();
  std::string* release_txmetaid();
  void set_allocated_txmetaid(std::string* txmetaid);
  private:
  const std::string& _internal_txmetaid() const;
  void _internal_set_txmetaid(const std::string& value);
  std::string* _internal_mutable_txmetaid();
  public:

  // optional bytes prev = 60;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional int32 qty = 20;
  bool has_qty() const;
  private:
  bool _internal_has_qty() const;
  public:
  void clear_qty();
  ::PROTOBUF_NAMESPACE_ID::int32 qty() const;
  void set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qty() const;
  void _internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 price = 30;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.PosMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::int32 qty_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class PlayerResultMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerResultMeta) */ {
 public:
  inline PlayerResultMeta() : PlayerResultMeta(nullptr) {};
  virtual ~PlayerResultMeta();

  PlayerResultMeta(const PlayerResultMeta& from);
  PlayerResultMeta(PlayerResultMeta&& from) noexcept
    : PlayerResultMeta() {
    *this = ::std::move(from);
  }

  inline PlayerResultMeta& operator=(const PlayerResultMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerResultMeta& operator=(PlayerResultMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerResultMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerResultMeta* internal_default_instance() {
    return reinterpret_cast<const PlayerResultMeta*>(
               &_PlayerResultMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PlayerResultMeta& a, PlayerResultMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerResultMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerResultMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerResultMeta* New() const final {
    return CreateMaybeMessage<PlayerResultMeta>(nullptr);
  }

  PlayerResultMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerResultMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerResultMeta& from);
  void MergeFrom(const PlayerResultMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerResultMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.PlayerResultMeta";
  }
  protected:
  explicit PlayerResultMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayergamestatsidFieldNumber = 10,
    kGamestatusmetaidFieldNumber = 30,
    kAwardmetaplayerrootFieldNumber = 60,
    kPnlmetaplayerrootFieldNumber = 70,
    kResultdatametaidFieldNumber = 80,
  };
  // optional bytes playergamestatsid = 10;
  bool has_playergamestatsid() const;
  private:
  bool _internal_has_playergamestatsid() const;
  public:
  void clear_playergamestatsid();
  const std::string& playergamestatsid() const;
  void set_playergamestatsid(const std::string& value);
  void set_playergamestatsid(std::string&& value);
  void set_playergamestatsid(const char* value);
  void set_playergamestatsid(const void* value, size_t size);
  std::string* mutable_playergamestatsid();
  std::string* release_playergamestatsid();
  void set_allocated_playergamestatsid(std::string* playergamestatsid);
  private:
  const std::string& _internal_playergamestatsid() const;
  void _internal_set_playergamestatsid(const std::string& value);
  std::string* _internal_mutable_playergamestatsid();
  public:

  // optional bytes gamestatusmetaid = 30;
  bool has_gamestatusmetaid() const;
  private:
  bool _internal_has_gamestatusmetaid() const;
  public:
  void clear_gamestatusmetaid();
  const std::string& gamestatusmetaid() const;
  void set_gamestatusmetaid(const std::string& value);
  void set_gamestatusmetaid(std::string&& value);
  void set_gamestatusmetaid(const char* value);
  void set_gamestatusmetaid(const void* value, size_t size);
  std::string* mutable_gamestatusmetaid();
  std::string* release_gamestatusmetaid();
  void set_allocated_gamestatusmetaid(std::string* gamestatusmetaid);
  private:
  const std::string& _internal_gamestatusmetaid() const;
  void _internal_set_gamestatusmetaid(const std::string& value);
  std::string* _internal_mutable_gamestatusmetaid();
  public:

  // optional bytes awardmetaplayerroot = 60;
  bool has_awardmetaplayerroot() const;
  private:
  bool _internal_has_awardmetaplayerroot() const;
  public:
  void clear_awardmetaplayerroot();
  const std::string& awardmetaplayerroot() const;
  void set_awardmetaplayerroot(const std::string& value);
  void set_awardmetaplayerroot(std::string&& value);
  void set_awardmetaplayerroot(const char* value);
  void set_awardmetaplayerroot(const void* value, size_t size);
  std::string* mutable_awardmetaplayerroot();
  std::string* release_awardmetaplayerroot();
  void set_allocated_awardmetaplayerroot(std::string* awardmetaplayerroot);
  private:
  const std::string& _internal_awardmetaplayerroot() const;
  void _internal_set_awardmetaplayerroot(const std::string& value);
  std::string* _internal_mutable_awardmetaplayerroot();
  public:

  // optional bytes pnlmetaplayerroot = 70;
  bool has_pnlmetaplayerroot() const;
  private:
  bool _internal_has_pnlmetaplayerroot() const;
  public:
  void clear_pnlmetaplayerroot();
  const std::string& pnlmetaplayerroot() const;
  void set_pnlmetaplayerroot(const std::string& value);
  void set_pnlmetaplayerroot(std::string&& value);
  void set_pnlmetaplayerroot(const char* value);
  void set_pnlmetaplayerroot(const void* value, size_t size);
  std::string* mutable_pnlmetaplayerroot();
  std::string* release_pnlmetaplayerroot();
  void set_allocated_pnlmetaplayerroot(std::string* pnlmetaplayerroot);
  private:
  const std::string& _internal_pnlmetaplayerroot() const;
  void _internal_set_pnlmetaplayerroot(const std::string& value);
  std::string* _internal_mutable_pnlmetaplayerroot();
  public:

  // optional bytes resultdatametaid = 80;
  bool has_resultdatametaid() const;
  private:
  bool _internal_has_resultdatametaid() const;
  public:
  void clear_resultdatametaid();
  const std::string& resultdatametaid() const;
  void set_resultdatametaid(const std::string& value);
  void set_resultdatametaid(std::string&& value);
  void set_resultdatametaid(const char* value);
  void set_resultdatametaid(const void* value, size_t size);
  std::string* mutable_resultdatametaid();
  std::string* release_resultdatametaid();
  void set_allocated_resultdatametaid(std::string* resultdatametaid);
  private:
  const std::string& _internal_resultdatametaid() const;
  void _internal_set_resultdatametaid(const std::string& value);
  std::string* _internal_mutable_resultdatametaid();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerResultMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playergamestatsid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamestatusmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr awardmetaplayerroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pnlmetaplayerroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resultdatametaid_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class PlayerGameStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerGameStats) */ {
 public:
  inline PlayerGameStats() : PlayerGameStats(nullptr) {};
  virtual ~PlayerGameStats();

  PlayerGameStats(const PlayerGameStats& from);
  PlayerGameStats(PlayerGameStats&& from) noexcept
    : PlayerGameStats() {
    *this = ::std::move(from);
  }

  inline PlayerGameStats& operator=(const PlayerGameStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGameStats& operator=(PlayerGameStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerGameStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerGameStats* internal_default_instance() {
    return reinterpret_cast<const PlayerGameStats*>(
               &_PlayerGameStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PlayerGameStats& a, PlayerGameStats& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGameStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGameStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerGameStats* New() const final {
    return CreateMaybeMessage<PlayerGameStats>(nullptr);
  }

  PlayerGameStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerGameStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerGameStats& from);
  void MergeFrom(const PlayerGameStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGameStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.PlayerGameStats";
  }
  protected:
  explicit PlayerGameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 20,
    kGameidFieldNumber = 60,
    kStatsFieldNumber = 50,
    kResultFieldNumber = 40,
  };
  // optional string playerid = 20;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional string gameid = 60;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  const std::string& gameid() const;
  void set_gameid(const std::string& value);
  void set_gameid(std::string&& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  std::string* mutable_gameid();
  std::string* release_gameid();
  void set_allocated_gameid(std::string* gameid);
  private:
  const std::string& _internal_gameid() const;
  void _internal_set_gameid(const std::string& value);
  std::string* _internal_mutable_gameid();
  public:

  // optional .fantasybit.Stats stats = 50;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::fantasybit::Stats& stats() const;
  ::fantasybit::Stats* release_stats();
  ::fantasybit::Stats* mutable_stats();
  void set_allocated_stats(::fantasybit::Stats* stats);
  private:
  const ::fantasybit::Stats& _internal_stats() const;
  ::fantasybit::Stats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::fantasybit::Stats* stats);
  ::fantasybit::Stats* unsafe_arena_release_stats();

  // optional float result = 40;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  float result() const;
  void set_result(float value);
  private:
  float _internal_result() const;
  void _internal_set_result(float value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerGameStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameid_;
  ::fantasybit::Stats* stats_;
  float result_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class AwardMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.AwardMeta) */ {
 public:
  inline AwardMeta() : AwardMeta(nullptr) {};
  virtual ~AwardMeta();

  AwardMeta(const AwardMeta& from);
  AwardMeta(AwardMeta&& from) noexcept
    : AwardMeta() {
    *this = ::std::move(from);
  }

  inline AwardMeta& operator=(const AwardMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwardMeta& operator=(AwardMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwardMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AwardMeta* internal_default_instance() {
    return reinterpret_cast<const AwardMeta*>(
               &_AwardMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AwardMeta& a, AwardMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(AwardMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwardMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwardMeta* New() const final {
    return CreateMaybeMessage<AwardMeta>(nullptr);
  }

  AwardMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwardMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwardMeta& from);
  void MergeFrom(const AwardMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwardMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.AwardMeta";
  }
  protected:
  explicit AwardMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kProjmetaidFieldNumber = 40,
    kPlayergamestatsidFieldNumber = 50,
    kProjFieldNumber = 20,
    kAwardFieldNumber = 30,
  };
  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes projmetaid = 40;
  bool has_projmetaid() const;
  private:
  bool _internal_has_projmetaid() const;
  public:
  void clear_projmetaid();
  const std::string& projmetaid() const;
  void set_projmetaid(const std::string& value);
  void set_projmetaid(std::string&& value);
  void set_projmetaid(const char* value);
  void set_projmetaid(const void* value, size_t size);
  std::string* mutable_projmetaid();
  std::string* release_projmetaid();
  void set_allocated_projmetaid(std::string* projmetaid);
  private:
  const std::string& _internal_projmetaid() const;
  void _internal_set_projmetaid(const std::string& value);
  std::string* _internal_mutable_projmetaid();
  public:

  // optional bytes playergamestatsid = 50;
  bool has_playergamestatsid() const;
  private:
  bool _internal_has_playergamestatsid() const;
  public:
  void clear_playergamestatsid();
  const std::string& playergamestatsid() const;
  void set_playergamestatsid(const std::string& value);
  void set_playergamestatsid(std::string&& value);
  void set_playergamestatsid(const char* value);
  void set_playergamestatsid(const void* value, size_t size);
  std::string* mutable_playergamestatsid();
  std::string* release_playergamestatsid();
  void set_allocated_playergamestatsid(std::string* playergamestatsid);
  private:
  const std::string& _internal_playergamestatsid() const;
  void _internal_set_playergamestatsid(const std::string& value);
  std::string* _internal_mutable_playergamestatsid();
  public:

  // optional int32 proj = 20;
  bool has_proj() const;
  private:
  bool _internal_has_proj() const;
  public:
  void clear_proj();
  ::PROTOBUF_NAMESPACE_ID::int32 proj() const;
  void set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proj() const;
  void _internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 award = 30;
  bool has_award() const;
  private:
  bool _internal_has_award() const;
  public:
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::uint64 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.AwardMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playergamestatsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 proj_;
  ::PROTOBUF_NAMESPACE_ID::uint64 award_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class PnlMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.PnlMeta) */ {
 public:
  inline PnlMeta() : PnlMeta(nullptr) {};
  virtual ~PnlMeta();

  PnlMeta(const PnlMeta& from);
  PnlMeta(PnlMeta&& from) noexcept
    : PnlMeta() {
    *this = ::std::move(from);
  }

  inline PnlMeta& operator=(const PnlMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline PnlMeta& operator=(PnlMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PnlMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PnlMeta* internal_default_instance() {
    return reinterpret_cast<const PnlMeta*>(
               &_PnlMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PnlMeta& a, PnlMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(PnlMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PnlMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PnlMeta* New() const final {
    return CreateMaybeMessage<PnlMeta>(nullptr);
  }

  PnlMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PnlMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PnlMeta& from);
  void MergeFrom(const PnlMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PnlMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.PnlMeta";
  }
  protected:
  explicit PnlMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kPosmetaidFieldNumber = 50,
    kPlayergamestatsidFieldNumber = 60,
    kQtyFieldNumber = 20,
    kPriceFieldNumber = 30,
    kPnlFieldNumber = 40,
  };
  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes posmetaid = 50;
  bool has_posmetaid() const;
  private:
  bool _internal_has_posmetaid() const;
  public:
  void clear_posmetaid();
  const std::string& posmetaid() const;
  void set_posmetaid(const std::string& value);
  void set_posmetaid(std::string&& value);
  void set_posmetaid(const char* value);
  void set_posmetaid(const void* value, size_t size);
  std::string* mutable_posmetaid();
  std::string* release_posmetaid();
  void set_allocated_posmetaid(std::string* posmetaid);
  private:
  const std::string& _internal_posmetaid() const;
  void _internal_set_posmetaid(const std::string& value);
  std::string* _internal_mutable_posmetaid();
  public:

  // optional bytes playergamestatsid = 60;
  bool has_playergamestatsid() const;
  private:
  bool _internal_has_playergamestatsid() const;
  public:
  void clear_playergamestatsid();
  const std::string& playergamestatsid() const;
  void set_playergamestatsid(const std::string& value);
  void set_playergamestatsid(std::string&& value);
  void set_playergamestatsid(const char* value);
  void set_playergamestatsid(const void* value, size_t size);
  std::string* mutable_playergamestatsid();
  std::string* release_playergamestatsid();
  void set_allocated_playergamestatsid(std::string* playergamestatsid);
  private:
  const std::string& _internal_playergamestatsid() const;
  void _internal_set_playergamestatsid(const std::string& value);
  std::string* _internal_mutable_playergamestatsid();
  public:

  // optional int32 qty = 20;
  bool has_qty() const;
  private:
  bool _internal_has_qty() const;
  public:
  void clear_qty();
  ::PROTOBUF_NAMESPACE_ID::int32 qty() const;
  void set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qty() const;
  void _internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 price = 30;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 pnl = 40;
  bool has_pnl() const;
  private:
  bool _internal_has_pnl() const;
  public:
  void clear_pnl();
  ::PROTOBUF_NAMESPACE_ID::int64 pnl() const;
  void set_pnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pnl() const;
  void _internal_set_pnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.PnlMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playergamestatsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 qty_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int64 pnl_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class PlayerMarketState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerMarketState) */ {
 public:
  inline PlayerMarketState() : PlayerMarketState(nullptr) {};
  virtual ~PlayerMarketState();

  PlayerMarketState(const PlayerMarketState& from);
  PlayerMarketState(PlayerMarketState&& from) noexcept
    : PlayerMarketState() {
    *this = ::std::move(from);
  }

  inline PlayerMarketState& operator=(const PlayerMarketState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMarketState& operator=(PlayerMarketState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerMarketState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMarketState* internal_default_instance() {
    return reinterpret_cast<const PlayerMarketState*>(
               &_PlayerMarketState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PlayerMarketState& a, PlayerMarketState& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMarketState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMarketState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerMarketState* New() const final {
    return CreateMaybeMessage<PlayerMarketState>(nullptr);
  }

  PlayerMarketState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMarketState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerMarketState& from);
  void MergeFrom(const PlayerMarketState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMarketState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.PlayerMarketState";
  }
  protected:
  explicit PlayerMarketState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitbookmetaidFieldNumber = 10,
    kPlayeridFieldNumber = 20,
    kMarketticmetaidFieldNumber = 30,
    kPrevFieldNumber = 40,
    kNextFieldNumber = 50,
    kLockedFieldNumber = 31,
  };
  // optional bytes limitbookmetaid = 10;
  bool has_limitbookmetaid() const;
  private:
  bool _internal_has_limitbookmetaid() const;
  public:
  void clear_limitbookmetaid();
  const std::string& limitbookmetaid() const;
  void set_limitbookmetaid(const std::string& value);
  void set_limitbookmetaid(std::string&& value);
  void set_limitbookmetaid(const char* value);
  void set_limitbookmetaid(const void* value, size_t size);
  std::string* mutable_limitbookmetaid();
  std::string* release_limitbookmetaid();
  void set_allocated_limitbookmetaid(std::string* limitbookmetaid);
  private:
  const std::string& _internal_limitbookmetaid() const;
  void _internal_set_limitbookmetaid(const std::string& value);
  std::string* _internal_mutable_limitbookmetaid();
  public:

  // optional string playerid = 20;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional bytes marketticmetaid = 30;
  bool has_marketticmetaid() const;
  private:
  bool _internal_has_marketticmetaid() const;
  public:
  void clear_marketticmetaid();
  const std::string& marketticmetaid() const;
  void set_marketticmetaid(const std::string& value);
  void set_marketticmetaid(std::string&& value);
  void set_marketticmetaid(const char* value);
  void set_marketticmetaid(const void* value, size_t size);
  std::string* mutable_marketticmetaid();
  std::string* release_marketticmetaid();
  void set_allocated_marketticmetaid(std::string* marketticmetaid);
  private:
  const std::string& _internal_marketticmetaid() const;
  void _internal_set_marketticmetaid(const std::string& value);
  std::string* _internal_mutable_marketticmetaid();
  public:

  // optional bytes prev = 40;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional bytes next = 50;
  bool has_next() const;
  private:
  bool _internal_has_next() const;
  public:
  void clear_next();
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);
  private:
  const std::string& _internal_next() const;
  void _internal_set_next(const std::string& value);
  std::string* _internal_mutable_next();
  public:

  // optional bool locked = 31;
  bool has_locked() const;
  private:
  bool _internal_has_locked() const;
  public:
  void clear_locked();
  bool locked() const;
  void set_locked(bool value);
  private:
  bool _internal_locked() const;
  void _internal_set_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerMarketState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr limitbookmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketticmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  bool locked_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class LimitBookMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.LimitBookMeta) */ {
 public:
  inline LimitBookMeta() : LimitBookMeta(nullptr) {};
  virtual ~LimitBookMeta();

  LimitBookMeta(const LimitBookMeta& from);
  LimitBookMeta(LimitBookMeta&& from) noexcept
    : LimitBookMeta() {
    *this = ::std::move(from);
  }

  inline LimitBookMeta& operator=(const LimitBookMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline LimitBookMeta& operator=(LimitBookMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LimitBookMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LimitBookMeta* internal_default_instance() {
    return reinterpret_cast<const LimitBookMeta*>(
               &_LimitBookMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(LimitBookMeta& a, LimitBookMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(LimitBookMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LimitBookMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LimitBookMeta* New() const final {
    return CreateMaybeMessage<LimitBookMeta>(nullptr);
  }

  LimitBookMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LimitBookMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LimitBookMeta& from);
  void MergeFrom(const LimitBookMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitBookMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.LimitBookMeta";
  }
  protected:
  explicit LimitBookMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBidordermetarootFieldNumber = 50,
    kAskordermetarootFieldNumber = 60,
    kBidFieldNumber = 10,
    kBidsizeFieldNumber = 20,
    kAsksizeFieldNumber = 30,
    kAskFieldNumber = 40,
  };
  // optional bytes bidordermetaroot = 50;
  bool has_bidordermetaroot() const;
  private:
  bool _internal_has_bidordermetaroot() const;
  public:
  void clear_bidordermetaroot();
  const std::string& bidordermetaroot() const;
  void set_bidordermetaroot(const std::string& value);
  void set_bidordermetaroot(std::string&& value);
  void set_bidordermetaroot(const char* value);
  void set_bidordermetaroot(const void* value, size_t size);
  std::string* mutable_bidordermetaroot();
  std::string* release_bidordermetaroot();
  void set_allocated_bidordermetaroot(std::string* bidordermetaroot);
  private:
  const std::string& _internal_bidordermetaroot() const;
  void _internal_set_bidordermetaroot(const std::string& value);
  std::string* _internal_mutable_bidordermetaroot();
  public:

  // optional bytes askordermetaroot = 60;
  bool has_askordermetaroot() const;
  private:
  bool _internal_has_askordermetaroot() const;
  public:
  void clear_askordermetaroot();
  const std::string& askordermetaroot() const;
  void set_askordermetaroot(const std::string& value);
  void set_askordermetaroot(std::string&& value);
  void set_askordermetaroot(const char* value);
  void set_askordermetaroot(const void* value, size_t size);
  std::string* mutable_askordermetaroot();
  std::string* release_askordermetaroot();
  void set_allocated_askordermetaroot(std::string* askordermetaroot);
  private:
  const std::string& _internal_askordermetaroot() const;
  void _internal_set_askordermetaroot(const std::string& value);
  std::string* _internal_mutable_askordermetaroot();
  public:

  // optional int32 bid = 10;
  bool has_bid() const;
  private:
  bool _internal_has_bid() const;
  public:
  void clear_bid();
  ::PROTOBUF_NAMESPACE_ID::int32 bid() const;
  void set_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bid() const;
  void _internal_set_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 bidsize = 20;
  bool has_bidsize() const;
  private:
  bool _internal_has_bidsize() const;
  public:
  void clear_bidsize();
  ::PROTOBUF_NAMESPACE_ID::int32 bidsize() const;
  void set_bidsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bidsize() const;
  void _internal_set_bidsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 asksize = 30;
  bool has_asksize() const;
  private:
  bool _internal_has_asksize() const;
  public:
  void clear_asksize();
  ::PROTOBUF_NAMESPACE_ID::int32 asksize() const;
  void set_asksize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_asksize() const;
  void _internal_set_asksize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ask = 40;
  bool has_ask() const;
  private:
  bool _internal_has_ask() const;
  public:
  void clear_ask();
  ::PROTOBUF_NAMESPACE_ID::int32 ask() const;
  void set_ask(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ask() const;
  void _internal_set_ask(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.LimitBookMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bidordermetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr askordermetaroot_;
  ::PROTOBUF_NAMESPACE_ID::int32 bid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bidsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 asksize_;
  ::PROTOBUF_NAMESPACE_ID::int32 ask_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class MarketTicMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.MarketTicMeta) */ {
 public:
  inline MarketTicMeta() : MarketTicMeta(nullptr) {};
  virtual ~MarketTicMeta();

  MarketTicMeta(const MarketTicMeta& from);
  MarketTicMeta(MarketTicMeta&& from) noexcept
    : MarketTicMeta() {
    *this = ::std::move(from);
  }

  inline MarketTicMeta& operator=(const MarketTicMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketTicMeta& operator=(MarketTicMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketTicMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketTicMeta* internal_default_instance() {
    return reinterpret_cast<const MarketTicMeta*>(
               &_MarketTicMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MarketTicMeta& a, MarketTicMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketTicMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketTicMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketTicMeta* New() const final {
    return CreateMaybeMessage<MarketTicMeta>(nullptr);
  }

  MarketTicMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketTicMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketTicMeta& from);
  void MergeFrom(const MarketTicMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketTicMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.MarketTicMeta";
  }
  protected:
  explicit MarketTicMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderfillheadFieldNumber = 40,
    kPrevFieldNumber = 50,
    kPriceFieldNumber = 20,
    kSizeFieldNumber = 30,
  };
  // optional bytes orderfillhead = 40;
  bool has_orderfillhead() const;
  private:
  bool _internal_has_orderfillhead() const;
  public:
  void clear_orderfillhead();
  const std::string& orderfillhead() const;
  void set_orderfillhead(const std::string& value);
  void set_orderfillhead(std::string&& value);
  void set_orderfillhead(const char* value);
  void set_orderfillhead(const void* value, size_t size);
  std::string* mutable_orderfillhead();
  std::string* release_orderfillhead();
  void set_allocated_orderfillhead(std::string* orderfillhead);
  private:
  const std::string& _internal_orderfillhead() const;
  void _internal_set_orderfillhead(const std::string& value);
  std::string* _internal_mutable_orderfillhead();
  public:

  // optional bytes prev = 50;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional int32 price = 20;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 size = 30;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.MarketTicMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderfillhead_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class OrderMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.OrderMeta) */ {
 public:
  inline OrderMeta() : OrderMeta(nullptr) {};
  virtual ~OrderMeta();

  OrderMeta(const OrderMeta& from);
  OrderMeta(OrderMeta&& from) noexcept
    : OrderMeta() {
    *this = ::std::move(from);
  }

  inline OrderMeta& operator=(const OrderMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderMeta& operator=(OrderMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderMeta* internal_default_instance() {
    return reinterpret_cast<const OrderMeta*>(
               &_OrderMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(OrderMeta& a, OrderMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderMeta* New() const final {
    return CreateMaybeMessage<OrderMeta>(nullptr);
  }

  OrderMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderMeta& from);
  void MergeFrom(const OrderMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.OrderMeta";
  }
  protected:
  explicit OrderMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFnameFieldNumber = 10,
    kPlayeridFieldNumber = 20,
    kTxmetaidFieldNumber = 60,
    kOrderfillmetaidFieldNumber = 70,
    kPrevFieldNumber = 80,
    kTimestampFieldNumber = 75,
    kRefnumFieldNumber = 1,
    kBuysideFieldNumber = 30,
    kSizeFieldNumber = 40,
    kPriceFieldNumber = 50,
  };
  // optional string fname = 10;
  bool has_fname() const;
  private:
  bool _internal_has_fname() const;
  public:
  void clear_fname();
  const std::string& fname() const;
  void set_fname(const std::string& value);
  void set_fname(std::string&& value);
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  std::string* mutable_fname();
  std::string* release_fname();
  void set_allocated_fname(std::string* fname);
  private:
  const std::string& _internal_fname() const;
  void _internal_set_fname(const std::string& value);
  std::string* _internal_mutable_fname();
  public:

  // optional string playerid = 20;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional bytes txmetaid = 60;
  bool has_txmetaid() const;
  private:
  bool _internal_has_txmetaid() const;
  public:
  void clear_txmetaid();
  const std::string& txmetaid() const;
  void set_txmetaid(const std::string& value);
  void set_txmetaid(std::string&& value);
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  std::string* mutable_txmetaid();
  std::string* release_txmetaid();
  void set_allocated_txmetaid(std::string* txmetaid);
  private:
  const std::string& _internal_txmetaid() const;
  void _internal_set_txmetaid(const std::string& value);
  std::string* _internal_mutable_txmetaid();
  public:

  // optional bytes orderfillmetaid = 70;
  bool has_orderfillmetaid() const;
  private:
  bool _internal_has_orderfillmetaid() const;
  public:
  void clear_orderfillmetaid();
  const std::string& orderfillmetaid() const;
  void set_orderfillmetaid(const std::string& value);
  void set_orderfillmetaid(std::string&& value);
  void set_orderfillmetaid(const char* value);
  void set_orderfillmetaid(const void* value, size_t size);
  std::string* mutable_orderfillmetaid();
  std::string* release_orderfillmetaid();
  void set_allocated_orderfillmetaid(std::string* orderfillmetaid);
  private:
  const std::string& _internal_orderfillmetaid() const;
  void _internal_set_orderfillmetaid(const std::string& value);
  std::string* _internal_mutable_orderfillmetaid();
  public:

  // optional bytes prev = 80;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional int32 timestamp = 75;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 refnum = 1;
  bool has_refnum() const;
  private:
  bool _internal_has_refnum() const;
  public:
  void clear_refnum();
  ::PROTOBUF_NAMESPACE_ID::int32 refnum() const;
  void set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refnum() const;
  void _internal_set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool buyside = 30;
  bool has_buyside() const;
  private:
  bool _internal_has_buyside() const;
  public:
  void clear_buyside();
  bool buyside() const;
  void set_buyside(bool value);
  private:
  bool _internal_buyside() const;
  void _internal_set_buyside(bool value);
  public:

  // optional int32 size = 40;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 price = 50;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.OrderMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderfillmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 refnum_;
  bool buyside_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class OrderFillMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.OrderFillMeta) */ {
 public:
  inline OrderFillMeta() : OrderFillMeta(nullptr) {};
  virtual ~OrderFillMeta();

  OrderFillMeta(const OrderFillMeta& from);
  OrderFillMeta(OrderFillMeta&& from) noexcept
    : OrderFillMeta() {
    *this = ::std::move(from);
  }

  inline OrderFillMeta& operator=(const OrderFillMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderFillMeta& operator=(OrderFillMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderFillMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderFillMeta* internal_default_instance() {
    return reinterpret_cast<const OrderFillMeta*>(
               &_OrderFillMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(OrderFillMeta& a, OrderFillMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderFillMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderFillMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderFillMeta* New() const final {
    return CreateMaybeMessage<OrderFillMeta>(nullptr);
  }

  OrderFillMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderFillMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderFillMeta& from);
  void MergeFrom(const OrderFillMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderFillMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.OrderFillMeta";
  }
  protected:
  explicit OrderFillMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFnameFieldNumber = 10,
    kPlayeridFieldNumber = 15,
    kTxmetaidFieldNumber = 60,
    kPrevFieldNumber = 70,
    kRefnumFieldNumber = 1,
    kFillpriceFieldNumber = 20,
    kFillsizeFieldNumber = 30,
    kBuysideFieldNumber = 35,
    kTimestampFieldNumber = 40,
  };
  // optional string fname = 10;
  bool has_fname() const;
  private:
  bool _internal_has_fname() const;
  public:
  void clear_fname();
  const std::string& fname() const;
  void set_fname(const std::string& value);
  void set_fname(std::string&& value);
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  std::string* mutable_fname();
  std::string* release_fname();
  void set_allocated_fname(std::string* fname);
  private:
  const std::string& _internal_fname() const;
  void _internal_set_fname(const std::string& value);
  std::string* _internal_mutable_fname();
  public:

  // optional string playerid = 15;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional bytes txmetaid = 60;
  bool has_txmetaid() const;
  private:
  bool _internal_has_txmetaid() const;
  public:
  void clear_txmetaid();
  const std::string& txmetaid() const;
  void set_txmetaid(const std::string& value);
  void set_txmetaid(std::string&& value);
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  std::string* mutable_txmetaid();
  std::string* release_txmetaid();
  void set_allocated_txmetaid(std::string* txmetaid);
  private:
  const std::string& _internal_txmetaid() const;
  void _internal_set_txmetaid(const std::string& value);
  std::string* _internal_mutable_txmetaid();
  public:

  // optional bytes prev = 70;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional int32 refnum = 1;
  bool has_refnum() const;
  private:
  bool _internal_has_refnum() const;
  public:
  void clear_refnum();
  ::PROTOBUF_NAMESPACE_ID::int32 refnum() const;
  void set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refnum() const;
  void _internal_set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 fillprice = 20;
  bool has_fillprice() const;
  private:
  bool _internal_has_fillprice() const;
  public:
  void clear_fillprice();
  ::PROTOBUF_NAMESPACE_ID::int32 fillprice() const;
  void set_fillprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fillprice() const;
  void _internal_set_fillprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 fillsize = 30;
  bool has_fillsize() const;
  private:
  bool _internal_has_fillsize() const;
  public:
  void clear_fillsize();
  ::PROTOBUF_NAMESPACE_ID::int32 fillsize() const;
  void set_fillsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fillsize() const;
  void _internal_set_fillsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool buyside = 35;
  bool has_buyside() const;
  private:
  bool _internal_has_buyside() const;
  public:
  void clear_buyside();
  bool buyside() const;
  void set_buyside(bool value);
  private:
  bool _internal_buyside() const;
  void _internal_set_buyside(bool value);
  public:

  // optional uint64 timestamp = 40;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.OrderFillMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::int32 refnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 fillprice_;
  ::PROTOBUF_NAMESPACE_ID::int32 fillsize_;
  bool buyside_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GlobalStateMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GlobalStateMeta) */ {
 public:
  inline GlobalStateMeta() : GlobalStateMeta(nullptr) {};
  virtual ~GlobalStateMeta();

  GlobalStateMeta(const GlobalStateMeta& from);
  GlobalStateMeta(GlobalStateMeta&& from) noexcept
    : GlobalStateMeta() {
    *this = ::std::move(from);
  }

  inline GlobalStateMeta& operator=(const GlobalStateMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalStateMeta& operator=(GlobalStateMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalStateMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalStateMeta* internal_default_instance() {
    return reinterpret_cast<const GlobalStateMeta*>(
               &_GlobalStateMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GlobalStateMeta& a, GlobalStateMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalStateMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalStateMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalStateMeta* New() const final {
    return CreateMaybeMessage<GlobalStateMeta>(nullptr);
  }

  GlobalStateMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalStateMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalStateMeta& from);
  void MergeFrom(const GlobalStateMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalStateMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GlobalStateMeta";
  }
  protected:
  explicit GlobalStateMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrmetaidFieldNumber = 20,
    kPrevFieldNumber = 30,
    kNextFieldNumber = 40,
    kGlobalstateFieldNumber = 10,
  };
  // optional bytes trmetaid = 20;
  bool has_trmetaid() const;
  private:
  bool _internal_has_trmetaid() const;
  public:
  void clear_trmetaid();
  const std::string& trmetaid() const;
  void set_trmetaid(const std::string& value);
  void set_trmetaid(std::string&& value);
  void set_trmetaid(const char* value);
  void set_trmetaid(const void* value, size_t size);
  std::string* mutable_trmetaid();
  std::string* release_trmetaid();
  void set_allocated_trmetaid(std::string* trmetaid);
  private:
  const std::string& _internal_trmetaid() const;
  void _internal_set_trmetaid(const std::string& value);
  std::string* _internal_mutable_trmetaid();
  public:

  // optional bytes prev = 30;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional bytes next = 40;
  bool has_next() const;
  private:
  bool _internal_has_next() const;
  public:
  void clear_next();
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);
  private:
  const std::string& _internal_next() const;
  void _internal_set_next(const std::string& value);
  std::string* _internal_mutable_next();
  public:

  // optional .fantasybit.GlobalState globalstate = 10;
  bool has_globalstate() const;
  private:
  bool _internal_has_globalstate() const;
  public:
  void clear_globalstate();
  const ::fantasybit::GlobalState& globalstate() const;
  ::fantasybit::GlobalState* release_globalstate();
  ::fantasybit::GlobalState* mutable_globalstate();
  void set_allocated_globalstate(::fantasybit::GlobalState* globalstate);
  private:
  const ::fantasybit::GlobalState& _internal_globalstate() const;
  ::fantasybit::GlobalState* _internal_mutable_globalstate();
  public:
  void unsafe_arena_set_allocated_globalstate(
      ::fantasybit::GlobalState* globalstate);
  ::fantasybit::GlobalState* unsafe_arena_release_globalstate();

  // @@protoc_insertion_point(class_scope:fantasybit.GlobalStateMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trmetaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  ::fantasybit::GlobalState* globalstate_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class PlayerMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerMeta) */ {
 public:
  inline PlayerMeta() : PlayerMeta(nullptr) {};
  virtual ~PlayerMeta();

  PlayerMeta(const PlayerMeta& from);
  PlayerMeta(PlayerMeta&& from) noexcept
    : PlayerMeta() {
    *this = ::std::move(from);
  }

  inline PlayerMeta& operator=(const PlayerMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMeta& operator=(PlayerMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMeta* internal_default_instance() {
    return reinterpret_cast<const PlayerMeta*>(
               &_PlayerMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PlayerMeta& a, PlayerMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerMeta* New() const final {
    return CreateMaybeMessage<PlayerMeta>(nullptr);
  }

  PlayerMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerMeta& from);
  void MergeFrom(const PlayerMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.PlayerMeta";
  }
  protected:
  explicit PlayerMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 10,
    kDatametaidFieldNumber = 40,
    kPrevFieldNumber = 50,
    kPlayerBaseFieldNumber = 20,
    kPlayerStatusFieldNumber = 30,
  };
  // optional string playerid = 10;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional bytes datametaid = 40;
  bool has_datametaid() const;
  private:
  bool _internal_has_datametaid() const;
  public:
  void clear_datametaid();
  const std::string& datametaid() const;
  void set_datametaid(const std::string& value);
  void set_datametaid(std::string&& value);
  void set_datametaid(const char* value);
  void set_datametaid(const void* value, size_t size);
  std::string* mutable_datametaid();
  std::string* release_datametaid();
  void set_allocated_datametaid(std::string* datametaid);
  private:
  const std::string& _internal_datametaid() const;
  void _internal_set_datametaid(const std::string& value);
  std::string* _internal_mutable_datametaid();
  public:

  // optional bytes prev = 50;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // optional .fantasybit.PlayerBase player_base = 20;
  bool has_player_base() const;
  private:
  bool _internal_has_player_base() const;
  public:
  void clear_player_base();
  const ::fantasybit::PlayerBase& player_base() const;
  ::fantasybit::PlayerBase* release_player_base();
  ::fantasybit::PlayerBase* mutable_player_base();
  void set_allocated_player_base(::fantasybit::PlayerBase* player_base);
  private:
  const ::fantasybit::PlayerBase& _internal_player_base() const;
  ::fantasybit::PlayerBase* _internal_mutable_player_base();
  public:
  void unsafe_arena_set_allocated_player_base(
      ::fantasybit::PlayerBase* player_base);
  ::fantasybit::PlayerBase* unsafe_arena_release_player_base();

  // optional .fantasybit.PlayerStatus player_status = 30;
  bool has_player_status() const;
  private:
  bool _internal_has_player_status() const;
  public:
  void clear_player_status();
  const ::fantasybit::PlayerStatus& player_status() const;
  ::fantasybit::PlayerStatus* release_player_status();
  ::fantasybit::PlayerStatus* mutable_player_status();
  void set_allocated_player_status(::fantasybit::PlayerStatus* player_status);
  private:
  const ::fantasybit::PlayerStatus& _internal_player_status() const;
  ::fantasybit::PlayerStatus* _internal_mutable_player_status();
  public:
  void unsafe_arena_set_allocated_player_status(
      ::fantasybit::PlayerStatus* player_status);
  ::fantasybit::PlayerStatus* unsafe_arena_release_player_status();

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datametaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  ::fantasybit::PlayerBase* player_base_;
  ::fantasybit::PlayerStatus* player_status_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class TeamMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.TeamMeta) */ {
 public:
  inline TeamMeta() : TeamMeta(nullptr) {};
  virtual ~TeamMeta();

  TeamMeta(const TeamMeta& from);
  TeamMeta(TeamMeta&& from) noexcept
    : TeamMeta() {
    *this = ::std::move(from);
  }

  inline TeamMeta& operator=(const TeamMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamMeta& operator=(TeamMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamMeta* internal_default_instance() {
    return reinterpret_cast<const TeamMeta*>(
               &_TeamMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TeamMeta& a, TeamMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamMeta* New() const final {
    return CreateMaybeMessage<TeamMeta>(nullptr);
  }

  TeamMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamMeta& from);
  void MergeFrom(const TeamMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.TeamMeta";
  }
  protected:
  explicit TeamMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamidFieldNumber = 10,
    kPlayermetaidrootFieldNumber = 20,
    kPrevFieldNumber = 30,
  };
  // optional string teamid = 10;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  const std::string& teamid() const;
  void set_teamid(const std::string& value);
  void set_teamid(std::string&& value);
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  std::string* mutable_teamid();
  std::string* release_teamid();
  void set_allocated_teamid(std::string* teamid);
  private:
  const std::string& _internal_teamid() const;
  void _internal_set_teamid(const std::string& value);
  std::string* _internal_mutable_teamid();
  public:

  // optional bytes playermetaidroot = 20;
  bool has_playermetaidroot() const;
  private:
  bool _internal_has_playermetaidroot() const;
  public:
  void clear_playermetaidroot();
  const std::string& playermetaidroot() const;
  void set_playermetaidroot(const std::string& value);
  void set_playermetaidroot(std::string&& value);
  void set_playermetaidroot(const char* value);
  void set_playermetaidroot(const void* value, size_t size);
  std::string* mutable_playermetaidroot();
  std::string* release_playermetaidroot();
  void set_allocated_playermetaidroot(std::string* playermetaidroot);
  private:
  const std::string& _internal_playermetaidroot() const;
  void _internal_set_playermetaidroot(const std::string& value);
  std::string* _internal_mutable_playermetaidroot();
  public:

  // optional bytes prev = 30;
  bool has_prev() const;
  private:
  bool _internal_has_prev() const;
  public:
  void clear_prev();
  const std::string& prev() const;
  void set_prev(const std::string& value);
  void set_prev(std::string&& value);
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  std::string* mutable_prev();
  std::string* release_prev();
  void set_allocated_prev(std::string* prev);
  private:
  const std::string& _internal_prev() const;
  void _internal_set_prev(const std::string& value);
  std::string* _internal_mutable_prev();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.TeamMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playermetaidroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class pbstate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.pbstate) */ {
 public:
  inline pbstate() : pbstate(nullptr) {};
  virtual ~pbstate();

  pbstate(const pbstate& from);
  pbstate(pbstate&& from) noexcept
    : pbstate() {
    *this = ::std::move(from);
  }

  inline pbstate& operator=(const pbstate& from) {
    CopyFrom(from);
    return *this;
  }
  inline pbstate& operator=(pbstate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pbstate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbstate* internal_default_instance() {
    return reinterpret_cast<const pbstate*>(
               &_pbstate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(pbstate& a, pbstate& b) {
    a.Swap(&b);
  }
  inline void Swap(pbstate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pbstate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pbstate* New() const final {
    return CreateMaybeMessage<pbstate>(nullptr);
  }

  pbstate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pbstate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pbstate& from);
  void MergeFrom(const pbstate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbstate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.pbstate";
  }
  protected:
  explicit pbstate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchedulestateidFieldNumber = 10,
    kLeaderboardstateidFieldNumber = 20,
    kProjstateidFieldNumber = 30,
    kPosstateidFieldNumber = 35,
    kOrderstateidFieldNumber = 40,
    kMarketstateidFieldNumber = 50,
    kGlobalstateidFieldNumber = 60,
    kTeamstatemidFieldNumber = 70,
    kFantasynamestateidFieldNumber = 80,
  };
  // optional bytes schedulestateid = 10;
  bool has_schedulestateid() const;
  private:
  bool _internal_has_schedulestateid() const;
  public:
  void clear_schedulestateid();
  const std::string& schedulestateid() const;
  void set_schedulestateid(const std::string& value);
  void set_schedulestateid(std::string&& value);
  void set_schedulestateid(const char* value);
  void set_schedulestateid(const void* value, size_t size);
  std::string* mutable_schedulestateid();
  std::string* release_schedulestateid();
  void set_allocated_schedulestateid(std::string* schedulestateid);
  private:
  const std::string& _internal_schedulestateid() const;
  void _internal_set_schedulestateid(const std::string& value);
  std::string* _internal_mutable_schedulestateid();
  public:

  // optional bytes leaderboardstateid = 20;
  bool has_leaderboardstateid() const;
  private:
  bool _internal_has_leaderboardstateid() const;
  public:
  void clear_leaderboardstateid();
  const std::string& leaderboardstateid() const;
  void set_leaderboardstateid(const std::string& value);
  void set_leaderboardstateid(std::string&& value);
  void set_leaderboardstateid(const char* value);
  void set_leaderboardstateid(const void* value, size_t size);
  std::string* mutable_leaderboardstateid();
  std::string* release_leaderboardstateid();
  void set_allocated_leaderboardstateid(std::string* leaderboardstateid);
  private:
  const std::string& _internal_leaderboardstateid() const;
  void _internal_set_leaderboardstateid(const std::string& value);
  std::string* _internal_mutable_leaderboardstateid();
  public:

  // optional bytes projstateid = 30;
  bool has_projstateid() const;
  private:
  bool _internal_has_projstateid() const;
  public:
  void clear_projstateid();
  const std::string& projstateid() const;
  void set_projstateid(const std::string& value);
  void set_projstateid(std::string&& value);
  void set_projstateid(const char* value);
  void set_projstateid(const void* value, size_t size);
  std::string* mutable_projstateid();
  std::string* release_projstateid();
  void set_allocated_projstateid(std::string* projstateid);
  private:
  const std::string& _internal_projstateid() const;
  void _internal_set_projstateid(const std::string& value);
  std::string* _internal_mutable_projstateid();
  public:

  // optional bytes posstateid = 35;
  bool has_posstateid() const;
  private:
  bool _internal_has_posstateid() const;
  public:
  void clear_posstateid();
  const std::string& posstateid() const;
  void set_posstateid(const std::string& value);
  void set_posstateid(std::string&& value);
  void set_posstateid(const char* value);
  void set_posstateid(const void* value, size_t size);
  std::string* mutable_posstateid();
  std::string* release_posstateid();
  void set_allocated_posstateid(std::string* posstateid);
  private:
  const std::string& _internal_posstateid() const;
  void _internal_set_posstateid(const std::string& value);
  std::string* _internal_mutable_posstateid();
  public:

  // optional bytes orderstateid = 40;
  bool has_orderstateid() const;
  private:
  bool _internal_has_orderstateid() const;
  public:
  void clear_orderstateid();
  const std::string& orderstateid() const;
  void set_orderstateid(const std::string& value);
  void set_orderstateid(std::string&& value);
  void set_orderstateid(const char* value);
  void set_orderstateid(const void* value, size_t size);
  std::string* mutable_orderstateid();
  std::string* release_orderstateid();
  void set_allocated_orderstateid(std::string* orderstateid);
  private:
  const std::string& _internal_orderstateid() const;
  void _internal_set_orderstateid(const std::string& value);
  std::string* _internal_mutable_orderstateid();
  public:

  // optional bytes marketstateid = 50;
  bool has_marketstateid() const;
  private:
  bool _internal_has_marketstateid() const;
  public:
  void clear_marketstateid();
  const std::string& marketstateid() const;
  void set_marketstateid(const std::string& value);
  void set_marketstateid(std::string&& value);
  void set_marketstateid(const char* value);
  void set_marketstateid(const void* value, size_t size);
  std::string* mutable_marketstateid();
  std::string* release_marketstateid();
  void set_allocated_marketstateid(std::string* marketstateid);
  private:
  const std::string& _internal_marketstateid() const;
  void _internal_set_marketstateid(const std::string& value);
  std::string* _internal_mutable_marketstateid();
  public:

  // optional bytes globalstateid = 60;
  bool has_globalstateid() const;
  private:
  bool _internal_has_globalstateid() const;
  public:
  void clear_globalstateid();
  const std::string& globalstateid() const;
  void set_globalstateid(const std::string& value);
  void set_globalstateid(std::string&& value);
  void set_globalstateid(const char* value);
  void set_globalstateid(const void* value, size_t size);
  std::string* mutable_globalstateid();
  std::string* release_globalstateid();
  void set_allocated_globalstateid(std::string* globalstateid);
  private:
  const std::string& _internal_globalstateid() const;
  void _internal_set_globalstateid(const std::string& value);
  std::string* _internal_mutable_globalstateid();
  public:

  // optional bytes teamstatemid = 70;
  bool has_teamstatemid() const;
  private:
  bool _internal_has_teamstatemid() const;
  public:
  void clear_teamstatemid();
  const std::string& teamstatemid() const;
  void set_teamstatemid(const std::string& value);
  void set_teamstatemid(std::string&& value);
  void set_teamstatemid(const char* value);
  void set_teamstatemid(const void* value, size_t size);
  std::string* mutable_teamstatemid();
  std::string* release_teamstatemid();
  void set_allocated_teamstatemid(std::string* teamstatemid);
  private:
  const std::string& _internal_teamstatemid() const;
  void _internal_set_teamstatemid(const std::string& value);
  std::string* _internal_mutable_teamstatemid();
  public:

  // optional bytes fantasynamestateid = 80;
  bool has_fantasynamestateid() const;
  private:
  bool _internal_has_fantasynamestateid() const;
  public:
  void clear_fantasynamestateid();
  const std::string& fantasynamestateid() const;
  void set_fantasynamestateid(const std::string& value);
  void set_fantasynamestateid(std::string&& value);
  void set_fantasynamestateid(const char* value);
  void set_fantasynamestateid(const void* value, size_t size);
  std::string* mutable_fantasynamestateid();
  std::string* release_fantasynamestateid();
  void set_allocated_fantasynamestateid(std::string* fantasynamestateid);
  private:
  const std::string& _internal_fantasynamestateid() const;
  void _internal_set_fantasynamestateid(const std::string& value);
  std::string* _internal_mutable_fantasynamestateid();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.pbstate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schedulestateid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboardstateid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projstateid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posstateid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderstateid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketstateid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr globalstateid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamstatemid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fantasynamestateid_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class MerkleTree PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.MerkleTree) */ {
 public:
  inline MerkleTree() : MerkleTree(nullptr) {};
  virtual ~MerkleTree();

  MerkleTree(const MerkleTree& from);
  MerkleTree(MerkleTree&& from) noexcept
    : MerkleTree() {
    *this = ::std::move(from);
  }

  inline MerkleTree& operator=(const MerkleTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline MerkleTree& operator=(MerkleTree&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MerkleTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MerkleTree* internal_default_instance() {
    return reinterpret_cast<const MerkleTree*>(
               &_MerkleTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(MerkleTree& a, MerkleTree& b) {
    a.Swap(&b);
  }
  inline void Swap(MerkleTree* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MerkleTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MerkleTree* New() const final {
    return CreateMaybeMessage<MerkleTree>(nullptr);
  }

  MerkleTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MerkleTree>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MerkleTree& from);
  void MergeFrom(const MerkleTree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MerkleTree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.MerkleTree";
  }
  protected:
  explicit MerkleTree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeavesFieldNumber = 20,
    kRootFieldNumber = 10,
  };
  // repeated bytes leaves = 20;
  int leaves_size() const;
  private:
  int _internal_leaves_size() const;
  public:
  void clear_leaves();
  const std::string& leaves(int index) const;
  std::string* mutable_leaves(int index);
  void set_leaves(int index, const std::string& value);
  void set_leaves(int index, std::string&& value);
  void set_leaves(int index, const char* value);
  void set_leaves(int index, const void* value, size_t size);
  std::string* add_leaves();
  void add_leaves(const std::string& value);
  void add_leaves(std::string&& value);
  void add_leaves(const char* value);
  void add_leaves(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& leaves() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_leaves();
  private:
  const std::string& _internal_leaves(int index) const;
  std::string* _internal_add_leaves();
  public:

  // optional bytes root = 10;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const void* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.MerkleTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> leaves_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class NewPlayerModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.NewPlayerModel) */ {
 public:
  inline NewPlayerModel() : NewPlayerModel(nullptr) {};
  virtual ~NewPlayerModel();

  NewPlayerModel(const NewPlayerModel& from);
  NewPlayerModel(NewPlayerModel&& from) noexcept
    : NewPlayerModel() {
    *this = ::std::move(from);
  }

  inline NewPlayerModel& operator=(const NewPlayerModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewPlayerModel& operator=(NewPlayerModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewPlayerModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewPlayerModel* internal_default_instance() {
    return reinterpret_cast<const NewPlayerModel*>(
               &_NewPlayerModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(NewPlayerModel& a, NewPlayerModel& b) {
    a.Swap(&b);
  }
  inline void Swap(NewPlayerModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewPlayerModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewPlayerModel* New() const final {
    return CreateMaybeMessage<NewPlayerModel>(nullptr);
  }

  NewPlayerModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewPlayerModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewPlayerModel& from);
  void MergeFrom(const NewPlayerModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewPlayerModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.NewPlayerModel";
  }
  protected:
  explicit NewPlayerModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 10,
  };
  // repeated .fantasybit.PlayerMeta players = 10;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::fantasybit::PlayerMeta* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerMeta >*
      mutable_players();
  private:
  const ::fantasybit::PlayerMeta& _internal_players(int index) const;
  ::fantasybit::PlayerMeta* _internal_add_players();
  public:
  const ::fantasybit::PlayerMeta& players(int index) const;
  ::fantasybit::PlayerMeta* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerMeta >&
      players() const;

  // @@protoc_insertion_point(class_scope:fantasybit.NewPlayerModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerMeta > players_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class WsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.WsReq) */ {
 public:
  inline WsReq() : WsReq(nullptr) {};
  virtual ~WsReq();

  WsReq(const WsReq& from);
  WsReq(WsReq&& from) noexcept
    : WsReq() {
    *this = ::std::move(from);
  }

  inline WsReq& operator=(const WsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WsReq& operator=(WsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WsReq* internal_default_instance() {
    return reinterpret_cast<const WsReq*>(
               &_WsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(WsReq& a, WsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(WsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WsReq* New() const final {
    return CreateMaybeMessage<WsReq>(nullptr);
  }

  WsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WsReq& from);
  void MergeFrom(const WsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.WsReq";
  }
  protected:
  explicit WsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kCtypeFieldNumber = 2,
  };
  // optional int32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .fantasybit.CType ctype = 2;
  bool has_ctype() const;
  private:
  bool _internal_has_ctype() const;
  public:
  void clear_ctype();
  ::fantasybit::CType ctype() const;
  void set_ctype(::fantasybit::CType value);
  private:
  ::fantasybit::CType _internal_ctype() const;
  void _internal_set_ctype(::fantasybit::CType value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(WsReq)
  // @@protoc_insertion_point(class_scope:fantasybit.WsReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  int ctype_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class WSReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.WSReply) */ {
 public:
  inline WSReply() : WSReply(nullptr) {};
  virtual ~WSReply();

  WSReply(const WSReply& from);
  WSReply(WSReply&& from) noexcept
    : WSReply() {
    *this = ::std::move(from);
  }

  inline WSReply& operator=(const WSReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline WSReply& operator=(WSReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WSReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WSReply* internal_default_instance() {
    return reinterpret_cast<const WSReply*>(
               &_WSReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(WSReply& a, WSReply& b) {
    a.Swap(&b);
  }
  inline void Swap(WSReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WSReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WSReply* New() const final {
    return CreateMaybeMessage<WSReply>(nullptr);
  }

  WSReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WSReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WSReply& from);
  void MergeFrom(const WSReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WSReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.WSReply";
  }
  protected:
  explicit WSReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 30,
    kReqFieldNumber = 20,
    kVersionFieldNumber = 1,
    kCtypeFieldNumber = 2,
  };
  // optional string data = 30;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .fantasybit.WsReq req = 20;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::fantasybit::WsReq& req() const;
  ::fantasybit::WsReq* release_req();
  ::fantasybit::WsReq* mutable_req();
  void set_allocated_req(::fantasybit::WsReq* req);
  private:
  const ::fantasybit::WsReq& _internal_req() const;
  ::fantasybit::WsReq* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::fantasybit::WsReq* req);
  ::fantasybit::WsReq* unsafe_arena_release_req();

  // optional int32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .fantasybit.CType ctype = 2;
  bool has_ctype() const;
  private:
  bool _internal_has_ctype() const;
  public:
  void clear_ctype();
  ::fantasybit::CType ctype() const;
  void set_ctype(::fantasybit::CType value);
  private:
  ::fantasybit::CType _internal_ctype() const;
  void _internal_set_ctype(::fantasybit::CType value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(WSReply)
  // @@protoc_insertion_point(class_scope:fantasybit.WSReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::fantasybit::WsReq* req_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  int ctype_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GetGlobalStateRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetGlobalStateRep) */ {
 public:
  inline GetGlobalStateRep() : GetGlobalStateRep(nullptr) {};
  virtual ~GetGlobalStateRep();

  GetGlobalStateRep(const GetGlobalStateRep& from);
  GetGlobalStateRep(GetGlobalStateRep&& from) noexcept
    : GetGlobalStateRep() {
    *this = ::std::move(from);
  }

  inline GetGlobalStateRep& operator=(const GetGlobalStateRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGlobalStateRep& operator=(GetGlobalStateRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGlobalStateRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGlobalStateRep* internal_default_instance() {
    return reinterpret_cast<const GetGlobalStateRep*>(
               &_GetGlobalStateRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetGlobalStateRep& a, GetGlobalStateRep& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGlobalStateRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGlobalStateRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGlobalStateRep* New() const final {
    return CreateMaybeMessage<GetGlobalStateRep>(nullptr);
  }

  GetGlobalStateRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGlobalStateRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGlobalStateRep& from);
  void MergeFrom(const GetGlobalStateRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGlobalStateRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GetGlobalStateRep";
  }
  protected:
  explicit GetGlobalStateRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalstateFieldNumber = 10,
  };
  // optional .fantasybit.GlobalState globalstate = 10;
  bool has_globalstate() const;
  private:
  bool _internal_has_globalstate() const;
  public:
  void clear_globalstate();
  const ::fantasybit::GlobalState& globalstate() const;
  ::fantasybit::GlobalState* release_globalstate();
  ::fantasybit::GlobalState* mutable_globalstate();
  void set_allocated_globalstate(::fantasybit::GlobalState* globalstate);
  private:
  const ::fantasybit::GlobalState& _internal_globalstate() const;
  ::fantasybit::GlobalState* _internal_mutable_globalstate();
  public:
  void unsafe_arena_set_allocated_globalstate(
      ::fantasybit::GlobalState* globalstate);
  ::fantasybit::GlobalState* unsafe_arena_release_globalstate();

  static const int kRepFieldNumber = 900;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetGlobalStateRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetGlobalStateRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::GlobalState* globalstate_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GetScheduleRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetScheduleRep) */ {
 public:
  inline GetScheduleRep() : GetScheduleRep(nullptr) {};
  virtual ~GetScheduleRep();

  GetScheduleRep(const GetScheduleRep& from);
  GetScheduleRep(GetScheduleRep&& from) noexcept
    : GetScheduleRep() {
    *this = ::std::move(from);
  }

  inline GetScheduleRep& operator=(const GetScheduleRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetScheduleRep& operator=(GetScheduleRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetScheduleRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetScheduleRep* internal_default_instance() {
    return reinterpret_cast<const GetScheduleRep*>(
               &_GetScheduleRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetScheduleRep& a, GetScheduleRep& b) {
    a.Swap(&b);
  }
  inline void Swap(GetScheduleRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetScheduleRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetScheduleRep* New() const final {
    return CreateMaybeMessage<GetScheduleRep>(nullptr);
  }

  GetScheduleRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetScheduleRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetScheduleRep& from);
  void MergeFrom(const GetScheduleRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetScheduleRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GetScheduleRep";
  }
  protected:
  explicit GetScheduleRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScheduledataFieldNumber = 10,
  };
  // optional .fantasybit.ScheduleData scheduledata = 10;
  bool has_scheduledata() const;
  private:
  bool _internal_has_scheduledata() const;
  public:
  void clear_scheduledata();
  const ::fantasybit::ScheduleData& scheduledata() const;
  ::fantasybit::ScheduleData* release_scheduledata();
  ::fantasybit::ScheduleData* mutable_scheduledata();
  void set_allocated_scheduledata(::fantasybit::ScheduleData* scheduledata);
  private:
  const ::fantasybit::ScheduleData& _internal_scheduledata() const;
  ::fantasybit::ScheduleData* _internal_mutable_scheduledata();
  public:
  void unsafe_arena_set_allocated_scheduledata(
      ::fantasybit::ScheduleData* scheduledata);
  ::fantasybit::ScheduleData* unsafe_arena_release_scheduledata();

  static const int kRepFieldNumber = 910;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetScheduleRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetScheduleRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::ScheduleData* scheduledata_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class CheckNameReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.CheckNameReq) */ {
 public:
  inline CheckNameReq() : CheckNameReq(nullptr) {};
  virtual ~CheckNameReq();

  CheckNameReq(const CheckNameReq& from);
  CheckNameReq(CheckNameReq&& from) noexcept
    : CheckNameReq() {
    *this = ::std::move(from);
  }

  inline CheckNameReq& operator=(const CheckNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckNameReq& operator=(CheckNameReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckNameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckNameReq* internal_default_instance() {
    return reinterpret_cast<const CheckNameReq*>(
               &_CheckNameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CheckNameReq& a, CheckNameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckNameReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckNameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckNameReq* New() const final {
    return CreateMaybeMessage<CheckNameReq>(nullptr);
  }

  CheckNameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckNameReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckNameReq& from);
  void MergeFrom(const CheckNameReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckNameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.CheckNameReq";
  }
  protected:
  explicit CheckNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyNameFieldNumber = 10,
  };
  // optional string fantasy_name = 10;
  bool has_fantasy_name() const;
  private:
  bool _internal_has_fantasy_name() const;
  public:
  void clear_fantasy_name();
  const std::string& fantasy_name() const;
  void set_fantasy_name(const std::string& value);
  void set_fantasy_name(std::string&& value);
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  std::string* mutable_fantasy_name();
  std::string* release_fantasy_name();
  void set_allocated_fantasy_name(std::string* fantasy_name);
  private:
  const std::string& _internal_fantasy_name() const;
  void _internal_set_fantasy_name(const std::string& value);
  std::string* _internal_mutable_fantasy_name();
  public:

  static const int kReqFieldNumber = 200;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::CheckNameReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.CheckNameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fantasy_name_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class CheckNameRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.CheckNameRep) */ {
 public:
  inline CheckNameRep() : CheckNameRep(nullptr) {};
  virtual ~CheckNameRep();

  CheckNameRep(const CheckNameRep& from);
  CheckNameRep(CheckNameRep&& from) noexcept
    : CheckNameRep() {
    *this = ::std::move(from);
  }

  inline CheckNameRep& operator=(const CheckNameRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckNameRep& operator=(CheckNameRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckNameRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckNameRep* internal_default_instance() {
    return reinterpret_cast<const CheckNameRep*>(
               &_CheckNameRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CheckNameRep& a, CheckNameRep& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckNameRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckNameRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckNameRep* New() const final {
    return CreateMaybeMessage<CheckNameRep>(nullptr);
  }

  CheckNameRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckNameRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckNameRep& from);
  void MergeFrom(const CheckNameRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckNameRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.CheckNameRep";
  }
  protected:
  explicit CheckNameRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsavailFieldNumber = 10,
    kReqFieldNumber = 20,
  };
  // optional string isavail = 10;
  bool has_isavail() const;
  private:
  bool _internal_has_isavail() const;
  public:
  void clear_isavail();
  const std::string& isavail() const;
  void set_isavail(const std::string& value);
  void set_isavail(std::string&& value);
  void set_isavail(const char* value);
  void set_isavail(const char* value, size_t size);
  std::string* mutable_isavail();
  std::string* release_isavail();
  void set_allocated_isavail(std::string* isavail);
  private:
  const std::string& _internal_isavail() const;
  void _internal_set_isavail(const std::string& value);
  std::string* _internal_mutable_isavail();
  public:

  // optional .fantasybit.CheckNameReq req = 20;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::fantasybit::CheckNameReq& req() const;
  ::fantasybit::CheckNameReq* release_req();
  ::fantasybit::CheckNameReq* mutable_req();
  void set_allocated_req(::fantasybit::CheckNameReq* req);
  private:
  const ::fantasybit::CheckNameReq& _internal_req() const;
  ::fantasybit::CheckNameReq* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::fantasybit::CheckNameReq* req);
  ::fantasybit::CheckNameReq* unsafe_arena_release_req();

  static const int kRepFieldNumber = 200;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::CheckNameRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.CheckNameRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isavail_;
  ::fantasybit::CheckNameReq* req_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class Pk2FnameReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Pk2FnameReq) */ {
 public:
  inline Pk2FnameReq() : Pk2FnameReq(nullptr) {};
  virtual ~Pk2FnameReq();

  Pk2FnameReq(const Pk2FnameReq& from);
  Pk2FnameReq(Pk2FnameReq&& from) noexcept
    : Pk2FnameReq() {
    *this = ::std::move(from);
  }

  inline Pk2FnameReq& operator=(const Pk2FnameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pk2FnameReq& operator=(Pk2FnameReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pk2FnameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pk2FnameReq* internal_default_instance() {
    return reinterpret_cast<const Pk2FnameReq*>(
               &_Pk2FnameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Pk2FnameReq& a, Pk2FnameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Pk2FnameReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pk2FnameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pk2FnameReq* New() const final {
    return CreateMaybeMessage<Pk2FnameReq>(nullptr);
  }

  Pk2FnameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pk2FnameReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pk2FnameReq& from);
  void MergeFrom(const Pk2FnameReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pk2FnameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Pk2FnameReq";
  }
  protected:
  explicit Pk2FnameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkFieldNumber = 10,
  };
  // optional string pk = 10;
  bool has_pk() const;
  private:
  bool _internal_has_pk() const;
  public:
  void clear_pk();
  const std::string& pk() const;
  void set_pk(const std::string& value);
  void set_pk(std::string&& value);
  void set_pk(const char* value);
  void set_pk(const char* value, size_t size);
  std::string* mutable_pk();
  std::string* release_pk();
  void set_allocated_pk(std::string* pk);
  private:
  const std::string& _internal_pk() const;
  void _internal_set_pk(const std::string& value);
  std::string* _internal_mutable_pk();
  public:

  static const int kReqFieldNumber = 300;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::Pk2FnameReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.Pk2FnameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pk_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class Pk2FnameRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Pk2FnameRep) */ {
 public:
  inline Pk2FnameRep() : Pk2FnameRep(nullptr) {};
  virtual ~Pk2FnameRep();

  Pk2FnameRep(const Pk2FnameRep& from);
  Pk2FnameRep(Pk2FnameRep&& from) noexcept
    : Pk2FnameRep() {
    *this = ::std::move(from);
  }

  inline Pk2FnameRep& operator=(const Pk2FnameRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pk2FnameRep& operator=(Pk2FnameRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pk2FnameRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pk2FnameRep* internal_default_instance() {
    return reinterpret_cast<const Pk2FnameRep*>(
               &_Pk2FnameRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Pk2FnameRep& a, Pk2FnameRep& b) {
    a.Swap(&b);
  }
  inline void Swap(Pk2FnameRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pk2FnameRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pk2FnameRep* New() const final {
    return CreateMaybeMessage<Pk2FnameRep>(nullptr);
  }

  Pk2FnameRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pk2FnameRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pk2FnameRep& from);
  void MergeFrom(const Pk2FnameRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pk2FnameRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Pk2FnameRep";
  }
  protected:
  explicit Pk2FnameRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFnameFieldNumber = 10,
    kReqFieldNumber = 20,
    kFnbFieldNumber = 30,
  };
  // optional string fname = 10;
  bool has_fname() const;
  private:
  bool _internal_has_fname() const;
  public:
  void clear_fname();
  const std::string& fname() const;
  void set_fname(const std::string& value);
  void set_fname(std::string&& value);
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  std::string* mutable_fname();
  std::string* release_fname();
  void set_allocated_fname(std::string* fname);
  private:
  const std::string& _internal_fname() const;
  void _internal_set_fname(const std::string& value);
  std::string* _internal_mutable_fname();
  public:

  // optional .fantasybit.Pk2FnameReq req = 20;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::fantasybit::Pk2FnameReq& req() const;
  ::fantasybit::Pk2FnameReq* release_req();
  ::fantasybit::Pk2FnameReq* mutable_req();
  void set_allocated_req(::fantasybit::Pk2FnameReq* req);
  private:
  const ::fantasybit::Pk2FnameReq& _internal_req() const;
  ::fantasybit::Pk2FnameReq* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::fantasybit::Pk2FnameReq* req);
  ::fantasybit::Pk2FnameReq* unsafe_arena_release_req();

  // optional .fantasybit.FantasyNameBal fnb = 30;
  bool has_fnb() const;
  private:
  bool _internal_has_fnb() const;
  public:
  void clear_fnb();
  const ::fantasybit::FantasyNameBal& fnb() const;
  ::fantasybit::FantasyNameBal* release_fnb();
  ::fantasybit::FantasyNameBal* mutable_fnb();
  void set_allocated_fnb(::fantasybit::FantasyNameBal* fnb);
  private:
  const ::fantasybit::FantasyNameBal& _internal_fnb() const;
  ::fantasybit::FantasyNameBal* _internal_mutable_fnb();
  public:
  void unsafe_arena_set_allocated_fnb(
      ::fantasybit::FantasyNameBal* fnb);
  ::fantasybit::FantasyNameBal* unsafe_arena_release_fnb();

  static const int kRepFieldNumber = 300;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::Pk2FnameRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.Pk2FnameRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fname_;
  ::fantasybit::Pk2FnameReq* req_;
  ::fantasybit::FantasyNameBal* fnb_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class SubscribeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.SubscribeReq) */ {
 public:
  inline SubscribeReq() : SubscribeReq(nullptr) {};
  virtual ~SubscribeReq();

  SubscribeReq(const SubscribeReq& from);
  SubscribeReq(SubscribeReq&& from) noexcept
    : SubscribeReq() {
    *this = ::std::move(from);
  }

  inline SubscribeReq& operator=(const SubscribeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeReq& operator=(SubscribeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeReq* internal_default_instance() {
    return reinterpret_cast<const SubscribeReq*>(
               &_SubscribeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SubscribeReq& a, SubscribeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeReq* New() const final {
    return CreateMaybeMessage<SubscribeReq>(nullptr);
  }

  SubscribeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeReq& from);
  void MergeFrom(const SubscribeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.SubscribeReq";
  }
  protected:
  explicit SubscribeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kFchashFieldNumber = 30,
  };
  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 fchash = 30;
  bool has_fchash() const;
  private:
  bool _internal_has_fchash() const;
  public:
  void clear_fchash();
  ::PROTOBUF_NAMESPACE_ID::uint64 fchash() const;
  void set_fchash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fchash() const;
  void _internal_set_fchash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  static const int kReqFieldNumber = 350;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::SubscribeReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.SubscribeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fchash_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class NameStatusReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.NameStatusReq) */ {
 public:
  inline NameStatusReq() : NameStatusReq(nullptr) {};
  virtual ~NameStatusReq();

  NameStatusReq(const NameStatusReq& from);
  NameStatusReq(NameStatusReq&& from) noexcept
    : NameStatusReq() {
    *this = ::std::move(from);
  }

  inline NameStatusReq& operator=(const NameStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameStatusReq& operator=(NameStatusReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameStatusReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameStatusReq* internal_default_instance() {
    return reinterpret_cast<const NameStatusReq*>(
               &_NameStatusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(NameStatusReq& a, NameStatusReq& b) {
    a.Swap(&b);
  }
  inline void Swap(NameStatusReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameStatusReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameStatusReq* New() const final {
    return CreateMaybeMessage<NameStatusReq>(nullptr);
  }

  NameStatusReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameStatusReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameStatusReq& from);
  void MergeFrom(const NameStatusReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameStatusReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.NameStatusReq";
  }
  protected:
  explicit NameStatusReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kPkFieldNumber = 20,
  };
  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string pk = 20;
  bool has_pk() const;
  private:
  bool _internal_has_pk() const;
  public:
  void clear_pk();
  const std::string& pk() const;
  void set_pk(const std::string& value);
  void set_pk(std::string&& value);
  void set_pk(const char* value);
  void set_pk(const char* value, size_t size);
  std::string* mutable_pk();
  std::string* release_pk();
  void set_allocated_pk(std::string* pk);
  private:
  const std::string& _internal_pk() const;
  void _internal_set_pk(const std::string& value);
  std::string* _internal_mutable_pk();
  public:

  static const int kReqFieldNumber = 400;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::NameStatusReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.NameStatusReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pk_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class NameStatusRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.NameStatusRep) */ {
 public:
  inline NameStatusRep() : NameStatusRep(nullptr) {};
  virtual ~NameStatusRep();

  NameStatusRep(const NameStatusRep& from);
  NameStatusRep(NameStatusRep&& from) noexcept
    : NameStatusRep() {
    *this = ::std::move(from);
  }

  inline NameStatusRep& operator=(const NameStatusRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameStatusRep& operator=(NameStatusRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameStatusRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameStatusRep* internal_default_instance() {
    return reinterpret_cast<const NameStatusRep*>(
               &_NameStatusRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(NameStatusRep& a, NameStatusRep& b) {
    a.Swap(&b);
  }
  inline void Swap(NameStatusRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameStatusRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameStatusRep* New() const final {
    return CreateMaybeMessage<NameStatusRep>(nullptr);
  }

  NameStatusRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameStatusRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameStatusRep& from);
  void MergeFrom(const NameStatusRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameStatusRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.NameStatusRep";
  }
  protected:
  explicit NameStatusRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 20,
    kStatusFieldNumber = 10,
  };
  // optional .fantasybit.NameStatusReq req = 20;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::fantasybit::NameStatusReq& req() const;
  ::fantasybit::NameStatusReq* release_req();
  ::fantasybit::NameStatusReq* mutable_req();
  void set_allocated_req(::fantasybit::NameStatusReq* req);
  private:
  const ::fantasybit::NameStatusReq& _internal_req() const;
  ::fantasybit::NameStatusReq* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::fantasybit::NameStatusReq* req);
  ::fantasybit::NameStatusReq* unsafe_arena_release_req();

  // optional .fantasybit.MyNameStatus status = 10;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::fantasybit::MyNameStatus status() const;
  void set_status(::fantasybit::MyNameStatus value);
  private:
  ::fantasybit::MyNameStatus _internal_status() const;
  void _internal_set_status(::fantasybit::MyNameStatus value);
  public:

  static const int kRepFieldNumber = 400;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::NameStatusRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.NameStatusRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::NameStatusReq* req_;
  int status_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GetAllNamesRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetAllNamesRep) */ {
 public:
  inline GetAllNamesRep() : GetAllNamesRep(nullptr) {};
  virtual ~GetAllNamesRep();

  GetAllNamesRep(const GetAllNamesRep& from);
  GetAllNamesRep(GetAllNamesRep&& from) noexcept
    : GetAllNamesRep() {
    *this = ::std::move(from);
  }

  inline GetAllNamesRep& operator=(const GetAllNamesRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllNamesRep& operator=(GetAllNamesRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllNamesRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllNamesRep* internal_default_instance() {
    return reinterpret_cast<const GetAllNamesRep*>(
               &_GetAllNamesRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetAllNamesRep& a, GetAllNamesRep& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllNamesRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllNamesRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllNamesRep* New() const final {
    return CreateMaybeMessage<GetAllNamesRep>(nullptr);
  }

  GetAllNamesRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllNamesRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllNamesRep& from);
  void MergeFrom(const GetAllNamesRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllNamesRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GetAllNamesRep";
  }
  protected:
  explicit GetAllNamesRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 10,
    kFnbFieldNumber = 20,
  };
  // repeated string names = 10;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // repeated .fantasybit.FantasyNameBal fnb = 20;
  int fnb_size() const;
  private:
  int _internal_fnb_size() const;
  public:
  void clear_fnb();
  ::fantasybit::FantasyNameBal* mutable_fnb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyNameBal >*
      mutable_fnb();
  private:
  const ::fantasybit::FantasyNameBal& _internal_fnb(int index) const;
  ::fantasybit::FantasyNameBal* _internal_add_fnb();
  public:
  const ::fantasybit::FantasyNameBal& fnb(int index) const;
  ::fantasybit::FantasyNameBal* add_fnb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyNameBal >&
      fnb() const;

  static const int kRepFieldNumber = 500;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetAllNamesRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetAllNamesRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyNameBal > fnb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class TeamRoster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.TeamRoster) */ {
 public:
  inline TeamRoster() : TeamRoster(nullptr) {};
  virtual ~TeamRoster();

  TeamRoster(const TeamRoster& from);
  TeamRoster(TeamRoster&& from) noexcept
    : TeamRoster() {
    *this = ::std::move(from);
  }

  inline TeamRoster& operator=(const TeamRoster& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamRoster& operator=(TeamRoster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamRoster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamRoster* internal_default_instance() {
    return reinterpret_cast<const TeamRoster*>(
               &_TeamRoster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TeamRoster& a, TeamRoster& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamRoster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamRoster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamRoster* New() const final {
    return CreateMaybeMessage<TeamRoster>(nullptr);
  }

  TeamRoster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamRoster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamRoster& from);
  void MergeFrom(const TeamRoster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamRoster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.TeamRoster";
  }
  protected:
  explicit TeamRoster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 20,
    kTeamidFieldNumber = 10,
  };
  // repeated .fantasybit.PlayerData players = 20;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::fantasybit::PlayerData* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerData >*
      mutable_players();
  private:
  const ::fantasybit::PlayerData& _internal_players(int index) const;
  ::fantasybit::PlayerData* _internal_add_players();
  public:
  const ::fantasybit::PlayerData& players(int index) const;
  ::fantasybit::PlayerData* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerData >&
      players() const;

  // optional string teamid = 10;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  const std::string& teamid() const;
  void set_teamid(const std::string& value);
  void set_teamid(std::string&& value);
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  std::string* mutable_teamid();
  std::string* release_teamid();
  void set_allocated_teamid(std::string* teamid);
  private:
  const std::string& _internal_teamid() const;
  void _internal_set_teamid(const std::string& value);
  std::string* _internal_mutable_teamid();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.TeamRoster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerData > players_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamid_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GameDataRoster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameDataRoster) */ {
 public:
  inline GameDataRoster() : GameDataRoster(nullptr) {};
  virtual ~GameDataRoster();

  GameDataRoster(const GameDataRoster& from);
  GameDataRoster(GameDataRoster&& from) noexcept
    : GameDataRoster() {
    *this = ::std::move(from);
  }

  inline GameDataRoster& operator=(const GameDataRoster& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameDataRoster& operator=(GameDataRoster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameDataRoster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameDataRoster* internal_default_instance() {
    return reinterpret_cast<const GameDataRoster*>(
               &_GameDataRoster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GameDataRoster& a, GameDataRoster& b) {
    a.Swap(&b);
  }
  inline void Swap(GameDataRoster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameDataRoster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameDataRoster* New() const final {
    return CreateMaybeMessage<GameDataRoster>(nullptr);
  }

  GameDataRoster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameDataRoster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameDataRoster& from);
  void MergeFrom(const GameDataRoster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameDataRoster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GameDataRoster";
  }
  protected:
  explicit GameDataRoster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameDataFieldNumber = 10,
    kHomerosterFieldNumber = 20,
    kAwayrosterFieldNumber = 30,
  };
  // optional .fantasybit.GameData game_data = 10;
  bool has_game_data() const;
  private:
  bool _internal_has_game_data() const;
  public:
  void clear_game_data();
  const ::fantasybit::GameData& game_data() const;
  ::fantasybit::GameData* release_game_data();
  ::fantasybit::GameData* mutable_game_data();
  void set_allocated_game_data(::fantasybit::GameData* game_data);
  private:
  const ::fantasybit::GameData& _internal_game_data() const;
  ::fantasybit::GameData* _internal_mutable_game_data();
  public:
  void unsafe_arena_set_allocated_game_data(
      ::fantasybit::GameData* game_data);
  ::fantasybit::GameData* unsafe_arena_release_game_data();

  // optional .fantasybit.TeamRoster homeroster = 20;
  bool has_homeroster() const;
  private:
  bool _internal_has_homeroster() const;
  public:
  void clear_homeroster();
  const ::fantasybit::TeamRoster& homeroster() const;
  ::fantasybit::TeamRoster* release_homeroster();
  ::fantasybit::TeamRoster* mutable_homeroster();
  void set_allocated_homeroster(::fantasybit::TeamRoster* homeroster);
  private:
  const ::fantasybit::TeamRoster& _internal_homeroster() const;
  ::fantasybit::TeamRoster* _internal_mutable_homeroster();
  public:
  void unsafe_arena_set_allocated_homeroster(
      ::fantasybit::TeamRoster* homeroster);
  ::fantasybit::TeamRoster* unsafe_arena_release_homeroster();

  // optional .fantasybit.TeamRoster awayroster = 30;
  bool has_awayroster() const;
  private:
  bool _internal_has_awayroster() const;
  public:
  void clear_awayroster();
  const ::fantasybit::TeamRoster& awayroster() const;
  ::fantasybit::TeamRoster* release_awayroster();
  ::fantasybit::TeamRoster* mutable_awayroster();
  void set_allocated_awayroster(::fantasybit::TeamRoster* awayroster);
  private:
  const ::fantasybit::TeamRoster& _internal_awayroster() const;
  ::fantasybit::TeamRoster* _internal_mutable_awayroster();
  public:
  void unsafe_arena_set_allocated_awayroster(
      ::fantasybit::TeamRoster* awayroster);
  ::fantasybit::TeamRoster* unsafe_arena_release_awayroster();

  // @@protoc_insertion_point(class_scope:fantasybit.GameDataRoster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::GameData* game_data_;
  ::fantasybit::TeamRoster* homeroster_;
  ::fantasybit::TeamRoster* awayroster_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GetCurrRostersRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetCurrRostersRep) */ {
 public:
  inline GetCurrRostersRep() : GetCurrRostersRep(nullptr) {};
  virtual ~GetCurrRostersRep();

  GetCurrRostersRep(const GetCurrRostersRep& from);
  GetCurrRostersRep(GetCurrRostersRep&& from) noexcept
    : GetCurrRostersRep() {
    *this = ::std::move(from);
  }

  inline GetCurrRostersRep& operator=(const GetCurrRostersRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrRostersRep& operator=(GetCurrRostersRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCurrRostersRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCurrRostersRep* internal_default_instance() {
    return reinterpret_cast<const GetCurrRostersRep*>(
               &_GetCurrRostersRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetCurrRostersRep& a, GetCurrRostersRep& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrRostersRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrRostersRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCurrRostersRep* New() const final {
    return CreateMaybeMessage<GetCurrRostersRep>(nullptr);
  }

  GetCurrRostersRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCurrRostersRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCurrRostersRep& from);
  void MergeFrom(const GetCurrRostersRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrRostersRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GetCurrRostersRep";
  }
  protected:
  explicit GetCurrRostersRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamerostersFieldNumber = 20,
    kWeekFieldNumber = 10,
  };
  // repeated .fantasybit.GameDataRoster gamerosters = 20;
  int gamerosters_size() const;
  private:
  int _internal_gamerosters_size() const;
  public:
  void clear_gamerosters();
  ::fantasybit::GameDataRoster* mutable_gamerosters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::GameDataRoster >*
      mutable_gamerosters();
  private:
  const ::fantasybit::GameDataRoster& _internal_gamerosters(int index) const;
  ::fantasybit::GameDataRoster* _internal_add_gamerosters();
  public:
  const ::fantasybit::GameDataRoster& gamerosters(int index) const;
  ::fantasybit::GameDataRoster* add_gamerosters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::GameDataRoster >&
      gamerosters() const;

  // optional int32 week = 10;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::int32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  static const int kRepFieldNumber = 920;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetCurrRostersRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetCurrRostersRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::GameDataRoster > gamerosters_;
  ::PROTOBUF_NAMESPACE_ID::int32 week_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class ROWMarket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.ROWMarket) */ {
 public:
  inline ROWMarket() : ROWMarket(nullptr) {};
  virtual ~ROWMarket();

  ROWMarket(const ROWMarket& from);
  ROWMarket(ROWMarket&& from) noexcept
    : ROWMarket() {
    *this = ::std::move(from);
  }

  inline ROWMarket& operator=(const ROWMarket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROWMarket& operator=(ROWMarket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROWMarket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROWMarket* internal_default_instance() {
    return reinterpret_cast<const ROWMarket*>(
               &_ROWMarket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ROWMarket& a, ROWMarket& b) {
    a.Swap(&b);
  }
  inline void Swap(ROWMarket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROWMarket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROWMarket* New() const final {
    return CreateMaybeMessage<ROWMarket>(nullptr);
  }

  ROWMarket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROWMarket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROWMarket& from);
  void MergeFrom(const ROWMarket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROWMarket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.ROWMarket";
  }
  protected:
  explicit ROWMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 10,
    kQuoteFieldNumber = 30,
    kPlayerdataFieldNumber = 40,
    kOhlcFieldNumber = 50,
  };
  // optional string pid = 10;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  void set_pid(const std::string& value);
  void set_pid(std::string&& value);
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  std::string* mutable_pid();
  std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // optional .fantasybit.MarketQuote quote = 30;
  bool has_quote() const;
  private:
  bool _internal_has_quote() const;
  public:
  void clear_quote();
  const ::fantasybit::MarketQuote& quote() const;
  ::fantasybit::MarketQuote* release_quote();
  ::fantasybit::MarketQuote* mutable_quote();
  void set_allocated_quote(::fantasybit::MarketQuote* quote);
  private:
  const ::fantasybit::MarketQuote& _internal_quote() const;
  ::fantasybit::MarketQuote* _internal_mutable_quote();
  public:
  void unsafe_arena_set_allocated_quote(
      ::fantasybit::MarketQuote* quote);
  ::fantasybit::MarketQuote* unsafe_arena_release_quote();

  // optional .fantasybit.PlayerData playerdata = 40;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::fantasybit::PlayerData& playerdata() const;
  ::fantasybit::PlayerData* release_playerdata();
  ::fantasybit::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::fantasybit::PlayerData* playerdata);
  private:
  const ::fantasybit::PlayerData& _internal_playerdata() const;
  ::fantasybit::PlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::fantasybit::PlayerData* playerdata);
  ::fantasybit::PlayerData* unsafe_arena_release_playerdata();

  // optional .fantasybit.ContractOHLC ohlc = 50;
  bool has_ohlc() const;
  private:
  bool _internal_has_ohlc() const;
  public:
  void clear_ohlc();
  const ::fantasybit::ContractOHLC& ohlc() const;
  ::fantasybit::ContractOHLC* release_ohlc();
  ::fantasybit::ContractOHLC* mutable_ohlc();
  void set_allocated_ohlc(::fantasybit::ContractOHLC* ohlc);
  private:
  const ::fantasybit::ContractOHLC& _internal_ohlc() const;
  ::fantasybit::ContractOHLC* _internal_mutable_ohlc();
  public:
  void unsafe_arena_set_allocated_ohlc(
      ::fantasybit::ContractOHLC* ohlc);
  ::fantasybit::ContractOHLC* unsafe_arena_release_ohlc();

  // @@protoc_insertion_point(class_scope:fantasybit.ROWMarket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
  ::fantasybit::MarketQuote* quote_;
  ::fantasybit::PlayerData* playerdata_;
  ::fantasybit::ContractOHLC* ohlc_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GetROWMarketRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetROWMarketRep) */ {
 public:
  inline GetROWMarketRep() : GetROWMarketRep(nullptr) {};
  virtual ~GetROWMarketRep();

  GetROWMarketRep(const GetROWMarketRep& from);
  GetROWMarketRep(GetROWMarketRep&& from) noexcept
    : GetROWMarketRep() {
    *this = ::std::move(from);
  }

  inline GetROWMarketRep& operator=(const GetROWMarketRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetROWMarketRep& operator=(GetROWMarketRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetROWMarketRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetROWMarketRep* internal_default_instance() {
    return reinterpret_cast<const GetROWMarketRep*>(
               &_GetROWMarketRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetROWMarketRep& a, GetROWMarketRep& b) {
    a.Swap(&b);
  }
  inline void Swap(GetROWMarketRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetROWMarketRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetROWMarketRep* New() const final {
    return CreateMaybeMessage<GetROWMarketRep>(nullptr);
  }

  GetROWMarketRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetROWMarketRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetROWMarketRep& from);
  void MergeFrom(const GetROWMarketRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetROWMarketRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GetROWMarketRep";
  }
  protected:
  explicit GetROWMarketRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowmarketFieldNumber = 10,
  };
  // repeated .fantasybit.ROWMarket rowmarket = 10;
  int rowmarket_size() const;
  private:
  int _internal_rowmarket_size() const;
  public:
  void clear_rowmarket();
  ::fantasybit::ROWMarket* mutable_rowmarket(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::ROWMarket >*
      mutable_rowmarket();
  private:
  const ::fantasybit::ROWMarket& _internal_rowmarket(int index) const;
  ::fantasybit::ROWMarket* _internal_add_rowmarket();
  public:
  const ::fantasybit::ROWMarket& rowmarket(int index) const;
  ::fantasybit::ROWMarket* add_rowmarket();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::ROWMarket >&
      rowmarket() const;

  static const int kRepFieldNumber = 600;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetROWMarketRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetROWMarketRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::ROWMarket > rowmarket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GetDepthReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetDepthReq) */ {
 public:
  inline GetDepthReq() : GetDepthReq(nullptr) {};
  virtual ~GetDepthReq();

  GetDepthReq(const GetDepthReq& from);
  GetDepthReq(GetDepthReq&& from) noexcept
    : GetDepthReq() {
    *this = ::std::move(from);
  }

  inline GetDepthReq& operator=(const GetDepthReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDepthReq& operator=(GetDepthReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDepthReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDepthReq* internal_default_instance() {
    return reinterpret_cast<const GetDepthReq*>(
               &_GetDepthReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetDepthReq& a, GetDepthReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDepthReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDepthReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDepthReq* New() const final {
    return CreateMaybeMessage<GetDepthReq>(nullptr);
  }

  GetDepthReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDepthReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDepthReq& from);
  void MergeFrom(const GetDepthReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDepthReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GetDepthReq";
  }
  protected:
  explicit GetDepthReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 10,
  };
  // optional string pid = 10;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  void set_pid(const std::string& value);
  void set_pid(std::string&& value);
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  std::string* mutable_pid();
  std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  static const int kReqFieldNumber = 700;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetDepthReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.GetDepthReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GetDepthRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetDepthRep) */ {
 public:
  inline GetDepthRep() : GetDepthRep(nullptr) {};
  virtual ~GetDepthRep();

  GetDepthRep(const GetDepthRep& from);
  GetDepthRep(GetDepthRep&& from) noexcept
    : GetDepthRep() {
    *this = ::std::move(from);
  }

  inline GetDepthRep& operator=(const GetDepthRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDepthRep& operator=(GetDepthRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDepthRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDepthRep* internal_default_instance() {
    return reinterpret_cast<const GetDepthRep*>(
               &_GetDepthRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetDepthRep& a, GetDepthRep& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDepthRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDepthRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDepthRep* New() const final {
    return CreateMaybeMessage<GetDepthRep>(nullptr);
  }

  GetDepthRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDepthRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDepthRep& from);
  void MergeFrom(const GetDepthRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDepthRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GetDepthRep";
  }
  protected:
  explicit GetDepthRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepthitemsFieldNumber = 20,
    kPidFieldNumber = 10,
    kRowmarketFieldNumber = 30,
  };
  // repeated .fantasybit.DepthItem depthitems = 20;
  int depthitems_size() const;
  private:
  int _internal_depthitems_size() const;
  public:
  void clear_depthitems();
  ::fantasybit::DepthItem* mutable_depthitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::DepthItem >*
      mutable_depthitems();
  private:
  const ::fantasybit::DepthItem& _internal_depthitems(int index) const;
  ::fantasybit::DepthItem* _internal_add_depthitems();
  public:
  const ::fantasybit::DepthItem& depthitems(int index) const;
  ::fantasybit::DepthItem* add_depthitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::DepthItem >&
      depthitems() const;

  // optional string pid = 10;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  void set_pid(const std::string& value);
  void set_pid(std::string&& value);
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  std::string* mutable_pid();
  std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // optional .fantasybit.ROWMarket rowmarket = 30;
  bool has_rowmarket() const;
  private:
  bool _internal_has_rowmarket() const;
  public:
  void clear_rowmarket();
  const ::fantasybit::ROWMarket& rowmarket() const;
  ::fantasybit::ROWMarket* release_rowmarket();
  ::fantasybit::ROWMarket* mutable_rowmarket();
  void set_allocated_rowmarket(::fantasybit::ROWMarket* rowmarket);
  private:
  const ::fantasybit::ROWMarket& _internal_rowmarket() const;
  ::fantasybit::ROWMarket* _internal_mutable_rowmarket();
  public:
  void unsafe_arena_set_allocated_rowmarket(
      ::fantasybit::ROWMarket* rowmarket);
  ::fantasybit::ROWMarket* unsafe_arena_release_rowmarket();

  static const int kRepFieldNumber = 700;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetDepthRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetDepthRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::DepthItem > depthitems_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
  ::fantasybit::ROWMarket* rowmarket_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class AllOdersSymbol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.AllOdersSymbol) */ {
 public:
  inline AllOdersSymbol() : AllOdersSymbol(nullptr) {};
  virtual ~AllOdersSymbol();

  AllOdersSymbol(const AllOdersSymbol& from);
  AllOdersSymbol(AllOdersSymbol&& from) noexcept
    : AllOdersSymbol() {
    *this = ::std::move(from);
  }

  inline AllOdersSymbol& operator=(const AllOdersSymbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllOdersSymbol& operator=(AllOdersSymbol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllOdersSymbol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllOdersSymbol* internal_default_instance() {
    return reinterpret_cast<const AllOdersSymbol*>(
               &_AllOdersSymbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(AllOdersSymbol& a, AllOdersSymbol& b) {
    a.Swap(&b);
  }
  inline void Swap(AllOdersSymbol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllOdersSymbol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllOdersSymbol* New() const final {
    return CreateMaybeMessage<AllOdersSymbol>(nullptr);
  }

  AllOdersSymbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllOdersSymbol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllOdersSymbol& from);
  void MergeFrom(const AllOdersSymbol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllOdersSymbol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.AllOdersSymbol";
  }
  protected:
  explicit AllOdersSymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 20,
    kSymbolFieldNumber = 10,
    kNetqtyFieldNumber = 30,
    kNetpriceFieldNumber = 40,
    kAvgFieldNumber = 50,
    kPnlFieldNumber = 60,
  };
  // repeated .fantasybit.Order orders = 20;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::fantasybit::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Order >*
      mutable_orders();
  private:
  const ::fantasybit::Order& _internal_orders(int index) const;
  ::fantasybit::Order* _internal_add_orders();
  public:
  const ::fantasybit::Order& orders(int index) const;
  ::fantasybit::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Order >&
      orders() const;

  // optional string symbol = 10;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional int32 netqty = 30;
  bool has_netqty() const;
  private:
  bool _internal_has_netqty() const;
  public:
  void clear_netqty();
  ::PROTOBUF_NAMESPACE_ID::int32 netqty() const;
  void set_netqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_netqty() const;
  void _internal_set_netqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 netprice = 40;
  bool has_netprice() const;
  private:
  bool _internal_has_netprice() const;
  public:
  void clear_netprice();
  ::PROTOBUF_NAMESPACE_ID::int32 netprice() const;
  void set_netprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_netprice() const;
  void _internal_set_netprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double avg = 50;
  bool has_avg() const;
  private:
  bool _internal_has_avg() const;
  public:
  void clear_avg();
  double avg() const;
  void set_avg(double value);
  private:
  double _internal_avg() const;
  void _internal_set_avg(double value);
  public:

  // optional double pnl = 60;
  bool has_pnl() const;
  private:
  bool _internal_has_pnl() const;
  public:
  void clear_pnl();
  double pnl() const;
  void set_pnl(double value);
  private:
  double _internal_pnl() const;
  void _internal_set_pnl(double value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.AllOdersSymbol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Order > orders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 netqty_;
  ::PROTOBUF_NAMESPACE_ID::int32 netprice_;
  double avg_;
  double pnl_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class AllOdersFname PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.AllOdersFname) */ {
 public:
  inline AllOdersFname() : AllOdersFname(nullptr) {};
  virtual ~AllOdersFname();

  AllOdersFname(const AllOdersFname& from);
  AllOdersFname(AllOdersFname&& from) noexcept
    : AllOdersFname() {
    *this = ::std::move(from);
  }

  inline AllOdersFname& operator=(const AllOdersFname& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllOdersFname& operator=(AllOdersFname&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllOdersFname& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllOdersFname* internal_default_instance() {
    return reinterpret_cast<const AllOdersFname*>(
               &_AllOdersFname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(AllOdersFname& a, AllOdersFname& b) {
    a.Swap(&b);
  }
  inline void Swap(AllOdersFname* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllOdersFname* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllOdersFname* New() const final {
    return CreateMaybeMessage<AllOdersFname>(nullptr);
  }

  AllOdersFname* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllOdersFname>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllOdersFname& from);
  void MergeFrom(const AllOdersFname& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllOdersFname* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.AllOdersFname";
  }
  protected:
  explicit AllOdersFname(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidordersFieldNumber = 20,
    kFnameFieldNumber = 10,
  };
  // repeated .fantasybit.AllOdersSymbol pidorders = 20;
  int pidorders_size() const;
  private:
  int _internal_pidorders_size() const;
  public:
  void clear_pidorders();
  ::fantasybit::AllOdersSymbol* mutable_pidorders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::AllOdersSymbol >*
      mutable_pidorders();
  private:
  const ::fantasybit::AllOdersSymbol& _internal_pidorders(int index) const;
  ::fantasybit::AllOdersSymbol* _internal_add_pidorders();
  public:
  const ::fantasybit::AllOdersSymbol& pidorders(int index) const;
  ::fantasybit::AllOdersSymbol* add_pidorders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::AllOdersSymbol >&
      pidorders() const;

  // optional string fname = 10;
  bool has_fname() const;
  private:
  bool _internal_has_fname() const;
  public:
  void clear_fname();
  const std::string& fname() const;
  void set_fname(const std::string& value);
  void set_fname(std::string&& value);
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  std::string* mutable_fname();
  std::string* release_fname();
  void set_allocated_fname(std::string* fname);
  private:
  const std::string& _internal_fname() const;
  void _internal_set_fname(const std::string& value);
  std::string* _internal_mutable_fname();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.AllOdersFname)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::AllOdersSymbol > pidorders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fname_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GetOrdersRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetOrdersRep) */ {
 public:
  inline GetOrdersRep() : GetOrdersRep(nullptr) {};
  virtual ~GetOrdersRep();

  GetOrdersRep(const GetOrdersRep& from);
  GetOrdersRep(GetOrdersRep&& from) noexcept
    : GetOrdersRep() {
    *this = ::std::move(from);
  }

  inline GetOrdersRep& operator=(const GetOrdersRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrdersRep& operator=(GetOrdersRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOrdersRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOrdersRep* internal_default_instance() {
    return reinterpret_cast<const GetOrdersRep*>(
               &_GetOrdersRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetOrdersRep& a, GetOrdersRep& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrdersRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrdersRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOrdersRep* New() const final {
    return CreateMaybeMessage<GetOrdersRep>(nullptr);
  }

  GetOrdersRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOrdersRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOrdersRep& from);
  void MergeFrom(const GetOrdersRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrdersRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GetOrdersRep";
  }
  protected:
  explicit GetOrdersRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 10,
    kOordersFieldNumber = 20,
  };
  // optional .fantasybit.GetOrdersReq req = 10;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::fantasybit::GetOrdersReq& req() const;
  ::fantasybit::GetOrdersReq* release_req();
  ::fantasybit::GetOrdersReq* mutable_req();
  void set_allocated_req(::fantasybit::GetOrdersReq* req);
  private:
  const ::fantasybit::GetOrdersReq& _internal_req() const;
  ::fantasybit::GetOrdersReq* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::fantasybit::GetOrdersReq* req);
  ::fantasybit::GetOrdersReq* unsafe_arena_release_req();

  // optional .fantasybit.AllOdersFname oorders = 20;
  bool has_oorders() const;
  private:
  bool _internal_has_oorders() const;
  public:
  void clear_oorders();
  const ::fantasybit::AllOdersFname& oorders() const;
  ::fantasybit::AllOdersFname* release_oorders();
  ::fantasybit::AllOdersFname* mutable_oorders();
  void set_allocated_oorders(::fantasybit::AllOdersFname* oorders);
  private:
  const ::fantasybit::AllOdersFname& _internal_oorders() const;
  ::fantasybit::AllOdersFname* _internal_mutable_oorders();
  public:
  void unsafe_arena_set_allocated_oorders(
      ::fantasybit::AllOdersFname* oorders);
  ::fantasybit::AllOdersFname* unsafe_arena_release_oorders();

  static const int kRepFieldNumber = 800;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetOrdersRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetOrdersRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::GetOrdersReq* req_;
  ::fantasybit::AllOdersFname* oorders_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GetOrdersReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetOrdersReq) */ {
 public:
  inline GetOrdersReq() : GetOrdersReq(nullptr) {};
  virtual ~GetOrdersReq();

  GetOrdersReq(const GetOrdersReq& from);
  GetOrdersReq(GetOrdersReq&& from) noexcept
    : GetOrdersReq() {
    *this = ::std::move(from);
  }

  inline GetOrdersReq& operator=(const GetOrdersReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrdersReq& operator=(GetOrdersReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOrdersReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOrdersReq* internal_default_instance() {
    return reinterpret_cast<const GetOrdersReq*>(
               &_GetOrdersReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetOrdersReq& a, GetOrdersReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrdersReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrdersReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOrdersReq* New() const final {
    return CreateMaybeMessage<GetOrdersReq>(nullptr);
  }

  GetOrdersReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOrdersReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOrdersReq& from);
  void MergeFrom(const GetOrdersReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrdersReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GetOrdersReq";
  }
  protected:
  explicit GetOrdersReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 10,
    kFnameFieldNumber = 20,
    kFchashFieldNumber = 30,
  };
  // optional string symbol = 10;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional string fname = 20;
  bool has_fname() const;
  private:
  bool _internal_has_fname() const;
  public:
  void clear_fname();
  const std::string& fname() const;
  void set_fname(const std::string& value);
  void set_fname(std::string&& value);
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  std::string* mutable_fname();
  std::string* release_fname();
  void set_allocated_fname(std::string* fname);
  private:
  const std::string& _internal_fname() const;
  void _internal_set_fname(const std::string& value);
  std::string* _internal_mutable_fname();
  public:

  // optional uint64 fchash = 30;
  bool has_fchash() const;
  private:
  bool _internal_has_fchash() const;
  public:
  void clear_fchash();
  ::PROTOBUF_NAMESPACE_ID::uint64 fchash() const;
  void set_fchash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fchash() const;
  void _internal_set_fchash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  static const int kReqFieldNumber = 800;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetOrdersReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.GetOrdersReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fchash_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GetProjectionReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetProjectionReq) */ {
 public:
  inline GetProjectionReq() : GetProjectionReq(nullptr) {};
  virtual ~GetProjectionReq();

  GetProjectionReq(const GetProjectionReq& from);
  GetProjectionReq(GetProjectionReq&& from) noexcept
    : GetProjectionReq() {
    *this = ::std::move(from);
  }

  inline GetProjectionReq& operator=(const GetProjectionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProjectionReq& operator=(GetProjectionReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProjectionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProjectionReq* internal_default_instance() {
    return reinterpret_cast<const GetProjectionReq*>(
               &_GetProjectionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetProjectionReq& a, GetProjectionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProjectionReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProjectionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProjectionReq* New() const final {
    return CreateMaybeMessage<GetProjectionReq>(nullptr);
  }

  GetProjectionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProjectionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProjectionReq& from);
  void MergeFrom(const GetProjectionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProjectionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GetProjectionReq";
  }
  protected:
  explicit GetProjectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFnameFieldNumber = 20,
    kGetavgFieldNumber = 30,
  };
  // optional string fname = 20;
  bool has_fname() const;
  private:
  bool _internal_has_fname() const;
  public:
  void clear_fname();
  const std::string& fname() const;
  void set_fname(const std::string& value);
  void set_fname(std::string&& value);
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  std::string* mutable_fname();
  std::string* release_fname();
  void set_allocated_fname(std::string* fname);
  private:
  const std::string& _internal_fname() const;
  void _internal_set_fname(const std::string& value);
  std::string* _internal_mutable_fname();
  public:

  // optional bool getavg = 30;
  bool has_getavg() const;
  private:
  bool _internal_has_getavg() const;
  public:
  void clear_getavg();
  bool getavg() const;
  void set_getavg(bool value);
  private:
  bool _internal_getavg() const;
  void _internal_set_getavg(bool value);
  public:

  static const int kReqFieldNumber = 900;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetProjectionReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.GetProjectionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fname_;
  bool getavg_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class PlayerProj PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerProj) */ {
 public:
  inline PlayerProj() : PlayerProj(nullptr) {};
  virtual ~PlayerProj();

  PlayerProj(const PlayerProj& from);
  PlayerProj(PlayerProj&& from) noexcept
    : PlayerProj() {
    *this = ::std::move(from);
  }

  inline PlayerProj& operator=(const PlayerProj& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerProj& operator=(PlayerProj&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerProj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerProj* internal_default_instance() {
    return reinterpret_cast<const PlayerProj*>(
               &_PlayerProj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(PlayerProj& a, PlayerProj& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerProj* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerProj* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerProj* New() const final {
    return CreateMaybeMessage<PlayerProj>(nullptr);
  }

  PlayerProj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerProj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerProj& from);
  void MergeFrom(const PlayerProj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerProj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.PlayerProj";
  }
  protected:
  explicit PlayerProj(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 10,
    kProjFieldNumber = 20,
  };
  // optional string playerid = 10;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional int32 proj = 20;
  bool has_proj() const;
  private:
  bool _internal_has_proj() const;
  public:
  void clear_proj();
  ::PROTOBUF_NAMESPACE_ID::int32 proj() const;
  void set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proj() const;
  void _internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerProj)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 proj_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class ProjByName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjByName) */ {
 public:
  inline ProjByName() : ProjByName(nullptr) {};
  virtual ~ProjByName();

  ProjByName(const ProjByName& from);
  ProjByName(ProjByName&& from) noexcept
    : ProjByName() {
    *this = ::std::move(from);
  }

  inline ProjByName& operator=(const ProjByName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjByName& operator=(ProjByName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjByName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjByName* internal_default_instance() {
    return reinterpret_cast<const ProjByName*>(
               &_ProjByName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ProjByName& a, ProjByName& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjByName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjByName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjByName* New() const final {
    return CreateMaybeMessage<ProjByName>(nullptr);
  }

  ProjByName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjByName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjByName& from);
  void MergeFrom(const ProjByName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjByName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.ProjByName";
  }
  protected:
  explicit ProjByName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerprojFieldNumber = 20,
    kNameFieldNumber = 10,
    kCountFieldNumber = 40,
    kBlockFieldNumber = 50,
  };
  // repeated .fantasybit.PlayerProj playerproj = 20;
  int playerproj_size() const;
  private:
  int _internal_playerproj_size() const;
  public:
  void clear_playerproj();
  ::fantasybit::PlayerProj* mutable_playerproj(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerProj >*
      mutable_playerproj();
  private:
  const ::fantasybit::PlayerProj& _internal_playerproj(int index) const;
  ::fantasybit::PlayerProj* _internal_add_playerproj();
  public:
  const ::fantasybit::PlayerProj& playerproj(int index) const;
  ::fantasybit::PlayerProj* add_playerproj();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerProj >&
      playerproj() const;

  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 count = 40;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 block = 50;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::int32 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block() const;
  void _internal_set_block(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.ProjByName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerProj > playerproj_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class GetProjectionRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetProjectionRep) */ {
 public:
  inline GetProjectionRep() : GetProjectionRep(nullptr) {};
  virtual ~GetProjectionRep();

  GetProjectionRep(const GetProjectionRep& from);
  GetProjectionRep(GetProjectionRep&& from) noexcept
    : GetProjectionRep() {
    *this = ::std::move(from);
  }

  inline GetProjectionRep& operator=(const GetProjectionRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProjectionRep& operator=(GetProjectionRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProjectionRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProjectionRep* internal_default_instance() {
    return reinterpret_cast<const GetProjectionRep*>(
               &_GetProjectionRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetProjectionRep& a, GetProjectionRep& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProjectionRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProjectionRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProjectionRep* New() const final {
    return CreateMaybeMessage<GetProjectionRep>(nullptr);
  }

  GetProjectionRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProjectionRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProjectionRep& from);
  void MergeFrom(const GetProjectionRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProjectionRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GetProjectionRep";
  }
  protected:
  explicit GetProjectionRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjsFieldNumber = 20,
    kAvgFieldNumber = 30,
  };
  // optional .fantasybit.ProjByName projs = 20;
  bool has_projs() const;
  private:
  bool _internal_has_projs() const;
  public:
  void clear_projs();
  const ::fantasybit::ProjByName& projs() const;
  ::fantasybit::ProjByName* release_projs();
  ::fantasybit::ProjByName* mutable_projs();
  void set_allocated_projs(::fantasybit::ProjByName* projs);
  private:
  const ::fantasybit::ProjByName& _internal_projs() const;
  ::fantasybit::ProjByName* _internal_mutable_projs();
  public:
  void unsafe_arena_set_allocated_projs(
      ::fantasybit::ProjByName* projs);
  ::fantasybit::ProjByName* unsafe_arena_release_projs();

  // optional .fantasybit.ProjByName avg = 30;
  bool has_avg() const;
  private:
  bool _internal_has_avg() const;
  public:
  void clear_avg();
  const ::fantasybit::ProjByName& avg() const;
  ::fantasybit::ProjByName* release_avg();
  ::fantasybit::ProjByName* mutable_avg();
  void set_allocated_avg(::fantasybit::ProjByName* avg);
  private:
  const ::fantasybit::ProjByName& _internal_avg() const;
  ::fantasybit::ProjByName* _internal_mutable_avg();
  public:
  void unsafe_arena_set_allocated_avg(
      ::fantasybit::ProjByName* avg);
  ::fantasybit::ProjByName* unsafe_arena_release_avg();

  static const int kRepFieldNumber = 940;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::fantasybit::GetProjectionRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetProjectionRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::ProjByName* projs_;
  ::fantasybit::ProjByName* avg_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {};
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 10,
    kValueFieldNumber = 20,
  };
  // optional bytes key = 10;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional bytes value = 20;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_StateData_2eproto;
};
// -------------------------------------------------------------------

class Bootstrap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Bootstrap) */ {
 public:
  inline Bootstrap() : Bootstrap(nullptr) {};
  virtual ~Bootstrap();

  Bootstrap(const Bootstrap& from);
  Bootstrap(Bootstrap&& from) noexcept
    : Bootstrap() {
    *this = ::std::move(from);
  }

  inline Bootstrap& operator=(const Bootstrap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bootstrap& operator=(Bootstrap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bootstrap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bootstrap* internal_default_instance() {
    return reinterpret_cast<const Bootstrap*>(
               &_Bootstrap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(Bootstrap& a, Bootstrap& b) {
    a.Swap(&b);
  }
  inline void Swap(Bootstrap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bootstrap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bootstrap* New() const final {
    return CreateMaybeMessage<Bootstrap>(nullptr);
  }

  Bootstrap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bootstrap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bootstrap& from);
  void MergeFrom(const Bootstrap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bootstrap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Bootstrap";
  }
  protected:
  explicit Bootstrap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StateData_2eproto);
    return ::descriptor_table_StateData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kGamemetarootFieldNumber = 10,
    kPlayermetarootFieldNumber = 20,
    kFnamemetarootFieldNumber = 30,
    kPrevidFieldNumber = 40,
    kGameresultrootFieldNumber = 50,
    kPosmetarootFieldNumber = 60,
    kBlocknumFieldNumber = 2,
    kWeekFieldNumber = 3,
    kSeasonFieldNumber = 4,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional bytes gamemetaroot = 10;
  bool has_gamemetaroot() const;
  private:
  bool _internal_has_gamemetaroot() const;
  public:
  void clear_gamemetaroot();
  const std::string& gamemetaroot() const;
  void set_gamemetaroot(const std::string& value);
  void set_gamemetaroot(std::string&& value);
  void set_gamemetaroot(const char* value);
  void set_gamemetaroot(const void* value, size_t size);
  std::string* mutable_gamemetaroot();
  std::string* release_gamemetaroot();
  void set_allocated_gamemetaroot(std::string* gamemetaroot);
  private:
  const std::string& _internal_gamemetaroot() const;
  void _internal_set_gamemetaroot(const std::string& value);
  std::string* _internal_mutable_gamemetaroot();
  public:

  // optional bytes playermetaroot = 20;
  bool has_playermetaroot() const;
  private:
  bool _internal_has_playermetaroot() const;
  public:
  void clear_playermetaroot();
  const std::string& playermetaroot() const;
  void set_playermetaroot(const std::string& value);
  void set_playermetaroot(std::string&& value);
  void set_playermetaroot(const char* value);
  void set_playermetaroot(const void* value, size_t size);
  std::string* mutable_playermetaroot();
  std::string* release_playermetaroot();
  void set_allocated_playermetaroot(std::string* playermetaroot);
  private:
  const std::string& _internal_playermetaroot() const;
  void _internal_set_playermetaroot(const std::string& value);
  std::string* _internal_mutable_playermetaroot();
  public:

  // optional bytes fnamemetaroot = 30;
  bool has_fnamemetaroot() const;
  private:
  bool _internal_has_fnamemetaroot() const;
  public:
  void clear_fnamemetaroot();
  const std::string& fnamemetaroot() const;
  void set_fnamemetaroot(const std::string& value);
  void set_fnamemetaroot(std::string&& value);
  void set_fnamemetaroot(const char* value);
  void set_fnamemetaroot(const void* value, size_t size);
  std::string* mutable_fnamemetaroot();
  std::string* release_fnamemetaroot();
  void set_allocated_fnamemetaroot(std::string* fnamemetaroot);
  private:
  const std::string& _internal_fnamemetaroot() const;
  void _internal_set_fnamemetaroot(const std::string& value);
  std::string* _internal_mutable_fnamemetaroot();
  public:

  // optional bytes previd = 40;
  bool has_previd() const;
  private:
  bool _internal_has_previd() const;
  public:
  void clear_previd();
  const std::string& previd() const;
  void set_previd(const std::string& value);
  void set_previd(std::string&& value);
  void set_previd(const char* value);
  void set_previd(const void* value, size_t size);
  std::string* mutable_previd();
  std::string* release_previd();
  void set_allocated_previd(std::string* previd);
  private:
  const std::string& _internal_previd() const;
  void _internal_set_previd(const std::string& value);
  std::string* _internal_mutable_previd();
  public:

  // optional bytes gameresultroot = 50;
  bool has_gameresultroot() const;
  private:
  bool _internal_has_gameresultroot() const;
  public:
  void clear_gameresultroot();
  const std::string& gameresultroot() const;
  void set_gameresultroot(const std::string& value);
  void set_gameresultroot(std::string&& value);
  void set_gameresultroot(const char* value);
  void set_gameresultroot(const void* value, size_t size);
  std::string* mutable_gameresultroot();
  std::string* release_gameresultroot();
  void set_allocated_gameresultroot(std::string* gameresultroot);
  private:
  const std::string& _internal_gameresultroot() const;
  void _internal_set_gameresultroot(const std::string& value);
  std::string* _internal_mutable_gameresultroot();
  public:

  // optional bytes posmetaroot = 60;
  bool has_posmetaroot() const;
  private:
  bool _internal_has_posmetaroot() const;
  public:
  void clear_posmetaroot();
  const std::string& posmetaroot() const;
  void set_posmetaroot(const std::string& value);
  void set_posmetaroot(std::string&& value);
  void set_posmetaroot(const char* value);
  void set_posmetaroot(const void* value, size_t size);
  std::string* mutable_posmetaroot();
  std::string* release_posmetaroot();
  void set_allocated_posmetaroot(std::string* posmetaroot);
  private:
  const std::string& _internal_posmetaroot() const;
  void _internal_set_posmetaroot(const std::string& value);
  std::string* _internal_mutable_posmetaroot();
  public:

  // optional int32 blocknum = 2;
  bool has_blocknum() const;
  private:
  bool _internal_has_blocknum() const;
  public:
  void clear_blocknum();
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum() const;
  void set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocknum() const;
  void _internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 week = 3;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::int32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 season = 4;
  bool has_season() const;
  private:
  bool _internal_has_season() const;
  public:
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::int32 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.Bootstrap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamemetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playermetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fnamemetaroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameresultroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posmetaroot_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocknum_;
  ::PROTOBUF_NAMESPACE_ID::int32 week_;
  ::PROTOBUF_NAMESPACE_ID::int32 season_;
  friend struct ::TableStruct_StateData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockMeta

// optional int32 blocknum = 40;
inline bool BlockMeta::_internal_has_blocknum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BlockMeta::has_blocknum() const {
  return _internal_has_blocknum();
}
inline void BlockMeta::clear_blocknum() {
  blocknum_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockMeta::_internal_blocknum() const {
  return blocknum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockMeta::blocknum() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.blocknum)
  return _internal_blocknum();
}
inline void BlockMeta::_internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  blocknum_ = value;
}
inline void BlockMeta::set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blocknum(value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.blocknum)
}

// optional bytes trmetaid = 50;
inline bool BlockMeta::_internal_has_trmetaid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BlockMeta::has_trmetaid() const {
  return _internal_has_trmetaid();
}
inline void BlockMeta::clear_trmetaid() {
  trmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BlockMeta::trmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.trmetaid)
  return _internal_trmetaid();
}
inline void BlockMeta::set_trmetaid(const std::string& value) {
  _internal_set_trmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.trmetaid)
}
inline std::string* BlockMeta::mutable_trmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockMeta.trmetaid)
  return _internal_mutable_trmetaid();
}
inline const std::string& BlockMeta::_internal_trmetaid() const {
  return trmetaid_.Get();
}
inline void BlockMeta::_internal_set_trmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockMeta::set_trmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  trmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockMeta.trmetaid)
}
inline void BlockMeta::set_trmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockMeta.trmetaid)
}
inline void BlockMeta::set_trmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockMeta.trmetaid)
}
inline std::string* BlockMeta::_internal_mutable_trmetaid() {
  _has_bits_[0] |= 0x00000008u;
  return trmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockMeta::release_trmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockMeta.trmetaid)
  if (!_internal_has_trmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return trmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockMeta::set_allocated_trmetaid(std::string* trmetaid) {
  if (trmetaid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  trmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockMeta.trmetaid)
}

// optional bytes txmetaroot = 10;
inline bool BlockMeta::_internal_has_txmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlockMeta::has_txmetaroot() const {
  return _internal_has_txmetaroot();
}
inline void BlockMeta::clear_txmetaroot() {
  txmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockMeta::txmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.txmetaroot)
  return _internal_txmetaroot();
}
inline void BlockMeta::set_txmetaroot(const std::string& value) {
  _internal_set_txmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.txmetaroot)
}
inline std::string* BlockMeta::mutable_txmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockMeta.txmetaroot)
  return _internal_mutable_txmetaroot();
}
inline const std::string& BlockMeta::_internal_txmetaroot() const {
  return txmetaroot_.Get();
}
inline void BlockMeta::_internal_set_txmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  txmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockMeta::set_txmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  txmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockMeta.txmetaroot)
}
inline void BlockMeta::set_txmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  txmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockMeta.txmetaroot)
}
inline void BlockMeta::set_txmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  txmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockMeta.txmetaroot)
}
inline std::string* BlockMeta::_internal_mutable_txmetaroot() {
  _has_bits_[0] |= 0x00000001u;
  return txmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockMeta::release_txmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockMeta.txmetaroot)
  if (!_internal_has_txmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return txmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockMeta::set_allocated_txmetaroot(std::string* txmetaroot) {
  if (txmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  txmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockMeta.txmetaroot)
}

// optional bytes pbstateid = 60;
inline bool BlockMeta::_internal_has_pbstateid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BlockMeta::has_pbstateid() const {
  return _internal_has_pbstateid();
}
inline void BlockMeta::clear_pbstateid() {
  pbstateid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& BlockMeta::pbstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.pbstateid)
  return _internal_pbstateid();
}
inline void BlockMeta::set_pbstateid(const std::string& value) {
  _internal_set_pbstateid(value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.pbstateid)
}
inline std::string* BlockMeta::mutable_pbstateid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockMeta.pbstateid)
  return _internal_mutable_pbstateid();
}
inline const std::string& BlockMeta::_internal_pbstateid() const {
  return pbstateid_.Get();
}
inline void BlockMeta::_internal_set_pbstateid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  pbstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockMeta::set_pbstateid(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  pbstateid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockMeta.pbstateid)
}
inline void BlockMeta::set_pbstateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  pbstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockMeta.pbstateid)
}
inline void BlockMeta::set_pbstateid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  pbstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockMeta.pbstateid)
}
inline std::string* BlockMeta::_internal_mutable_pbstateid() {
  _has_bits_[0] |= 0x00000010u;
  return pbstateid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockMeta::release_pbstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockMeta.pbstateid)
  if (!_internal_has_pbstateid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return pbstateid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockMeta::set_allocated_pbstateid(std::string* pbstateid) {
  if (pbstateid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pbstateid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pbstateid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockMeta.pbstateid)
}

// optional bytes prev = 20;
inline bool BlockMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlockMeta::has_prev() const {
  return _internal_has_prev();
}
inline void BlockMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.prev)
  return _internal_prev();
}
inline void BlockMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.prev)
}
inline std::string* BlockMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& BlockMeta::_internal_prev() const {
  return prev_.Get();
}
inline void BlockMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockMeta.prev)
}
inline void BlockMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockMeta.prev)
}
inline void BlockMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockMeta.prev)
}
inline std::string* BlockMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000002u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockMeta.prev)
}

// optional bytes next = 30;
inline bool BlockMeta::_internal_has_next() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlockMeta::has_next() const {
  return _internal_has_next();
}
inline void BlockMeta::clear_next() {
  next_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BlockMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.next)
  return _internal_next();
}
inline void BlockMeta::set_next(const std::string& value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.next)
}
inline std::string* BlockMeta::mutable_next() {
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockMeta.next)
  return _internal_mutable_next();
}
inline const std::string& BlockMeta::_internal_next() const {
  return next_.Get();
}
inline void BlockMeta::_internal_set_next(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockMeta::set_next(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  next_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockMeta.next)
}
inline void BlockMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockMeta.next)
}
inline void BlockMeta::set_next(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockMeta.next)
}
inline std::string* BlockMeta::_internal_mutable_next() {
  _has_bits_[0] |= 0x00000004u;
  return next_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockMeta.next)
  if (!_internal_has_next()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return next_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockMeta::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  next_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockMeta.next)
}

// -------------------------------------------------------------------

// TxMeta

// optional int32 blocknum = 10;
inline bool TxMeta::_internal_has_blocknum() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TxMeta::has_blocknum() const {
  return _internal_has_blocknum();
}
inline void TxMeta::clear_blocknum() {
  blocknum_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TxMeta::_internal_blocknum() const {
  return blocknum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TxMeta::blocknum() const {
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.blocknum)
  return _internal_blocknum();
}
inline void TxMeta::_internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  blocknum_ = value;
}
inline void TxMeta::set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blocknum(value);
  // @@protoc_insertion_point(field_set:fantasybit.TxMeta.blocknum)
}

// optional int32 txnum = 20;
inline bool TxMeta::_internal_has_txnum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TxMeta::has_txnum() const {
  return _internal_has_txnum();
}
inline void TxMeta::clear_txnum() {
  txnum_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TxMeta::_internal_txnum() const {
  return txnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TxMeta::txnum() const {
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.txnum)
  return _internal_txnum();
}
inline void TxMeta::_internal_set_txnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  txnum_ = value;
}
inline void TxMeta::set_txnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_txnum(value);
  // @@protoc_insertion_point(field_set:fantasybit.TxMeta.txnum)
}

// optional .fantasybit.TransType txtype = 40;
inline bool TxMeta::_internal_has_txtype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TxMeta::has_txtype() const {
  return _internal_has_txtype();
}
inline void TxMeta::clear_txtype() {
  txtype_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::fantasybit::TransType TxMeta::_internal_txtype() const {
  return static_cast< ::fantasybit::TransType >(txtype_);
}
inline ::fantasybit::TransType TxMeta::txtype() const {
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.txtype)
  return _internal_txtype();
}
inline void TxMeta::_internal_set_txtype(::fantasybit::TransType value) {
  assert(::fantasybit::TransType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  txtype_ = value;
}
inline void TxMeta::set_txtype(::fantasybit::TransType value) {
  _internal_set_txtype(value);
  // @@protoc_insertion_point(field_set:fantasybit.TxMeta.txtype)
}

// optional .fantasybit.Transaction tx = 50;
inline bool TxMeta::_internal_has_tx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tx_ != nullptr);
  return value;
}
inline bool TxMeta::has_tx() const {
  return _internal_has_tx();
}
inline const ::fantasybit::Transaction& TxMeta::_internal_tx() const {
  const ::fantasybit::Transaction* p = tx_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::Transaction*>(
      &::fantasybit::_Transaction_default_instance_);
}
inline const ::fantasybit::Transaction& TxMeta::tx() const {
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.tx)
  return _internal_tx();
}
inline void TxMeta::unsafe_arena_set_allocated_tx(
    ::fantasybit::Transaction* tx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_);
  }
  tx_ = tx;
  if (tx) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.TxMeta.tx)
}
inline ::fantasybit::Transaction* TxMeta::release_tx() {
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::Transaction* temp = tx_;
  tx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::Transaction* TxMeta::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:fantasybit.TxMeta.tx)
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::Transaction* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::fantasybit::Transaction* TxMeta::_internal_mutable_tx() {
  _has_bits_[0] |= 0x00000004u;
  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::Transaction>(GetArena());
    tx_ = p;
  }
  return tx_;
}
inline ::fantasybit::Transaction* TxMeta::mutable_tx() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TxMeta.tx)
  return _internal_mutable_tx();
}
inline void TxMeta::set_allocated_tx(::fantasybit::Transaction* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_);
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx)->GetArena();
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TxMeta.tx)
}

// optional string fantasy_name = 60;
inline bool TxMeta::_internal_has_fantasy_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TxMeta::has_fantasy_name() const {
  return _internal_has_fantasy_name();
}
inline void TxMeta::clear_fantasy_name() {
  fantasy_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TxMeta::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.fantasy_name)
  return _internal_fantasy_name();
}
inline void TxMeta::set_fantasy_name(const std::string& value) {
  _internal_set_fantasy_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.TxMeta.fantasy_name)
}
inline std::string* TxMeta::mutable_fantasy_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TxMeta.fantasy_name)
  return _internal_mutable_fantasy_name();
}
inline const std::string& TxMeta::_internal_fantasy_name() const {
  return fantasy_name_.Get();
}
inline void TxMeta::_internal_set_fantasy_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TxMeta::set_fantasy_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TxMeta.fantasy_name)
}
inline void TxMeta::set_fantasy_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TxMeta.fantasy_name)
}
inline void TxMeta::set_fantasy_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TxMeta.fantasy_name)
}
inline std::string* TxMeta::_internal_mutable_fantasy_name() {
  _has_bits_[0] |= 0x00000001u;
  return fantasy_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TxMeta::release_fantasy_name() {
  // @@protoc_insertion_point(field_release:fantasybit.TxMeta.fantasy_name)
  if (!_internal_has_fantasy_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fantasy_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TxMeta::set_allocated_fantasy_name(std::string* fantasy_name) {
  if (fantasy_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fantasy_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fantasy_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TxMeta.fantasy_name)
}

// optional bytes id = 70;
inline bool TxMeta::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TxMeta::has_id() const {
  return _internal_has_id();
}
inline void TxMeta::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TxMeta::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.id)
  return _internal_id();
}
inline void TxMeta::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fantasybit.TxMeta.id)
}
inline std::string* TxMeta::mutable_id() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TxMeta.id)
  return _internal_mutable_id();
}
inline const std::string& TxMeta::_internal_id() const {
  return id_.Get();
}
inline void TxMeta::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TxMeta::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TxMeta.id)
}
inline void TxMeta::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TxMeta.id)
}
inline void TxMeta::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TxMeta.id)
}
inline std::string* TxMeta::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TxMeta::release_id() {
  // @@protoc_insertion_point(field_release:fantasybit.TxMeta.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TxMeta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TxMeta.id)
}

// -------------------------------------------------------------------

// TrMeta

// optional int32 blocknum = 10;
inline bool TrMeta::_internal_has_blocknum() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrMeta::has_blocknum() const {
  return _internal_has_blocknum();
}
inline void TrMeta::clear_blocknum() {
  blocknum_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrMeta::_internal_blocknum() const {
  return blocknum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrMeta::blocknum() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.blocknum)
  return _internal_blocknum();
}
inline void TrMeta::_internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  blocknum_ = value;
}
inline void TrMeta::set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blocknum(value);
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.blocknum)
}

// optional .fantasybit.TrType type = 40;
inline bool TrMeta::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrMeta::has_type() const {
  return _internal_has_type();
}
inline void TrMeta::clear_type() {
  type_ = 2;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::fantasybit::TrType TrMeta::_internal_type() const {
  return static_cast< ::fantasybit::TrType >(type_);
}
inline ::fantasybit::TrType TrMeta::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.type)
  return _internal_type();
}
inline void TrMeta::_internal_set_type(::fantasybit::TrType value) {
  assert(::fantasybit::TrType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void TrMeta::set_type(::fantasybit::TrType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.type)
}

// optional uint32 season = 50;
inline bool TrMeta::_internal_has_season() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrMeta::has_season() const {
  return _internal_has_season();
}
inline void TrMeta::clear_season() {
  season_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrMeta::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrMeta::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.season)
  return _internal_season();
}
inline void TrMeta::_internal_set_season(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  season_ = value;
}
inline void TrMeta::set_season(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.season)
}

// optional uint32 week = 60;
inline bool TrMeta::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrMeta::has_week() const {
  return _internal_has_week();
}
inline void TrMeta::clear_week() {
  week_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrMeta::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.week)
  return _internal_week();
}
inline void TrMeta::_internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  week_ = value;
}
inline void TrMeta::set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.week)
}

// optional bytes gamemetaroot = 70;
inline bool TrMeta::_internal_has_gamemetaroot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrMeta::has_gamemetaroot() const {
  return _internal_has_gamemetaroot();
}
inline void TrMeta::clear_gamemetaroot() {
  gamemetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrMeta::gamemetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.gamemetaroot)
  return _internal_gamemetaroot();
}
inline void TrMeta::set_gamemetaroot(const std::string& value) {
  _internal_set_gamemetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.gamemetaroot)
}
inline std::string* TrMeta::mutable_gamemetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TrMeta.gamemetaroot)
  return _internal_mutable_gamemetaroot();
}
inline const std::string& TrMeta::_internal_gamemetaroot() const {
  return gamemetaroot_.Get();
}
inline void TrMeta::_internal_set_gamemetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrMeta::set_gamemetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gamemetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TrMeta.gamemetaroot)
}
inline void TrMeta::set_gamemetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TrMeta.gamemetaroot)
}
inline void TrMeta::set_gamemetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TrMeta.gamemetaroot)
}
inline std::string* TrMeta::_internal_mutable_gamemetaroot() {
  _has_bits_[0] |= 0x00000001u;
  return gamemetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrMeta::release_gamemetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.TrMeta.gamemetaroot)
  if (!_internal_has_gamemetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gamemetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrMeta::set_allocated_gamemetaroot(std::string* gamemetaroot) {
  if (gamemetaroot != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gamemetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamemetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TrMeta.gamemetaroot)
}

// optional bytes datametaroot = 80;
inline bool TrMeta::_internal_has_datametaroot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrMeta::has_datametaroot() const {
  return _internal_has_datametaroot();
}
inline void TrMeta::clear_datametaroot() {
  datametaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrMeta::datametaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.datametaroot)
  return _internal_datametaroot();
}
inline void TrMeta::set_datametaroot(const std::string& value) {
  _internal_set_datametaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.datametaroot)
}
inline std::string* TrMeta::mutable_datametaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TrMeta.datametaroot)
  return _internal_mutable_datametaroot();
}
inline const std::string& TrMeta::_internal_datametaroot() const {
  return datametaroot_.Get();
}
inline void TrMeta::_internal_set_datametaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  datametaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrMeta::set_datametaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  datametaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TrMeta.datametaroot)
}
inline void TrMeta::set_datametaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  datametaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TrMeta.datametaroot)
}
inline void TrMeta::set_datametaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  datametaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TrMeta.datametaroot)
}
inline std::string* TrMeta::_internal_mutable_datametaroot() {
  _has_bits_[0] |= 0x00000002u;
  return datametaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrMeta::release_datametaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.TrMeta.datametaroot)
  if (!_internal_has_datametaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return datametaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrMeta::set_allocated_datametaroot(std::string* datametaroot) {
  if (datametaroot != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  datametaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datametaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TrMeta.datametaroot)
}

// optional bytes txmetaid = 100;
inline bool TrMeta::_internal_has_txmetaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrMeta::has_txmetaid() const {
  return _internal_has_txmetaid();
}
inline void TrMeta::clear_txmetaid() {
  txmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TrMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.txmetaid)
  return _internal_txmetaid();
}
inline void TrMeta::set_txmetaid(const std::string& value) {
  _internal_set_txmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.txmetaid)
}
inline std::string* TrMeta::mutable_txmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TrMeta.txmetaid)
  return _internal_mutable_txmetaid();
}
inline const std::string& TrMeta::_internal_txmetaid() const {
  return txmetaid_.Get();
}
inline void TrMeta::_internal_set_txmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrMeta::set_txmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TrMeta.txmetaid)
}
inline void TrMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TrMeta.txmetaid)
}
inline void TrMeta::set_txmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TrMeta.txmetaid)
}
inline std::string* TrMeta::_internal_mutable_txmetaid() {
  _has_bits_[0] |= 0x00000004u;
  return txmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.TrMeta.txmetaid)
  if (!_internal_has_txmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return txmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrMeta::set_allocated_txmetaid(std::string* txmetaid) {
  if (txmetaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  txmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TrMeta.txmetaid)
}

// -------------------------------------------------------------------

// GameMeta

// optional bytes txmetaid = 10;
inline bool GameMeta::_internal_has_txmetaid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameMeta::has_txmetaid() const {
  return _internal_has_txmetaid();
}
inline void GameMeta::clear_txmetaid() {
  txmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameMeta.txmetaid)
  return _internal_txmetaid();
}
inline void GameMeta::set_txmetaid(const std::string& value) {
  _internal_set_txmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameMeta.txmetaid)
}
inline std::string* GameMeta::mutable_txmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameMeta.txmetaid)
  return _internal_mutable_txmetaid();
}
inline const std::string& GameMeta::_internal_txmetaid() const {
  return txmetaid_.Get();
}
inline void GameMeta::_internal_set_txmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameMeta::set_txmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameMeta.txmetaid)
}
inline void GameMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameMeta.txmetaid)
}
inline void GameMeta::set_txmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameMeta.txmetaid)
}
inline std::string* GameMeta::_internal_mutable_txmetaid() {
  _has_bits_[0] |= 0x00000001u;
  return txmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameMeta.txmetaid)
  if (!_internal_has_txmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return txmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameMeta::set_allocated_txmetaid(std::string* txmetaid) {
  if (txmetaid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  txmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameMeta.txmetaid)
}

// optional .fantasybit.GameData gamedata = 20;
inline bool GameMeta::_internal_has_gamedata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || gamedata_ != nullptr);
  return value;
}
inline bool GameMeta::has_gamedata() const {
  return _internal_has_gamedata();
}
inline const ::fantasybit::GameData& GameMeta::_internal_gamedata() const {
  const ::fantasybit::GameData* p = gamedata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::GameData*>(
      &::fantasybit::_GameData_default_instance_);
}
inline const ::fantasybit::GameData& GameMeta::gamedata() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameMeta.gamedata)
  return _internal_gamedata();
}
inline void GameMeta::unsafe_arena_set_allocated_gamedata(
    ::fantasybit::GameData* gamedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamedata_);
  }
  gamedata_ = gamedata;
  if (gamedata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GameMeta.gamedata)
}
inline ::fantasybit::GameData* GameMeta::release_gamedata() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::GameData* temp = gamedata_;
  gamedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::GameData* GameMeta::unsafe_arena_release_gamedata() {
  // @@protoc_insertion_point(field_release:fantasybit.GameMeta.gamedata)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::GameData* temp = gamedata_;
  gamedata_ = nullptr;
  return temp;
}
inline ::fantasybit::GameData* GameMeta::_internal_mutable_gamedata() {
  _has_bits_[0] |= 0x00000002u;
  if (gamedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::GameData>(GetArena());
    gamedata_ = p;
  }
  return gamedata_;
}
inline ::fantasybit::GameData* GameMeta::mutable_gamedata() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameMeta.gamedata)
  return _internal_mutable_gamedata();
}
inline void GameMeta::set_allocated_gamedata(::fantasybit::GameData* gamedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamedata_);
  }
  if (gamedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamedata)->GetArena();
    if (message_arena != submessage_arena) {
      gamedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gamedata_ = gamedata;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameMeta.gamedata)
}

// -------------------------------------------------------------------

// DataMeta

// optional bytes txmetaid = 10;
inline bool DataMeta::_internal_has_txmetaid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataMeta::has_txmetaid() const {
  return _internal_has_txmetaid();
}
inline void DataMeta::clear_txmetaid() {
  txmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataMeta.txmetaid)
  return _internal_txmetaid();
}
inline void DataMeta::set_txmetaid(const std::string& value) {
  _internal_set_txmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.DataMeta.txmetaid)
}
inline std::string* DataMeta::mutable_txmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.DataMeta.txmetaid)
  return _internal_mutable_txmetaid();
}
inline const std::string& DataMeta::_internal_txmetaid() const {
  return txmetaid_.Get();
}
inline void DataMeta::_internal_set_txmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataMeta::set_txmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.DataMeta.txmetaid)
}
inline void DataMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.DataMeta.txmetaid)
}
inline void DataMeta::set_txmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.DataMeta.txmetaid)
}
inline std::string* DataMeta::_internal_mutable_txmetaid() {
  _has_bits_[0] |= 0x00000001u;
  return txmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.DataMeta.txmetaid)
  if (!_internal_has_txmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return txmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataMeta::set_allocated_txmetaid(std::string* txmetaid) {
  if (txmetaid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  txmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.DataMeta.txmetaid)
}

// optional .fantasybit.Data data = 20;
inline bool DataMeta::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool DataMeta::has_data() const {
  return _internal_has_data();
}
inline const ::fantasybit::Data& DataMeta::_internal_data() const {
  const ::fantasybit::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::Data*>(
      &::fantasybit::_Data_default_instance_);
}
inline const ::fantasybit::Data& DataMeta::data() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataMeta.data)
  return _internal_data();
}
inline void DataMeta::unsafe_arena_set_allocated_data(
    ::fantasybit::Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.DataMeta.data)
}
inline ::fantasybit::Data* DataMeta::release_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::Data* DataMeta::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:fantasybit.DataMeta.data)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::fantasybit::Data* DataMeta::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::fantasybit::Data* DataMeta::mutable_data() {
  // @@protoc_insertion_point(field_mutable:fantasybit.DataMeta.data)
  return _internal_mutable_data();
}
inline void DataMeta::set_allocated_data(::fantasybit::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.DataMeta.data)
}

// -------------------------------------------------------------------

// LeaderBoardMeta

// optional uint32 week = 10;
inline bool LeaderBoardMeta::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LeaderBoardMeta::has_week() const {
  return _internal_has_week();
}
inline void LeaderBoardMeta::clear_week() {
  week_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeaderBoardMeta::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeaderBoardMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.LeaderBoardMeta.week)
  return _internal_week();
}
inline void LeaderBoardMeta::_internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  week_ = value;
}
inline void LeaderBoardMeta::set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.LeaderBoardMeta.week)
}

// optional bytes fnbalmetaroot = 20;
inline bool LeaderBoardMeta::_internal_has_fnbalmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LeaderBoardMeta::has_fnbalmetaroot() const {
  return _internal_has_fnbalmetaroot();
}
inline void LeaderBoardMeta::clear_fnbalmetaroot() {
  fnbalmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LeaderBoardMeta::fnbalmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.LeaderBoardMeta.fnbalmetaroot)
  return _internal_fnbalmetaroot();
}
inline void LeaderBoardMeta::set_fnbalmetaroot(const std::string& value) {
  _internal_set_fnbalmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.LeaderBoardMeta.fnbalmetaroot)
}
inline std::string* LeaderBoardMeta::mutable_fnbalmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.LeaderBoardMeta.fnbalmetaroot)
  return _internal_mutable_fnbalmetaroot();
}
inline const std::string& LeaderBoardMeta::_internal_fnbalmetaroot() const {
  return fnbalmetaroot_.Get();
}
inline void LeaderBoardMeta::_internal_set_fnbalmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fnbalmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaderBoardMeta::set_fnbalmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fnbalmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.LeaderBoardMeta.fnbalmetaroot)
}
inline void LeaderBoardMeta::set_fnbalmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fnbalmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.LeaderBoardMeta.fnbalmetaroot)
}
inline void LeaderBoardMeta::set_fnbalmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fnbalmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.LeaderBoardMeta.fnbalmetaroot)
}
inline std::string* LeaderBoardMeta::_internal_mutable_fnbalmetaroot() {
  _has_bits_[0] |= 0x00000001u;
  return fnbalmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaderBoardMeta::release_fnbalmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.LeaderBoardMeta.fnbalmetaroot)
  if (!_internal_has_fnbalmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fnbalmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderBoardMeta::set_allocated_fnbalmetaroot(std::string* fnbalmetaroot) {
  if (fnbalmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fnbalmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fnbalmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.LeaderBoardMeta.fnbalmetaroot)
}

// optional bytes prev = 30;
inline bool LeaderBoardMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LeaderBoardMeta::has_prev() const {
  return _internal_has_prev();
}
inline void LeaderBoardMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LeaderBoardMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.LeaderBoardMeta.prev)
  return _internal_prev();
}
inline void LeaderBoardMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.LeaderBoardMeta.prev)
}
inline std::string* LeaderBoardMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.LeaderBoardMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& LeaderBoardMeta::_internal_prev() const {
  return prev_.Get();
}
inline void LeaderBoardMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaderBoardMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.LeaderBoardMeta.prev)
}
inline void LeaderBoardMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.LeaderBoardMeta.prev)
}
inline void LeaderBoardMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.LeaderBoardMeta.prev)
}
inline std::string* LeaderBoardMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000002u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaderBoardMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.LeaderBoardMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderBoardMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.LeaderBoardMeta.prev)
}

// optional bytes next = 40;
inline bool LeaderBoardMeta::_internal_has_next() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LeaderBoardMeta::has_next() const {
  return _internal_has_next();
}
inline void LeaderBoardMeta::clear_next() {
  next_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LeaderBoardMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.LeaderBoardMeta.next)
  return _internal_next();
}
inline void LeaderBoardMeta::set_next(const std::string& value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:fantasybit.LeaderBoardMeta.next)
}
inline std::string* LeaderBoardMeta::mutable_next() {
  // @@protoc_insertion_point(field_mutable:fantasybit.LeaderBoardMeta.next)
  return _internal_mutable_next();
}
inline const std::string& LeaderBoardMeta::_internal_next() const {
  return next_.Get();
}
inline void LeaderBoardMeta::_internal_set_next(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaderBoardMeta::set_next(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  next_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.LeaderBoardMeta.next)
}
inline void LeaderBoardMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.LeaderBoardMeta.next)
}
inline void LeaderBoardMeta::set_next(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.LeaderBoardMeta.next)
}
inline std::string* LeaderBoardMeta::_internal_mutable_next() {
  _has_bits_[0] |= 0x00000004u;
  return next_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaderBoardMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.LeaderBoardMeta.next)
  if (!_internal_has_next()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return next_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderBoardMeta::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  next_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.LeaderBoardMeta.next)
}

// -------------------------------------------------------------------

// FantasyNameBalMeta

// optional bytes txmetaid = 10;
inline bool FantasyNameBalMeta::_internal_has_txmetaid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_txmetaid() const {
  return _internal_has_txmetaid();
}
inline void FantasyNameBalMeta::clear_txmetaid() {
  txmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FantasyNameBalMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.txmetaid)
  return _internal_txmetaid();
}
inline void FantasyNameBalMeta::set_txmetaid(const std::string& value) {
  _internal_set_txmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.txmetaid)
}
inline std::string* FantasyNameBalMeta::mutable_txmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.txmetaid)
  return _internal_mutable_txmetaid();
}
inline const std::string& FantasyNameBalMeta::_internal_txmetaid() const {
  return txmetaid_.Get();
}
inline void FantasyNameBalMeta::_internal_set_txmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameBalMeta::set_txmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.txmetaid)
}
inline void FantasyNameBalMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.txmetaid)
}
inline void FantasyNameBalMeta::set_txmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.txmetaid)
}
inline std::string* FantasyNameBalMeta::_internal_mutable_txmetaid() {
  _has_bits_[0] |= 0x00000001u;
  return txmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameBalMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.txmetaid)
  if (!_internal_has_txmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return txmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameBalMeta::set_allocated_txmetaid(std::string* txmetaid) {
  if (txmetaid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  txmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.txmetaid)
}

// optional bytes trmetaid = 20;
inline bool FantasyNameBalMeta::_internal_has_trmetaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_trmetaid() const {
  return _internal_has_trmetaid();
}
inline void FantasyNameBalMeta::clear_trmetaid() {
  trmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FantasyNameBalMeta::trmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.trmetaid)
  return _internal_trmetaid();
}
inline void FantasyNameBalMeta::set_trmetaid(const std::string& value) {
  _internal_set_trmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.trmetaid)
}
inline std::string* FantasyNameBalMeta::mutable_trmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.trmetaid)
  return _internal_mutable_trmetaid();
}
inline const std::string& FantasyNameBalMeta::_internal_trmetaid() const {
  return trmetaid_.Get();
}
inline void FantasyNameBalMeta::_internal_set_trmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameBalMeta::set_trmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  trmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.trmetaid)
}
inline void FantasyNameBalMeta::set_trmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.trmetaid)
}
inline void FantasyNameBalMeta::set_trmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.trmetaid)
}
inline std::string* FantasyNameBalMeta::_internal_mutable_trmetaid() {
  _has_bits_[0] |= 0x00000002u;
  return trmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameBalMeta::release_trmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.trmetaid)
  if (!_internal_has_trmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return trmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameBalMeta::set_allocated_trmetaid(std::string* trmetaid) {
  if (trmetaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.trmetaid)
}

// optional string name = 25;
inline bool FantasyNameBalMeta::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_name() const {
  return _internal_has_name();
}
inline void FantasyNameBalMeta::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FantasyNameBalMeta::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.name)
  return _internal_name();
}
inline void FantasyNameBalMeta::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.name)
}
inline std::string* FantasyNameBalMeta::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.name)
  return _internal_mutable_name();
}
inline const std::string& FantasyNameBalMeta::_internal_name() const {
  return name_.Get();
}
inline void FantasyNameBalMeta::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameBalMeta::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.name)
}
inline void FantasyNameBalMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.name)
}
inline void FantasyNameBalMeta::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.name)
}
inline std::string* FantasyNameBalMeta::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameBalMeta::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameBalMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.name)
}

// optional string public_key = 30;
inline bool FantasyNameBalMeta::_internal_has_public_key() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_public_key() const {
  return _internal_has_public_key();
}
inline void FantasyNameBalMeta::clear_public_key() {
  public_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FantasyNameBalMeta::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.public_key)
  return _internal_public_key();
}
inline void FantasyNameBalMeta::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.public_key)
}
inline std::string* FantasyNameBalMeta::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& FantasyNameBalMeta::_internal_public_key() const {
  return public_key_.Get();
}
inline void FantasyNameBalMeta::_internal_set_public_key(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameBalMeta::set_public_key(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  public_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.public_key)
}
inline void FantasyNameBalMeta::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.public_key)
}
inline void FantasyNameBalMeta::set_public_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.public_key)
}
inline std::string* FantasyNameBalMeta::_internal_mutable_public_key() {
  _has_bits_[0] |= 0x00000008u;
  return public_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameBalMeta::release_public_key() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.public_key)
  if (!_internal_has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return public_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameBalMeta::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.public_key)
}

// optional uint64 bits = 35;
inline bool FantasyNameBalMeta::_internal_has_bits() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_bits() const {
  return _internal_has_bits();
}
inline void FantasyNameBalMeta::clear_bits() {
  bits_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyNameBalMeta::_internal_bits() const {
  return bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyNameBalMeta::bits() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.bits)
  return _internal_bits();
}
inline void FantasyNameBalMeta::_internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  bits_ = value;
}
inline void FantasyNameBalMeta::set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.bits)
}

// optional int64 stake = 40;
inline bool FantasyNameBalMeta::_internal_has_stake() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_stake() const {
  return _internal_has_stake();
}
inline void FantasyNameBalMeta::clear_stake() {
  stake_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FantasyNameBalMeta::_internal_stake() const {
  return stake_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FantasyNameBalMeta::stake() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.stake)
  return _internal_stake();
}
inline void FantasyNameBalMeta::_internal_set_stake(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  stake_ = value;
}
inline void FantasyNameBalMeta::set_stake(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stake(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.stake)
}

// optional int32 block = 41;
inline bool FantasyNameBalMeta::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_block() const {
  return _internal_has_block();
}
inline void FantasyNameBalMeta::clear_block() {
  block_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyNameBalMeta::_internal_block() const {
  return block_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyNameBalMeta::block() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.block)
  return _internal_block();
}
inline void FantasyNameBalMeta::_internal_set_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  block_ = value;
}
inline void FantasyNameBalMeta::set_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.block)
}

// optional int32 count = 42;
inline bool FantasyNameBalMeta::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_count() const {
  return _internal_has_count();
}
inline void FantasyNameBalMeta::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyNameBalMeta::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyNameBalMeta::count() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.count)
  return _internal_count();
}
inline void FantasyNameBalMeta::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  count_ = value;
}
inline void FantasyNameBalMeta::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.count)
}

// optional uint64 nonce = 45;
inline bool FantasyNameBalMeta::_internal_has_nonce() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_nonce() const {
  return _internal_has_nonce();
}
inline void FantasyNameBalMeta::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyNameBalMeta::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyNameBalMeta::nonce() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.nonce)
  return _internal_nonce();
}
inline void FantasyNameBalMeta::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  nonce_ = value;
}
inline void FantasyNameBalMeta::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.nonce)
}

// optional bytes awardmetaroot = 50;
inline bool FantasyNameBalMeta::_internal_has_awardmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_awardmetaroot() const {
  return _internal_has_awardmetaroot();
}
inline void FantasyNameBalMeta::clear_awardmetaroot() {
  awardmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& FantasyNameBalMeta::awardmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.awardmetaroot)
  return _internal_awardmetaroot();
}
inline void FantasyNameBalMeta::set_awardmetaroot(const std::string& value) {
  _internal_set_awardmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.awardmetaroot)
}
inline std::string* FantasyNameBalMeta::mutable_awardmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.awardmetaroot)
  return _internal_mutable_awardmetaroot();
}
inline const std::string& FantasyNameBalMeta::_internal_awardmetaroot() const {
  return awardmetaroot_.Get();
}
inline void FantasyNameBalMeta::_internal_set_awardmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  awardmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameBalMeta::set_awardmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  awardmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.awardmetaroot)
}
inline void FantasyNameBalMeta::set_awardmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  awardmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.awardmetaroot)
}
inline void FantasyNameBalMeta::set_awardmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  awardmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.awardmetaroot)
}
inline std::string* FantasyNameBalMeta::_internal_mutable_awardmetaroot() {
  _has_bits_[0] |= 0x00000010u;
  return awardmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameBalMeta::release_awardmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.awardmetaroot)
  if (!_internal_has_awardmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return awardmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameBalMeta::set_allocated_awardmetaroot(std::string* awardmetaroot) {
  if (awardmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  awardmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), awardmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.awardmetaroot)
}

// optional bytes pnlmetaroot = 60;
inline bool FantasyNameBalMeta::_internal_has_pnlmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_pnlmetaroot() const {
  return _internal_has_pnlmetaroot();
}
inline void FantasyNameBalMeta::clear_pnlmetaroot() {
  pnlmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& FantasyNameBalMeta::pnlmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.pnlmetaroot)
  return _internal_pnlmetaroot();
}
inline void FantasyNameBalMeta::set_pnlmetaroot(const std::string& value) {
  _internal_set_pnlmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.pnlmetaroot)
}
inline std::string* FantasyNameBalMeta::mutable_pnlmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.pnlmetaroot)
  return _internal_mutable_pnlmetaroot();
}
inline const std::string& FantasyNameBalMeta::_internal_pnlmetaroot() const {
  return pnlmetaroot_.Get();
}
inline void FantasyNameBalMeta::_internal_set_pnlmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  pnlmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameBalMeta::set_pnlmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  pnlmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.pnlmetaroot)
}
inline void FantasyNameBalMeta::set_pnlmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  pnlmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.pnlmetaroot)
}
inline void FantasyNameBalMeta::set_pnlmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  pnlmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.pnlmetaroot)
}
inline std::string* FantasyNameBalMeta::_internal_mutable_pnlmetaroot() {
  _has_bits_[0] |= 0x00000020u;
  return pnlmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameBalMeta::release_pnlmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.pnlmetaroot)
  if (!_internal_has_pnlmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return pnlmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameBalMeta::set_allocated_pnlmetaroot(std::string* pnlmetaroot) {
  if (pnlmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pnlmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pnlmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.pnlmetaroot)
}

// optional bytes prev = 70;
inline bool FantasyNameBalMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_prev() const {
  return _internal_has_prev();
}
inline void FantasyNameBalMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& FantasyNameBalMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.prev)
  return _internal_prev();
}
inline void FantasyNameBalMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.prev)
}
inline std::string* FantasyNameBalMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& FantasyNameBalMeta::_internal_prev() const {
  return prev_.Get();
}
inline void FantasyNameBalMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameBalMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.prev)
}
inline void FantasyNameBalMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.prev)
}
inline void FantasyNameBalMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.prev)
}
inline std::string* FantasyNameBalMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000040u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameBalMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameBalMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.prev)
}

// optional bytes next = 80;
inline bool FantasyNameBalMeta::_internal_has_next() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FantasyNameBalMeta::has_next() const {
  return _internal_has_next();
}
inline void FantasyNameBalMeta::clear_next() {
  next_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& FantasyNameBalMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.next)
  return _internal_next();
}
inline void FantasyNameBalMeta::set_next(const std::string& value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.next)
}
inline std::string* FantasyNameBalMeta::mutable_next() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.next)
  return _internal_mutable_next();
}
inline const std::string& FantasyNameBalMeta::_internal_next() const {
  return next_.Get();
}
inline void FantasyNameBalMeta::_internal_set_next(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameBalMeta::set_next(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  next_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.next)
}
inline void FantasyNameBalMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.next)
}
inline void FantasyNameBalMeta::set_next(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.next)
}
inline std::string* FantasyNameBalMeta::_internal_mutable_next() {
  _has_bits_[0] |= 0x00000080u;
  return next_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameBalMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.next)
  if (!_internal_has_next()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return next_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameBalMeta::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  next_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.next)
}

// -------------------------------------------------------------------

// FantasyNameState

// optional string name = 1;
inline bool FantasyNameState::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FantasyNameState::has_name() const {
  return _internal_has_name();
}
inline void FantasyNameState::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FantasyNameState::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.name)
  return _internal_name();
}
inline void FantasyNameState::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.name)
}
inline std::string* FantasyNameState::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.name)
  return _internal_mutable_name();
}
inline const std::string& FantasyNameState::_internal_name() const {
  return name_.Get();
}
inline void FantasyNameState::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameState::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.name)
}
inline void FantasyNameState::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.name)
}
inline void FantasyNameState::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.name)
}
inline std::string* FantasyNameState::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameState::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.name)
}

// optional bytes fantasynamebalmetaid = 10;
inline bool FantasyNameState::_internal_has_fantasynamebalmetaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FantasyNameState::has_fantasynamebalmetaid() const {
  return _internal_has_fantasynamebalmetaid();
}
inline void FantasyNameState::clear_fantasynamebalmetaid() {
  fantasynamebalmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FantasyNameState::fantasynamebalmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.fantasynamebalmetaid)
  return _internal_fantasynamebalmetaid();
}
inline void FantasyNameState::set_fantasynamebalmetaid(const std::string& value) {
  _internal_set_fantasynamebalmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.fantasynamebalmetaid)
}
inline std::string* FantasyNameState::mutable_fantasynamebalmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.fantasynamebalmetaid)
  return _internal_mutable_fantasynamebalmetaid();
}
inline const std::string& FantasyNameState::_internal_fantasynamebalmetaid() const {
  return fantasynamebalmetaid_.Get();
}
inline void FantasyNameState::_internal_set_fantasynamebalmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fantasynamebalmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameState::set_fantasynamebalmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  fantasynamebalmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.fantasynamebalmetaid)
}
inline void FantasyNameState::set_fantasynamebalmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  fantasynamebalmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.fantasynamebalmetaid)
}
inline void FantasyNameState::set_fantasynamebalmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  fantasynamebalmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.fantasynamebalmetaid)
}
inline std::string* FantasyNameState::_internal_mutable_fantasynamebalmetaid() {
  _has_bits_[0] |= 0x00000002u;
  return fantasynamebalmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameState::release_fantasynamebalmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.fantasynamebalmetaid)
  if (!_internal_has_fantasynamebalmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fantasynamebalmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameState::set_allocated_fantasynamebalmetaid(std::string* fantasynamebalmetaid) {
  if (fantasynamebalmetaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fantasynamebalmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fantasynamebalmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.fantasynamebalmetaid)
}

// optional bytes posmetaroot = 20;
inline bool FantasyNameState::_internal_has_posmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FantasyNameState::has_posmetaroot() const {
  return _internal_has_posmetaroot();
}
inline void FantasyNameState::clear_posmetaroot() {
  posmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FantasyNameState::posmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.posmetaroot)
  return _internal_posmetaroot();
}
inline void FantasyNameState::set_posmetaroot(const std::string& value) {
  _internal_set_posmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.posmetaroot)
}
inline std::string* FantasyNameState::mutable_posmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.posmetaroot)
  return _internal_mutable_posmetaroot();
}
inline const std::string& FantasyNameState::_internal_posmetaroot() const {
  return posmetaroot_.Get();
}
inline void FantasyNameState::_internal_set_posmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  posmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameState::set_posmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  posmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.posmetaroot)
}
inline void FantasyNameState::set_posmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  posmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.posmetaroot)
}
inline void FantasyNameState::set_posmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  posmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.posmetaroot)
}
inline std::string* FantasyNameState::_internal_mutable_posmetaroot() {
  _has_bits_[0] |= 0x00000004u;
  return posmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameState::release_posmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.posmetaroot)
  if (!_internal_has_posmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return posmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameState::set_allocated_posmetaroot(std::string* posmetaroot) {
  if (posmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  posmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), posmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.posmetaroot)
}

// optional bytes ordersmetaroot = 30;
inline bool FantasyNameState::_internal_has_ordersmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FantasyNameState::has_ordersmetaroot() const {
  return _internal_has_ordersmetaroot();
}
inline void FantasyNameState::clear_ordersmetaroot() {
  ordersmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FantasyNameState::ordersmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.ordersmetaroot)
  return _internal_ordersmetaroot();
}
inline void FantasyNameState::set_ordersmetaroot(const std::string& value) {
  _internal_set_ordersmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.ordersmetaroot)
}
inline std::string* FantasyNameState::mutable_ordersmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.ordersmetaroot)
  return _internal_mutable_ordersmetaroot();
}
inline const std::string& FantasyNameState::_internal_ordersmetaroot() const {
  return ordersmetaroot_.Get();
}
inline void FantasyNameState::_internal_set_ordersmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ordersmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameState::set_ordersmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ordersmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.ordersmetaroot)
}
inline void FantasyNameState::set_ordersmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ordersmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.ordersmetaroot)
}
inline void FantasyNameState::set_ordersmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ordersmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.ordersmetaroot)
}
inline std::string* FantasyNameState::_internal_mutable_ordersmetaroot() {
  _has_bits_[0] |= 0x00000008u;
  return ordersmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameState::release_ordersmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.ordersmetaroot)
  if (!_internal_has_ordersmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ordersmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameState::set_allocated_ordersmetaroot(std::string* ordersmetaroot) {
  if (ordersmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ordersmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordersmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.ordersmetaroot)
}

// optional bytes projmetaroot = 40;
inline bool FantasyNameState::_internal_has_projmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FantasyNameState::has_projmetaroot() const {
  return _internal_has_projmetaroot();
}
inline void FantasyNameState::clear_projmetaroot() {
  projmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& FantasyNameState::projmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.projmetaroot)
  return _internal_projmetaroot();
}
inline void FantasyNameState::set_projmetaroot(const std::string& value) {
  _internal_set_projmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.projmetaroot)
}
inline std::string* FantasyNameState::mutable_projmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.projmetaroot)
  return _internal_mutable_projmetaroot();
}
inline const std::string& FantasyNameState::_internal_projmetaroot() const {
  return projmetaroot_.Get();
}
inline void FantasyNameState::_internal_set_projmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  projmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameState::set_projmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  projmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.projmetaroot)
}
inline void FantasyNameState::set_projmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  projmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.projmetaroot)
}
inline void FantasyNameState::set_projmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  projmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.projmetaroot)
}
inline std::string* FantasyNameState::_internal_mutable_projmetaroot() {
  _has_bits_[0] |= 0x00000010u;
  return projmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameState::release_projmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.projmetaroot)
  if (!_internal_has_projmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return projmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameState::set_allocated_projmetaroot(std::string* projmetaroot) {
  if (projmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  projmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), projmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.projmetaroot)
}

// optional bytes prev = 70;
inline bool FantasyNameState::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FantasyNameState::has_prev() const {
  return _internal_has_prev();
}
inline void FantasyNameState::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& FantasyNameState::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.prev)
  return _internal_prev();
}
inline void FantasyNameState::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.prev)
}
inline std::string* FantasyNameState::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.prev)
  return _internal_mutable_prev();
}
inline const std::string& FantasyNameState::_internal_prev() const {
  return prev_.Get();
}
inline void FantasyNameState::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameState::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.prev)
}
inline void FantasyNameState::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.prev)
}
inline void FantasyNameState::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.prev)
}
inline std::string* FantasyNameState::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000040u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameState::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameState::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.prev)
}

// optional bytes next = 80;
inline bool FantasyNameState::_internal_has_next() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FantasyNameState::has_next() const {
  return _internal_has_next();
}
inline void FantasyNameState::clear_next() {
  next_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& FantasyNameState::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.next)
  return _internal_next();
}
inline void FantasyNameState::set_next(const std::string& value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.next)
}
inline std::string* FantasyNameState::mutable_next() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.next)
  return _internal_mutable_next();
}
inline const std::string& FantasyNameState::_internal_next() const {
  return next_.Get();
}
inline void FantasyNameState::_internal_set_next(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameState::set_next(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  next_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.next)
}
inline void FantasyNameState::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.next)
}
inline void FantasyNameState::set_next(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.next)
}
inline std::string* FantasyNameState::_internal_mutable_next() {
  _has_bits_[0] |= 0x00000080u;
  return next_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameState::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.next)
  if (!_internal_has_next()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return next_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameState::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  next_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.next)
}

// optional bytes txmetaid = 50;
inline bool FantasyNameState::_internal_has_txmetaid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FantasyNameState::has_txmetaid() const {
  return _internal_has_txmetaid();
}
inline void FantasyNameState::clear_txmetaid() {
  txmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& FantasyNameState::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.txmetaid)
  return _internal_txmetaid();
}
inline void FantasyNameState::set_txmetaid(const std::string& value) {
  _internal_set_txmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.txmetaid)
}
inline std::string* FantasyNameState::mutable_txmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.txmetaid)
  return _internal_mutable_txmetaid();
}
inline const std::string& FantasyNameState::_internal_txmetaid() const {
  return txmetaid_.Get();
}
inline void FantasyNameState::_internal_set_txmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameState::set_txmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  txmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.txmetaid)
}
inline void FantasyNameState::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.txmetaid)
}
inline void FantasyNameState::set_txmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.txmetaid)
}
inline std::string* FantasyNameState::_internal_mutable_txmetaid() {
  _has_bits_[0] |= 0x00000020u;
  return txmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameState::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.txmetaid)
  if (!_internal_has_txmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return txmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameState::set_allocated_txmetaid(std::string* txmetaid) {
  if (txmetaid != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  txmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.txmetaid)
}

// -------------------------------------------------------------------

// WeekGameStatusMeta

// optional uint32 week = 10;
inline bool WeekGameStatusMeta::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WeekGameStatusMeta::has_week() const {
  return _internal_has_week();
}
inline void WeekGameStatusMeta::clear_week() {
  week_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WeekGameStatusMeta::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WeekGameStatusMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.week)
  return _internal_week();
}
inline void WeekGameStatusMeta::_internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  week_ = value;
}
inline void WeekGameStatusMeta::set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.week)
}

// optional bytes gameresultmetaroot = 20;
inline bool WeekGameStatusMeta::_internal_has_gameresultmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WeekGameStatusMeta::has_gameresultmetaroot() const {
  return _internal_has_gameresultmetaroot();
}
inline void WeekGameStatusMeta::clear_gameresultmetaroot() {
  gameresultmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WeekGameStatusMeta::gameresultmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
  return _internal_gameresultmetaroot();
}
inline void WeekGameStatusMeta::set_gameresultmetaroot(const std::string& value) {
  _internal_set_gameresultmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
}
inline std::string* WeekGameStatusMeta::mutable_gameresultmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
  return _internal_mutable_gameresultmetaroot();
}
inline const std::string& WeekGameStatusMeta::_internal_gameresultmetaroot() const {
  return gameresultmetaroot_.Get();
}
inline void WeekGameStatusMeta::_internal_set_gameresultmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gameresultmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WeekGameStatusMeta::set_gameresultmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gameresultmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
}
inline void WeekGameStatusMeta::set_gameresultmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gameresultmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
}
inline void WeekGameStatusMeta::set_gameresultmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gameresultmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
}
inline std::string* WeekGameStatusMeta::_internal_mutable_gameresultmetaroot() {
  _has_bits_[0] |= 0x00000001u;
  return gameresultmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WeekGameStatusMeta::release_gameresultmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
  if (!_internal_has_gameresultmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gameresultmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeekGameStatusMeta::set_allocated_gameresultmetaroot(std::string* gameresultmetaroot) {
  if (gameresultmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gameresultmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameresultmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
}

// optional bytes ingameprojmetaroot = 30;
inline bool WeekGameStatusMeta::_internal_has_ingameprojmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WeekGameStatusMeta::has_ingameprojmetaroot() const {
  return _internal_has_ingameprojmetaroot();
}
inline void WeekGameStatusMeta::clear_ingameprojmetaroot() {
  ingameprojmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WeekGameStatusMeta::ingameprojmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
  return _internal_ingameprojmetaroot();
}
inline void WeekGameStatusMeta::set_ingameprojmetaroot(const std::string& value) {
  _internal_set_ingameprojmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
}
inline std::string* WeekGameStatusMeta::mutable_ingameprojmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
  return _internal_mutable_ingameprojmetaroot();
}
inline const std::string& WeekGameStatusMeta::_internal_ingameprojmetaroot() const {
  return ingameprojmetaroot_.Get();
}
inline void WeekGameStatusMeta::_internal_set_ingameprojmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ingameprojmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WeekGameStatusMeta::set_ingameprojmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ingameprojmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
}
inline void WeekGameStatusMeta::set_ingameprojmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ingameprojmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
}
inline void WeekGameStatusMeta::set_ingameprojmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ingameprojmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
}
inline std::string* WeekGameStatusMeta::_internal_mutable_ingameprojmetaroot() {
  _has_bits_[0] |= 0x00000002u;
  return ingameprojmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WeekGameStatusMeta::release_ingameprojmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
  if (!_internal_has_ingameprojmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ingameprojmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeekGameStatusMeta::set_allocated_ingameprojmetaroot(std::string* ingameprojmetaroot) {
  if (ingameprojmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ingameprojmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ingameprojmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
}

// optional bytes opengamestatusroot = 40;
inline bool WeekGameStatusMeta::_internal_has_opengamestatusroot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WeekGameStatusMeta::has_opengamestatusroot() const {
  return _internal_has_opengamestatusroot();
}
inline void WeekGameStatusMeta::clear_opengamestatusroot() {
  opengamestatusroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WeekGameStatusMeta::opengamestatusroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.opengamestatusroot)
  return _internal_opengamestatusroot();
}
inline void WeekGameStatusMeta::set_opengamestatusroot(const std::string& value) {
  _internal_set_opengamestatusroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.opengamestatusroot)
}
inline std::string* WeekGameStatusMeta::mutable_opengamestatusroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WeekGameStatusMeta.opengamestatusroot)
  return _internal_mutable_opengamestatusroot();
}
inline const std::string& WeekGameStatusMeta::_internal_opengamestatusroot() const {
  return opengamestatusroot_.Get();
}
inline void WeekGameStatusMeta::_internal_set_opengamestatusroot(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  opengamestatusroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WeekGameStatusMeta::set_opengamestatusroot(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  opengamestatusroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WeekGameStatusMeta.opengamestatusroot)
}
inline void WeekGameStatusMeta::set_opengamestatusroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  opengamestatusroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.WeekGameStatusMeta.opengamestatusroot)
}
inline void WeekGameStatusMeta::set_opengamestatusroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  opengamestatusroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeekGameStatusMeta.opengamestatusroot)
}
inline std::string* WeekGameStatusMeta::_internal_mutable_opengamestatusroot() {
  _has_bits_[0] |= 0x00000004u;
  return opengamestatusroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WeekGameStatusMeta::release_opengamestatusroot() {
  // @@protoc_insertion_point(field_release:fantasybit.WeekGameStatusMeta.opengamestatusroot)
  if (!_internal_has_opengamestatusroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return opengamestatusroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeekGameStatusMeta::set_allocated_opengamestatusroot(std::string* opengamestatusroot) {
  if (opengamestatusroot != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  opengamestatusroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opengamestatusroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WeekGameStatusMeta.opengamestatusroot)
}

// optional bytes prev = 50;
inline bool WeekGameStatusMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WeekGameStatusMeta::has_prev() const {
  return _internal_has_prev();
}
inline void WeekGameStatusMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WeekGameStatusMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.prev)
  return _internal_prev();
}
inline void WeekGameStatusMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.prev)
}
inline std::string* WeekGameStatusMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WeekGameStatusMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& WeekGameStatusMeta::_internal_prev() const {
  return prev_.Get();
}
inline void WeekGameStatusMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WeekGameStatusMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WeekGameStatusMeta.prev)
}
inline void WeekGameStatusMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.WeekGameStatusMeta.prev)
}
inline void WeekGameStatusMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeekGameStatusMeta.prev)
}
inline std::string* WeekGameStatusMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000008u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WeekGameStatusMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.WeekGameStatusMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeekGameStatusMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WeekGameStatusMeta.prev)
}

// optional bytes next = 60;
inline bool WeekGameStatusMeta::_internal_has_next() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WeekGameStatusMeta::has_next() const {
  return _internal_has_next();
}
inline void WeekGameStatusMeta::clear_next() {
  next_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& WeekGameStatusMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.next)
  return _internal_next();
}
inline void WeekGameStatusMeta::set_next(const std::string& value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.next)
}
inline std::string* WeekGameStatusMeta::mutable_next() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WeekGameStatusMeta.next)
  return _internal_mutable_next();
}
inline const std::string& WeekGameStatusMeta::_internal_next() const {
  return next_.Get();
}
inline void WeekGameStatusMeta::_internal_set_next(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WeekGameStatusMeta::set_next(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  next_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WeekGameStatusMeta.next)
}
inline void WeekGameStatusMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.WeekGameStatusMeta.next)
}
inline void WeekGameStatusMeta::set_next(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeekGameStatusMeta.next)
}
inline std::string* WeekGameStatusMeta::_internal_mutable_next() {
  _has_bits_[0] |= 0x00000010u;
  return next_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WeekGameStatusMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.WeekGameStatusMeta.next)
  if (!_internal_has_next()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return next_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeekGameStatusMeta::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  next_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WeekGameStatusMeta.next)
}

// -------------------------------------------------------------------

// InGameProjMeta

// optional string gameid = 20;
inline bool InGameProjMeta::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InGameProjMeta::has_gameid() const {
  return _internal_has_gameid();
}
inline void InGameProjMeta::clear_gameid() {
  gameid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InGameProjMeta::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.InGameProjMeta.gameid)
  return _internal_gameid();
}
inline void InGameProjMeta::set_gameid(const std::string& value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.InGameProjMeta.gameid)
}
inline std::string* InGameProjMeta::mutable_gameid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.InGameProjMeta.gameid)
  return _internal_mutable_gameid();
}
inline const std::string& InGameProjMeta::_internal_gameid() const {
  return gameid_.Get();
}
inline void InGameProjMeta::_internal_set_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InGameProjMeta::set_gameid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InGameProjMeta.gameid)
}
inline void InGameProjMeta::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.InGameProjMeta.gameid)
}
inline void InGameProjMeta::set_gameid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InGameProjMeta.gameid)
}
inline std::string* InGameProjMeta::_internal_mutable_gameid() {
  _has_bits_[0] |= 0x00000001u;
  return gameid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InGameProjMeta::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.InGameProjMeta.gameid)
  if (!_internal_has_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InGameProjMeta::set_allocated_gameid(std::string* gameid) {
  if (gameid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InGameProjMeta.gameid)
}

// optional bytes gamestatusmetaid = 40;
inline bool InGameProjMeta::_internal_has_gamestatusmetaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InGameProjMeta::has_gamestatusmetaid() const {
  return _internal_has_gamestatusmetaid();
}
inline void InGameProjMeta::clear_gamestatusmetaid() {
  gamestatusmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InGameProjMeta::gamestatusmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.InGameProjMeta.gamestatusmetaid)
  return _internal_gamestatusmetaid();
}
inline void InGameProjMeta::set_gamestatusmetaid(const std::string& value) {
  _internal_set_gamestatusmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.InGameProjMeta.gamestatusmetaid)
}
inline std::string* InGameProjMeta::mutable_gamestatusmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.InGameProjMeta.gamestatusmetaid)
  return _internal_mutable_gamestatusmetaid();
}
inline const std::string& InGameProjMeta::_internal_gamestatusmetaid() const {
  return gamestatusmetaid_.Get();
}
inline void InGameProjMeta::_internal_set_gamestatusmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InGameProjMeta::set_gamestatusmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InGameProjMeta.gamestatusmetaid)
}
inline void InGameProjMeta::set_gamestatusmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.InGameProjMeta.gamestatusmetaid)
}
inline void InGameProjMeta::set_gamestatusmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InGameProjMeta.gamestatusmetaid)
}
inline std::string* InGameProjMeta::_internal_mutable_gamestatusmetaid() {
  _has_bits_[0] |= 0x00000002u;
  return gamestatusmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InGameProjMeta::release_gamestatusmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.InGameProjMeta.gamestatusmetaid)
  if (!_internal_has_gamestatusmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return gamestatusmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InGameProjMeta::set_allocated_gamestatusmetaid(std::string* gamestatusmetaid) {
  if (gamestatusmetaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gamestatusmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamestatusmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InGameProjMeta.gamestatusmetaid)
}

// optional bytes homeprojmeta = 60;
inline bool InGameProjMeta::_internal_has_homeprojmeta() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InGameProjMeta::has_homeprojmeta() const {
  return _internal_has_homeprojmeta();
}
inline void InGameProjMeta::clear_homeprojmeta() {
  homeprojmeta_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& InGameProjMeta::homeprojmeta() const {
  // @@protoc_insertion_point(field_get:fantasybit.InGameProjMeta.homeprojmeta)
  return _internal_homeprojmeta();
}
inline void InGameProjMeta::set_homeprojmeta(const std::string& value) {
  _internal_set_homeprojmeta(value);
  // @@protoc_insertion_point(field_set:fantasybit.InGameProjMeta.homeprojmeta)
}
inline std::string* InGameProjMeta::mutable_homeprojmeta() {
  // @@protoc_insertion_point(field_mutable:fantasybit.InGameProjMeta.homeprojmeta)
  return _internal_mutable_homeprojmeta();
}
inline const std::string& InGameProjMeta::_internal_homeprojmeta() const {
  return homeprojmeta_.Get();
}
inline void InGameProjMeta::_internal_set_homeprojmeta(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  homeprojmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InGameProjMeta::set_homeprojmeta(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  homeprojmeta_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InGameProjMeta.homeprojmeta)
}
inline void InGameProjMeta::set_homeprojmeta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  homeprojmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.InGameProjMeta.homeprojmeta)
}
inline void InGameProjMeta::set_homeprojmeta(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  homeprojmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InGameProjMeta.homeprojmeta)
}
inline std::string* InGameProjMeta::_internal_mutable_homeprojmeta() {
  _has_bits_[0] |= 0x00000008u;
  return homeprojmeta_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InGameProjMeta::release_homeprojmeta() {
  // @@protoc_insertion_point(field_release:fantasybit.InGameProjMeta.homeprojmeta)
  if (!_internal_has_homeprojmeta()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return homeprojmeta_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InGameProjMeta::set_allocated_homeprojmeta(std::string* homeprojmeta) {
  if (homeprojmeta != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  homeprojmeta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), homeprojmeta,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InGameProjMeta.homeprojmeta)
}

// optional bytes awayprojmeta = 70;
inline bool InGameProjMeta::_internal_has_awayprojmeta() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InGameProjMeta::has_awayprojmeta() const {
  return _internal_has_awayprojmeta();
}
inline void InGameProjMeta::clear_awayprojmeta() {
  awayprojmeta_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& InGameProjMeta::awayprojmeta() const {
  // @@protoc_insertion_point(field_get:fantasybit.InGameProjMeta.awayprojmeta)
  return _internal_awayprojmeta();
}
inline void InGameProjMeta::set_awayprojmeta(const std::string& value) {
  _internal_set_awayprojmeta(value);
  // @@protoc_insertion_point(field_set:fantasybit.InGameProjMeta.awayprojmeta)
}
inline std::string* InGameProjMeta::mutable_awayprojmeta() {
  // @@protoc_insertion_point(field_mutable:fantasybit.InGameProjMeta.awayprojmeta)
  return _internal_mutable_awayprojmeta();
}
inline const std::string& InGameProjMeta::_internal_awayprojmeta() const {
  return awayprojmeta_.Get();
}
inline void InGameProjMeta::_internal_set_awayprojmeta(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  awayprojmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InGameProjMeta::set_awayprojmeta(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  awayprojmeta_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InGameProjMeta.awayprojmeta)
}
inline void InGameProjMeta::set_awayprojmeta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  awayprojmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.InGameProjMeta.awayprojmeta)
}
inline void InGameProjMeta::set_awayprojmeta(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  awayprojmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InGameProjMeta.awayprojmeta)
}
inline std::string* InGameProjMeta::_internal_mutable_awayprojmeta() {
  _has_bits_[0] |= 0x00000010u;
  return awayprojmeta_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InGameProjMeta::release_awayprojmeta() {
  // @@protoc_insertion_point(field_release:fantasybit.InGameProjMeta.awayprojmeta)
  if (!_internal_has_awayprojmeta()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return awayprojmeta_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InGameProjMeta::set_allocated_awayprojmeta(std::string* awayprojmeta) {
  if (awayprojmeta != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  awayprojmeta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), awayprojmeta,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InGameProjMeta.awayprojmeta)
}

// optional bytes gamedatametaid = 50;
inline bool InGameProjMeta::_internal_has_gamedatametaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InGameProjMeta::has_gamedatametaid() const {
  return _internal_has_gamedatametaid();
}
inline void InGameProjMeta::clear_gamedatametaid() {
  gamedatametaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& InGameProjMeta::gamedatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.InGameProjMeta.gamedatametaid)
  return _internal_gamedatametaid();
}
inline void InGameProjMeta::set_gamedatametaid(const std::string& value) {
  _internal_set_gamedatametaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.InGameProjMeta.gamedatametaid)
}
inline std::string* InGameProjMeta::mutable_gamedatametaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.InGameProjMeta.gamedatametaid)
  return _internal_mutable_gamedatametaid();
}
inline const std::string& InGameProjMeta::_internal_gamedatametaid() const {
  return gamedatametaid_.Get();
}
inline void InGameProjMeta::_internal_set_gamedatametaid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InGameProjMeta::set_gamedatametaid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  gamedatametaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InGameProjMeta.gamedatametaid)
}
inline void InGameProjMeta::set_gamedatametaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.InGameProjMeta.gamedatametaid)
}
inline void InGameProjMeta::set_gamedatametaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InGameProjMeta.gamedatametaid)
}
inline std::string* InGameProjMeta::_internal_mutable_gamedatametaid() {
  _has_bits_[0] |= 0x00000004u;
  return gamedatametaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InGameProjMeta::release_gamedatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.InGameProjMeta.gamedatametaid)
  if (!_internal_has_gamedatametaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return gamedatametaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InGameProjMeta::set_allocated_gamedatametaid(std::string* gamedatametaid) {
  if (gamedatametaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gamedatametaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamedatametaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InGameProjMeta.gamedatametaid)
}

// -------------------------------------------------------------------

// GameResultsMeta

// optional string gameid = 20;
inline bool GameResultsMeta::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameResultsMeta::has_gameid() const {
  return _internal_has_gameid();
}
inline void GameResultsMeta::clear_gameid() {
  gameid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameResultsMeta::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResultsMeta.gameid)
  return _internal_gameid();
}
inline void GameResultsMeta::set_gameid(const std::string& value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResultsMeta.gameid)
}
inline std::string* GameResultsMeta::mutable_gameid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResultsMeta.gameid)
  return _internal_mutable_gameid();
}
inline const std::string& GameResultsMeta::_internal_gameid() const {
  return gameid_.Get();
}
inline void GameResultsMeta::_internal_set_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameResultsMeta::set_gameid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameResultsMeta.gameid)
}
inline void GameResultsMeta::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResultsMeta.gameid)
}
inline void GameResultsMeta::set_gameid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResultsMeta.gameid)
}
inline std::string* GameResultsMeta::_internal_mutable_gameid() {
  _has_bits_[0] |= 0x00000001u;
  return gameid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameResultsMeta::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameResultsMeta.gameid)
  if (!_internal_has_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameResultsMeta::set_allocated_gameid(std::string* gameid) {
  if (gameid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResultsMeta.gameid)
}

// optional bytes gamestatusmetaid = 40;
inline bool GameResultsMeta::_internal_has_gamestatusmetaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameResultsMeta::has_gamestatusmetaid() const {
  return _internal_has_gamestatusmetaid();
}
inline void GameResultsMeta::clear_gamestatusmetaid() {
  gamestatusmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GameResultsMeta::gamestatusmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResultsMeta.gamestatusmetaid)
  return _internal_gamestatusmetaid();
}
inline void GameResultsMeta::set_gamestatusmetaid(const std::string& value) {
  _internal_set_gamestatusmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResultsMeta.gamestatusmetaid)
}
inline std::string* GameResultsMeta::mutable_gamestatusmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResultsMeta.gamestatusmetaid)
  return _internal_mutable_gamestatusmetaid();
}
inline const std::string& GameResultsMeta::_internal_gamestatusmetaid() const {
  return gamestatusmetaid_.Get();
}
inline void GameResultsMeta::_internal_set_gamestatusmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameResultsMeta::set_gamestatusmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameResultsMeta.gamestatusmetaid)
}
inline void GameResultsMeta::set_gamestatusmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResultsMeta.gamestatusmetaid)
}
inline void GameResultsMeta::set_gamestatusmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResultsMeta.gamestatusmetaid)
}
inline std::string* GameResultsMeta::_internal_mutable_gamestatusmetaid() {
  _has_bits_[0] |= 0x00000002u;
  return gamestatusmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameResultsMeta::release_gamestatusmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameResultsMeta.gamestatusmetaid)
  if (!_internal_has_gamestatusmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return gamestatusmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameResultsMeta::set_allocated_gamestatusmetaid(std::string* gamestatusmetaid) {
  if (gamestatusmetaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gamestatusmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamestatusmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResultsMeta.gamestatusmetaid)
}

// optional bytes homeresultmeta = 60;
inline bool GameResultsMeta::_internal_has_homeresultmeta() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameResultsMeta::has_homeresultmeta() const {
  return _internal_has_homeresultmeta();
}
inline void GameResultsMeta::clear_homeresultmeta() {
  homeresultmeta_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& GameResultsMeta::homeresultmeta() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResultsMeta.homeresultmeta)
  return _internal_homeresultmeta();
}
inline void GameResultsMeta::set_homeresultmeta(const std::string& value) {
  _internal_set_homeresultmeta(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResultsMeta.homeresultmeta)
}
inline std::string* GameResultsMeta::mutable_homeresultmeta() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResultsMeta.homeresultmeta)
  return _internal_mutable_homeresultmeta();
}
inline const std::string& GameResultsMeta::_internal_homeresultmeta() const {
  return homeresultmeta_.Get();
}
inline void GameResultsMeta::_internal_set_homeresultmeta(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  homeresultmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameResultsMeta::set_homeresultmeta(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  homeresultmeta_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameResultsMeta.homeresultmeta)
}
inline void GameResultsMeta::set_homeresultmeta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  homeresultmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResultsMeta.homeresultmeta)
}
inline void GameResultsMeta::set_homeresultmeta(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  homeresultmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResultsMeta.homeresultmeta)
}
inline std::string* GameResultsMeta::_internal_mutable_homeresultmeta() {
  _has_bits_[0] |= 0x00000008u;
  return homeresultmeta_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameResultsMeta::release_homeresultmeta() {
  // @@protoc_insertion_point(field_release:fantasybit.GameResultsMeta.homeresultmeta)
  if (!_internal_has_homeresultmeta()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return homeresultmeta_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameResultsMeta::set_allocated_homeresultmeta(std::string* homeresultmeta) {
  if (homeresultmeta != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  homeresultmeta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), homeresultmeta,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResultsMeta.homeresultmeta)
}

// optional bytes awayresultmeta = 70;
inline bool GameResultsMeta::_internal_has_awayresultmeta() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GameResultsMeta::has_awayresultmeta() const {
  return _internal_has_awayresultmeta();
}
inline void GameResultsMeta::clear_awayresultmeta() {
  awayresultmeta_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& GameResultsMeta::awayresultmeta() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResultsMeta.awayresultmeta)
  return _internal_awayresultmeta();
}
inline void GameResultsMeta::set_awayresultmeta(const std::string& value) {
  _internal_set_awayresultmeta(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResultsMeta.awayresultmeta)
}
inline std::string* GameResultsMeta::mutable_awayresultmeta() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResultsMeta.awayresultmeta)
  return _internal_mutable_awayresultmeta();
}
inline const std::string& GameResultsMeta::_internal_awayresultmeta() const {
  return awayresultmeta_.Get();
}
inline void GameResultsMeta::_internal_set_awayresultmeta(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  awayresultmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameResultsMeta::set_awayresultmeta(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  awayresultmeta_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameResultsMeta.awayresultmeta)
}
inline void GameResultsMeta::set_awayresultmeta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  awayresultmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResultsMeta.awayresultmeta)
}
inline void GameResultsMeta::set_awayresultmeta(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  awayresultmeta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResultsMeta.awayresultmeta)
}
inline std::string* GameResultsMeta::_internal_mutable_awayresultmeta() {
  _has_bits_[0] |= 0x00000010u;
  return awayresultmeta_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameResultsMeta::release_awayresultmeta() {
  // @@protoc_insertion_point(field_release:fantasybit.GameResultsMeta.awayresultmeta)
  if (!_internal_has_awayresultmeta()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return awayresultmeta_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameResultsMeta::set_allocated_awayresultmeta(std::string* awayresultmeta) {
  if (awayresultmeta != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  awayresultmeta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), awayresultmeta,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResultsMeta.awayresultmeta)
}

// optional bytes resultdatametaid = 50;
inline bool GameResultsMeta::_internal_has_resultdatametaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameResultsMeta::has_resultdatametaid() const {
  return _internal_has_resultdatametaid();
}
inline void GameResultsMeta::clear_resultdatametaid() {
  resultdatametaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GameResultsMeta::resultdatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResultsMeta.resultdatametaid)
  return _internal_resultdatametaid();
}
inline void GameResultsMeta::set_resultdatametaid(const std::string& value) {
  _internal_set_resultdatametaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResultsMeta.resultdatametaid)
}
inline std::string* GameResultsMeta::mutable_resultdatametaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResultsMeta.resultdatametaid)
  return _internal_mutable_resultdatametaid();
}
inline const std::string& GameResultsMeta::_internal_resultdatametaid() const {
  return resultdatametaid_.Get();
}
inline void GameResultsMeta::_internal_set_resultdatametaid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameResultsMeta::set_resultdatametaid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  resultdatametaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameResultsMeta.resultdatametaid)
}
inline void GameResultsMeta::set_resultdatametaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResultsMeta.resultdatametaid)
}
inline void GameResultsMeta::set_resultdatametaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResultsMeta.resultdatametaid)
}
inline std::string* GameResultsMeta::_internal_mutable_resultdatametaid() {
  _has_bits_[0] |= 0x00000004u;
  return resultdatametaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameResultsMeta::release_resultdatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameResultsMeta.resultdatametaid)
  if (!_internal_has_resultdatametaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return resultdatametaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameResultsMeta::set_allocated_resultdatametaid(std::string* resultdatametaid) {
  if (resultdatametaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  resultdatametaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resultdatametaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResultsMeta.resultdatametaid)
}

// -------------------------------------------------------------------

// GameStatusMeta

// optional string id = 1;
inline bool GameStatusMeta::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameStatusMeta::has_id() const {
  return _internal_has_id();
}
inline void GameStatusMeta::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameStatusMeta::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.id)
  return _internal_id();
}
inline void GameStatusMeta::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.id)
}
inline std::string* GameStatusMeta::mutable_id() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.id)
  return _internal_mutable_id();
}
inline const std::string& GameStatusMeta::_internal_id() const {
  return id_.Get();
}
inline void GameStatusMeta::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameStatusMeta::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameStatusMeta.id)
}
inline void GameStatusMeta::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameStatusMeta.id)
}
inline void GameStatusMeta::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameStatusMeta.id)
}
inline std::string* GameStatusMeta::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameStatusMeta::release_id() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameStatusMeta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.id)
}

// optional int32 week = 2;
inline bool GameStatusMeta::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GameStatusMeta::has_week() const {
  return _internal_has_week();
}
inline void GameStatusMeta::clear_week() {
  week_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStatusMeta::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStatusMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.week)
  return _internal_week();
}
inline void GameStatusMeta::_internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  week_ = value;
}
inline void GameStatusMeta::set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.week)
}

// optional .fantasybit.GameInfo gameinfo = 10;
inline bool GameStatusMeta::_internal_has_gameinfo() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || gameinfo_ != nullptr);
  return value;
}
inline bool GameStatusMeta::has_gameinfo() const {
  return _internal_has_gameinfo();
}
inline const ::fantasybit::GameInfo& GameStatusMeta::_internal_gameinfo() const {
  const ::fantasybit::GameInfo* p = gameinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::GameInfo*>(
      &::fantasybit::_GameInfo_default_instance_);
}
inline const ::fantasybit::GameInfo& GameStatusMeta::gameinfo() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.gameinfo)
  return _internal_gameinfo();
}
inline void GameStatusMeta::unsafe_arena_set_allocated_gameinfo(
    ::fantasybit::GameInfo* gameinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameinfo_);
  }
  gameinfo_ = gameinfo;
  if (gameinfo) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GameStatusMeta.gameinfo)
}
inline ::fantasybit::GameInfo* GameStatusMeta::release_gameinfo() {
  _has_bits_[0] &= ~0x00000020u;
  ::fantasybit::GameInfo* temp = gameinfo_;
  gameinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::GameInfo* GameStatusMeta::unsafe_arena_release_gameinfo() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.gameinfo)
  _has_bits_[0] &= ~0x00000020u;
  ::fantasybit::GameInfo* temp = gameinfo_;
  gameinfo_ = nullptr;
  return temp;
}
inline ::fantasybit::GameInfo* GameStatusMeta::_internal_mutable_gameinfo() {
  _has_bits_[0] |= 0x00000020u;
  if (gameinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::GameInfo>(GetArena());
    gameinfo_ = p;
  }
  return gameinfo_;
}
inline ::fantasybit::GameInfo* GameStatusMeta::mutable_gameinfo() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.gameinfo)
  return _internal_mutable_gameinfo();
}
inline void GameStatusMeta::set_allocated_gameinfo(::fantasybit::GameInfo* gameinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameinfo_);
  }
  if (gameinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameinfo)->GetArena();
    if (message_arena != submessage_arena) {
      gameinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  gameinfo_ = gameinfo;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.gameinfo)
}

// optional .fantasybit.GameStatus gamesatus = 20;
inline bool GameStatusMeta::_internal_has_gamesatus() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || gamesatus_ != nullptr);
  return value;
}
inline bool GameStatusMeta::has_gamesatus() const {
  return _internal_has_gamesatus();
}
inline const ::fantasybit::GameStatus& GameStatusMeta::_internal_gamesatus() const {
  const ::fantasybit::GameStatus* p = gamesatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::GameStatus*>(
      &::fantasybit::_GameStatus_default_instance_);
}
inline const ::fantasybit::GameStatus& GameStatusMeta::gamesatus() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.gamesatus)
  return _internal_gamesatus();
}
inline void GameStatusMeta::unsafe_arena_set_allocated_gamesatus(
    ::fantasybit::GameStatus* gamesatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamesatus_);
  }
  gamesatus_ = gamesatus;
  if (gamesatus) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GameStatusMeta.gamesatus)
}
inline ::fantasybit::GameStatus* GameStatusMeta::release_gamesatus() {
  _has_bits_[0] &= ~0x00000040u;
  ::fantasybit::GameStatus* temp = gamesatus_;
  gamesatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::GameStatus* GameStatusMeta::unsafe_arena_release_gamesatus() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.gamesatus)
  _has_bits_[0] &= ~0x00000040u;
  ::fantasybit::GameStatus* temp = gamesatus_;
  gamesatus_ = nullptr;
  return temp;
}
inline ::fantasybit::GameStatus* GameStatusMeta::_internal_mutable_gamesatus() {
  _has_bits_[0] |= 0x00000040u;
  if (gamesatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::GameStatus>(GetArena());
    gamesatus_ = p;
  }
  return gamesatus_;
}
inline ::fantasybit::GameStatus* GameStatusMeta::mutable_gamesatus() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.gamesatus)
  return _internal_mutable_gamesatus();
}
inline void GameStatusMeta::set_allocated_gamesatus(::fantasybit::GameStatus* gamesatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamesatus_);
  }
  if (gamesatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamesatus)->GetArena();
    if (message_arena != submessage_arena) {
      gamesatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamesatus, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  gamesatus_ = gamesatus;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.gamesatus)
}

// optional bytes gamemetaid = 30;
inline bool GameStatusMeta::_internal_has_gamemetaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameStatusMeta::has_gamemetaid() const {
  return _internal_has_gamemetaid();
}
inline void GameStatusMeta::clear_gamemetaid() {
  gamemetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GameStatusMeta::gamemetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.gamemetaid)
  return _internal_gamemetaid();
}
inline void GameStatusMeta::set_gamemetaid(const std::string& value) {
  _internal_set_gamemetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.gamemetaid)
}
inline std::string* GameStatusMeta::mutable_gamemetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.gamemetaid)
  return _internal_mutable_gamemetaid();
}
inline const std::string& GameStatusMeta::_internal_gamemetaid() const {
  return gamemetaid_.Get();
}
inline void GameStatusMeta::_internal_set_gamemetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gamemetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameStatusMeta::set_gamemetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  gamemetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameStatusMeta.gamemetaid)
}
inline void GameStatusMeta::set_gamemetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  gamemetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameStatusMeta.gamemetaid)
}
inline void GameStatusMeta::set_gamemetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  gamemetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameStatusMeta.gamemetaid)
}
inline std::string* GameStatusMeta::_internal_mutable_gamemetaid() {
  _has_bits_[0] |= 0x00000002u;
  return gamemetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameStatusMeta::release_gamemetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.gamemetaid)
  if (!_internal_has_gamemetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return gamemetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameStatusMeta::set_allocated_gamemetaid(std::string* gamemetaid) {
  if (gamemetaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gamemetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamemetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.gamemetaid)
}

// optional bytes datametaid = 40;
inline bool GameStatusMeta::_internal_has_datametaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameStatusMeta::has_datametaid() const {
  return _internal_has_datametaid();
}
inline void GameStatusMeta::clear_datametaid() {
  datametaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GameStatusMeta::datametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.datametaid)
  return _internal_datametaid();
}
inline void GameStatusMeta::set_datametaid(const std::string& value) {
  _internal_set_datametaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.datametaid)
}
inline std::string* GameStatusMeta::mutable_datametaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.datametaid)
  return _internal_mutable_datametaid();
}
inline const std::string& GameStatusMeta::_internal_datametaid() const {
  return datametaid_.Get();
}
inline void GameStatusMeta::_internal_set_datametaid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  datametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameStatusMeta::set_datametaid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  datametaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameStatusMeta.datametaid)
}
inline void GameStatusMeta::set_datametaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  datametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameStatusMeta.datametaid)
}
inline void GameStatusMeta::set_datametaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  datametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameStatusMeta.datametaid)
}
inline std::string* GameStatusMeta::_internal_mutable_datametaid() {
  _has_bits_[0] |= 0x00000004u;
  return datametaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameStatusMeta::release_datametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.datametaid)
  if (!_internal_has_datametaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return datametaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameStatusMeta::set_allocated_datametaid(std::string* datametaid) {
  if (datametaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  datametaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datametaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.datametaid)
}

// optional bytes prev = 50;
inline bool GameStatusMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameStatusMeta::has_prev() const {
  return _internal_has_prev();
}
inline void GameStatusMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& GameStatusMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.prev)
  return _internal_prev();
}
inline void GameStatusMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.prev)
}
inline std::string* GameStatusMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& GameStatusMeta::_internal_prev() const {
  return prev_.Get();
}
inline void GameStatusMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameStatusMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameStatusMeta.prev)
}
inline void GameStatusMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameStatusMeta.prev)
}
inline void GameStatusMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameStatusMeta.prev)
}
inline std::string* GameStatusMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000008u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameStatusMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameStatusMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.prev)
}

// optional bytes next = 60;
inline bool GameStatusMeta::_internal_has_next() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GameStatusMeta::has_next() const {
  return _internal_has_next();
}
inline void GameStatusMeta::clear_next() {
  next_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& GameStatusMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.next)
  return _internal_next();
}
inline void GameStatusMeta::set_next(const std::string& value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.next)
}
inline std::string* GameStatusMeta::mutable_next() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.next)
  return _internal_mutable_next();
}
inline const std::string& GameStatusMeta::_internal_next() const {
  return next_.Get();
}
inline void GameStatusMeta::_internal_set_next(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameStatusMeta::set_next(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  next_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameStatusMeta.next)
}
inline void GameStatusMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameStatusMeta.next)
}
inline void GameStatusMeta::set_next(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameStatusMeta.next)
}
inline std::string* GameStatusMeta::_internal_mutable_next() {
  _has_bits_[0] |= 0x00000010u;
  return next_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameStatusMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.next)
  if (!_internal_has_next()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return next_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameStatusMeta::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  next_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.next)
}

// optional int32 season = 70;
inline bool GameStatusMeta::_internal_has_season() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GameStatusMeta::has_season() const {
  return _internal_has_season();
}
inline void GameStatusMeta::clear_season() {
  season_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStatusMeta::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStatusMeta::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.season)
  return _internal_season();
}
inline void GameStatusMeta::_internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  season_ = value;
}
inline void GameStatusMeta::set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.season)
}

// -------------------------------------------------------------------

// TeamProjMeta

// optional string gameid = 20;
inline bool TeamProjMeta::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TeamProjMeta::has_gameid() const {
  return _internal_has_gameid();
}
inline void TeamProjMeta::clear_gameid() {
  gameid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TeamProjMeta::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.gameid)
  return _internal_gameid();
}
inline void TeamProjMeta::set_gameid(const std::string& value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.gameid)
}
inline std::string* TeamProjMeta::mutable_gameid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamProjMeta.gameid)
  return _internal_mutable_gameid();
}
inline const std::string& TeamProjMeta::_internal_gameid() const {
  return gameid_.Get();
}
inline void TeamProjMeta::_internal_set_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamProjMeta::set_gameid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamProjMeta.gameid)
}
inline void TeamProjMeta::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamProjMeta.gameid)
}
inline void TeamProjMeta::set_gameid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamProjMeta.gameid)
}
inline std::string* TeamProjMeta::_internal_mutable_gameid() {
  _has_bits_[0] |= 0x00000001u;
  return gameid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamProjMeta::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamProjMeta.gameid)
  if (!_internal_has_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamProjMeta::set_allocated_gameid(std::string* gameid) {
  if (gameid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamProjMeta.gameid)
}

// optional string team = 30;
inline bool TeamProjMeta::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TeamProjMeta::has_team() const {
  return _internal_has_team();
}
inline void TeamProjMeta::clear_team() {
  team_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TeamProjMeta::team() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.team)
  return _internal_team();
}
inline void TeamProjMeta::set_team(const std::string& value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.team)
}
inline std::string* TeamProjMeta::mutable_team() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamProjMeta.team)
  return _internal_mutable_team();
}
inline const std::string& TeamProjMeta::_internal_team() const {
  return team_.Get();
}
inline void TeamProjMeta::_internal_set_team(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamProjMeta::set_team(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  team_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamProjMeta.team)
}
inline void TeamProjMeta::set_team(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamProjMeta.team)
}
inline void TeamProjMeta::set_team(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamProjMeta.team)
}
inline std::string* TeamProjMeta::_internal_mutable_team() {
  _has_bits_[0] |= 0x00000002u;
  return team_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamProjMeta::release_team() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamProjMeta.team)
  if (!_internal_has_team()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamProjMeta::set_allocated_team(std::string* team) {
  if (team != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamProjMeta.team)
}

// optional uint32 kickofftime = 40;
inline bool TeamProjMeta::_internal_has_kickofftime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TeamProjMeta::has_kickofftime() const {
  return _internal_has_kickofftime();
}
inline void TeamProjMeta::clear_kickofftime() {
  kickofftime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamProjMeta::_internal_kickofftime() const {
  return kickofftime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamProjMeta::kickofftime() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.kickofftime)
  return _internal_kickofftime();
}
inline void TeamProjMeta::_internal_set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  kickofftime_ = value;
}
inline void TeamProjMeta::set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kickofftime(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.kickofftime)
}

// optional uint32 week = 50;
inline bool TeamProjMeta::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TeamProjMeta::has_week() const {
  return _internal_has_week();
}
inline void TeamProjMeta::clear_week() {
  week_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamProjMeta::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamProjMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.week)
  return _internal_week();
}
inline void TeamProjMeta::_internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  week_ = value;
}
inline void TeamProjMeta::set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.week)
}

// optional bytes gameplayerprojmetaroot = 60;
inline bool TeamProjMeta::_internal_has_gameplayerprojmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TeamProjMeta::has_gameplayerprojmetaroot() const {
  return _internal_has_gameplayerprojmetaroot();
}
inline void TeamProjMeta::clear_gameplayerprojmetaroot() {
  gameplayerprojmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TeamProjMeta::gameplayerprojmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
  return _internal_gameplayerprojmetaroot();
}
inline void TeamProjMeta::set_gameplayerprojmetaroot(const std::string& value) {
  _internal_set_gameplayerprojmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
}
inline std::string* TeamProjMeta::mutable_gameplayerprojmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
  return _internal_mutable_gameplayerprojmetaroot();
}
inline const std::string& TeamProjMeta::_internal_gameplayerprojmetaroot() const {
  return gameplayerprojmetaroot_.Get();
}
inline void TeamProjMeta::_internal_set_gameplayerprojmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  gameplayerprojmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamProjMeta::set_gameplayerprojmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  gameplayerprojmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
}
inline void TeamProjMeta::set_gameplayerprojmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  gameplayerprojmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
}
inline void TeamProjMeta::set_gameplayerprojmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  gameplayerprojmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
}
inline std::string* TeamProjMeta::_internal_mutable_gameplayerprojmetaroot() {
  _has_bits_[0] |= 0x00000004u;
  return gameplayerprojmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamProjMeta::release_gameplayerprojmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
  if (!_internal_has_gameplayerprojmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return gameplayerprojmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamProjMeta::set_allocated_gameplayerprojmetaroot(std::string* gameplayerprojmetaroot) {
  if (gameplayerprojmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gameplayerprojmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameplayerprojmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
}

// optional bytes gamedatametaid = 70;
inline bool TeamProjMeta::_internal_has_gamedatametaid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TeamProjMeta::has_gamedatametaid() const {
  return _internal_has_gamedatametaid();
}
inline void TeamProjMeta::clear_gamedatametaid() {
  gamedatametaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TeamProjMeta::gamedatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.gamedatametaid)
  return _internal_gamedatametaid();
}
inline void TeamProjMeta::set_gamedatametaid(const std::string& value) {
  _internal_set_gamedatametaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.gamedatametaid)
}
inline std::string* TeamProjMeta::mutable_gamedatametaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamProjMeta.gamedatametaid)
  return _internal_mutable_gamedatametaid();
}
inline const std::string& TeamProjMeta::_internal_gamedatametaid() const {
  return gamedatametaid_.Get();
}
inline void TeamProjMeta::_internal_set_gamedatametaid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamProjMeta::set_gamedatametaid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  gamedatametaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamProjMeta.gamedatametaid)
}
inline void TeamProjMeta::set_gamedatametaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamProjMeta.gamedatametaid)
}
inline void TeamProjMeta::set_gamedatametaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamProjMeta.gamedatametaid)
}
inline std::string* TeamProjMeta::_internal_mutable_gamedatametaid() {
  _has_bits_[0] |= 0x00000008u;
  return gamedatametaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamProjMeta::release_gamedatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamProjMeta.gamedatametaid)
  if (!_internal_has_gamedatametaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return gamedatametaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamProjMeta::set_allocated_gamedatametaid(std::string* gamedatametaid) {
  if (gamedatametaid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gamedatametaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamedatametaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamProjMeta.gamedatametaid)
}

// -------------------------------------------------------------------

// TeamResultMeta

// optional string gameid = 20;
inline bool TeamResultMeta::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TeamResultMeta::has_gameid() const {
  return _internal_has_gameid();
}
inline void TeamResultMeta::clear_gameid() {
  gameid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TeamResultMeta::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.gameid)
  return _internal_gameid();
}
inline void TeamResultMeta::set_gameid(const std::string& value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.gameid)
}
inline std::string* TeamResultMeta::mutable_gameid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamResultMeta.gameid)
  return _internal_mutable_gameid();
}
inline const std::string& TeamResultMeta::_internal_gameid() const {
  return gameid_.Get();
}
inline void TeamResultMeta::_internal_set_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamResultMeta::set_gameid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamResultMeta.gameid)
}
inline void TeamResultMeta::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamResultMeta.gameid)
}
inline void TeamResultMeta::set_gameid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamResultMeta.gameid)
}
inline std::string* TeamResultMeta::_internal_mutable_gameid() {
  _has_bits_[0] |= 0x00000001u;
  return gameid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamResultMeta::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamResultMeta.gameid)
  if (!_internal_has_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamResultMeta::set_allocated_gameid(std::string* gameid) {
  if (gameid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamResultMeta.gameid)
}

// optional string team = 30;
inline bool TeamResultMeta::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TeamResultMeta::has_team() const {
  return _internal_has_team();
}
inline void TeamResultMeta::clear_team() {
  team_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TeamResultMeta::team() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.team)
  return _internal_team();
}
inline void TeamResultMeta::set_team(const std::string& value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.team)
}
inline std::string* TeamResultMeta::mutable_team() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamResultMeta.team)
  return _internal_mutable_team();
}
inline const std::string& TeamResultMeta::_internal_team() const {
  return team_.Get();
}
inline void TeamResultMeta::_internal_set_team(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamResultMeta::set_team(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  team_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamResultMeta.team)
}
inline void TeamResultMeta::set_team(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamResultMeta.team)
}
inline void TeamResultMeta::set_team(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamResultMeta.team)
}
inline std::string* TeamResultMeta::_internal_mutable_team() {
  _has_bits_[0] |= 0x00000002u;
  return team_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamResultMeta::release_team() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamResultMeta.team)
  if (!_internal_has_team()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamResultMeta::set_allocated_team(std::string* team) {
  if (team != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamResultMeta.team)
}

// optional uint32 kickofftime = 40;
inline bool TeamResultMeta::_internal_has_kickofftime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TeamResultMeta::has_kickofftime() const {
  return _internal_has_kickofftime();
}
inline void TeamResultMeta::clear_kickofftime() {
  kickofftime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamResultMeta::_internal_kickofftime() const {
  return kickofftime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamResultMeta::kickofftime() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.kickofftime)
  return _internal_kickofftime();
}
inline void TeamResultMeta::_internal_set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  kickofftime_ = value;
}
inline void TeamResultMeta::set_kickofftime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kickofftime(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.kickofftime)
}

// optional uint32 week = 50;
inline bool TeamResultMeta::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TeamResultMeta::has_week() const {
  return _internal_has_week();
}
inline void TeamResultMeta::clear_week() {
  week_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamResultMeta::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamResultMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.week)
  return _internal_week();
}
inline void TeamResultMeta::_internal_set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  week_ = value;
}
inline void TeamResultMeta::set_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.week)
}

// optional bytes playerresultmetaroot = 60;
inline bool TeamResultMeta::_internal_has_playerresultmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TeamResultMeta::has_playerresultmetaroot() const {
  return _internal_has_playerresultmetaroot();
}
inline void TeamResultMeta::clear_playerresultmetaroot() {
  playerresultmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TeamResultMeta::playerresultmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.playerresultmetaroot)
  return _internal_playerresultmetaroot();
}
inline void TeamResultMeta::set_playerresultmetaroot(const std::string& value) {
  _internal_set_playerresultmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.playerresultmetaroot)
}
inline std::string* TeamResultMeta::mutable_playerresultmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamResultMeta.playerresultmetaroot)
  return _internal_mutable_playerresultmetaroot();
}
inline const std::string& TeamResultMeta::_internal_playerresultmetaroot() const {
  return playerresultmetaroot_.Get();
}
inline void TeamResultMeta::_internal_set_playerresultmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  playerresultmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamResultMeta::set_playerresultmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  playerresultmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamResultMeta.playerresultmetaroot)
}
inline void TeamResultMeta::set_playerresultmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  playerresultmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamResultMeta.playerresultmetaroot)
}
inline void TeamResultMeta::set_playerresultmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  playerresultmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamResultMeta.playerresultmetaroot)
}
inline std::string* TeamResultMeta::_internal_mutable_playerresultmetaroot() {
  _has_bits_[0] |= 0x00000004u;
  return playerresultmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamResultMeta::release_playerresultmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamResultMeta.playerresultmetaroot)
  if (!_internal_has_playerresultmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return playerresultmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamResultMeta::set_allocated_playerresultmetaroot(std::string* playerresultmetaroot) {
  if (playerresultmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  playerresultmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerresultmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamResultMeta.playerresultmetaroot)
}

// optional bytes resultdatametaid = 70;
inline bool TeamResultMeta::_internal_has_resultdatametaid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TeamResultMeta::has_resultdatametaid() const {
  return _internal_has_resultdatametaid();
}
inline void TeamResultMeta::clear_resultdatametaid() {
  resultdatametaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TeamResultMeta::resultdatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.resultdatametaid)
  return _internal_resultdatametaid();
}
inline void TeamResultMeta::set_resultdatametaid(const std::string& value) {
  _internal_set_resultdatametaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.resultdatametaid)
}
inline std::string* TeamResultMeta::mutable_resultdatametaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamResultMeta.resultdatametaid)
  return _internal_mutable_resultdatametaid();
}
inline const std::string& TeamResultMeta::_internal_resultdatametaid() const {
  return resultdatametaid_.Get();
}
inline void TeamResultMeta::_internal_set_resultdatametaid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamResultMeta::set_resultdatametaid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  resultdatametaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamResultMeta.resultdatametaid)
}
inline void TeamResultMeta::set_resultdatametaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamResultMeta.resultdatametaid)
}
inline void TeamResultMeta::set_resultdatametaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamResultMeta.resultdatametaid)
}
inline std::string* TeamResultMeta::_internal_mutable_resultdatametaid() {
  _has_bits_[0] |= 0x00000008u;
  return resultdatametaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamResultMeta::release_resultdatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamResultMeta.resultdatametaid)
  if (!_internal_has_resultdatametaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return resultdatametaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamResultMeta::set_allocated_resultdatametaid(std::string* resultdatametaid) {
  if (resultdatametaid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  resultdatametaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resultdatametaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamResultMeta.resultdatametaid)
}

// -------------------------------------------------------------------

// GamePlayerProjMeta

// optional string playerid = 20;
inline bool GamePlayerProjMeta::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GamePlayerProjMeta::has_playerid() const {
  return _internal_has_playerid();
}
inline void GamePlayerProjMeta::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GamePlayerProjMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GamePlayerProjMeta.playerid)
  return _internal_playerid();
}
inline void GamePlayerProjMeta::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GamePlayerProjMeta.playerid)
}
inline std::string* GamePlayerProjMeta::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GamePlayerProjMeta.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& GamePlayerProjMeta::_internal_playerid() const {
  return playerid_.Get();
}
inline void GamePlayerProjMeta::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GamePlayerProjMeta::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GamePlayerProjMeta.playerid)
}
inline void GamePlayerProjMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GamePlayerProjMeta.playerid)
}
inline void GamePlayerProjMeta::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GamePlayerProjMeta.playerid)
}
inline std::string* GamePlayerProjMeta::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000001u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GamePlayerProjMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.GamePlayerProjMeta.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GamePlayerProjMeta::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GamePlayerProjMeta.playerid)
}

// optional bytes gamestatusmetaid = 30;
inline bool GamePlayerProjMeta::_internal_has_gamestatusmetaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GamePlayerProjMeta::has_gamestatusmetaid() const {
  return _internal_has_gamestatusmetaid();
}
inline void GamePlayerProjMeta::clear_gamestatusmetaid() {
  gamestatusmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GamePlayerProjMeta::gamestatusmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
  return _internal_gamestatusmetaid();
}
inline void GamePlayerProjMeta::set_gamestatusmetaid(const std::string& value) {
  _internal_set_gamestatusmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
}
inline std::string* GamePlayerProjMeta::mutable_gamestatusmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
  return _internal_mutable_gamestatusmetaid();
}
inline const std::string& GamePlayerProjMeta::_internal_gamestatusmetaid() const {
  return gamestatusmetaid_.Get();
}
inline void GamePlayerProjMeta::_internal_set_gamestatusmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GamePlayerProjMeta::set_gamestatusmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
}
inline void GamePlayerProjMeta::set_gamestatusmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
}
inline void GamePlayerProjMeta::set_gamestatusmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
}
inline std::string* GamePlayerProjMeta::_internal_mutable_gamestatusmetaid() {
  _has_bits_[0] |= 0x00000002u;
  return gamestatusmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GamePlayerProjMeta::release_gamestatusmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
  if (!_internal_has_gamestatusmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return gamestatusmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GamePlayerProjMeta::set_allocated_gamestatusmetaid(std::string* gamestatusmetaid) {
  if (gamestatusmetaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gamestatusmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamestatusmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
}

// optional bytes projmetaplayerroot = 60;
inline bool GamePlayerProjMeta::_internal_has_projmetaplayerroot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GamePlayerProjMeta::has_projmetaplayerroot() const {
  return _internal_has_projmetaplayerroot();
}
inline void GamePlayerProjMeta::clear_projmetaplayerroot() {
  projmetaplayerroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GamePlayerProjMeta::projmetaplayerroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
  return _internal_projmetaplayerroot();
}
inline void GamePlayerProjMeta::set_projmetaplayerroot(const std::string& value) {
  _internal_set_projmetaplayerroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
}
inline std::string* GamePlayerProjMeta::mutable_projmetaplayerroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
  return _internal_mutable_projmetaplayerroot();
}
inline const std::string& GamePlayerProjMeta::_internal_projmetaplayerroot() const {
  return projmetaplayerroot_.Get();
}
inline void GamePlayerProjMeta::_internal_set_projmetaplayerroot(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  projmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GamePlayerProjMeta::set_projmetaplayerroot(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  projmetaplayerroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
}
inline void GamePlayerProjMeta::set_projmetaplayerroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  projmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
}
inline void GamePlayerProjMeta::set_projmetaplayerroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  projmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
}
inline std::string* GamePlayerProjMeta::_internal_mutable_projmetaplayerroot() {
  _has_bits_[0] |= 0x00000004u;
  return projmetaplayerroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GamePlayerProjMeta::release_projmetaplayerroot() {
  // @@protoc_insertion_point(field_release:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
  if (!_internal_has_projmetaplayerroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return projmetaplayerroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GamePlayerProjMeta::set_allocated_projmetaplayerroot(std::string* projmetaplayerroot) {
  if (projmetaplayerroot != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  projmetaplayerroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), projmetaplayerroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
}

// optional bytes posmetaplayerroot = 70;
inline bool GamePlayerProjMeta::_internal_has_posmetaplayerroot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GamePlayerProjMeta::has_posmetaplayerroot() const {
  return _internal_has_posmetaplayerroot();
}
inline void GamePlayerProjMeta::clear_posmetaplayerroot() {
  posmetaplayerroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& GamePlayerProjMeta::posmetaplayerroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
  return _internal_posmetaplayerroot();
}
inline void GamePlayerProjMeta::set_posmetaplayerroot(const std::string& value) {
  _internal_set_posmetaplayerroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
}
inline std::string* GamePlayerProjMeta::mutable_posmetaplayerroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
  return _internal_mutable_posmetaplayerroot();
}
inline const std::string& GamePlayerProjMeta::_internal_posmetaplayerroot() const {
  return posmetaplayerroot_.Get();
}
inline void GamePlayerProjMeta::_internal_set_posmetaplayerroot(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  posmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GamePlayerProjMeta::set_posmetaplayerroot(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  posmetaplayerroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
}
inline void GamePlayerProjMeta::set_posmetaplayerroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  posmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
}
inline void GamePlayerProjMeta::set_posmetaplayerroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  posmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
}
inline std::string* GamePlayerProjMeta::_internal_mutable_posmetaplayerroot() {
  _has_bits_[0] |= 0x00000008u;
  return posmetaplayerroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GamePlayerProjMeta::release_posmetaplayerroot() {
  // @@protoc_insertion_point(field_release:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
  if (!_internal_has_posmetaplayerroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return posmetaplayerroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GamePlayerProjMeta::set_allocated_posmetaplayerroot(std::string* posmetaplayerroot) {
  if (posmetaplayerroot != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  posmetaplayerroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), posmetaplayerroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
}

// optional bytes gamedatametaid = 80;
inline bool GamePlayerProjMeta::_internal_has_gamedatametaid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GamePlayerProjMeta::has_gamedatametaid() const {
  return _internal_has_gamedatametaid();
}
inline void GamePlayerProjMeta::clear_gamedatametaid() {
  gamedatametaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& GamePlayerProjMeta::gamedatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GamePlayerProjMeta.gamedatametaid)
  return _internal_gamedatametaid();
}
inline void GamePlayerProjMeta::set_gamedatametaid(const std::string& value) {
  _internal_set_gamedatametaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GamePlayerProjMeta.gamedatametaid)
}
inline std::string* GamePlayerProjMeta::mutable_gamedatametaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GamePlayerProjMeta.gamedatametaid)
  return _internal_mutable_gamedatametaid();
}
inline const std::string& GamePlayerProjMeta::_internal_gamedatametaid() const {
  return gamedatametaid_.Get();
}
inline void GamePlayerProjMeta::_internal_set_gamedatametaid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GamePlayerProjMeta::set_gamedatametaid(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  gamedatametaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GamePlayerProjMeta.gamedatametaid)
}
inline void GamePlayerProjMeta::set_gamedatametaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GamePlayerProjMeta.gamedatametaid)
}
inline void GamePlayerProjMeta::set_gamedatametaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  gamedatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GamePlayerProjMeta.gamedatametaid)
}
inline std::string* GamePlayerProjMeta::_internal_mutable_gamedatametaid() {
  _has_bits_[0] |= 0x00000010u;
  return gamedatametaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GamePlayerProjMeta::release_gamedatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GamePlayerProjMeta.gamedatametaid)
  if (!_internal_has_gamedatametaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return gamedatametaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GamePlayerProjMeta::set_allocated_gamedatametaid(std::string* gamedatametaid) {
  if (gamedatametaid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  gamedatametaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamedatametaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GamePlayerProjMeta.gamedatametaid)
}

// -------------------------------------------------------------------

// ProjMeta

// optional string name = 10;
inline bool ProjMeta::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProjMeta::has_name() const {
  return _internal_has_name();
}
inline void ProjMeta::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProjMeta::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjMeta.name)
  return _internal_name();
}
inline void ProjMeta::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjMeta.name)
}
inline std::string* ProjMeta::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjMeta.name)
  return _internal_mutable_name();
}
inline const std::string& ProjMeta::_internal_name() const {
  return name_.Get();
}
inline void ProjMeta::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProjMeta::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ProjMeta.name)
}
inline void ProjMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjMeta.name)
}
inline void ProjMeta::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjMeta.name)
}
inline std::string* ProjMeta::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProjMeta::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjMeta.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProjMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjMeta.name)
}

// optional int32 proj = 20;
inline bool ProjMeta::_internal_has_proj() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProjMeta::has_proj() const {
  return _internal_has_proj();
}
inline void ProjMeta::clear_proj() {
  proj_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjMeta::_internal_proj() const {
  return proj_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjMeta::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjMeta.proj)
  return _internal_proj();
}
inline void ProjMeta::_internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  proj_ = value;
}
inline void ProjMeta::set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proj(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjMeta.proj)
}

// optional string playerid = 30;
inline bool ProjMeta::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProjMeta::has_playerid() const {
  return _internal_has_playerid();
}
inline void ProjMeta::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProjMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjMeta.playerid)
  return _internal_playerid();
}
inline void ProjMeta::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjMeta.playerid)
}
inline std::string* ProjMeta::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjMeta.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& ProjMeta::_internal_playerid() const {
  return playerid_.Get();
}
inline void ProjMeta::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProjMeta::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ProjMeta.playerid)
}
inline void ProjMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjMeta.playerid)
}
inline void ProjMeta::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjMeta.playerid)
}
inline std::string* ProjMeta::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000002u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProjMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjMeta.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProjMeta::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjMeta.playerid)
}

// optional bytes txmetaid = 40;
inline bool ProjMeta::_internal_has_txmetaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProjMeta::has_txmetaid() const {
  return _internal_has_txmetaid();
}
inline void ProjMeta::clear_txmetaid() {
  txmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProjMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjMeta.txmetaid)
  return _internal_txmetaid();
}
inline void ProjMeta::set_txmetaid(const std::string& value) {
  _internal_set_txmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjMeta.txmetaid)
}
inline std::string* ProjMeta::mutable_txmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjMeta.txmetaid)
  return _internal_mutable_txmetaid();
}
inline const std::string& ProjMeta::_internal_txmetaid() const {
  return txmetaid_.Get();
}
inline void ProjMeta::_internal_set_txmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProjMeta::set_txmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ProjMeta.txmetaid)
}
inline void ProjMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjMeta.txmetaid)
}
inline void ProjMeta::set_txmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjMeta.txmetaid)
}
inline std::string* ProjMeta::_internal_mutable_txmetaid() {
  _has_bits_[0] |= 0x00000004u;
  return txmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProjMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjMeta.txmetaid)
  if (!_internal_has_txmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return txmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProjMeta::set_allocated_txmetaid(std::string* txmetaid) {
  if (txmetaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  txmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjMeta.txmetaid)
}

// optional bytes prev = 50;
inline bool ProjMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProjMeta::has_prev() const {
  return _internal_has_prev();
}
inline void ProjMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ProjMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjMeta.prev)
  return _internal_prev();
}
inline void ProjMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjMeta.prev)
}
inline std::string* ProjMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& ProjMeta::_internal_prev() const {
  return prev_.Get();
}
inline void ProjMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProjMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ProjMeta.prev)
}
inline void ProjMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjMeta.prev)
}
inline void ProjMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjMeta.prev)
}
inline std::string* ProjMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000008u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProjMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProjMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjMeta.prev)
}

// -------------------------------------------------------------------

// PosMeta

// optional string name = 10;
inline bool PosMeta::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PosMeta::has_name() const {
  return _internal_has_name();
}
inline void PosMeta::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PosMeta::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.name)
  return _internal_name();
}
inline void PosMeta::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.name)
}
inline std::string* PosMeta::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PosMeta.name)
  return _internal_mutable_name();
}
inline const std::string& PosMeta::_internal_name() const {
  return name_.Get();
}
inline void PosMeta::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PosMeta::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PosMeta.name)
}
inline void PosMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PosMeta.name)
}
inline void PosMeta::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PosMeta.name)
}
inline std::string* PosMeta::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PosMeta::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.PosMeta.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PosMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PosMeta.name)
}

// optional int32 qty = 20;
inline bool PosMeta::_internal_has_qty() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PosMeta::has_qty() const {
  return _internal_has_qty();
}
inline void PosMeta::clear_qty() {
  qty_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PosMeta::_internal_qty() const {
  return qty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PosMeta::qty() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.qty)
  return _internal_qty();
}
inline void PosMeta::_internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  qty_ = value;
}
inline void PosMeta::set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.qty)
}

// optional int32 price = 30;
inline bool PosMeta::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PosMeta::has_price() const {
  return _internal_has_price();
}
inline void PosMeta::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PosMeta::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PosMeta::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.price)
  return _internal_price();
}
inline void PosMeta::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  price_ = value;
}
inline void PosMeta::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.price)
}

// optional string playerid = 40;
inline bool PosMeta::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PosMeta::has_playerid() const {
  return _internal_has_playerid();
}
inline void PosMeta::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PosMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.playerid)
  return _internal_playerid();
}
inline void PosMeta::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.playerid)
}
inline std::string* PosMeta::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PosMeta.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& PosMeta::_internal_playerid() const {
  return playerid_.Get();
}
inline void PosMeta::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PosMeta::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PosMeta.playerid)
}
inline void PosMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PosMeta.playerid)
}
inline void PosMeta::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PosMeta.playerid)
}
inline std::string* PosMeta::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000002u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PosMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PosMeta.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PosMeta::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PosMeta.playerid)
}

// optional bytes txmetaid = 50;
inline bool PosMeta::_internal_has_txmetaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PosMeta::has_txmetaid() const {
  return _internal_has_txmetaid();
}
inline void PosMeta::clear_txmetaid() {
  txmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PosMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.txmetaid)
  return _internal_txmetaid();
}
inline void PosMeta::set_txmetaid(const std::string& value) {
  _internal_set_txmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.txmetaid)
}
inline std::string* PosMeta::mutable_txmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PosMeta.txmetaid)
  return _internal_mutable_txmetaid();
}
inline const std::string& PosMeta::_internal_txmetaid() const {
  return txmetaid_.Get();
}
inline void PosMeta::_internal_set_txmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PosMeta::set_txmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PosMeta.txmetaid)
}
inline void PosMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PosMeta.txmetaid)
}
inline void PosMeta::set_txmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PosMeta.txmetaid)
}
inline std::string* PosMeta::_internal_mutable_txmetaid() {
  _has_bits_[0] |= 0x00000004u;
  return txmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PosMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PosMeta.txmetaid)
  if (!_internal_has_txmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return txmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PosMeta::set_allocated_txmetaid(std::string* txmetaid) {
  if (txmetaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  txmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PosMeta.txmetaid)
}

// optional bytes prev = 60;
inline bool PosMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PosMeta::has_prev() const {
  return _internal_has_prev();
}
inline void PosMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PosMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.prev)
  return _internal_prev();
}
inline void PosMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.prev)
}
inline std::string* PosMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PosMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& PosMeta::_internal_prev() const {
  return prev_.Get();
}
inline void PosMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PosMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PosMeta.prev)
}
inline void PosMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PosMeta.prev)
}
inline void PosMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PosMeta.prev)
}
inline std::string* PosMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000008u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PosMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.PosMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PosMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PosMeta.prev)
}

// -------------------------------------------------------------------

// PlayerResultMeta

// optional bytes playergamestatsid = 10;
inline bool PlayerResultMeta::_internal_has_playergamestatsid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerResultMeta::has_playergamestatsid() const {
  return _internal_has_playergamestatsid();
}
inline void PlayerResultMeta::clear_playergamestatsid() {
  playergamestatsid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerResultMeta::playergamestatsid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResultMeta.playergamestatsid)
  return _internal_playergamestatsid();
}
inline void PlayerResultMeta::set_playergamestatsid(const std::string& value) {
  _internal_set_playergamestatsid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResultMeta.playergamestatsid)
}
inline std::string* PlayerResultMeta::mutable_playergamestatsid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResultMeta.playergamestatsid)
  return _internal_mutable_playergamestatsid();
}
inline const std::string& PlayerResultMeta::_internal_playergamestatsid() const {
  return playergamestatsid_.Get();
}
inline void PlayerResultMeta::_internal_set_playergamestatsid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerResultMeta::set_playergamestatsid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playergamestatsid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResultMeta.playergamestatsid)
}
inline void PlayerResultMeta::set_playergamestatsid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResultMeta.playergamestatsid)
}
inline void PlayerResultMeta::set_playergamestatsid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResultMeta.playergamestatsid)
}
inline std::string* PlayerResultMeta::_internal_mutable_playergamestatsid() {
  _has_bits_[0] |= 0x00000001u;
  return playergamestatsid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerResultMeta::release_playergamestatsid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResultMeta.playergamestatsid)
  if (!_internal_has_playergamestatsid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playergamestatsid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerResultMeta::set_allocated_playergamestatsid(std::string* playergamestatsid) {
  if (playergamestatsid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playergamestatsid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playergamestatsid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResultMeta.playergamestatsid)
}

// optional bytes gamestatusmetaid = 30;
inline bool PlayerResultMeta::_internal_has_gamestatusmetaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerResultMeta::has_gamestatusmetaid() const {
  return _internal_has_gamestatusmetaid();
}
inline void PlayerResultMeta::clear_gamestatusmetaid() {
  gamestatusmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerResultMeta::gamestatusmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResultMeta.gamestatusmetaid)
  return _internal_gamestatusmetaid();
}
inline void PlayerResultMeta::set_gamestatusmetaid(const std::string& value) {
  _internal_set_gamestatusmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResultMeta.gamestatusmetaid)
}
inline std::string* PlayerResultMeta::mutable_gamestatusmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResultMeta.gamestatusmetaid)
  return _internal_mutable_gamestatusmetaid();
}
inline const std::string& PlayerResultMeta::_internal_gamestatusmetaid() const {
  return gamestatusmetaid_.Get();
}
inline void PlayerResultMeta::_internal_set_gamestatusmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerResultMeta::set_gamestatusmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResultMeta.gamestatusmetaid)
}
inline void PlayerResultMeta::set_gamestatusmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResultMeta.gamestatusmetaid)
}
inline void PlayerResultMeta::set_gamestatusmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  gamestatusmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResultMeta.gamestatusmetaid)
}
inline std::string* PlayerResultMeta::_internal_mutable_gamestatusmetaid() {
  _has_bits_[0] |= 0x00000002u;
  return gamestatusmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerResultMeta::release_gamestatusmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResultMeta.gamestatusmetaid)
  if (!_internal_has_gamestatusmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return gamestatusmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerResultMeta::set_allocated_gamestatusmetaid(std::string* gamestatusmetaid) {
  if (gamestatusmetaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gamestatusmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamestatusmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResultMeta.gamestatusmetaid)
}

// optional bytes awardmetaplayerroot = 60;
inline bool PlayerResultMeta::_internal_has_awardmetaplayerroot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerResultMeta::has_awardmetaplayerroot() const {
  return _internal_has_awardmetaplayerroot();
}
inline void PlayerResultMeta::clear_awardmetaplayerroot() {
  awardmetaplayerroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PlayerResultMeta::awardmetaplayerroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResultMeta.awardmetaplayerroot)
  return _internal_awardmetaplayerroot();
}
inline void PlayerResultMeta::set_awardmetaplayerroot(const std::string& value) {
  _internal_set_awardmetaplayerroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResultMeta.awardmetaplayerroot)
}
inline std::string* PlayerResultMeta::mutable_awardmetaplayerroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResultMeta.awardmetaplayerroot)
  return _internal_mutable_awardmetaplayerroot();
}
inline const std::string& PlayerResultMeta::_internal_awardmetaplayerroot() const {
  return awardmetaplayerroot_.Get();
}
inline void PlayerResultMeta::_internal_set_awardmetaplayerroot(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  awardmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerResultMeta::set_awardmetaplayerroot(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  awardmetaplayerroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResultMeta.awardmetaplayerroot)
}
inline void PlayerResultMeta::set_awardmetaplayerroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  awardmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResultMeta.awardmetaplayerroot)
}
inline void PlayerResultMeta::set_awardmetaplayerroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  awardmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResultMeta.awardmetaplayerroot)
}
inline std::string* PlayerResultMeta::_internal_mutable_awardmetaplayerroot() {
  _has_bits_[0] |= 0x00000004u;
  return awardmetaplayerroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerResultMeta::release_awardmetaplayerroot() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResultMeta.awardmetaplayerroot)
  if (!_internal_has_awardmetaplayerroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return awardmetaplayerroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerResultMeta::set_allocated_awardmetaplayerroot(std::string* awardmetaplayerroot) {
  if (awardmetaplayerroot != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  awardmetaplayerroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), awardmetaplayerroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResultMeta.awardmetaplayerroot)
}

// optional bytes pnlmetaplayerroot = 70;
inline bool PlayerResultMeta::_internal_has_pnlmetaplayerroot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerResultMeta::has_pnlmetaplayerroot() const {
  return _internal_has_pnlmetaplayerroot();
}
inline void PlayerResultMeta::clear_pnlmetaplayerroot() {
  pnlmetaplayerroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PlayerResultMeta::pnlmetaplayerroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
  return _internal_pnlmetaplayerroot();
}
inline void PlayerResultMeta::set_pnlmetaplayerroot(const std::string& value) {
  _internal_set_pnlmetaplayerroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
}
inline std::string* PlayerResultMeta::mutable_pnlmetaplayerroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
  return _internal_mutable_pnlmetaplayerroot();
}
inline const std::string& PlayerResultMeta::_internal_pnlmetaplayerroot() const {
  return pnlmetaplayerroot_.Get();
}
inline void PlayerResultMeta::_internal_set_pnlmetaplayerroot(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  pnlmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerResultMeta::set_pnlmetaplayerroot(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  pnlmetaplayerroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
}
inline void PlayerResultMeta::set_pnlmetaplayerroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  pnlmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
}
inline void PlayerResultMeta::set_pnlmetaplayerroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  pnlmetaplayerroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
}
inline std::string* PlayerResultMeta::_internal_mutable_pnlmetaplayerroot() {
  _has_bits_[0] |= 0x00000008u;
  return pnlmetaplayerroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerResultMeta::release_pnlmetaplayerroot() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
  if (!_internal_has_pnlmetaplayerroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return pnlmetaplayerroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerResultMeta::set_allocated_pnlmetaplayerroot(std::string* pnlmetaplayerroot) {
  if (pnlmetaplayerroot != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pnlmetaplayerroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pnlmetaplayerroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
}

// optional bytes resultdatametaid = 80;
inline bool PlayerResultMeta::_internal_has_resultdatametaid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlayerResultMeta::has_resultdatametaid() const {
  return _internal_has_resultdatametaid();
}
inline void PlayerResultMeta::clear_resultdatametaid() {
  resultdatametaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PlayerResultMeta::resultdatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResultMeta.resultdatametaid)
  return _internal_resultdatametaid();
}
inline void PlayerResultMeta::set_resultdatametaid(const std::string& value) {
  _internal_set_resultdatametaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResultMeta.resultdatametaid)
}
inline std::string* PlayerResultMeta::mutable_resultdatametaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResultMeta.resultdatametaid)
  return _internal_mutable_resultdatametaid();
}
inline const std::string& PlayerResultMeta::_internal_resultdatametaid() const {
  return resultdatametaid_.Get();
}
inline void PlayerResultMeta::_internal_set_resultdatametaid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerResultMeta::set_resultdatametaid(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  resultdatametaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResultMeta.resultdatametaid)
}
inline void PlayerResultMeta::set_resultdatametaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResultMeta.resultdatametaid)
}
inline void PlayerResultMeta::set_resultdatametaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  resultdatametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResultMeta.resultdatametaid)
}
inline std::string* PlayerResultMeta::_internal_mutable_resultdatametaid() {
  _has_bits_[0] |= 0x00000010u;
  return resultdatametaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerResultMeta::release_resultdatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResultMeta.resultdatametaid)
  if (!_internal_has_resultdatametaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return resultdatametaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerResultMeta::set_allocated_resultdatametaid(std::string* resultdatametaid) {
  if (resultdatametaid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  resultdatametaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resultdatametaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResultMeta.resultdatametaid)
}

// -------------------------------------------------------------------

// PlayerGameStats

// optional string playerid = 20;
inline bool PlayerGameStats::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerGameStats::has_playerid() const {
  return _internal_has_playerid();
}
inline void PlayerGameStats::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerGameStats::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerGameStats.playerid)
  return _internal_playerid();
}
inline void PlayerGameStats::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerGameStats.playerid)
}
inline std::string* PlayerGameStats::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerGameStats.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& PlayerGameStats::_internal_playerid() const {
  return playerid_.Get();
}
inline void PlayerGameStats::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerGameStats::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerGameStats.playerid)
}
inline void PlayerGameStats::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerGameStats.playerid)
}
inline void PlayerGameStats::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerGameStats.playerid)
}
inline std::string* PlayerGameStats::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000001u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerGameStats::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerGameStats.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerGameStats::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerGameStats.playerid)
}

// optional float result = 40;
inline bool PlayerGameStats::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerGameStats::has_result() const {
  return _internal_has_result();
}
inline void PlayerGameStats::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PlayerGameStats::_internal_result() const {
  return result_;
}
inline float PlayerGameStats::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerGameStats.result)
  return _internal_result();
}
inline void PlayerGameStats::_internal_set_result(float value) {
  _has_bits_[0] |= 0x00000008u;
  result_ = value;
}
inline void PlayerGameStats::set_result(float value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerGameStats.result)
}

// optional .fantasybit.Stats stats = 50;
inline bool PlayerGameStats::_internal_has_stats() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || stats_ != nullptr);
  return value;
}
inline bool PlayerGameStats::has_stats() const {
  return _internal_has_stats();
}
inline const ::fantasybit::Stats& PlayerGameStats::_internal_stats() const {
  const ::fantasybit::Stats* p = stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::Stats*>(
      &::fantasybit::_Stats_default_instance_);
}
inline const ::fantasybit::Stats& PlayerGameStats::stats() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerGameStats.stats)
  return _internal_stats();
}
inline void PlayerGameStats::unsafe_arena_set_allocated_stats(
    ::fantasybit::Stats* stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.PlayerGameStats.stats)
}
inline ::fantasybit::Stats* PlayerGameStats::release_stats() {
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::Stats* temp = stats_;
  stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::Stats* PlayerGameStats::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerGameStats.stats)
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::Stats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::fantasybit::Stats* PlayerGameStats::_internal_mutable_stats() {
  _has_bits_[0] |= 0x00000004u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::Stats>(GetArena());
    stats_ = p;
  }
  return stats_;
}
inline ::fantasybit::Stats* PlayerGameStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerGameStats.stats)
  return _internal_mutable_stats();
}
inline void PlayerGameStats::set_allocated_stats(::fantasybit::Stats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats)->GetArena();
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerGameStats.stats)
}

// optional string gameid = 60;
inline bool PlayerGameStats::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerGameStats::has_gameid() const {
  return _internal_has_gameid();
}
inline void PlayerGameStats::clear_gameid() {
  gameid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerGameStats::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerGameStats.gameid)
  return _internal_gameid();
}
inline void PlayerGameStats::set_gameid(const std::string& value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerGameStats.gameid)
}
inline std::string* PlayerGameStats::mutable_gameid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerGameStats.gameid)
  return _internal_mutable_gameid();
}
inline const std::string& PlayerGameStats::_internal_gameid() const {
  return gameid_.Get();
}
inline void PlayerGameStats::_internal_set_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerGameStats::set_gameid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  gameid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerGameStats.gameid)
}
inline void PlayerGameStats::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerGameStats.gameid)
}
inline void PlayerGameStats::set_gameid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerGameStats.gameid)
}
inline std::string* PlayerGameStats::_internal_mutable_gameid() {
  _has_bits_[0] |= 0x00000002u;
  return gameid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerGameStats::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerGameStats.gameid)
  if (!_internal_has_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerGameStats::set_allocated_gameid(std::string* gameid) {
  if (gameid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerGameStats.gameid)
}

// -------------------------------------------------------------------

// AwardMeta

// optional string name = 10;
inline bool AwardMeta::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AwardMeta::has_name() const {
  return _internal_has_name();
}
inline void AwardMeta::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AwardMeta::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.AwardMeta.name)
  return _internal_name();
}
inline void AwardMeta::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.AwardMeta.name)
}
inline std::string* AwardMeta::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.AwardMeta.name)
  return _internal_mutable_name();
}
inline const std::string& AwardMeta::_internal_name() const {
  return name_.Get();
}
inline void AwardMeta::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AwardMeta::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.AwardMeta.name)
}
inline void AwardMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.AwardMeta.name)
}
inline void AwardMeta::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.AwardMeta.name)
}
inline std::string* AwardMeta::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AwardMeta::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.AwardMeta.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.AwardMeta.name)
}

// optional int32 proj = 20;
inline bool AwardMeta::_internal_has_proj() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AwardMeta::has_proj() const {
  return _internal_has_proj();
}
inline void AwardMeta::clear_proj() {
  proj_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardMeta::_internal_proj() const {
  return proj_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardMeta::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.AwardMeta.proj)
  return _internal_proj();
}
inline void AwardMeta::_internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  proj_ = value;
}
inline void AwardMeta::set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proj(value);
  // @@protoc_insertion_point(field_set:fantasybit.AwardMeta.proj)
}

// optional uint64 award = 30;
inline bool AwardMeta::_internal_has_award() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AwardMeta::has_award() const {
  return _internal_has_award();
}
inline void AwardMeta::clear_award() {
  award_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AwardMeta::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AwardMeta::award() const {
  // @@protoc_insertion_point(field_get:fantasybit.AwardMeta.award)
  return _internal_award();
}
inline void AwardMeta::_internal_set_award(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  award_ = value;
}
inline void AwardMeta::set_award(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:fantasybit.AwardMeta.award)
}

// optional bytes projmetaid = 40;
inline bool AwardMeta::_internal_has_projmetaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AwardMeta::has_projmetaid() const {
  return _internal_has_projmetaid();
}
inline void AwardMeta::clear_projmetaid() {
  projmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AwardMeta::projmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.AwardMeta.projmetaid)
  return _internal_projmetaid();
}
inline void AwardMeta::set_projmetaid(const std::string& value) {
  _internal_set_projmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.AwardMeta.projmetaid)
}
inline std::string* AwardMeta::mutable_projmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.AwardMeta.projmetaid)
  return _internal_mutable_projmetaid();
}
inline const std::string& AwardMeta::_internal_projmetaid() const {
  return projmetaid_.Get();
}
inline void AwardMeta::_internal_set_projmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  projmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AwardMeta::set_projmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  projmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.AwardMeta.projmetaid)
}
inline void AwardMeta::set_projmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  projmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.AwardMeta.projmetaid)
}
inline void AwardMeta::set_projmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  projmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.AwardMeta.projmetaid)
}
inline std::string* AwardMeta::_internal_mutable_projmetaid() {
  _has_bits_[0] |= 0x00000002u;
  return projmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AwardMeta::release_projmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.AwardMeta.projmetaid)
  if (!_internal_has_projmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return projmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardMeta::set_allocated_projmetaid(std::string* projmetaid) {
  if (projmetaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  projmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), projmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.AwardMeta.projmetaid)
}

// optional bytes playergamestatsid = 50;
inline bool AwardMeta::_internal_has_playergamestatsid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AwardMeta::has_playergamestatsid() const {
  return _internal_has_playergamestatsid();
}
inline void AwardMeta::clear_playergamestatsid() {
  playergamestatsid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AwardMeta::playergamestatsid() const {
  // @@protoc_insertion_point(field_get:fantasybit.AwardMeta.playergamestatsid)
  return _internal_playergamestatsid();
}
inline void AwardMeta::set_playergamestatsid(const std::string& value) {
  _internal_set_playergamestatsid(value);
  // @@protoc_insertion_point(field_set:fantasybit.AwardMeta.playergamestatsid)
}
inline std::string* AwardMeta::mutable_playergamestatsid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.AwardMeta.playergamestatsid)
  return _internal_mutable_playergamestatsid();
}
inline const std::string& AwardMeta::_internal_playergamestatsid() const {
  return playergamestatsid_.Get();
}
inline void AwardMeta::_internal_set_playergamestatsid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AwardMeta::set_playergamestatsid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  playergamestatsid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.AwardMeta.playergamestatsid)
}
inline void AwardMeta::set_playergamestatsid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.AwardMeta.playergamestatsid)
}
inline void AwardMeta::set_playergamestatsid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.AwardMeta.playergamestatsid)
}
inline std::string* AwardMeta::_internal_mutable_playergamestatsid() {
  _has_bits_[0] |= 0x00000004u;
  return playergamestatsid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AwardMeta::release_playergamestatsid() {
  // @@protoc_insertion_point(field_release:fantasybit.AwardMeta.playergamestatsid)
  if (!_internal_has_playergamestatsid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return playergamestatsid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardMeta::set_allocated_playergamestatsid(std::string* playergamestatsid) {
  if (playergamestatsid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  playergamestatsid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playergamestatsid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.AwardMeta.playergamestatsid)
}

// -------------------------------------------------------------------

// PnlMeta

// optional string name = 10;
inline bool PnlMeta::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PnlMeta::has_name() const {
  return _internal_has_name();
}
inline void PnlMeta::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PnlMeta::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.name)
  return _internal_name();
}
inline void PnlMeta::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.name)
}
inline std::string* PnlMeta::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PnlMeta.name)
  return _internal_mutable_name();
}
inline const std::string& PnlMeta::_internal_name() const {
  return name_.Get();
}
inline void PnlMeta::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PnlMeta::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PnlMeta.name)
}
inline void PnlMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PnlMeta.name)
}
inline void PnlMeta::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PnlMeta.name)
}
inline std::string* PnlMeta::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PnlMeta::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.PnlMeta.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PnlMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PnlMeta.name)
}

// optional int32 qty = 20;
inline bool PnlMeta::_internal_has_qty() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PnlMeta::has_qty() const {
  return _internal_has_qty();
}
inline void PnlMeta::clear_qty() {
  qty_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PnlMeta::_internal_qty() const {
  return qty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PnlMeta::qty() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.qty)
  return _internal_qty();
}
inline void PnlMeta::_internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  qty_ = value;
}
inline void PnlMeta::set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.qty)
}

// optional int32 price = 30;
inline bool PnlMeta::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PnlMeta::has_price() const {
  return _internal_has_price();
}
inline void PnlMeta::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PnlMeta::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PnlMeta::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.price)
  return _internal_price();
}
inline void PnlMeta::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  price_ = value;
}
inline void PnlMeta::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.price)
}

// optional int64 pnl = 40;
inline bool PnlMeta::_internal_has_pnl() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PnlMeta::has_pnl() const {
  return _internal_has_pnl();
}
inline void PnlMeta::clear_pnl() {
  pnl_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PnlMeta::_internal_pnl() const {
  return pnl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PnlMeta::pnl() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.pnl)
  return _internal_pnl();
}
inline void PnlMeta::_internal_set_pnl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  pnl_ = value;
}
inline void PnlMeta::set_pnl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pnl(value);
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.pnl)
}

// optional bytes posmetaid = 50;
inline bool PnlMeta::_internal_has_posmetaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PnlMeta::has_posmetaid() const {
  return _internal_has_posmetaid();
}
inline void PnlMeta::clear_posmetaid() {
  posmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PnlMeta::posmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.posmetaid)
  return _internal_posmetaid();
}
inline void PnlMeta::set_posmetaid(const std::string& value) {
  _internal_set_posmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.posmetaid)
}
inline std::string* PnlMeta::mutable_posmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PnlMeta.posmetaid)
  return _internal_mutable_posmetaid();
}
inline const std::string& PnlMeta::_internal_posmetaid() const {
  return posmetaid_.Get();
}
inline void PnlMeta::_internal_set_posmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  posmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PnlMeta::set_posmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  posmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PnlMeta.posmetaid)
}
inline void PnlMeta::set_posmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  posmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PnlMeta.posmetaid)
}
inline void PnlMeta::set_posmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  posmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PnlMeta.posmetaid)
}
inline std::string* PnlMeta::_internal_mutable_posmetaid() {
  _has_bits_[0] |= 0x00000002u;
  return posmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PnlMeta::release_posmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PnlMeta.posmetaid)
  if (!_internal_has_posmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return posmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PnlMeta::set_allocated_posmetaid(std::string* posmetaid) {
  if (posmetaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  posmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), posmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PnlMeta.posmetaid)
}

// optional bytes playergamestatsid = 60;
inline bool PnlMeta::_internal_has_playergamestatsid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PnlMeta::has_playergamestatsid() const {
  return _internal_has_playergamestatsid();
}
inline void PnlMeta::clear_playergamestatsid() {
  playergamestatsid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PnlMeta::playergamestatsid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.playergamestatsid)
  return _internal_playergamestatsid();
}
inline void PnlMeta::set_playergamestatsid(const std::string& value) {
  _internal_set_playergamestatsid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.playergamestatsid)
}
inline std::string* PnlMeta::mutable_playergamestatsid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PnlMeta.playergamestatsid)
  return _internal_mutable_playergamestatsid();
}
inline const std::string& PnlMeta::_internal_playergamestatsid() const {
  return playergamestatsid_.Get();
}
inline void PnlMeta::_internal_set_playergamestatsid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PnlMeta::set_playergamestatsid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  playergamestatsid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PnlMeta.playergamestatsid)
}
inline void PnlMeta::set_playergamestatsid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PnlMeta.playergamestatsid)
}
inline void PnlMeta::set_playergamestatsid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  playergamestatsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PnlMeta.playergamestatsid)
}
inline std::string* PnlMeta::_internal_mutable_playergamestatsid() {
  _has_bits_[0] |= 0x00000004u;
  return playergamestatsid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PnlMeta::release_playergamestatsid() {
  // @@protoc_insertion_point(field_release:fantasybit.PnlMeta.playergamestatsid)
  if (!_internal_has_playergamestatsid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return playergamestatsid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PnlMeta::set_allocated_playergamestatsid(std::string* playergamestatsid) {
  if (playergamestatsid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  playergamestatsid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playergamestatsid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PnlMeta.playergamestatsid)
}

// -------------------------------------------------------------------

// PlayerMarketState

// optional bytes limitbookmetaid = 10;
inline bool PlayerMarketState::_internal_has_limitbookmetaid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerMarketState::has_limitbookmetaid() const {
  return _internal_has_limitbookmetaid();
}
inline void PlayerMarketState::clear_limitbookmetaid() {
  limitbookmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerMarketState::limitbookmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.limitbookmetaid)
  return _internal_limitbookmetaid();
}
inline void PlayerMarketState::set_limitbookmetaid(const std::string& value) {
  _internal_set_limitbookmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.limitbookmetaid)
}
inline std::string* PlayerMarketState::mutable_limitbookmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMarketState.limitbookmetaid)
  return _internal_mutable_limitbookmetaid();
}
inline const std::string& PlayerMarketState::_internal_limitbookmetaid() const {
  return limitbookmetaid_.Get();
}
inline void PlayerMarketState::_internal_set_limitbookmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  limitbookmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerMarketState::set_limitbookmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  limitbookmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMarketState.limitbookmetaid)
}
inline void PlayerMarketState::set_limitbookmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  limitbookmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMarketState.limitbookmetaid)
}
inline void PlayerMarketState::set_limitbookmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  limitbookmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMarketState.limitbookmetaid)
}
inline std::string* PlayerMarketState::_internal_mutable_limitbookmetaid() {
  _has_bits_[0] |= 0x00000001u;
  return limitbookmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerMarketState::release_limitbookmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMarketState.limitbookmetaid)
  if (!_internal_has_limitbookmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return limitbookmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerMarketState::set_allocated_limitbookmetaid(std::string* limitbookmetaid) {
  if (limitbookmetaid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  limitbookmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), limitbookmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMarketState.limitbookmetaid)
}

// optional string playerid = 20;
inline bool PlayerMarketState::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerMarketState::has_playerid() const {
  return _internal_has_playerid();
}
inline void PlayerMarketState::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerMarketState::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.playerid)
  return _internal_playerid();
}
inline void PlayerMarketState::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.playerid)
}
inline std::string* PlayerMarketState::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMarketState.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& PlayerMarketState::_internal_playerid() const {
  return playerid_.Get();
}
inline void PlayerMarketState::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerMarketState::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMarketState.playerid)
}
inline void PlayerMarketState::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMarketState.playerid)
}
inline void PlayerMarketState::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMarketState.playerid)
}
inline std::string* PlayerMarketState::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000002u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerMarketState::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMarketState.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerMarketState::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMarketState.playerid)
}

// optional bytes marketticmetaid = 30;
inline bool PlayerMarketState::_internal_has_marketticmetaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerMarketState::has_marketticmetaid() const {
  return _internal_has_marketticmetaid();
}
inline void PlayerMarketState::clear_marketticmetaid() {
  marketticmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PlayerMarketState::marketticmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.marketticmetaid)
  return _internal_marketticmetaid();
}
inline void PlayerMarketState::set_marketticmetaid(const std::string& value) {
  _internal_set_marketticmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.marketticmetaid)
}
inline std::string* PlayerMarketState::mutable_marketticmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMarketState.marketticmetaid)
  return _internal_mutable_marketticmetaid();
}
inline const std::string& PlayerMarketState::_internal_marketticmetaid() const {
  return marketticmetaid_.Get();
}
inline void PlayerMarketState::_internal_set_marketticmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  marketticmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerMarketState::set_marketticmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  marketticmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMarketState.marketticmetaid)
}
inline void PlayerMarketState::set_marketticmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  marketticmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMarketState.marketticmetaid)
}
inline void PlayerMarketState::set_marketticmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  marketticmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMarketState.marketticmetaid)
}
inline std::string* PlayerMarketState::_internal_mutable_marketticmetaid() {
  _has_bits_[0] |= 0x00000004u;
  return marketticmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerMarketState::release_marketticmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMarketState.marketticmetaid)
  if (!_internal_has_marketticmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return marketticmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerMarketState::set_allocated_marketticmetaid(std::string* marketticmetaid) {
  if (marketticmetaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  marketticmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketticmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMarketState.marketticmetaid)
}

// optional bool locked = 31;
inline bool PlayerMarketState::_internal_has_locked() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PlayerMarketState::has_locked() const {
  return _internal_has_locked();
}
inline void PlayerMarketState::clear_locked() {
  locked_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PlayerMarketState::_internal_locked() const {
  return locked_;
}
inline bool PlayerMarketState::locked() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.locked)
  return _internal_locked();
}
inline void PlayerMarketState::_internal_set_locked(bool value) {
  _has_bits_[0] |= 0x00000020u;
  locked_ = value;
}
inline void PlayerMarketState::set_locked(bool value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.locked)
}

// optional bytes prev = 40;
inline bool PlayerMarketState::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerMarketState::has_prev() const {
  return _internal_has_prev();
}
inline void PlayerMarketState::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PlayerMarketState::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.prev)
  return _internal_prev();
}
inline void PlayerMarketState::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.prev)
}
inline std::string* PlayerMarketState::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMarketState.prev)
  return _internal_mutable_prev();
}
inline const std::string& PlayerMarketState::_internal_prev() const {
  return prev_.Get();
}
inline void PlayerMarketState::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerMarketState::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMarketState.prev)
}
inline void PlayerMarketState::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMarketState.prev)
}
inline void PlayerMarketState::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMarketState.prev)
}
inline std::string* PlayerMarketState::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000008u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerMarketState::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMarketState.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerMarketState::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMarketState.prev)
}

// optional bytes next = 50;
inline bool PlayerMarketState::_internal_has_next() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlayerMarketState::has_next() const {
  return _internal_has_next();
}
inline void PlayerMarketState::clear_next() {
  next_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PlayerMarketState::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.next)
  return _internal_next();
}
inline void PlayerMarketState::set_next(const std::string& value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.next)
}
inline std::string* PlayerMarketState::mutable_next() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMarketState.next)
  return _internal_mutable_next();
}
inline const std::string& PlayerMarketState::_internal_next() const {
  return next_.Get();
}
inline void PlayerMarketState::_internal_set_next(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerMarketState::set_next(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  next_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMarketState.next)
}
inline void PlayerMarketState::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMarketState.next)
}
inline void PlayerMarketState::set_next(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMarketState.next)
}
inline std::string* PlayerMarketState::_internal_mutable_next() {
  _has_bits_[0] |= 0x00000010u;
  return next_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerMarketState::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMarketState.next)
  if (!_internal_has_next()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return next_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerMarketState::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  next_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMarketState.next)
}

// -------------------------------------------------------------------

// LimitBookMeta

// optional int32 bid = 10;
inline bool LimitBookMeta::_internal_has_bid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LimitBookMeta::has_bid() const {
  return _internal_has_bid();
}
inline void LimitBookMeta::clear_bid() {
  bid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LimitBookMeta::_internal_bid() const {
  return bid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LimitBookMeta::bid() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.bid)
  return _internal_bid();
}
inline void LimitBookMeta::_internal_set_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  bid_ = value;
}
inline void LimitBookMeta::set_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bid(value);
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.bid)
}

// optional int32 bidsize = 20;
inline bool LimitBookMeta::_internal_has_bidsize() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LimitBookMeta::has_bidsize() const {
  return _internal_has_bidsize();
}
inline void LimitBookMeta::clear_bidsize() {
  bidsize_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LimitBookMeta::_internal_bidsize() const {
  return bidsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LimitBookMeta::bidsize() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.bidsize)
  return _internal_bidsize();
}
inline void LimitBookMeta::_internal_set_bidsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  bidsize_ = value;
}
inline void LimitBookMeta::set_bidsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bidsize(value);
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.bidsize)
}

// optional int32 asksize = 30;
inline bool LimitBookMeta::_internal_has_asksize() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LimitBookMeta::has_asksize() const {
  return _internal_has_asksize();
}
inline void LimitBookMeta::clear_asksize() {
  asksize_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LimitBookMeta::_internal_asksize() const {
  return asksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LimitBookMeta::asksize() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.asksize)
  return _internal_asksize();
}
inline void LimitBookMeta::_internal_set_asksize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  asksize_ = value;
}
inline void LimitBookMeta::set_asksize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_asksize(value);
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.asksize)
}

// optional int32 ask = 40;
inline bool LimitBookMeta::_internal_has_ask() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LimitBookMeta::has_ask() const {
  return _internal_has_ask();
}
inline void LimitBookMeta::clear_ask() {
  ask_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LimitBookMeta::_internal_ask() const {
  return ask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LimitBookMeta::ask() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.ask)
  return _internal_ask();
}
inline void LimitBookMeta::_internal_set_ask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  ask_ = value;
}
inline void LimitBookMeta::set_ask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ask(value);
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.ask)
}

// optional bytes bidordermetaroot = 50;
inline bool LimitBookMeta::_internal_has_bidordermetaroot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LimitBookMeta::has_bidordermetaroot() const {
  return _internal_has_bidordermetaroot();
}
inline void LimitBookMeta::clear_bidordermetaroot() {
  bidordermetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LimitBookMeta::bidordermetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.bidordermetaroot)
  return _internal_bidordermetaroot();
}
inline void LimitBookMeta::set_bidordermetaroot(const std::string& value) {
  _internal_set_bidordermetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.bidordermetaroot)
}
inline std::string* LimitBookMeta::mutable_bidordermetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.LimitBookMeta.bidordermetaroot)
  return _internal_mutable_bidordermetaroot();
}
inline const std::string& LimitBookMeta::_internal_bidordermetaroot() const {
  return bidordermetaroot_.Get();
}
inline void LimitBookMeta::_internal_set_bidordermetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bidordermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LimitBookMeta::set_bidordermetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bidordermetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.LimitBookMeta.bidordermetaroot)
}
inline void LimitBookMeta::set_bidordermetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bidordermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.LimitBookMeta.bidordermetaroot)
}
inline void LimitBookMeta::set_bidordermetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bidordermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.LimitBookMeta.bidordermetaroot)
}
inline std::string* LimitBookMeta::_internal_mutable_bidordermetaroot() {
  _has_bits_[0] |= 0x00000001u;
  return bidordermetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LimitBookMeta::release_bidordermetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.LimitBookMeta.bidordermetaroot)
  if (!_internal_has_bidordermetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bidordermetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LimitBookMeta::set_allocated_bidordermetaroot(std::string* bidordermetaroot) {
  if (bidordermetaroot != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bidordermetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bidordermetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.LimitBookMeta.bidordermetaroot)
}

// optional bytes askordermetaroot = 60;
inline bool LimitBookMeta::_internal_has_askordermetaroot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LimitBookMeta::has_askordermetaroot() const {
  return _internal_has_askordermetaroot();
}
inline void LimitBookMeta::clear_askordermetaroot() {
  askordermetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LimitBookMeta::askordermetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.askordermetaroot)
  return _internal_askordermetaroot();
}
inline void LimitBookMeta::set_askordermetaroot(const std::string& value) {
  _internal_set_askordermetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.askordermetaroot)
}
inline std::string* LimitBookMeta::mutable_askordermetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.LimitBookMeta.askordermetaroot)
  return _internal_mutable_askordermetaroot();
}
inline const std::string& LimitBookMeta::_internal_askordermetaroot() const {
  return askordermetaroot_.Get();
}
inline void LimitBookMeta::_internal_set_askordermetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  askordermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LimitBookMeta::set_askordermetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  askordermetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.LimitBookMeta.askordermetaroot)
}
inline void LimitBookMeta::set_askordermetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  askordermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.LimitBookMeta.askordermetaroot)
}
inline void LimitBookMeta::set_askordermetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  askordermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.LimitBookMeta.askordermetaroot)
}
inline std::string* LimitBookMeta::_internal_mutable_askordermetaroot() {
  _has_bits_[0] |= 0x00000002u;
  return askordermetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LimitBookMeta::release_askordermetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.LimitBookMeta.askordermetaroot)
  if (!_internal_has_askordermetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return askordermetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LimitBookMeta::set_allocated_askordermetaroot(std::string* askordermetaroot) {
  if (askordermetaroot != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  askordermetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), askordermetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.LimitBookMeta.askordermetaroot)
}

// -------------------------------------------------------------------

// MarketTicMeta

// optional int32 price = 20;
inline bool MarketTicMeta::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MarketTicMeta::has_price() const {
  return _internal_has_price();
}
inline void MarketTicMeta::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketTicMeta::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketTicMeta::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicMeta.price)
  return _internal_price();
}
inline void MarketTicMeta::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  price_ = value;
}
inline void MarketTicMeta::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicMeta.price)
}

// optional int32 size = 30;
inline bool MarketTicMeta::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MarketTicMeta::has_size() const {
  return _internal_has_size();
}
inline void MarketTicMeta::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketTicMeta::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketTicMeta::size() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicMeta.size)
  return _internal_size();
}
inline void MarketTicMeta::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
}
inline void MarketTicMeta::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicMeta.size)
}

// optional bytes orderfillhead = 40;
inline bool MarketTicMeta::_internal_has_orderfillhead() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MarketTicMeta::has_orderfillhead() const {
  return _internal_has_orderfillhead();
}
inline void MarketTicMeta::clear_orderfillhead() {
  orderfillhead_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MarketTicMeta::orderfillhead() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicMeta.orderfillhead)
  return _internal_orderfillhead();
}
inline void MarketTicMeta::set_orderfillhead(const std::string& value) {
  _internal_set_orderfillhead(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicMeta.orderfillhead)
}
inline std::string* MarketTicMeta::mutable_orderfillhead() {
  // @@protoc_insertion_point(field_mutable:fantasybit.MarketTicMeta.orderfillhead)
  return _internal_mutable_orderfillhead();
}
inline const std::string& MarketTicMeta::_internal_orderfillhead() const {
  return orderfillhead_.Get();
}
inline void MarketTicMeta::_internal_set_orderfillhead(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  orderfillhead_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketTicMeta::set_orderfillhead(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  orderfillhead_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.MarketTicMeta.orderfillhead)
}
inline void MarketTicMeta::set_orderfillhead(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  orderfillhead_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.MarketTicMeta.orderfillhead)
}
inline void MarketTicMeta::set_orderfillhead(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  orderfillhead_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MarketTicMeta.orderfillhead)
}
inline std::string* MarketTicMeta::_internal_mutable_orderfillhead() {
  _has_bits_[0] |= 0x00000001u;
  return orderfillhead_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketTicMeta::release_orderfillhead() {
  // @@protoc_insertion_point(field_release:fantasybit.MarketTicMeta.orderfillhead)
  if (!_internal_has_orderfillhead()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return orderfillhead_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketTicMeta::set_allocated_orderfillhead(std::string* orderfillhead) {
  if (orderfillhead != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  orderfillhead_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderfillhead,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MarketTicMeta.orderfillhead)
}

// optional bytes prev = 50;
inline bool MarketTicMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MarketTicMeta::has_prev() const {
  return _internal_has_prev();
}
inline void MarketTicMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MarketTicMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicMeta.prev)
  return _internal_prev();
}
inline void MarketTicMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicMeta.prev)
}
inline std::string* MarketTicMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.MarketTicMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& MarketTicMeta::_internal_prev() const {
  return prev_.Get();
}
inline void MarketTicMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketTicMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.MarketTicMeta.prev)
}
inline void MarketTicMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.MarketTicMeta.prev)
}
inline void MarketTicMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MarketTicMeta.prev)
}
inline std::string* MarketTicMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000002u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketTicMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.MarketTicMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketTicMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MarketTicMeta.prev)
}

// -------------------------------------------------------------------

// OrderMeta

// optional int32 refnum = 1;
inline bool OrderMeta::_internal_has_refnum() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OrderMeta::has_refnum() const {
  return _internal_has_refnum();
}
inline void OrderMeta::clear_refnum() {
  refnum_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMeta::_internal_refnum() const {
  return refnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMeta::refnum() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.refnum)
  return _internal_refnum();
}
inline void OrderMeta::_internal_set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  refnum_ = value;
}
inline void OrderMeta::set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refnum(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.refnum)
}

// optional string fname = 10;
inline bool OrderMeta::_internal_has_fname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OrderMeta::has_fname() const {
  return _internal_has_fname();
}
inline void OrderMeta::clear_fname() {
  fname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OrderMeta::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.fname)
  return _internal_fname();
}
inline void OrderMeta::set_fname(const std::string& value) {
  _internal_set_fname(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.fname)
}
inline std::string* OrderMeta::mutable_fname() {
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderMeta.fname)
  return _internal_mutable_fname();
}
inline const std::string& OrderMeta::_internal_fname() const {
  return fname_.Get();
}
inline void OrderMeta::_internal_set_fname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderMeta::set_fname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderMeta.fname)
}
inline void OrderMeta::set_fname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderMeta.fname)
}
inline void OrderMeta::set_fname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderMeta.fname)
}
inline std::string* OrderMeta::_internal_mutable_fname() {
  _has_bits_[0] |= 0x00000001u;
  return fname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderMeta::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderMeta.fname)
  if (!_internal_has_fname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderMeta::set_allocated_fname(std::string* fname) {
  if (fname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderMeta.fname)
}

// optional string playerid = 20;
inline bool OrderMeta::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OrderMeta::has_playerid() const {
  return _internal_has_playerid();
}
inline void OrderMeta::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OrderMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.playerid)
  return _internal_playerid();
}
inline void OrderMeta::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.playerid)
}
inline std::string* OrderMeta::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderMeta.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& OrderMeta::_internal_playerid() const {
  return playerid_.Get();
}
inline void OrderMeta::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderMeta::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderMeta.playerid)
}
inline void OrderMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderMeta.playerid)
}
inline void OrderMeta::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderMeta.playerid)
}
inline std::string* OrderMeta::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000002u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderMeta.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderMeta::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderMeta.playerid)
}

// optional bool buyside = 30;
inline bool OrderMeta::_internal_has_buyside() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OrderMeta::has_buyside() const {
  return _internal_has_buyside();
}
inline void OrderMeta::clear_buyside() {
  buyside_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool OrderMeta::_internal_buyside() const {
  return buyside_;
}
inline bool OrderMeta::buyside() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.buyside)
  return _internal_buyside();
}
inline void OrderMeta::_internal_set_buyside(bool value) {
  _has_bits_[0] |= 0x00000080u;
  buyside_ = value;
}
inline void OrderMeta::set_buyside(bool value) {
  _internal_set_buyside(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.buyside)
}

// optional int32 size = 40;
inline bool OrderMeta::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool OrderMeta::has_size() const {
  return _internal_has_size();
}
inline void OrderMeta::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMeta::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMeta::size() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.size)
  return _internal_size();
}
inline void OrderMeta::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  size_ = value;
}
inline void OrderMeta::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.size)
}

// optional int32 price = 50;
inline bool OrderMeta::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool OrderMeta::has_price() const {
  return _internal_has_price();
}
inline void OrderMeta::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMeta::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMeta::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.price)
  return _internal_price();
}
inline void OrderMeta::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  price_ = value;
}
inline void OrderMeta::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.price)
}

// optional bytes txmetaid = 60;
inline bool OrderMeta::_internal_has_txmetaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OrderMeta::has_txmetaid() const {
  return _internal_has_txmetaid();
}
inline void OrderMeta::clear_txmetaid() {
  txmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OrderMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.txmetaid)
  return _internal_txmetaid();
}
inline void OrderMeta::set_txmetaid(const std::string& value) {
  _internal_set_txmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.txmetaid)
}
inline std::string* OrderMeta::mutable_txmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderMeta.txmetaid)
  return _internal_mutable_txmetaid();
}
inline const std::string& OrderMeta::_internal_txmetaid() const {
  return txmetaid_.Get();
}
inline void OrderMeta::_internal_set_txmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderMeta::set_txmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderMeta.txmetaid)
}
inline void OrderMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderMeta.txmetaid)
}
inline void OrderMeta::set_txmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderMeta.txmetaid)
}
inline std::string* OrderMeta::_internal_mutable_txmetaid() {
  _has_bits_[0] |= 0x00000004u;
  return txmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderMeta.txmetaid)
  if (!_internal_has_txmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return txmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderMeta::set_allocated_txmetaid(std::string* txmetaid) {
  if (txmetaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  txmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderMeta.txmetaid)
}

// optional bytes orderfillmetaid = 70;
inline bool OrderMeta::_internal_has_orderfillmetaid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OrderMeta::has_orderfillmetaid() const {
  return _internal_has_orderfillmetaid();
}
inline void OrderMeta::clear_orderfillmetaid() {
  orderfillmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& OrderMeta::orderfillmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.orderfillmetaid)
  return _internal_orderfillmetaid();
}
inline void OrderMeta::set_orderfillmetaid(const std::string& value) {
  _internal_set_orderfillmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.orderfillmetaid)
}
inline std::string* OrderMeta::mutable_orderfillmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderMeta.orderfillmetaid)
  return _internal_mutable_orderfillmetaid();
}
inline const std::string& OrderMeta::_internal_orderfillmetaid() const {
  return orderfillmetaid_.Get();
}
inline void OrderMeta::_internal_set_orderfillmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  orderfillmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderMeta::set_orderfillmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  orderfillmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderMeta.orderfillmetaid)
}
inline void OrderMeta::set_orderfillmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  orderfillmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderMeta.orderfillmetaid)
}
inline void OrderMeta::set_orderfillmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  orderfillmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderMeta.orderfillmetaid)
}
inline std::string* OrderMeta::_internal_mutable_orderfillmetaid() {
  _has_bits_[0] |= 0x00000008u;
  return orderfillmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderMeta::release_orderfillmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderMeta.orderfillmetaid)
  if (!_internal_has_orderfillmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return orderfillmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderMeta::set_allocated_orderfillmetaid(std::string* orderfillmetaid) {
  if (orderfillmetaid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  orderfillmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderfillmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderMeta.orderfillmetaid)
}

// optional int32 timestamp = 75;
inline bool OrderMeta::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OrderMeta::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void OrderMeta::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMeta::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMeta::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.timestamp)
  return _internal_timestamp();
}
inline void OrderMeta::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  timestamp_ = value;
}
inline void OrderMeta::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.timestamp)
}

// optional bytes prev = 80;
inline bool OrderMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OrderMeta::has_prev() const {
  return _internal_has_prev();
}
inline void OrderMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& OrderMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.prev)
  return _internal_prev();
}
inline void OrderMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.prev)
}
inline std::string* OrderMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& OrderMeta::_internal_prev() const {
  return prev_.Get();
}
inline void OrderMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderMeta.prev)
}
inline void OrderMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderMeta.prev)
}
inline void OrderMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderMeta.prev)
}
inline std::string* OrderMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000010u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderMeta.prev)
}

// -------------------------------------------------------------------

// OrderFillMeta

// optional int32 refnum = 1;
inline bool OrderFillMeta::_internal_has_refnum() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OrderFillMeta::has_refnum() const {
  return _internal_has_refnum();
}
inline void OrderFillMeta::clear_refnum() {
  refnum_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFillMeta::_internal_refnum() const {
  return refnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFillMeta::refnum() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.refnum)
  return _internal_refnum();
}
inline void OrderFillMeta::_internal_set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  refnum_ = value;
}
inline void OrderFillMeta::set_refnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refnum(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.refnum)
}

// optional string fname = 10;
inline bool OrderFillMeta::_internal_has_fname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OrderFillMeta::has_fname() const {
  return _internal_has_fname();
}
inline void OrderFillMeta::clear_fname() {
  fname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OrderFillMeta::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.fname)
  return _internal_fname();
}
inline void OrderFillMeta::set_fname(const std::string& value) {
  _internal_set_fname(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.fname)
}
inline std::string* OrderFillMeta::mutable_fname() {
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderFillMeta.fname)
  return _internal_mutable_fname();
}
inline const std::string& OrderFillMeta::_internal_fname() const {
  return fname_.Get();
}
inline void OrderFillMeta::_internal_set_fname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderFillMeta::set_fname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderFillMeta.fname)
}
inline void OrderFillMeta::set_fname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderFillMeta.fname)
}
inline void OrderFillMeta::set_fname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderFillMeta.fname)
}
inline std::string* OrderFillMeta::_internal_mutable_fname() {
  _has_bits_[0] |= 0x00000001u;
  return fname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderFillMeta::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderFillMeta.fname)
  if (!_internal_has_fname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderFillMeta::set_allocated_fname(std::string* fname) {
  if (fname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderFillMeta.fname)
}

// optional string playerid = 15;
inline bool OrderFillMeta::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OrderFillMeta::has_playerid() const {
  return _internal_has_playerid();
}
inline void OrderFillMeta::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OrderFillMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.playerid)
  return _internal_playerid();
}
inline void OrderFillMeta::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.playerid)
}
inline std::string* OrderFillMeta::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderFillMeta.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& OrderFillMeta::_internal_playerid() const {
  return playerid_.Get();
}
inline void OrderFillMeta::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderFillMeta::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderFillMeta.playerid)
}
inline void OrderFillMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderFillMeta.playerid)
}
inline void OrderFillMeta::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderFillMeta.playerid)
}
inline std::string* OrderFillMeta::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000002u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderFillMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderFillMeta.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderFillMeta::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderFillMeta.playerid)
}

// optional int32 fillprice = 20;
inline bool OrderFillMeta::_internal_has_fillprice() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OrderFillMeta::has_fillprice() const {
  return _internal_has_fillprice();
}
inline void OrderFillMeta::clear_fillprice() {
  fillprice_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFillMeta::_internal_fillprice() const {
  return fillprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFillMeta::fillprice() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.fillprice)
  return _internal_fillprice();
}
inline void OrderFillMeta::_internal_set_fillprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  fillprice_ = value;
}
inline void OrderFillMeta::set_fillprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fillprice(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.fillprice)
}

// optional int32 fillsize = 30;
inline bool OrderFillMeta::_internal_has_fillsize() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OrderFillMeta::has_fillsize() const {
  return _internal_has_fillsize();
}
inline void OrderFillMeta::clear_fillsize() {
  fillsize_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFillMeta::_internal_fillsize() const {
  return fillsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderFillMeta::fillsize() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.fillsize)
  return _internal_fillsize();
}
inline void OrderFillMeta::_internal_set_fillsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  fillsize_ = value;
}
inline void OrderFillMeta::set_fillsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fillsize(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.fillsize)
}

// optional bool buyside = 35;
inline bool OrderFillMeta::_internal_has_buyside() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OrderFillMeta::has_buyside() const {
  return _internal_has_buyside();
}
inline void OrderFillMeta::clear_buyside() {
  buyside_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool OrderFillMeta::_internal_buyside() const {
  return buyside_;
}
inline bool OrderFillMeta::buyside() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.buyside)
  return _internal_buyside();
}
inline void OrderFillMeta::_internal_set_buyside(bool value) {
  _has_bits_[0] |= 0x00000080u;
  buyside_ = value;
}
inline void OrderFillMeta::set_buyside(bool value) {
  _internal_set_buyside(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.buyside)
}

// optional uint64 timestamp = 40;
inline bool OrderFillMeta::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool OrderFillMeta::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void OrderFillMeta::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderFillMeta::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderFillMeta::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.timestamp)
  return _internal_timestamp();
}
inline void OrderFillMeta::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  timestamp_ = value;
}
inline void OrderFillMeta::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.timestamp)
}

// optional bytes txmetaid = 60;
inline bool OrderFillMeta::_internal_has_txmetaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OrderFillMeta::has_txmetaid() const {
  return _internal_has_txmetaid();
}
inline void OrderFillMeta::clear_txmetaid() {
  txmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OrderFillMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.txmetaid)
  return _internal_txmetaid();
}
inline void OrderFillMeta::set_txmetaid(const std::string& value) {
  _internal_set_txmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.txmetaid)
}
inline std::string* OrderFillMeta::mutable_txmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderFillMeta.txmetaid)
  return _internal_mutable_txmetaid();
}
inline const std::string& OrderFillMeta::_internal_txmetaid() const {
  return txmetaid_.Get();
}
inline void OrderFillMeta::_internal_set_txmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderFillMeta::set_txmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderFillMeta.txmetaid)
}
inline void OrderFillMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderFillMeta.txmetaid)
}
inline void OrderFillMeta::set_txmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  txmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderFillMeta.txmetaid)
}
inline std::string* OrderFillMeta::_internal_mutable_txmetaid() {
  _has_bits_[0] |= 0x00000004u;
  return txmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderFillMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderFillMeta.txmetaid)
  if (!_internal_has_txmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return txmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderFillMeta::set_allocated_txmetaid(std::string* txmetaid) {
  if (txmetaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  txmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderFillMeta.txmetaid)
}

// optional bytes prev = 70;
inline bool OrderFillMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OrderFillMeta::has_prev() const {
  return _internal_has_prev();
}
inline void OrderFillMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& OrderFillMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.prev)
  return _internal_prev();
}
inline void OrderFillMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.prev)
}
inline std::string* OrderFillMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderFillMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& OrderFillMeta::_internal_prev() const {
  return prev_.Get();
}
inline void OrderFillMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderFillMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderFillMeta.prev)
}
inline void OrderFillMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderFillMeta.prev)
}
inline void OrderFillMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderFillMeta.prev)
}
inline std::string* OrderFillMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000008u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderFillMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderFillMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderFillMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderFillMeta.prev)
}

// -------------------------------------------------------------------

// GlobalStateMeta

// optional .fantasybit.GlobalState globalstate = 10;
inline bool GlobalStateMeta::_internal_has_globalstate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || globalstate_ != nullptr);
  return value;
}
inline bool GlobalStateMeta::has_globalstate() const {
  return _internal_has_globalstate();
}
inline const ::fantasybit::GlobalState& GlobalStateMeta::_internal_globalstate() const {
  const ::fantasybit::GlobalState* p = globalstate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::GlobalState*>(
      &::fantasybit::_GlobalState_default_instance_);
}
inline const ::fantasybit::GlobalState& GlobalStateMeta::globalstate() const {
  // @@protoc_insertion_point(field_get:fantasybit.GlobalStateMeta.globalstate)
  return _internal_globalstate();
}
inline void GlobalStateMeta::unsafe_arena_set_allocated_globalstate(
    ::fantasybit::GlobalState* globalstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalstate_);
  }
  globalstate_ = globalstate;
  if (globalstate) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GlobalStateMeta.globalstate)
}
inline ::fantasybit::GlobalState* GlobalStateMeta::release_globalstate() {
  _has_bits_[0] &= ~0x00000008u;
  ::fantasybit::GlobalState* temp = globalstate_;
  globalstate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::GlobalState* GlobalStateMeta::unsafe_arena_release_globalstate() {
  // @@protoc_insertion_point(field_release:fantasybit.GlobalStateMeta.globalstate)
  _has_bits_[0] &= ~0x00000008u;
  ::fantasybit::GlobalState* temp = globalstate_;
  globalstate_ = nullptr;
  return temp;
}
inline ::fantasybit::GlobalState* GlobalStateMeta::_internal_mutable_globalstate() {
  _has_bits_[0] |= 0x00000008u;
  if (globalstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::GlobalState>(GetArena());
    globalstate_ = p;
  }
  return globalstate_;
}
inline ::fantasybit::GlobalState* GlobalStateMeta::mutable_globalstate() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GlobalStateMeta.globalstate)
  return _internal_mutable_globalstate();
}
inline void GlobalStateMeta::set_allocated_globalstate(::fantasybit::GlobalState* globalstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalstate_);
  }
  if (globalstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalstate)->GetArena();
    if (message_arena != submessage_arena) {
      globalstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalstate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  globalstate_ = globalstate;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GlobalStateMeta.globalstate)
}

// optional bytes trmetaid = 20;
inline bool GlobalStateMeta::_internal_has_trmetaid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GlobalStateMeta::has_trmetaid() const {
  return _internal_has_trmetaid();
}
inline void GlobalStateMeta::clear_trmetaid() {
  trmetaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GlobalStateMeta::trmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GlobalStateMeta.trmetaid)
  return _internal_trmetaid();
}
inline void GlobalStateMeta::set_trmetaid(const std::string& value) {
  _internal_set_trmetaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GlobalStateMeta.trmetaid)
}
inline std::string* GlobalStateMeta::mutable_trmetaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GlobalStateMeta.trmetaid)
  return _internal_mutable_trmetaid();
}
inline const std::string& GlobalStateMeta::_internal_trmetaid() const {
  return trmetaid_.Get();
}
inline void GlobalStateMeta::_internal_set_trmetaid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GlobalStateMeta::set_trmetaid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  trmetaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GlobalStateMeta.trmetaid)
}
inline void GlobalStateMeta::set_trmetaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GlobalStateMeta.trmetaid)
}
inline void GlobalStateMeta::set_trmetaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trmetaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GlobalStateMeta.trmetaid)
}
inline std::string* GlobalStateMeta::_internal_mutable_trmetaid() {
  _has_bits_[0] |= 0x00000001u;
  return trmetaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GlobalStateMeta::release_trmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GlobalStateMeta.trmetaid)
  if (!_internal_has_trmetaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trmetaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GlobalStateMeta::set_allocated_trmetaid(std::string* trmetaid) {
  if (trmetaid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trmetaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trmetaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GlobalStateMeta.trmetaid)
}

// optional bytes prev = 30;
inline bool GlobalStateMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GlobalStateMeta::has_prev() const {
  return _internal_has_prev();
}
inline void GlobalStateMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GlobalStateMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.GlobalStateMeta.prev)
  return _internal_prev();
}
inline void GlobalStateMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.GlobalStateMeta.prev)
}
inline std::string* GlobalStateMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GlobalStateMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& GlobalStateMeta::_internal_prev() const {
  return prev_.Get();
}
inline void GlobalStateMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GlobalStateMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GlobalStateMeta.prev)
}
inline void GlobalStateMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GlobalStateMeta.prev)
}
inline void GlobalStateMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GlobalStateMeta.prev)
}
inline std::string* GlobalStateMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000002u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GlobalStateMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.GlobalStateMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GlobalStateMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GlobalStateMeta.prev)
}

// optional bytes next = 40;
inline bool GlobalStateMeta::_internal_has_next() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GlobalStateMeta::has_next() const {
  return _internal_has_next();
}
inline void GlobalStateMeta::clear_next() {
  next_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GlobalStateMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.GlobalStateMeta.next)
  return _internal_next();
}
inline void GlobalStateMeta::set_next(const std::string& value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:fantasybit.GlobalStateMeta.next)
}
inline std::string* GlobalStateMeta::mutable_next() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GlobalStateMeta.next)
  return _internal_mutable_next();
}
inline const std::string& GlobalStateMeta::_internal_next() const {
  return next_.Get();
}
inline void GlobalStateMeta::_internal_set_next(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GlobalStateMeta::set_next(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  next_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GlobalStateMeta.next)
}
inline void GlobalStateMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GlobalStateMeta.next)
}
inline void GlobalStateMeta::set_next(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GlobalStateMeta.next)
}
inline std::string* GlobalStateMeta::_internal_mutable_next() {
  _has_bits_[0] |= 0x00000004u;
  return next_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GlobalStateMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.GlobalStateMeta.next)
  if (!_internal_has_next()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return next_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GlobalStateMeta::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  next_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GlobalStateMeta.next)
}

// -------------------------------------------------------------------

// PlayerMeta

// optional string playerid = 10;
inline bool PlayerMeta::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerMeta::has_playerid() const {
  return _internal_has_playerid();
}
inline void PlayerMeta::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMeta.playerid)
  return _internal_playerid();
}
inline void PlayerMeta::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMeta.playerid)
}
inline std::string* PlayerMeta::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMeta.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& PlayerMeta::_internal_playerid() const {
  return playerid_.Get();
}
inline void PlayerMeta::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerMeta::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMeta.playerid)
}
inline void PlayerMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMeta.playerid)
}
inline void PlayerMeta::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMeta.playerid)
}
inline std::string* PlayerMeta::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000001u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMeta.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerMeta::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMeta.playerid)
}

// optional .fantasybit.PlayerBase player_base = 20;
inline bool PlayerMeta::_internal_has_player_base() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || player_base_ != nullptr);
  return value;
}
inline bool PlayerMeta::has_player_base() const {
  return _internal_has_player_base();
}
inline const ::fantasybit::PlayerBase& PlayerMeta::_internal_player_base() const {
  const ::fantasybit::PlayerBase* p = player_base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::PlayerBase*>(
      &::fantasybit::_PlayerBase_default_instance_);
}
inline const ::fantasybit::PlayerBase& PlayerMeta::player_base() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMeta.player_base)
  return _internal_player_base();
}
inline void PlayerMeta::unsafe_arena_set_allocated_player_base(
    ::fantasybit::PlayerBase* player_base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_base_);
  }
  player_base_ = player_base;
  if (player_base) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.PlayerMeta.player_base)
}
inline ::fantasybit::PlayerBase* PlayerMeta::release_player_base() {
  _has_bits_[0] &= ~0x00000008u;
  ::fantasybit::PlayerBase* temp = player_base_;
  player_base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::PlayerBase* PlayerMeta::unsafe_arena_release_player_base() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMeta.player_base)
  _has_bits_[0] &= ~0x00000008u;
  ::fantasybit::PlayerBase* temp = player_base_;
  player_base_ = nullptr;
  return temp;
}
inline ::fantasybit::PlayerBase* PlayerMeta::_internal_mutable_player_base() {
  _has_bits_[0] |= 0x00000008u;
  if (player_base_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::PlayerBase>(GetArena());
    player_base_ = p;
  }
  return player_base_;
}
inline ::fantasybit::PlayerBase* PlayerMeta::mutable_player_base() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMeta.player_base)
  return _internal_mutable_player_base();
}
inline void PlayerMeta::set_allocated_player_base(::fantasybit::PlayerBase* player_base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_base_);
  }
  if (player_base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_base)->GetArena();
    if (message_arena != submessage_arena) {
      player_base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_base, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  player_base_ = player_base;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMeta.player_base)
}

// optional .fantasybit.PlayerStatus player_status = 30;
inline bool PlayerMeta::_internal_has_player_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || player_status_ != nullptr);
  return value;
}
inline bool PlayerMeta::has_player_status() const {
  return _internal_has_player_status();
}
inline const ::fantasybit::PlayerStatus& PlayerMeta::_internal_player_status() const {
  const ::fantasybit::PlayerStatus* p = player_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::PlayerStatus*>(
      &::fantasybit::_PlayerStatus_default_instance_);
}
inline const ::fantasybit::PlayerStatus& PlayerMeta::player_status() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMeta.player_status)
  return _internal_player_status();
}
inline void PlayerMeta::unsafe_arena_set_allocated_player_status(
    ::fantasybit::PlayerStatus* player_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_status_);
  }
  player_status_ = player_status;
  if (player_status) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.PlayerMeta.player_status)
}
inline ::fantasybit::PlayerStatus* PlayerMeta::release_player_status() {
  _has_bits_[0] &= ~0x00000010u;
  ::fantasybit::PlayerStatus* temp = player_status_;
  player_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::PlayerStatus* PlayerMeta::unsafe_arena_release_player_status() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMeta.player_status)
  _has_bits_[0] &= ~0x00000010u;
  ::fantasybit::PlayerStatus* temp = player_status_;
  player_status_ = nullptr;
  return temp;
}
inline ::fantasybit::PlayerStatus* PlayerMeta::_internal_mutable_player_status() {
  _has_bits_[0] |= 0x00000010u;
  if (player_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::PlayerStatus>(GetArena());
    player_status_ = p;
  }
  return player_status_;
}
inline ::fantasybit::PlayerStatus* PlayerMeta::mutable_player_status() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMeta.player_status)
  return _internal_mutable_player_status();
}
inline void PlayerMeta::set_allocated_player_status(::fantasybit::PlayerStatus* player_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_status_);
  }
  if (player_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_status)->GetArena();
    if (message_arena != submessage_arena) {
      player_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  player_status_ = player_status;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMeta.player_status)
}

// optional bytes datametaid = 40;
inline bool PlayerMeta::_internal_has_datametaid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerMeta::has_datametaid() const {
  return _internal_has_datametaid();
}
inline void PlayerMeta::clear_datametaid() {
  datametaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerMeta::datametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMeta.datametaid)
  return _internal_datametaid();
}
inline void PlayerMeta::set_datametaid(const std::string& value) {
  _internal_set_datametaid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMeta.datametaid)
}
inline std::string* PlayerMeta::mutable_datametaid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMeta.datametaid)
  return _internal_mutable_datametaid();
}
inline const std::string& PlayerMeta::_internal_datametaid() const {
  return datametaid_.Get();
}
inline void PlayerMeta::_internal_set_datametaid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  datametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerMeta::set_datametaid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  datametaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMeta.datametaid)
}
inline void PlayerMeta::set_datametaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  datametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMeta.datametaid)
}
inline void PlayerMeta::set_datametaid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  datametaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMeta.datametaid)
}
inline std::string* PlayerMeta::_internal_mutable_datametaid() {
  _has_bits_[0] |= 0x00000002u;
  return datametaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerMeta::release_datametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMeta.datametaid)
  if (!_internal_has_datametaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return datametaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerMeta::set_allocated_datametaid(std::string* datametaid) {
  if (datametaid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  datametaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datametaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMeta.datametaid)
}

// optional bytes prev = 50;
inline bool PlayerMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerMeta::has_prev() const {
  return _internal_has_prev();
}
inline void PlayerMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PlayerMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMeta.prev)
  return _internal_prev();
}
inline void PlayerMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMeta.prev)
}
inline std::string* PlayerMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& PlayerMeta::_internal_prev() const {
  return prev_.Get();
}
inline void PlayerMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMeta.prev)
}
inline void PlayerMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMeta.prev)
}
inline void PlayerMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMeta.prev)
}
inline std::string* PlayerMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000004u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMeta.prev)
}

// -------------------------------------------------------------------

// TeamMeta

// optional string teamid = 10;
inline bool TeamMeta::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TeamMeta::has_teamid() const {
  return _internal_has_teamid();
}
inline void TeamMeta::clear_teamid() {
  teamid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TeamMeta::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamMeta.teamid)
  return _internal_teamid();
}
inline void TeamMeta::set_teamid(const std::string& value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamMeta.teamid)
}
inline std::string* TeamMeta::mutable_teamid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamMeta.teamid)
  return _internal_mutable_teamid();
}
inline const std::string& TeamMeta::_internal_teamid() const {
  return teamid_.Get();
}
inline void TeamMeta::_internal_set_teamid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamMeta::set_teamid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  teamid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamMeta.teamid)
}
inline void TeamMeta::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamMeta.teamid)
}
inline void TeamMeta::set_teamid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamMeta.teamid)
}
inline std::string* TeamMeta::_internal_mutable_teamid() {
  _has_bits_[0] |= 0x00000001u;
  return teamid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamMeta::release_teamid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamMeta.teamid)
  if (!_internal_has_teamid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return teamid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamMeta::set_allocated_teamid(std::string* teamid) {
  if (teamid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  teamid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teamid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamMeta.teamid)
}

// optional bytes playermetaidroot = 20;
inline bool TeamMeta::_internal_has_playermetaidroot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TeamMeta::has_playermetaidroot() const {
  return _internal_has_playermetaidroot();
}
inline void TeamMeta::clear_playermetaidroot() {
  playermetaidroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TeamMeta::playermetaidroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamMeta.playermetaidroot)
  return _internal_playermetaidroot();
}
inline void TeamMeta::set_playermetaidroot(const std::string& value) {
  _internal_set_playermetaidroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamMeta.playermetaidroot)
}
inline std::string* TeamMeta::mutable_playermetaidroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamMeta.playermetaidroot)
  return _internal_mutable_playermetaidroot();
}
inline const std::string& TeamMeta::_internal_playermetaidroot() const {
  return playermetaidroot_.Get();
}
inline void TeamMeta::_internal_set_playermetaidroot(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playermetaidroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamMeta::set_playermetaidroot(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  playermetaidroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamMeta.playermetaidroot)
}
inline void TeamMeta::set_playermetaidroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  playermetaidroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamMeta.playermetaidroot)
}
inline void TeamMeta::set_playermetaidroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  playermetaidroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamMeta.playermetaidroot)
}
inline std::string* TeamMeta::_internal_mutable_playermetaidroot() {
  _has_bits_[0] |= 0x00000002u;
  return playermetaidroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamMeta::release_playermetaidroot() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamMeta.playermetaidroot)
  if (!_internal_has_playermetaidroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playermetaidroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamMeta::set_allocated_playermetaidroot(std::string* playermetaidroot) {
  if (playermetaidroot != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playermetaidroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playermetaidroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamMeta.playermetaidroot)
}

// optional bytes prev = 30;
inline bool TeamMeta::_internal_has_prev() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TeamMeta::has_prev() const {
  return _internal_has_prev();
}
inline void TeamMeta::clear_prev() {
  prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TeamMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamMeta.prev)
  return _internal_prev();
}
inline void TeamMeta::set_prev(const std::string& value) {
  _internal_set_prev(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamMeta.prev)
}
inline std::string* TeamMeta::mutable_prev() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamMeta.prev)
  return _internal_mutable_prev();
}
inline const std::string& TeamMeta::_internal_prev() const {
  return prev_.Get();
}
inline void TeamMeta::_internal_set_prev(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamMeta::set_prev(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamMeta.prev)
}
inline void TeamMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamMeta.prev)
}
inline void TeamMeta::set_prev(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamMeta.prev)
}
inline std::string* TeamMeta::_internal_mutable_prev() {
  _has_bits_[0] |= 0x00000004u;
  return prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamMeta.prev)
  if (!_internal_has_prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamMeta::set_allocated_prev(std::string* prev) {
  if (prev != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamMeta.prev)
}

// -------------------------------------------------------------------

// pbstate

// optional bytes schedulestateid = 10;
inline bool pbstate::_internal_has_schedulestateid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool pbstate::has_schedulestateid() const {
  return _internal_has_schedulestateid();
}
inline void pbstate::clear_schedulestateid() {
  schedulestateid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& pbstate::schedulestateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.schedulestateid)
  return _internal_schedulestateid();
}
inline void pbstate::set_schedulestateid(const std::string& value) {
  _internal_set_schedulestateid(value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.schedulestateid)
}
inline std::string* pbstate::mutable_schedulestateid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.schedulestateid)
  return _internal_mutable_schedulestateid();
}
inline const std::string& pbstate::_internal_schedulestateid() const {
  return schedulestateid_.Get();
}
inline void pbstate::_internal_set_schedulestateid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  schedulestateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pbstate::set_schedulestateid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  schedulestateid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.schedulestateid)
}
inline void pbstate::set_schedulestateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  schedulestateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.schedulestateid)
}
inline void pbstate::set_schedulestateid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  schedulestateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.schedulestateid)
}
inline std::string* pbstate::_internal_mutable_schedulestateid() {
  _has_bits_[0] |= 0x00000001u;
  return schedulestateid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pbstate::release_schedulestateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.schedulestateid)
  if (!_internal_has_schedulestateid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return schedulestateid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pbstate::set_allocated_schedulestateid(std::string* schedulestateid) {
  if (schedulestateid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  schedulestateid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schedulestateid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.schedulestateid)
}

// optional bytes leaderboardstateid = 20;
inline bool pbstate::_internal_has_leaderboardstateid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool pbstate::has_leaderboardstateid() const {
  return _internal_has_leaderboardstateid();
}
inline void pbstate::clear_leaderboardstateid() {
  leaderboardstateid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& pbstate::leaderboardstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.leaderboardstateid)
  return _internal_leaderboardstateid();
}
inline void pbstate::set_leaderboardstateid(const std::string& value) {
  _internal_set_leaderboardstateid(value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.leaderboardstateid)
}
inline std::string* pbstate::mutable_leaderboardstateid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.leaderboardstateid)
  return _internal_mutable_leaderboardstateid();
}
inline const std::string& pbstate::_internal_leaderboardstateid() const {
  return leaderboardstateid_.Get();
}
inline void pbstate::_internal_set_leaderboardstateid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  leaderboardstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pbstate::set_leaderboardstateid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  leaderboardstateid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.leaderboardstateid)
}
inline void pbstate::set_leaderboardstateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  leaderboardstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.leaderboardstateid)
}
inline void pbstate::set_leaderboardstateid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  leaderboardstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.leaderboardstateid)
}
inline std::string* pbstate::_internal_mutable_leaderboardstateid() {
  _has_bits_[0] |= 0x00000002u;
  return leaderboardstateid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pbstate::release_leaderboardstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.leaderboardstateid)
  if (!_internal_has_leaderboardstateid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return leaderboardstateid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pbstate::set_allocated_leaderboardstateid(std::string* leaderboardstateid) {
  if (leaderboardstateid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  leaderboardstateid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboardstateid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.leaderboardstateid)
}

// optional bytes projstateid = 30;
inline bool pbstate::_internal_has_projstateid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool pbstate::has_projstateid() const {
  return _internal_has_projstateid();
}
inline void pbstate::clear_projstateid() {
  projstateid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& pbstate::projstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.projstateid)
  return _internal_projstateid();
}
inline void pbstate::set_projstateid(const std::string& value) {
  _internal_set_projstateid(value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.projstateid)
}
inline std::string* pbstate::mutable_projstateid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.projstateid)
  return _internal_mutable_projstateid();
}
inline const std::string& pbstate::_internal_projstateid() const {
  return projstateid_.Get();
}
inline void pbstate::_internal_set_projstateid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  projstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pbstate::set_projstateid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  projstateid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.projstateid)
}
inline void pbstate::set_projstateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  projstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.projstateid)
}
inline void pbstate::set_projstateid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  projstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.projstateid)
}
inline std::string* pbstate::_internal_mutable_projstateid() {
  _has_bits_[0] |= 0x00000004u;
  return projstateid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pbstate::release_projstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.projstateid)
  if (!_internal_has_projstateid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return projstateid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pbstate::set_allocated_projstateid(std::string* projstateid) {
  if (projstateid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  projstateid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), projstateid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.projstateid)
}

// optional bytes posstateid = 35;
inline bool pbstate::_internal_has_posstateid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool pbstate::has_posstateid() const {
  return _internal_has_posstateid();
}
inline void pbstate::clear_posstateid() {
  posstateid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& pbstate::posstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.posstateid)
  return _internal_posstateid();
}
inline void pbstate::set_posstateid(const std::string& value) {
  _internal_set_posstateid(value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.posstateid)
}
inline std::string* pbstate::mutable_posstateid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.posstateid)
  return _internal_mutable_posstateid();
}
inline const std::string& pbstate::_internal_posstateid() const {
  return posstateid_.Get();
}
inline void pbstate::_internal_set_posstateid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  posstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pbstate::set_posstateid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  posstateid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.posstateid)
}
inline void pbstate::set_posstateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  posstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.posstateid)
}
inline void pbstate::set_posstateid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  posstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.posstateid)
}
inline std::string* pbstate::_internal_mutable_posstateid() {
  _has_bits_[0] |= 0x00000008u;
  return posstateid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pbstate::release_posstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.posstateid)
  if (!_internal_has_posstateid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return posstateid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pbstate::set_allocated_posstateid(std::string* posstateid) {
  if (posstateid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  posstateid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), posstateid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.posstateid)
}

// optional bytes orderstateid = 40;
inline bool pbstate::_internal_has_orderstateid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool pbstate::has_orderstateid() const {
  return _internal_has_orderstateid();
}
inline void pbstate::clear_orderstateid() {
  orderstateid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& pbstate::orderstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.orderstateid)
  return _internal_orderstateid();
}
inline void pbstate::set_orderstateid(const std::string& value) {
  _internal_set_orderstateid(value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.orderstateid)
}
inline std::string* pbstate::mutable_orderstateid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.orderstateid)
  return _internal_mutable_orderstateid();
}
inline const std::string& pbstate::_internal_orderstateid() const {
  return orderstateid_.Get();
}
inline void pbstate::_internal_set_orderstateid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  orderstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pbstate::set_orderstateid(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  orderstateid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.orderstateid)
}
inline void pbstate::set_orderstateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  orderstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.orderstateid)
}
inline void pbstate::set_orderstateid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  orderstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.orderstateid)
}
inline std::string* pbstate::_internal_mutable_orderstateid() {
  _has_bits_[0] |= 0x00000010u;
  return orderstateid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pbstate::release_orderstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.orderstateid)
  if (!_internal_has_orderstateid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return orderstateid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pbstate::set_allocated_orderstateid(std::string* orderstateid) {
  if (orderstateid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  orderstateid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderstateid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.orderstateid)
}

// optional bytes marketstateid = 50;
inline bool pbstate::_internal_has_marketstateid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool pbstate::has_marketstateid() const {
  return _internal_has_marketstateid();
}
inline void pbstate::clear_marketstateid() {
  marketstateid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& pbstate::marketstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.marketstateid)
  return _internal_marketstateid();
}
inline void pbstate::set_marketstateid(const std::string& value) {
  _internal_set_marketstateid(value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.marketstateid)
}
inline std::string* pbstate::mutable_marketstateid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.marketstateid)
  return _internal_mutable_marketstateid();
}
inline const std::string& pbstate::_internal_marketstateid() const {
  return marketstateid_.Get();
}
inline void pbstate::_internal_set_marketstateid(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  marketstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pbstate::set_marketstateid(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  marketstateid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.marketstateid)
}
inline void pbstate::set_marketstateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  marketstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.marketstateid)
}
inline void pbstate::set_marketstateid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  marketstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.marketstateid)
}
inline std::string* pbstate::_internal_mutable_marketstateid() {
  _has_bits_[0] |= 0x00000020u;
  return marketstateid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pbstate::release_marketstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.marketstateid)
  if (!_internal_has_marketstateid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return marketstateid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pbstate::set_allocated_marketstateid(std::string* marketstateid) {
  if (marketstateid != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  marketstateid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketstateid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.marketstateid)
}

// optional bytes globalstateid = 60;
inline bool pbstate::_internal_has_globalstateid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool pbstate::has_globalstateid() const {
  return _internal_has_globalstateid();
}
inline void pbstate::clear_globalstateid() {
  globalstateid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& pbstate::globalstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.globalstateid)
  return _internal_globalstateid();
}
inline void pbstate::set_globalstateid(const std::string& value) {
  _internal_set_globalstateid(value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.globalstateid)
}
inline std::string* pbstate::mutable_globalstateid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.globalstateid)
  return _internal_mutable_globalstateid();
}
inline const std::string& pbstate::_internal_globalstateid() const {
  return globalstateid_.Get();
}
inline void pbstate::_internal_set_globalstateid(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  globalstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pbstate::set_globalstateid(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  globalstateid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.globalstateid)
}
inline void pbstate::set_globalstateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  globalstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.globalstateid)
}
inline void pbstate::set_globalstateid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  globalstateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.globalstateid)
}
inline std::string* pbstate::_internal_mutable_globalstateid() {
  _has_bits_[0] |= 0x00000040u;
  return globalstateid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pbstate::release_globalstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.globalstateid)
  if (!_internal_has_globalstateid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return globalstateid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pbstate::set_allocated_globalstateid(std::string* globalstateid) {
  if (globalstateid != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  globalstateid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), globalstateid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.globalstateid)
}

// optional bytes teamstatemid = 70;
inline bool pbstate::_internal_has_teamstatemid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool pbstate::has_teamstatemid() const {
  return _internal_has_teamstatemid();
}
inline void pbstate::clear_teamstatemid() {
  teamstatemid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& pbstate::teamstatemid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.teamstatemid)
  return _internal_teamstatemid();
}
inline void pbstate::set_teamstatemid(const std::string& value) {
  _internal_set_teamstatemid(value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.teamstatemid)
}
inline std::string* pbstate::mutable_teamstatemid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.teamstatemid)
  return _internal_mutable_teamstatemid();
}
inline const std::string& pbstate::_internal_teamstatemid() const {
  return teamstatemid_.Get();
}
inline void pbstate::_internal_set_teamstatemid(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  teamstatemid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pbstate::set_teamstatemid(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  teamstatemid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.teamstatemid)
}
inline void pbstate::set_teamstatemid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  teamstatemid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.teamstatemid)
}
inline void pbstate::set_teamstatemid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  teamstatemid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.teamstatemid)
}
inline std::string* pbstate::_internal_mutable_teamstatemid() {
  _has_bits_[0] |= 0x00000080u;
  return teamstatemid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pbstate::release_teamstatemid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.teamstatemid)
  if (!_internal_has_teamstatemid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return teamstatemid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pbstate::set_allocated_teamstatemid(std::string* teamstatemid) {
  if (teamstatemid != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  teamstatemid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teamstatemid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.teamstatemid)
}

// optional bytes fantasynamestateid = 80;
inline bool pbstate::_internal_has_fantasynamestateid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool pbstate::has_fantasynamestateid() const {
  return _internal_has_fantasynamestateid();
}
inline void pbstate::clear_fantasynamestateid() {
  fantasynamestateid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& pbstate::fantasynamestateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.fantasynamestateid)
  return _internal_fantasynamestateid();
}
inline void pbstate::set_fantasynamestateid(const std::string& value) {
  _internal_set_fantasynamestateid(value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.fantasynamestateid)
}
inline std::string* pbstate::mutable_fantasynamestateid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.fantasynamestateid)
  return _internal_mutable_fantasynamestateid();
}
inline const std::string& pbstate::_internal_fantasynamestateid() const {
  return fantasynamestateid_.Get();
}
inline void pbstate::_internal_set_fantasynamestateid(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  fantasynamestateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pbstate::set_fantasynamestateid(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  fantasynamestateid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.fantasynamestateid)
}
inline void pbstate::set_fantasynamestateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  fantasynamestateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.fantasynamestateid)
}
inline void pbstate::set_fantasynamestateid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  fantasynamestateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.fantasynamestateid)
}
inline std::string* pbstate::_internal_mutable_fantasynamestateid() {
  _has_bits_[0] |= 0x00000100u;
  return fantasynamestateid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pbstate::release_fantasynamestateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.fantasynamestateid)
  if (!_internal_has_fantasynamestateid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return fantasynamestateid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pbstate::set_allocated_fantasynamestateid(std::string* fantasynamestateid) {
  if (fantasynamestateid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  fantasynamestateid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fantasynamestateid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.fantasynamestateid)
}

// -------------------------------------------------------------------

// MerkleTree

// optional bytes root = 10;
inline bool MerkleTree::_internal_has_root() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MerkleTree::has_root() const {
  return _internal_has_root();
}
inline void MerkleTree::clear_root() {
  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MerkleTree::root() const {
  // @@protoc_insertion_point(field_get:fantasybit.MerkleTree.root)
  return _internal_root();
}
inline void MerkleTree::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:fantasybit.MerkleTree.root)
}
inline std::string* MerkleTree::mutable_root() {
  // @@protoc_insertion_point(field_mutable:fantasybit.MerkleTree.root)
  return _internal_mutable_root();
}
inline const std::string& MerkleTree::_internal_root() const {
  return root_.Get();
}
inline void MerkleTree::_internal_set_root(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MerkleTree::set_root(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.MerkleTree.root)
}
inline void MerkleTree::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.MerkleTree.root)
}
inline void MerkleTree::set_root(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MerkleTree.root)
}
inline std::string* MerkleTree::_internal_mutable_root() {
  _has_bits_[0] |= 0x00000001u;
  return root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MerkleTree::release_root() {
  // @@protoc_insertion_point(field_release:fantasybit.MerkleTree.root)
  if (!_internal_has_root()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return root_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MerkleTree::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MerkleTree.root)
}

// repeated bytes leaves = 20;
inline int MerkleTree::_internal_leaves_size() const {
  return leaves_.size();
}
inline int MerkleTree::leaves_size() const {
  return _internal_leaves_size();
}
inline void MerkleTree::clear_leaves() {
  leaves_.Clear();
}
inline std::string* MerkleTree::add_leaves() {
  // @@protoc_insertion_point(field_add_mutable:fantasybit.MerkleTree.leaves)
  return _internal_add_leaves();
}
inline const std::string& MerkleTree::_internal_leaves(int index) const {
  return leaves_.Get(index);
}
inline const std::string& MerkleTree::leaves(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.MerkleTree.leaves)
  return _internal_leaves(index);
}
inline std::string* MerkleTree::mutable_leaves(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.MerkleTree.leaves)
  return leaves_.Mutable(index);
}
inline void MerkleTree::set_leaves(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.MerkleTree.leaves)
  leaves_.Mutable(index)->assign(value);
}
inline void MerkleTree::set_leaves(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fantasybit.MerkleTree.leaves)
  leaves_.Mutable(index)->assign(std::move(value));
}
inline void MerkleTree::set_leaves(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  leaves_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.MerkleTree.leaves)
}
inline void MerkleTree::set_leaves(int index, const void* value, size_t size) {
  leaves_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MerkleTree.leaves)
}
inline std::string* MerkleTree::_internal_add_leaves() {
  return leaves_.Add();
}
inline void MerkleTree::add_leaves(const std::string& value) {
  leaves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.MerkleTree.leaves)
}
inline void MerkleTree::add_leaves(std::string&& value) {
  leaves_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fantasybit.MerkleTree.leaves)
}
inline void MerkleTree::add_leaves(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  leaves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.MerkleTree.leaves)
}
inline void MerkleTree::add_leaves(const void* value, size_t size) {
  leaves_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.MerkleTree.leaves)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MerkleTree::leaves() const {
  // @@protoc_insertion_point(field_list:fantasybit.MerkleTree.leaves)
  return leaves_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MerkleTree::mutable_leaves() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.MerkleTree.leaves)
  return &leaves_;
}

// -------------------------------------------------------------------

// NewPlayerModel

// repeated .fantasybit.PlayerMeta players = 10;
inline int NewPlayerModel::_internal_players_size() const {
  return players_.size();
}
inline int NewPlayerModel::players_size() const {
  return _internal_players_size();
}
inline void NewPlayerModel::clear_players() {
  players_.Clear();
}
inline ::fantasybit::PlayerMeta* NewPlayerModel::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.NewPlayerModel.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerMeta >*
NewPlayerModel::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.NewPlayerModel.players)
  return &players_;
}
inline const ::fantasybit::PlayerMeta& NewPlayerModel::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::fantasybit::PlayerMeta& NewPlayerModel::players(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.NewPlayerModel.players)
  return _internal_players(index);
}
inline ::fantasybit::PlayerMeta* NewPlayerModel::_internal_add_players() {
  return players_.Add();
}
inline ::fantasybit::PlayerMeta* NewPlayerModel::add_players() {
  // @@protoc_insertion_point(field_add:fantasybit.NewPlayerModel.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerMeta >&
NewPlayerModel::players() const {
  // @@protoc_insertion_point(field_list:fantasybit.NewPlayerModel.players)
  return players_;
}

// -------------------------------------------------------------------

// WsReq

// optional int32 version = 1;
inline bool WsReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WsReq::has_version() const {
  return _internal_has_version();
}
inline void WsReq::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WsReq::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WsReq::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.WsReq.version)
  return _internal_version();
}
inline void WsReq::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void WsReq::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:fantasybit.WsReq.version)
}

// optional .fantasybit.CType ctype = 2;
inline bool WsReq::_internal_has_ctype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WsReq::has_ctype() const {
  return _internal_has_ctype();
}
inline void WsReq::clear_ctype() {
  ctype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::fantasybit::CType WsReq::_internal_ctype() const {
  return static_cast< ::fantasybit::CType >(ctype_);
}
inline ::fantasybit::CType WsReq::ctype() const {
  // @@protoc_insertion_point(field_get:fantasybit.WsReq.ctype)
  return _internal_ctype();
}
inline void WsReq::_internal_set_ctype(::fantasybit::CType value) {
  assert(::fantasybit::CType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  ctype_ = value;
}
inline void WsReq::set_ctype(::fantasybit::CType value) {
  _internal_set_ctype(value);
  // @@protoc_insertion_point(field_set:fantasybit.WsReq.ctype)
}

// -------------------------------------------------------------------

// WSReply

// optional int32 version = 1;
inline bool WSReply::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WSReply::has_version() const {
  return _internal_has_version();
}
inline void WSReply::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WSReply::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WSReply::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.WSReply.version)
  return _internal_version();
}
inline void WSReply::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void WSReply::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:fantasybit.WSReply.version)
}

// optional .fantasybit.CType ctype = 2;
inline bool WSReply::_internal_has_ctype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WSReply::has_ctype() const {
  return _internal_has_ctype();
}
inline void WSReply::clear_ctype() {
  ctype_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::fantasybit::CType WSReply::_internal_ctype() const {
  return static_cast< ::fantasybit::CType >(ctype_);
}
inline ::fantasybit::CType WSReply::ctype() const {
  // @@protoc_insertion_point(field_get:fantasybit.WSReply.ctype)
  return _internal_ctype();
}
inline void WSReply::_internal_set_ctype(::fantasybit::CType value) {
  assert(::fantasybit::CType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  ctype_ = value;
}
inline void WSReply::set_ctype(::fantasybit::CType value) {
  _internal_set_ctype(value);
  // @@protoc_insertion_point(field_set:fantasybit.WSReply.ctype)
}

// optional .fantasybit.WsReq req = 20;
inline bool WSReply::_internal_has_req() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || req_ != nullptr);
  return value;
}
inline bool WSReply::has_req() const {
  return _internal_has_req();
}
inline void WSReply::clear_req() {
  if (req_ != nullptr) req_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::WsReq& WSReply::_internal_req() const {
  const ::fantasybit::WsReq* p = req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::WsReq*>(
      &::fantasybit::_WsReq_default_instance_);
}
inline const ::fantasybit::WsReq& WSReply::req() const {
  // @@protoc_insertion_point(field_get:fantasybit.WSReply.req)
  return _internal_req();
}
inline void WSReply::unsafe_arena_set_allocated_req(
    ::fantasybit::WsReq* req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.WSReply.req)
}
inline ::fantasybit::WsReq* WSReply::release_req() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::WsReq* temp = req_;
  req_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::WsReq* WSReply::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:fantasybit.WSReply.req)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::WsReq* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::fantasybit::WsReq* WSReply::_internal_mutable_req() {
  _has_bits_[0] |= 0x00000002u;
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::WsReq>(GetArena());
    req_ = p;
  }
  return req_;
}
inline ::fantasybit::WsReq* WSReply::mutable_req() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WSReply.req)
  return _internal_mutable_req();
}
inline void WSReply::set_allocated_req(::fantasybit::WsReq* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WSReply.req)
}

// optional string data = 30;
inline bool WSReply::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WSReply::has_data() const {
  return _internal_has_data();
}
inline void WSReply::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WSReply::data() const {
  // @@protoc_insertion_point(field_get:fantasybit.WSReply.data)
  return _internal_data();
}
inline void WSReply::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:fantasybit.WSReply.data)
}
inline std::string* WSReply::mutable_data() {
  // @@protoc_insertion_point(field_mutable:fantasybit.WSReply.data)
  return _internal_mutable_data();
}
inline const std::string& WSReply::_internal_data() const {
  return data_.Get();
}
inline void WSReply::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WSReply::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WSReply.data)
}
inline void WSReply::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.WSReply.data)
}
inline void WSReply::set_data(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WSReply.data)
}
inline std::string* WSReply::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WSReply::release_data() {
  // @@protoc_insertion_point(field_release:fantasybit.WSReply.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WSReply::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WSReply.data)
}

// -------------------------------------------------------------------

// GetGlobalStateRep

// optional .fantasybit.GlobalState globalstate = 10;
inline bool GetGlobalStateRep::_internal_has_globalstate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || globalstate_ != nullptr);
  return value;
}
inline bool GetGlobalStateRep::has_globalstate() const {
  return _internal_has_globalstate();
}
inline const ::fantasybit::GlobalState& GetGlobalStateRep::_internal_globalstate() const {
  const ::fantasybit::GlobalState* p = globalstate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::GlobalState*>(
      &::fantasybit::_GlobalState_default_instance_);
}
inline const ::fantasybit::GlobalState& GetGlobalStateRep::globalstate() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetGlobalStateRep.globalstate)
  return _internal_globalstate();
}
inline void GetGlobalStateRep::unsafe_arena_set_allocated_globalstate(
    ::fantasybit::GlobalState* globalstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalstate_);
  }
  globalstate_ = globalstate;
  if (globalstate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GetGlobalStateRep.globalstate)
}
inline ::fantasybit::GlobalState* GetGlobalStateRep::release_globalstate() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::GlobalState* temp = globalstate_;
  globalstate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::GlobalState* GetGlobalStateRep::unsafe_arena_release_globalstate() {
  // @@protoc_insertion_point(field_release:fantasybit.GetGlobalStateRep.globalstate)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::GlobalState* temp = globalstate_;
  globalstate_ = nullptr;
  return temp;
}
inline ::fantasybit::GlobalState* GetGlobalStateRep::_internal_mutable_globalstate() {
  _has_bits_[0] |= 0x00000001u;
  if (globalstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::GlobalState>(GetArena());
    globalstate_ = p;
  }
  return globalstate_;
}
inline ::fantasybit::GlobalState* GetGlobalStateRep::mutable_globalstate() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetGlobalStateRep.globalstate)
  return _internal_mutable_globalstate();
}
inline void GetGlobalStateRep::set_allocated_globalstate(::fantasybit::GlobalState* globalstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalstate_);
  }
  if (globalstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalstate)->GetArena();
    if (message_arena != submessage_arena) {
      globalstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalstate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  globalstate_ = globalstate;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetGlobalStateRep.globalstate)
}

// -------------------------------------------------------------------

// GetScheduleRep

// optional .fantasybit.ScheduleData scheduledata = 10;
inline bool GetScheduleRep::_internal_has_scheduledata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scheduledata_ != nullptr);
  return value;
}
inline bool GetScheduleRep::has_scheduledata() const {
  return _internal_has_scheduledata();
}
inline const ::fantasybit::ScheduleData& GetScheduleRep::_internal_scheduledata() const {
  const ::fantasybit::ScheduleData* p = scheduledata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ScheduleData*>(
      &::fantasybit::_ScheduleData_default_instance_);
}
inline const ::fantasybit::ScheduleData& GetScheduleRep::scheduledata() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetScheduleRep.scheduledata)
  return _internal_scheduledata();
}
inline void GetScheduleRep::unsafe_arena_set_allocated_scheduledata(
    ::fantasybit::ScheduleData* scheduledata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduledata_);
  }
  scheduledata_ = scheduledata;
  if (scheduledata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GetScheduleRep.scheduledata)
}
inline ::fantasybit::ScheduleData* GetScheduleRep::release_scheduledata() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::ScheduleData* temp = scheduledata_;
  scheduledata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ScheduleData* GetScheduleRep::unsafe_arena_release_scheduledata() {
  // @@protoc_insertion_point(field_release:fantasybit.GetScheduleRep.scheduledata)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::ScheduleData* temp = scheduledata_;
  scheduledata_ = nullptr;
  return temp;
}
inline ::fantasybit::ScheduleData* GetScheduleRep::_internal_mutable_scheduledata() {
  _has_bits_[0] |= 0x00000001u;
  if (scheduledata_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ScheduleData>(GetArena());
    scheduledata_ = p;
  }
  return scheduledata_;
}
inline ::fantasybit::ScheduleData* GetScheduleRep::mutable_scheduledata() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetScheduleRep.scheduledata)
  return _internal_mutable_scheduledata();
}
inline void GetScheduleRep::set_allocated_scheduledata(::fantasybit::ScheduleData* scheduledata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduledata_);
  }
  if (scheduledata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduledata)->GetArena();
    if (message_arena != submessage_arena) {
      scheduledata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduledata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scheduledata_ = scheduledata;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetScheduleRep.scheduledata)
}

// -------------------------------------------------------------------

// CheckNameReq

// optional string fantasy_name = 10;
inline bool CheckNameReq::_internal_has_fantasy_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CheckNameReq::has_fantasy_name() const {
  return _internal_has_fantasy_name();
}
inline void CheckNameReq::clear_fantasy_name() {
  fantasy_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CheckNameReq::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.CheckNameReq.fantasy_name)
  return _internal_fantasy_name();
}
inline void CheckNameReq::set_fantasy_name(const std::string& value) {
  _internal_set_fantasy_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.CheckNameReq.fantasy_name)
}
inline std::string* CheckNameReq::mutable_fantasy_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.CheckNameReq.fantasy_name)
  return _internal_mutable_fantasy_name();
}
inline const std::string& CheckNameReq::_internal_fantasy_name() const {
  return fantasy_name_.Get();
}
inline void CheckNameReq::_internal_set_fantasy_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CheckNameReq::set_fantasy_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.CheckNameReq.fantasy_name)
}
inline void CheckNameReq::set_fantasy_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.CheckNameReq.fantasy_name)
}
inline void CheckNameReq::set_fantasy_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.CheckNameReq.fantasy_name)
}
inline std::string* CheckNameReq::_internal_mutable_fantasy_name() {
  _has_bits_[0] |= 0x00000001u;
  return fantasy_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CheckNameReq::release_fantasy_name() {
  // @@protoc_insertion_point(field_release:fantasybit.CheckNameReq.fantasy_name)
  if (!_internal_has_fantasy_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fantasy_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckNameReq::set_allocated_fantasy_name(std::string* fantasy_name) {
  if (fantasy_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fantasy_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fantasy_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.CheckNameReq.fantasy_name)
}

// -------------------------------------------------------------------

// CheckNameRep

// optional string isavail = 10;
inline bool CheckNameRep::_internal_has_isavail() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CheckNameRep::has_isavail() const {
  return _internal_has_isavail();
}
inline void CheckNameRep::clear_isavail() {
  isavail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CheckNameRep::isavail() const {
  // @@protoc_insertion_point(field_get:fantasybit.CheckNameRep.isavail)
  return _internal_isavail();
}
inline void CheckNameRep::set_isavail(const std::string& value) {
  _internal_set_isavail(value);
  // @@protoc_insertion_point(field_set:fantasybit.CheckNameRep.isavail)
}
inline std::string* CheckNameRep::mutable_isavail() {
  // @@protoc_insertion_point(field_mutable:fantasybit.CheckNameRep.isavail)
  return _internal_mutable_isavail();
}
inline const std::string& CheckNameRep::_internal_isavail() const {
  return isavail_.Get();
}
inline void CheckNameRep::_internal_set_isavail(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  isavail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CheckNameRep::set_isavail(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  isavail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.CheckNameRep.isavail)
}
inline void CheckNameRep::set_isavail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  isavail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.CheckNameRep.isavail)
}
inline void CheckNameRep::set_isavail(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  isavail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.CheckNameRep.isavail)
}
inline std::string* CheckNameRep::_internal_mutable_isavail() {
  _has_bits_[0] |= 0x00000001u;
  return isavail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CheckNameRep::release_isavail() {
  // @@protoc_insertion_point(field_release:fantasybit.CheckNameRep.isavail)
  if (!_internal_has_isavail()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return isavail_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckNameRep::set_allocated_isavail(std::string* isavail) {
  if (isavail != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  isavail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), isavail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.CheckNameRep.isavail)
}

// optional .fantasybit.CheckNameReq req = 20;
inline bool CheckNameRep::_internal_has_req() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || req_ != nullptr);
  return value;
}
inline bool CheckNameRep::has_req() const {
  return _internal_has_req();
}
inline void CheckNameRep::clear_req() {
  if (req_ != nullptr) req_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::CheckNameReq& CheckNameRep::_internal_req() const {
  const ::fantasybit::CheckNameReq* p = req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::CheckNameReq*>(
      &::fantasybit::_CheckNameReq_default_instance_);
}
inline const ::fantasybit::CheckNameReq& CheckNameRep::req() const {
  // @@protoc_insertion_point(field_get:fantasybit.CheckNameRep.req)
  return _internal_req();
}
inline void CheckNameRep::unsafe_arena_set_allocated_req(
    ::fantasybit::CheckNameReq* req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.CheckNameRep.req)
}
inline ::fantasybit::CheckNameReq* CheckNameRep::release_req() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::CheckNameReq* temp = req_;
  req_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::CheckNameReq* CheckNameRep::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:fantasybit.CheckNameRep.req)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::CheckNameReq* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::fantasybit::CheckNameReq* CheckNameRep::_internal_mutable_req() {
  _has_bits_[0] |= 0x00000002u;
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::CheckNameReq>(GetArena());
    req_ = p;
  }
  return req_;
}
inline ::fantasybit::CheckNameReq* CheckNameRep::mutable_req() {
  // @@protoc_insertion_point(field_mutable:fantasybit.CheckNameRep.req)
  return _internal_mutable_req();
}
inline void CheckNameRep::set_allocated_req(::fantasybit::CheckNameReq* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.CheckNameRep.req)
}

// -------------------------------------------------------------------

// Pk2FnameReq

// optional string pk = 10;
inline bool Pk2FnameReq::_internal_has_pk() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pk2FnameReq::has_pk() const {
  return _internal_has_pk();
}
inline void Pk2FnameReq::clear_pk() {
  pk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Pk2FnameReq::pk() const {
  // @@protoc_insertion_point(field_get:fantasybit.Pk2FnameReq.pk)
  return _internal_pk();
}
inline void Pk2FnameReq::set_pk(const std::string& value) {
  _internal_set_pk(value);
  // @@protoc_insertion_point(field_set:fantasybit.Pk2FnameReq.pk)
}
inline std::string* Pk2FnameReq::mutable_pk() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Pk2FnameReq.pk)
  return _internal_mutable_pk();
}
inline const std::string& Pk2FnameReq::_internal_pk() const {
  return pk_.Get();
}
inline void Pk2FnameReq::_internal_set_pk(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pk2FnameReq::set_pk(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pk_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Pk2FnameReq.pk)
}
inline void Pk2FnameReq::set_pk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Pk2FnameReq.pk)
}
inline void Pk2FnameReq::set_pk(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Pk2FnameReq.pk)
}
inline std::string* Pk2FnameReq::_internal_mutable_pk() {
  _has_bits_[0] |= 0x00000001u;
  return pk_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pk2FnameReq::release_pk() {
  // @@protoc_insertion_point(field_release:fantasybit.Pk2FnameReq.pk)
  if (!_internal_has_pk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pk2FnameReq::set_allocated_pk(std::string* pk) {
  if (pk != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Pk2FnameReq.pk)
}

// -------------------------------------------------------------------

// Pk2FnameRep

// optional string fname = 10;
inline bool Pk2FnameRep::_internal_has_fname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pk2FnameRep::has_fname() const {
  return _internal_has_fname();
}
inline void Pk2FnameRep::clear_fname() {
  fname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Pk2FnameRep::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.Pk2FnameRep.fname)
  return _internal_fname();
}
inline void Pk2FnameRep::set_fname(const std::string& value) {
  _internal_set_fname(value);
  // @@protoc_insertion_point(field_set:fantasybit.Pk2FnameRep.fname)
}
inline std::string* Pk2FnameRep::mutable_fname() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Pk2FnameRep.fname)
  return _internal_mutable_fname();
}
inline const std::string& Pk2FnameRep::_internal_fname() const {
  return fname_.Get();
}
inline void Pk2FnameRep::_internal_set_fname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pk2FnameRep::set_fname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Pk2FnameRep.fname)
}
inline void Pk2FnameRep::set_fname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Pk2FnameRep.fname)
}
inline void Pk2FnameRep::set_fname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Pk2FnameRep.fname)
}
inline std::string* Pk2FnameRep::_internal_mutable_fname() {
  _has_bits_[0] |= 0x00000001u;
  return fname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pk2FnameRep::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.Pk2FnameRep.fname)
  if (!_internal_has_fname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pk2FnameRep::set_allocated_fname(std::string* fname) {
  if (fname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Pk2FnameRep.fname)
}

// optional .fantasybit.Pk2FnameReq req = 20;
inline bool Pk2FnameRep::_internal_has_req() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || req_ != nullptr);
  return value;
}
inline bool Pk2FnameRep::has_req() const {
  return _internal_has_req();
}
inline void Pk2FnameRep::clear_req() {
  if (req_ != nullptr) req_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::Pk2FnameReq& Pk2FnameRep::_internal_req() const {
  const ::fantasybit::Pk2FnameReq* p = req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::Pk2FnameReq*>(
      &::fantasybit::_Pk2FnameReq_default_instance_);
}
inline const ::fantasybit::Pk2FnameReq& Pk2FnameRep::req() const {
  // @@protoc_insertion_point(field_get:fantasybit.Pk2FnameRep.req)
  return _internal_req();
}
inline void Pk2FnameRep::unsafe_arena_set_allocated_req(
    ::fantasybit::Pk2FnameReq* req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.Pk2FnameRep.req)
}
inline ::fantasybit::Pk2FnameReq* Pk2FnameRep::release_req() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::Pk2FnameReq* temp = req_;
  req_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::Pk2FnameReq* Pk2FnameRep::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:fantasybit.Pk2FnameRep.req)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::Pk2FnameReq* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::fantasybit::Pk2FnameReq* Pk2FnameRep::_internal_mutable_req() {
  _has_bits_[0] |= 0x00000002u;
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::Pk2FnameReq>(GetArena());
    req_ = p;
  }
  return req_;
}
inline ::fantasybit::Pk2FnameReq* Pk2FnameRep::mutable_req() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Pk2FnameRep.req)
  return _internal_mutable_req();
}
inline void Pk2FnameRep::set_allocated_req(::fantasybit::Pk2FnameReq* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Pk2FnameRep.req)
}

// optional .fantasybit.FantasyNameBal fnb = 30;
inline bool Pk2FnameRep::_internal_has_fnb() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || fnb_ != nullptr);
  return value;
}
inline bool Pk2FnameRep::has_fnb() const {
  return _internal_has_fnb();
}
inline const ::fantasybit::FantasyNameBal& Pk2FnameRep::_internal_fnb() const {
  const ::fantasybit::FantasyNameBal* p = fnb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::FantasyNameBal*>(
      &::fantasybit::_FantasyNameBal_default_instance_);
}
inline const ::fantasybit::FantasyNameBal& Pk2FnameRep::fnb() const {
  // @@protoc_insertion_point(field_get:fantasybit.Pk2FnameRep.fnb)
  return _internal_fnb();
}
inline void Pk2FnameRep::unsafe_arena_set_allocated_fnb(
    ::fantasybit::FantasyNameBal* fnb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fnb_);
  }
  fnb_ = fnb;
  if (fnb) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.Pk2FnameRep.fnb)
}
inline ::fantasybit::FantasyNameBal* Pk2FnameRep::release_fnb() {
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::FantasyNameBal* temp = fnb_;
  fnb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::FantasyNameBal* Pk2FnameRep::unsafe_arena_release_fnb() {
  // @@protoc_insertion_point(field_release:fantasybit.Pk2FnameRep.fnb)
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::FantasyNameBal* temp = fnb_;
  fnb_ = nullptr;
  return temp;
}
inline ::fantasybit::FantasyNameBal* Pk2FnameRep::_internal_mutable_fnb() {
  _has_bits_[0] |= 0x00000004u;
  if (fnb_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::FantasyNameBal>(GetArena());
    fnb_ = p;
  }
  return fnb_;
}
inline ::fantasybit::FantasyNameBal* Pk2FnameRep::mutable_fnb() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Pk2FnameRep.fnb)
  return _internal_mutable_fnb();
}
inline void Pk2FnameRep::set_allocated_fnb(::fantasybit::FantasyNameBal* fnb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fnb_);
  }
  if (fnb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fnb)->GetArena();
    if (message_arena != submessage_arena) {
      fnb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fnb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fnb_ = fnb;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Pk2FnameRep.fnb)
}

// -------------------------------------------------------------------

// SubscribeReq

// optional string name = 10;
inline bool SubscribeReq::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubscribeReq::has_name() const {
  return _internal_has_name();
}
inline void SubscribeReq::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubscribeReq::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.SubscribeReq.name)
  return _internal_name();
}
inline void SubscribeReq::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.SubscribeReq.name)
}
inline std::string* SubscribeReq::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.SubscribeReq.name)
  return _internal_mutable_name();
}
inline const std::string& SubscribeReq::_internal_name() const {
  return name_.Get();
}
inline void SubscribeReq::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeReq::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.SubscribeReq.name)
}
inline void SubscribeReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.SubscribeReq.name)
}
inline void SubscribeReq::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SubscribeReq.name)
}
inline std::string* SubscribeReq::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeReq::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.SubscribeReq.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SubscribeReq.name)
}

// optional uint64 fchash = 30;
inline bool SubscribeReq::_internal_has_fchash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubscribeReq::has_fchash() const {
  return _internal_has_fchash();
}
inline void SubscribeReq::clear_fchash() {
  fchash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeReq::_internal_fchash() const {
  return fchash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeReq::fchash() const {
  // @@protoc_insertion_point(field_get:fantasybit.SubscribeReq.fchash)
  return _internal_fchash();
}
inline void SubscribeReq::_internal_set_fchash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  fchash_ = value;
}
inline void SubscribeReq::set_fchash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fchash(value);
  // @@protoc_insertion_point(field_set:fantasybit.SubscribeReq.fchash)
}

// -------------------------------------------------------------------

// NameStatusReq

// optional string name = 10;
inline bool NameStatusReq::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NameStatusReq::has_name() const {
  return _internal_has_name();
}
inline void NameStatusReq::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NameStatusReq::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameStatusReq.name)
  return _internal_name();
}
inline void NameStatusReq::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.NameStatusReq.name)
}
inline std::string* NameStatusReq::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.NameStatusReq.name)
  return _internal_mutable_name();
}
inline const std::string& NameStatusReq::_internal_name() const {
  return name_.Get();
}
inline void NameStatusReq::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NameStatusReq::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.NameStatusReq.name)
}
inline void NameStatusReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.NameStatusReq.name)
}
inline void NameStatusReq::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameStatusReq.name)
}
inline std::string* NameStatusReq::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NameStatusReq::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.NameStatusReq.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NameStatusReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameStatusReq.name)
}

// optional string pk = 20;
inline bool NameStatusReq::_internal_has_pk() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NameStatusReq::has_pk() const {
  return _internal_has_pk();
}
inline void NameStatusReq::clear_pk() {
  pk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NameStatusReq::pk() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameStatusReq.pk)
  return _internal_pk();
}
inline void NameStatusReq::set_pk(const std::string& value) {
  _internal_set_pk(value);
  // @@protoc_insertion_point(field_set:fantasybit.NameStatusReq.pk)
}
inline std::string* NameStatusReq::mutable_pk() {
  // @@protoc_insertion_point(field_mutable:fantasybit.NameStatusReq.pk)
  return _internal_mutable_pk();
}
inline const std::string& NameStatusReq::_internal_pk() const {
  return pk_.Get();
}
inline void NameStatusReq::_internal_set_pk(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NameStatusReq::set_pk(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pk_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.NameStatusReq.pk)
}
inline void NameStatusReq::set_pk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.NameStatusReq.pk)
}
inline void NameStatusReq::set_pk(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameStatusReq.pk)
}
inline std::string* NameStatusReq::_internal_mutable_pk() {
  _has_bits_[0] |= 0x00000002u;
  return pk_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NameStatusReq::release_pk() {
  // @@protoc_insertion_point(field_release:fantasybit.NameStatusReq.pk)
  if (!_internal_has_pk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NameStatusReq::set_allocated_pk(std::string* pk) {
  if (pk != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameStatusReq.pk)
}

// -------------------------------------------------------------------

// NameStatusRep

// optional .fantasybit.MyNameStatus status = 10;
inline bool NameStatusRep::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NameStatusRep::has_status() const {
  return _internal_has_status();
}
inline void NameStatusRep::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::fantasybit::MyNameStatus NameStatusRep::_internal_status() const {
  return static_cast< ::fantasybit::MyNameStatus >(status_);
}
inline ::fantasybit::MyNameStatus NameStatusRep::status() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameStatusRep.status)
  return _internal_status();
}
inline void NameStatusRep::_internal_set_status(::fantasybit::MyNameStatus value) {
  assert(::fantasybit::MyNameStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void NameStatusRep::set_status(::fantasybit::MyNameStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fantasybit.NameStatusRep.status)
}

// optional .fantasybit.NameStatusReq req = 20;
inline bool NameStatusRep::_internal_has_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || req_ != nullptr);
  return value;
}
inline bool NameStatusRep::has_req() const {
  return _internal_has_req();
}
inline void NameStatusRep::clear_req() {
  if (req_ != nullptr) req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::NameStatusReq& NameStatusRep::_internal_req() const {
  const ::fantasybit::NameStatusReq* p = req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::NameStatusReq*>(
      &::fantasybit::_NameStatusReq_default_instance_);
}
inline const ::fantasybit::NameStatusReq& NameStatusRep::req() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameStatusRep.req)
  return _internal_req();
}
inline void NameStatusRep::unsafe_arena_set_allocated_req(
    ::fantasybit::NameStatusReq* req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.NameStatusRep.req)
}
inline ::fantasybit::NameStatusReq* NameStatusRep::release_req() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::NameStatusReq* temp = req_;
  req_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::NameStatusReq* NameStatusRep::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:fantasybit.NameStatusRep.req)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::NameStatusReq* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::fantasybit::NameStatusReq* NameStatusRep::_internal_mutable_req() {
  _has_bits_[0] |= 0x00000001u;
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::NameStatusReq>(GetArena());
    req_ = p;
  }
  return req_;
}
inline ::fantasybit::NameStatusReq* NameStatusRep::mutable_req() {
  // @@protoc_insertion_point(field_mutable:fantasybit.NameStatusRep.req)
  return _internal_mutable_req();
}
inline void NameStatusRep::set_allocated_req(::fantasybit::NameStatusReq* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameStatusRep.req)
}

// -------------------------------------------------------------------

// GetAllNamesRep

// repeated string names = 10;
inline int GetAllNamesRep::_internal_names_size() const {
  return names_.size();
}
inline int GetAllNamesRep::names_size() const {
  return _internal_names_size();
}
inline void GetAllNamesRep::clear_names() {
  names_.Clear();
}
inline std::string* GetAllNamesRep::add_names() {
  // @@protoc_insertion_point(field_add_mutable:fantasybit.GetAllNamesRep.names)
  return _internal_add_names();
}
inline const std::string& GetAllNamesRep::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& GetAllNamesRep::names(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GetAllNamesRep.names)
  return _internal_names(index);
}
inline std::string* GetAllNamesRep::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetAllNamesRep.names)
  return names_.Mutable(index);
}
inline void GetAllNamesRep::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.GetAllNamesRep.names)
  names_.Mutable(index)->assign(value);
}
inline void GetAllNamesRep::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fantasybit.GetAllNamesRep.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void GetAllNamesRep::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.GetAllNamesRep.names)
}
inline void GetAllNamesRep::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetAllNamesRep.names)
}
inline std::string* GetAllNamesRep::_internal_add_names() {
  return names_.Add();
}
inline void GetAllNamesRep::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.GetAllNamesRep.names)
}
inline void GetAllNamesRep::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fantasybit.GetAllNamesRep.names)
}
inline void GetAllNamesRep::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.GetAllNamesRep.names)
}
inline void GetAllNamesRep::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.GetAllNamesRep.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAllNamesRep::names() const {
  // @@protoc_insertion_point(field_list:fantasybit.GetAllNamesRep.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAllNamesRep::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GetAllNamesRep.names)
  return &names_;
}

// repeated .fantasybit.FantasyNameBal fnb = 20;
inline int GetAllNamesRep::_internal_fnb_size() const {
  return fnb_.size();
}
inline int GetAllNamesRep::fnb_size() const {
  return _internal_fnb_size();
}
inline ::fantasybit::FantasyNameBal* GetAllNamesRep::mutable_fnb(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetAllNamesRep.fnb)
  return fnb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyNameBal >*
GetAllNamesRep::mutable_fnb() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GetAllNamesRep.fnb)
  return &fnb_;
}
inline const ::fantasybit::FantasyNameBal& GetAllNamesRep::_internal_fnb(int index) const {
  return fnb_.Get(index);
}
inline const ::fantasybit::FantasyNameBal& GetAllNamesRep::fnb(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GetAllNamesRep.fnb)
  return _internal_fnb(index);
}
inline ::fantasybit::FantasyNameBal* GetAllNamesRep::_internal_add_fnb() {
  return fnb_.Add();
}
inline ::fantasybit::FantasyNameBal* GetAllNamesRep::add_fnb() {
  // @@protoc_insertion_point(field_add:fantasybit.GetAllNamesRep.fnb)
  return _internal_add_fnb();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyNameBal >&
GetAllNamesRep::fnb() const {
  // @@protoc_insertion_point(field_list:fantasybit.GetAllNamesRep.fnb)
  return fnb_;
}

// -------------------------------------------------------------------

// TeamRoster

// optional string teamid = 10;
inline bool TeamRoster::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TeamRoster::has_teamid() const {
  return _internal_has_teamid();
}
inline void TeamRoster::clear_teamid() {
  teamid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TeamRoster::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamRoster.teamid)
  return _internal_teamid();
}
inline void TeamRoster::set_teamid(const std::string& value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamRoster.teamid)
}
inline std::string* TeamRoster::mutable_teamid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamRoster.teamid)
  return _internal_mutable_teamid();
}
inline const std::string& TeamRoster::_internal_teamid() const {
  return teamid_.Get();
}
inline void TeamRoster::_internal_set_teamid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamRoster::set_teamid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  teamid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamRoster.teamid)
}
inline void TeamRoster::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamRoster.teamid)
}
inline void TeamRoster::set_teamid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamRoster.teamid)
}
inline std::string* TeamRoster::_internal_mutable_teamid() {
  _has_bits_[0] |= 0x00000001u;
  return teamid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamRoster::release_teamid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamRoster.teamid)
  if (!_internal_has_teamid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return teamid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamRoster::set_allocated_teamid(std::string* teamid) {
  if (teamid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  teamid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teamid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamRoster.teamid)
}

// repeated .fantasybit.PlayerData players = 20;
inline int TeamRoster::_internal_players_size() const {
  return players_.size();
}
inline int TeamRoster::players_size() const {
  return _internal_players_size();
}
inline ::fantasybit::PlayerData* TeamRoster::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamRoster.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerData >*
TeamRoster::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.TeamRoster.players)
  return &players_;
}
inline const ::fantasybit::PlayerData& TeamRoster::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::fantasybit::PlayerData& TeamRoster::players(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamRoster.players)
  return _internal_players(index);
}
inline ::fantasybit::PlayerData* TeamRoster::_internal_add_players() {
  return players_.Add();
}
inline ::fantasybit::PlayerData* TeamRoster::add_players() {
  // @@protoc_insertion_point(field_add:fantasybit.TeamRoster.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerData >&
TeamRoster::players() const {
  // @@protoc_insertion_point(field_list:fantasybit.TeamRoster.players)
  return players_;
}

// -------------------------------------------------------------------

// GameDataRoster

// optional .fantasybit.GameData game_data = 10;
inline bool GameDataRoster::_internal_has_game_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || game_data_ != nullptr);
  return value;
}
inline bool GameDataRoster::has_game_data() const {
  return _internal_has_game_data();
}
inline const ::fantasybit::GameData& GameDataRoster::_internal_game_data() const {
  const ::fantasybit::GameData* p = game_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::GameData*>(
      &::fantasybit::_GameData_default_instance_);
}
inline const ::fantasybit::GameData& GameDataRoster::game_data() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameDataRoster.game_data)
  return _internal_game_data();
}
inline void GameDataRoster::unsafe_arena_set_allocated_game_data(
    ::fantasybit::GameData* game_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_data_);
  }
  game_data_ = game_data;
  if (game_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GameDataRoster.game_data)
}
inline ::fantasybit::GameData* GameDataRoster::release_game_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::GameData* temp = game_data_;
  game_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::GameData* GameDataRoster::unsafe_arena_release_game_data() {
  // @@protoc_insertion_point(field_release:fantasybit.GameDataRoster.game_data)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::GameData* temp = game_data_;
  game_data_ = nullptr;
  return temp;
}
inline ::fantasybit::GameData* GameDataRoster::_internal_mutable_game_data() {
  _has_bits_[0] |= 0x00000001u;
  if (game_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::GameData>(GetArena());
    game_data_ = p;
  }
  return game_data_;
}
inline ::fantasybit::GameData* GameDataRoster::mutable_game_data() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameDataRoster.game_data)
  return _internal_mutable_game_data();
}
inline void GameDataRoster::set_allocated_game_data(::fantasybit::GameData* game_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_data_);
  }
  if (game_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_data)->GetArena();
    if (message_arena != submessage_arena) {
      game_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_data_ = game_data;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameDataRoster.game_data)
}

// optional .fantasybit.TeamRoster homeroster = 20;
inline bool GameDataRoster::_internal_has_homeroster() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || homeroster_ != nullptr);
  return value;
}
inline bool GameDataRoster::has_homeroster() const {
  return _internal_has_homeroster();
}
inline void GameDataRoster::clear_homeroster() {
  if (homeroster_ != nullptr) homeroster_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::TeamRoster& GameDataRoster::_internal_homeroster() const {
  const ::fantasybit::TeamRoster* p = homeroster_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::TeamRoster*>(
      &::fantasybit::_TeamRoster_default_instance_);
}
inline const ::fantasybit::TeamRoster& GameDataRoster::homeroster() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameDataRoster.homeroster)
  return _internal_homeroster();
}
inline void GameDataRoster::unsafe_arena_set_allocated_homeroster(
    ::fantasybit::TeamRoster* homeroster) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(homeroster_);
  }
  homeroster_ = homeroster;
  if (homeroster) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GameDataRoster.homeroster)
}
inline ::fantasybit::TeamRoster* GameDataRoster::release_homeroster() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::TeamRoster* temp = homeroster_;
  homeroster_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::TeamRoster* GameDataRoster::unsafe_arena_release_homeroster() {
  // @@protoc_insertion_point(field_release:fantasybit.GameDataRoster.homeroster)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::TeamRoster* temp = homeroster_;
  homeroster_ = nullptr;
  return temp;
}
inline ::fantasybit::TeamRoster* GameDataRoster::_internal_mutable_homeroster() {
  _has_bits_[0] |= 0x00000002u;
  if (homeroster_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::TeamRoster>(GetArena());
    homeroster_ = p;
  }
  return homeroster_;
}
inline ::fantasybit::TeamRoster* GameDataRoster::mutable_homeroster() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameDataRoster.homeroster)
  return _internal_mutable_homeroster();
}
inline void GameDataRoster::set_allocated_homeroster(::fantasybit::TeamRoster* homeroster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete homeroster_;
  }
  if (homeroster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(homeroster);
    if (message_arena != submessage_arena) {
      homeroster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, homeroster, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  homeroster_ = homeroster;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameDataRoster.homeroster)
}

// optional .fantasybit.TeamRoster awayroster = 30;
inline bool GameDataRoster::_internal_has_awayroster() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || awayroster_ != nullptr);
  return value;
}
inline bool GameDataRoster::has_awayroster() const {
  return _internal_has_awayroster();
}
inline void GameDataRoster::clear_awayroster() {
  if (awayroster_ != nullptr) awayroster_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::TeamRoster& GameDataRoster::_internal_awayroster() const {
  const ::fantasybit::TeamRoster* p = awayroster_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::TeamRoster*>(
      &::fantasybit::_TeamRoster_default_instance_);
}
inline const ::fantasybit::TeamRoster& GameDataRoster::awayroster() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameDataRoster.awayroster)
  return _internal_awayroster();
}
inline void GameDataRoster::unsafe_arena_set_allocated_awayroster(
    ::fantasybit::TeamRoster* awayroster) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(awayroster_);
  }
  awayroster_ = awayroster;
  if (awayroster) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GameDataRoster.awayroster)
}
inline ::fantasybit::TeamRoster* GameDataRoster::release_awayroster() {
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::TeamRoster* temp = awayroster_;
  awayroster_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::TeamRoster* GameDataRoster::unsafe_arena_release_awayroster() {
  // @@protoc_insertion_point(field_release:fantasybit.GameDataRoster.awayroster)
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::TeamRoster* temp = awayroster_;
  awayroster_ = nullptr;
  return temp;
}
inline ::fantasybit::TeamRoster* GameDataRoster::_internal_mutable_awayroster() {
  _has_bits_[0] |= 0x00000004u;
  if (awayroster_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::TeamRoster>(GetArena());
    awayroster_ = p;
  }
  return awayroster_;
}
inline ::fantasybit::TeamRoster* GameDataRoster::mutable_awayroster() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameDataRoster.awayroster)
  return _internal_mutable_awayroster();
}
inline void GameDataRoster::set_allocated_awayroster(::fantasybit::TeamRoster* awayroster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete awayroster_;
  }
  if (awayroster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(awayroster);
    if (message_arena != submessage_arena) {
      awayroster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, awayroster, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  awayroster_ = awayroster;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameDataRoster.awayroster)
}

// -------------------------------------------------------------------

// GetCurrRostersRep

// optional int32 week = 10;
inline bool GetCurrRostersRep::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetCurrRostersRep::has_week() const {
  return _internal_has_week();
}
inline void GetCurrRostersRep::clear_week() {
  week_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCurrRostersRep::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCurrRostersRep::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetCurrRostersRep.week)
  return _internal_week();
}
inline void GetCurrRostersRep::_internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  week_ = value;
}
inline void GetCurrRostersRep::set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.GetCurrRostersRep.week)
}

// repeated .fantasybit.GameDataRoster gamerosters = 20;
inline int GetCurrRostersRep::_internal_gamerosters_size() const {
  return gamerosters_.size();
}
inline int GetCurrRostersRep::gamerosters_size() const {
  return _internal_gamerosters_size();
}
inline void GetCurrRostersRep::clear_gamerosters() {
  gamerosters_.Clear();
}
inline ::fantasybit::GameDataRoster* GetCurrRostersRep::mutable_gamerosters(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetCurrRostersRep.gamerosters)
  return gamerosters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::GameDataRoster >*
GetCurrRostersRep::mutable_gamerosters() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GetCurrRostersRep.gamerosters)
  return &gamerosters_;
}
inline const ::fantasybit::GameDataRoster& GetCurrRostersRep::_internal_gamerosters(int index) const {
  return gamerosters_.Get(index);
}
inline const ::fantasybit::GameDataRoster& GetCurrRostersRep::gamerosters(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GetCurrRostersRep.gamerosters)
  return _internal_gamerosters(index);
}
inline ::fantasybit::GameDataRoster* GetCurrRostersRep::_internal_add_gamerosters() {
  return gamerosters_.Add();
}
inline ::fantasybit::GameDataRoster* GetCurrRostersRep::add_gamerosters() {
  // @@protoc_insertion_point(field_add:fantasybit.GetCurrRostersRep.gamerosters)
  return _internal_add_gamerosters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::GameDataRoster >&
GetCurrRostersRep::gamerosters() const {
  // @@protoc_insertion_point(field_list:fantasybit.GetCurrRostersRep.gamerosters)
  return gamerosters_;
}

// -------------------------------------------------------------------

// ROWMarket

// optional string pid = 10;
inline bool ROWMarket::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROWMarket::has_pid() const {
  return _internal_has_pid();
}
inline void ROWMarket::clear_pid() {
  pid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ROWMarket::pid() const {
  // @@protoc_insertion_point(field_get:fantasybit.ROWMarket.pid)
  return _internal_pid();
}
inline void ROWMarket::set_pid(const std::string& value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fantasybit.ROWMarket.pid)
}
inline std::string* ROWMarket::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ROWMarket.pid)
  return _internal_mutable_pid();
}
inline const std::string& ROWMarket::_internal_pid() const {
  return pid_.Get();
}
inline void ROWMarket::_internal_set_pid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ROWMarket::set_pid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ROWMarket.pid)
}
inline void ROWMarket::set_pid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.ROWMarket.pid)
}
inline void ROWMarket::set_pid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ROWMarket.pid)
}
inline std::string* ROWMarket::_internal_mutable_pid() {
  _has_bits_[0] |= 0x00000001u;
  return pid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ROWMarket::release_pid() {
  // @@protoc_insertion_point(field_release:fantasybit.ROWMarket.pid)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROWMarket::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ROWMarket.pid)
}

// optional .fantasybit.MarketQuote quote = 30;
inline bool ROWMarket::_internal_has_quote() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || quote_ != nullptr);
  return value;
}
inline bool ROWMarket::has_quote() const {
  return _internal_has_quote();
}
inline const ::fantasybit::MarketQuote& ROWMarket::_internal_quote() const {
  const ::fantasybit::MarketQuote* p = quote_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::MarketQuote*>(
      &::fantasybit::_MarketQuote_default_instance_);
}
inline const ::fantasybit::MarketQuote& ROWMarket::quote() const {
  // @@protoc_insertion_point(field_get:fantasybit.ROWMarket.quote)
  return _internal_quote();
}
inline void ROWMarket::unsafe_arena_set_allocated_quote(
    ::fantasybit::MarketQuote* quote) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quote_);
  }
  quote_ = quote;
  if (quote) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.ROWMarket.quote)
}
inline ::fantasybit::MarketQuote* ROWMarket::release_quote() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::MarketQuote* temp = quote_;
  quote_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::MarketQuote* ROWMarket::unsafe_arena_release_quote() {
  // @@protoc_insertion_point(field_release:fantasybit.ROWMarket.quote)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::MarketQuote* temp = quote_;
  quote_ = nullptr;
  return temp;
}
inline ::fantasybit::MarketQuote* ROWMarket::_internal_mutable_quote() {
  _has_bits_[0] |= 0x00000002u;
  if (quote_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::MarketQuote>(GetArena());
    quote_ = p;
  }
  return quote_;
}
inline ::fantasybit::MarketQuote* ROWMarket::mutable_quote() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ROWMarket.quote)
  return _internal_mutable_quote();
}
inline void ROWMarket::set_allocated_quote(::fantasybit::MarketQuote* quote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quote_);
  }
  if (quote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quote)->GetArena();
    if (message_arena != submessage_arena) {
      quote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quote, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  quote_ = quote;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ROWMarket.quote)
}

// optional .fantasybit.PlayerData playerdata = 40;
inline bool ROWMarket::_internal_has_playerdata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || playerdata_ != nullptr);
  return value;
}
inline bool ROWMarket::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::fantasybit::PlayerData& ROWMarket::_internal_playerdata() const {
  const ::fantasybit::PlayerData* p = playerdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::PlayerData*>(
      &::fantasybit::_PlayerData_default_instance_);
}
inline const ::fantasybit::PlayerData& ROWMarket::playerdata() const {
  // @@protoc_insertion_point(field_get:fantasybit.ROWMarket.playerdata)
  return _internal_playerdata();
}
inline void ROWMarket::unsafe_arena_set_allocated_playerdata(
    ::fantasybit::PlayerData* playerdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  playerdata_ = playerdata;
  if (playerdata) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.ROWMarket.playerdata)
}
inline ::fantasybit::PlayerData* ROWMarket::release_playerdata() {
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::PlayerData* ROWMarket::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:fantasybit.ROWMarket.playerdata)
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  return temp;
}
inline ::fantasybit::PlayerData* ROWMarket::_internal_mutable_playerdata() {
  _has_bits_[0] |= 0x00000004u;
  if (playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::PlayerData>(GetArena());
    playerdata_ = p;
  }
  return playerdata_;
}
inline ::fantasybit::PlayerData* ROWMarket::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ROWMarket.playerdata)
  return _internal_mutable_playerdata();
}
inline void ROWMarket::set_allocated_playerdata(::fantasybit::PlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata)->GetArena();
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ROWMarket.playerdata)
}

// optional .fantasybit.ContractOHLC ohlc = 50;
inline bool ROWMarket::_internal_has_ohlc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || ohlc_ != nullptr);
  return value;
}
inline bool ROWMarket::has_ohlc() const {
  return _internal_has_ohlc();
}
inline const ::fantasybit::ContractOHLC& ROWMarket::_internal_ohlc() const {
  const ::fantasybit::ContractOHLC* p = ohlc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ContractOHLC*>(
      &::fantasybit::_ContractOHLC_default_instance_);
}
inline const ::fantasybit::ContractOHLC& ROWMarket::ohlc() const {
  // @@protoc_insertion_point(field_get:fantasybit.ROWMarket.ohlc)
  return _internal_ohlc();
}
inline void ROWMarket::unsafe_arena_set_allocated_ohlc(
    ::fantasybit::ContractOHLC* ohlc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ohlc_);
  }
  ohlc_ = ohlc;
  if (ohlc) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.ROWMarket.ohlc)
}
inline ::fantasybit::ContractOHLC* ROWMarket::release_ohlc() {
  _has_bits_[0] &= ~0x00000008u;
  ::fantasybit::ContractOHLC* temp = ohlc_;
  ohlc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ContractOHLC* ROWMarket::unsafe_arena_release_ohlc() {
  // @@protoc_insertion_point(field_release:fantasybit.ROWMarket.ohlc)
  _has_bits_[0] &= ~0x00000008u;
  ::fantasybit::ContractOHLC* temp = ohlc_;
  ohlc_ = nullptr;
  return temp;
}
inline ::fantasybit::ContractOHLC* ROWMarket::_internal_mutable_ohlc() {
  _has_bits_[0] |= 0x00000008u;
  if (ohlc_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ContractOHLC>(GetArena());
    ohlc_ = p;
  }
  return ohlc_;
}
inline ::fantasybit::ContractOHLC* ROWMarket::mutable_ohlc() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ROWMarket.ohlc)
  return _internal_mutable_ohlc();
}
inline void ROWMarket::set_allocated_ohlc(::fantasybit::ContractOHLC* ohlc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ohlc_);
  }
  if (ohlc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ohlc)->GetArena();
    if (message_arena != submessage_arena) {
      ohlc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ohlc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ohlc_ = ohlc;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ROWMarket.ohlc)
}

// -------------------------------------------------------------------

// GetROWMarketRep

// repeated .fantasybit.ROWMarket rowmarket = 10;
inline int GetROWMarketRep::_internal_rowmarket_size() const {
  return rowmarket_.size();
}
inline int GetROWMarketRep::rowmarket_size() const {
  return _internal_rowmarket_size();
}
inline void GetROWMarketRep::clear_rowmarket() {
  rowmarket_.Clear();
}
inline ::fantasybit::ROWMarket* GetROWMarketRep::mutable_rowmarket(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetROWMarketRep.rowmarket)
  return rowmarket_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::ROWMarket >*
GetROWMarketRep::mutable_rowmarket() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GetROWMarketRep.rowmarket)
  return &rowmarket_;
}
inline const ::fantasybit::ROWMarket& GetROWMarketRep::_internal_rowmarket(int index) const {
  return rowmarket_.Get(index);
}
inline const ::fantasybit::ROWMarket& GetROWMarketRep::rowmarket(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GetROWMarketRep.rowmarket)
  return _internal_rowmarket(index);
}
inline ::fantasybit::ROWMarket* GetROWMarketRep::_internal_add_rowmarket() {
  return rowmarket_.Add();
}
inline ::fantasybit::ROWMarket* GetROWMarketRep::add_rowmarket() {
  // @@protoc_insertion_point(field_add:fantasybit.GetROWMarketRep.rowmarket)
  return _internal_add_rowmarket();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::ROWMarket >&
GetROWMarketRep::rowmarket() const {
  // @@protoc_insertion_point(field_list:fantasybit.GetROWMarketRep.rowmarket)
  return rowmarket_;
}

// -------------------------------------------------------------------

// GetDepthReq

// optional string pid = 10;
inline bool GetDepthReq::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetDepthReq::has_pid() const {
  return _internal_has_pid();
}
inline void GetDepthReq::clear_pid() {
  pid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetDepthReq::pid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetDepthReq.pid)
  return _internal_pid();
}
inline void GetDepthReq::set_pid(const std::string& value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GetDepthReq.pid)
}
inline std::string* GetDepthReq::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetDepthReq.pid)
  return _internal_mutable_pid();
}
inline const std::string& GetDepthReq::_internal_pid() const {
  return pid_.Get();
}
inline void GetDepthReq::_internal_set_pid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDepthReq::set_pid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GetDepthReq.pid)
}
inline void GetDepthReq::set_pid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GetDepthReq.pid)
}
inline void GetDepthReq::set_pid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetDepthReq.pid)
}
inline std::string* GetDepthReq::_internal_mutable_pid() {
  _has_bits_[0] |= 0x00000001u;
  return pid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDepthReq::release_pid() {
  // @@protoc_insertion_point(field_release:fantasybit.GetDepthReq.pid)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDepthReq::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetDepthReq.pid)
}

// -------------------------------------------------------------------

// GetDepthRep

// optional string pid = 10;
inline bool GetDepthRep::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetDepthRep::has_pid() const {
  return _internal_has_pid();
}
inline void GetDepthRep::clear_pid() {
  pid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetDepthRep::pid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetDepthRep.pid)
  return _internal_pid();
}
inline void GetDepthRep::set_pid(const std::string& value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GetDepthRep.pid)
}
inline std::string* GetDepthRep::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetDepthRep.pid)
  return _internal_mutable_pid();
}
inline const std::string& GetDepthRep::_internal_pid() const {
  return pid_.Get();
}
inline void GetDepthRep::_internal_set_pid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDepthRep::set_pid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GetDepthRep.pid)
}
inline void GetDepthRep::set_pid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GetDepthRep.pid)
}
inline void GetDepthRep::set_pid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetDepthRep.pid)
}
inline std::string* GetDepthRep::_internal_mutable_pid() {
  _has_bits_[0] |= 0x00000001u;
  return pid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDepthRep::release_pid() {
  // @@protoc_insertion_point(field_release:fantasybit.GetDepthRep.pid)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDepthRep::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetDepthRep.pid)
}

// repeated .fantasybit.DepthItem depthitems = 20;
inline int GetDepthRep::_internal_depthitems_size() const {
  return depthitems_.size();
}
inline int GetDepthRep::depthitems_size() const {
  return _internal_depthitems_size();
}
inline ::fantasybit::DepthItem* GetDepthRep::mutable_depthitems(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetDepthRep.depthitems)
  return depthitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::DepthItem >*
GetDepthRep::mutable_depthitems() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GetDepthRep.depthitems)
  return &depthitems_;
}
inline const ::fantasybit::DepthItem& GetDepthRep::_internal_depthitems(int index) const {
  return depthitems_.Get(index);
}
inline const ::fantasybit::DepthItem& GetDepthRep::depthitems(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GetDepthRep.depthitems)
  return _internal_depthitems(index);
}
inline ::fantasybit::DepthItem* GetDepthRep::_internal_add_depthitems() {
  return depthitems_.Add();
}
inline ::fantasybit::DepthItem* GetDepthRep::add_depthitems() {
  // @@protoc_insertion_point(field_add:fantasybit.GetDepthRep.depthitems)
  return _internal_add_depthitems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::DepthItem >&
GetDepthRep::depthitems() const {
  // @@protoc_insertion_point(field_list:fantasybit.GetDepthRep.depthitems)
  return depthitems_;
}

// optional .fantasybit.ROWMarket rowmarket = 30;
inline bool GetDepthRep::_internal_has_rowmarket() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rowmarket_ != nullptr);
  return value;
}
inline bool GetDepthRep::has_rowmarket() const {
  return _internal_has_rowmarket();
}
inline void GetDepthRep::clear_rowmarket() {
  if (rowmarket_ != nullptr) rowmarket_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::ROWMarket& GetDepthRep::_internal_rowmarket() const {
  const ::fantasybit::ROWMarket* p = rowmarket_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ROWMarket*>(
      &::fantasybit::_ROWMarket_default_instance_);
}
inline const ::fantasybit::ROWMarket& GetDepthRep::rowmarket() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetDepthRep.rowmarket)
  return _internal_rowmarket();
}
inline void GetDepthRep::unsafe_arena_set_allocated_rowmarket(
    ::fantasybit::ROWMarket* rowmarket) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rowmarket_);
  }
  rowmarket_ = rowmarket;
  if (rowmarket) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GetDepthRep.rowmarket)
}
inline ::fantasybit::ROWMarket* GetDepthRep::release_rowmarket() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::ROWMarket* temp = rowmarket_;
  rowmarket_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ROWMarket* GetDepthRep::unsafe_arena_release_rowmarket() {
  // @@protoc_insertion_point(field_release:fantasybit.GetDepthRep.rowmarket)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::ROWMarket* temp = rowmarket_;
  rowmarket_ = nullptr;
  return temp;
}
inline ::fantasybit::ROWMarket* GetDepthRep::_internal_mutable_rowmarket() {
  _has_bits_[0] |= 0x00000002u;
  if (rowmarket_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ROWMarket>(GetArena());
    rowmarket_ = p;
  }
  return rowmarket_;
}
inline ::fantasybit::ROWMarket* GetDepthRep::mutable_rowmarket() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetDepthRep.rowmarket)
  return _internal_mutable_rowmarket();
}
inline void GetDepthRep::set_allocated_rowmarket(::fantasybit::ROWMarket* rowmarket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rowmarket_;
  }
  if (rowmarket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rowmarket);
    if (message_arena != submessage_arena) {
      rowmarket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rowmarket, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rowmarket_ = rowmarket;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetDepthRep.rowmarket)
}

// -------------------------------------------------------------------

// AllOdersSymbol

// optional string symbol = 10;
inline bool AllOdersSymbol::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AllOdersSymbol::has_symbol() const {
  return _internal_has_symbol();
}
inline void AllOdersSymbol::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AllOdersSymbol::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.symbol)
  return _internal_symbol();
}
inline void AllOdersSymbol::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersSymbol.symbol)
}
inline std::string* AllOdersSymbol::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.AllOdersSymbol.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& AllOdersSymbol::_internal_symbol() const {
  return symbol_.Get();
}
inline void AllOdersSymbol::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AllOdersSymbol::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.AllOdersSymbol.symbol)
}
inline void AllOdersSymbol::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.AllOdersSymbol.symbol)
}
inline void AllOdersSymbol::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.AllOdersSymbol.symbol)
}
inline std::string* AllOdersSymbol::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000001u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AllOdersSymbol::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.AllOdersSymbol.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AllOdersSymbol::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.AllOdersSymbol.symbol)
}

// optional int32 netqty = 30;
inline bool AllOdersSymbol::_internal_has_netqty() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AllOdersSymbol::has_netqty() const {
  return _internal_has_netqty();
}
inline void AllOdersSymbol::clear_netqty() {
  netqty_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllOdersSymbol::_internal_netqty() const {
  return netqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllOdersSymbol::netqty() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.netqty)
  return _internal_netqty();
}
inline void AllOdersSymbol::_internal_set_netqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  netqty_ = value;
}
inline void AllOdersSymbol::set_netqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_netqty(value);
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersSymbol.netqty)
}

// optional int32 netprice = 40;
inline bool AllOdersSymbol::_internal_has_netprice() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AllOdersSymbol::has_netprice() const {
  return _internal_has_netprice();
}
inline void AllOdersSymbol::clear_netprice() {
  netprice_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllOdersSymbol::_internal_netprice() const {
  return netprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AllOdersSymbol::netprice() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.netprice)
  return _internal_netprice();
}
inline void AllOdersSymbol::_internal_set_netprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  netprice_ = value;
}
inline void AllOdersSymbol::set_netprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_netprice(value);
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersSymbol.netprice)
}

// optional double avg = 50;
inline bool AllOdersSymbol::_internal_has_avg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AllOdersSymbol::has_avg() const {
  return _internal_has_avg();
}
inline void AllOdersSymbol::clear_avg() {
  avg_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double AllOdersSymbol::_internal_avg() const {
  return avg_;
}
inline double AllOdersSymbol::avg() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.avg)
  return _internal_avg();
}
inline void AllOdersSymbol::_internal_set_avg(double value) {
  _has_bits_[0] |= 0x00000008u;
  avg_ = value;
}
inline void AllOdersSymbol::set_avg(double value) {
  _internal_set_avg(value);
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersSymbol.avg)
}

// optional double pnl = 60;
inline bool AllOdersSymbol::_internal_has_pnl() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AllOdersSymbol::has_pnl() const {
  return _internal_has_pnl();
}
inline void AllOdersSymbol::clear_pnl() {
  pnl_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double AllOdersSymbol::_internal_pnl() const {
  return pnl_;
}
inline double AllOdersSymbol::pnl() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.pnl)
  return _internal_pnl();
}
inline void AllOdersSymbol::_internal_set_pnl(double value) {
  _has_bits_[0] |= 0x00000010u;
  pnl_ = value;
}
inline void AllOdersSymbol::set_pnl(double value) {
  _internal_set_pnl(value);
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersSymbol.pnl)
}

// repeated .fantasybit.Order orders = 20;
inline int AllOdersSymbol::_internal_orders_size() const {
  return orders_.size();
}
inline int AllOdersSymbol::orders_size() const {
  return _internal_orders_size();
}
inline ::fantasybit::Order* AllOdersSymbol::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.AllOdersSymbol.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Order >*
AllOdersSymbol::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.AllOdersSymbol.orders)
  return &orders_;
}
inline const ::fantasybit::Order& AllOdersSymbol::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::fantasybit::Order& AllOdersSymbol::orders(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.orders)
  return _internal_orders(index);
}
inline ::fantasybit::Order* AllOdersSymbol::_internal_add_orders() {
  return orders_.Add();
}
inline ::fantasybit::Order* AllOdersSymbol::add_orders() {
  // @@protoc_insertion_point(field_add:fantasybit.AllOdersSymbol.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::Order >&
AllOdersSymbol::orders() const {
  // @@protoc_insertion_point(field_list:fantasybit.AllOdersSymbol.orders)
  return orders_;
}

// -------------------------------------------------------------------

// AllOdersFname

// optional string fname = 10;
inline bool AllOdersFname::_internal_has_fname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AllOdersFname::has_fname() const {
  return _internal_has_fname();
}
inline void AllOdersFname::clear_fname() {
  fname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AllOdersFname::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersFname.fname)
  return _internal_fname();
}
inline void AllOdersFname::set_fname(const std::string& value) {
  _internal_set_fname(value);
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersFname.fname)
}
inline std::string* AllOdersFname::mutable_fname() {
  // @@protoc_insertion_point(field_mutable:fantasybit.AllOdersFname.fname)
  return _internal_mutable_fname();
}
inline const std::string& AllOdersFname::_internal_fname() const {
  return fname_.Get();
}
inline void AllOdersFname::_internal_set_fname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AllOdersFname::set_fname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.AllOdersFname.fname)
}
inline void AllOdersFname::set_fname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.AllOdersFname.fname)
}
inline void AllOdersFname::set_fname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.AllOdersFname.fname)
}
inline std::string* AllOdersFname::_internal_mutable_fname() {
  _has_bits_[0] |= 0x00000001u;
  return fname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AllOdersFname::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.AllOdersFname.fname)
  if (!_internal_has_fname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AllOdersFname::set_allocated_fname(std::string* fname) {
  if (fname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.AllOdersFname.fname)
}

// repeated .fantasybit.AllOdersSymbol pidorders = 20;
inline int AllOdersFname::_internal_pidorders_size() const {
  return pidorders_.size();
}
inline int AllOdersFname::pidorders_size() const {
  return _internal_pidorders_size();
}
inline void AllOdersFname::clear_pidorders() {
  pidorders_.Clear();
}
inline ::fantasybit::AllOdersSymbol* AllOdersFname::mutable_pidorders(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.AllOdersFname.pidorders)
  return pidorders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::AllOdersSymbol >*
AllOdersFname::mutable_pidorders() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.AllOdersFname.pidorders)
  return &pidorders_;
}
inline const ::fantasybit::AllOdersSymbol& AllOdersFname::_internal_pidorders(int index) const {
  return pidorders_.Get(index);
}
inline const ::fantasybit::AllOdersSymbol& AllOdersFname::pidorders(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersFname.pidorders)
  return _internal_pidorders(index);
}
inline ::fantasybit::AllOdersSymbol* AllOdersFname::_internal_add_pidorders() {
  return pidorders_.Add();
}
inline ::fantasybit::AllOdersSymbol* AllOdersFname::add_pidorders() {
  // @@protoc_insertion_point(field_add:fantasybit.AllOdersFname.pidorders)
  return _internal_add_pidorders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::AllOdersSymbol >&
AllOdersFname::pidorders() const {
  // @@protoc_insertion_point(field_list:fantasybit.AllOdersFname.pidorders)
  return pidorders_;
}

// -------------------------------------------------------------------

// GetOrdersRep

// optional .fantasybit.GetOrdersReq req = 10;
inline bool GetOrdersRep::_internal_has_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || req_ != nullptr);
  return value;
}
inline bool GetOrdersRep::has_req() const {
  return _internal_has_req();
}
inline void GetOrdersRep::clear_req() {
  if (req_ != nullptr) req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::GetOrdersReq& GetOrdersRep::_internal_req() const {
  const ::fantasybit::GetOrdersReq* p = req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::GetOrdersReq*>(
      &::fantasybit::_GetOrdersReq_default_instance_);
}
inline const ::fantasybit::GetOrdersReq& GetOrdersRep::req() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetOrdersRep.req)
  return _internal_req();
}
inline void GetOrdersRep::unsafe_arena_set_allocated_req(
    ::fantasybit::GetOrdersReq* req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GetOrdersRep.req)
}
inline ::fantasybit::GetOrdersReq* GetOrdersRep::release_req() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::GetOrdersReq* temp = req_;
  req_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::GetOrdersReq* GetOrdersRep::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:fantasybit.GetOrdersRep.req)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::GetOrdersReq* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::fantasybit::GetOrdersReq* GetOrdersRep::_internal_mutable_req() {
  _has_bits_[0] |= 0x00000001u;
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::GetOrdersReq>(GetArena());
    req_ = p;
  }
  return req_;
}
inline ::fantasybit::GetOrdersReq* GetOrdersRep::mutable_req() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetOrdersRep.req)
  return _internal_mutable_req();
}
inline void GetOrdersRep::set_allocated_req(::fantasybit::GetOrdersReq* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetOrdersRep.req)
}

// optional .fantasybit.AllOdersFname oorders = 20;
inline bool GetOrdersRep::_internal_has_oorders() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || oorders_ != nullptr);
  return value;
}
inline bool GetOrdersRep::has_oorders() const {
  return _internal_has_oorders();
}
inline void GetOrdersRep::clear_oorders() {
  if (oorders_ != nullptr) oorders_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::AllOdersFname& GetOrdersRep::_internal_oorders() const {
  const ::fantasybit::AllOdersFname* p = oorders_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::AllOdersFname*>(
      &::fantasybit::_AllOdersFname_default_instance_);
}
inline const ::fantasybit::AllOdersFname& GetOrdersRep::oorders() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetOrdersRep.oorders)
  return _internal_oorders();
}
inline void GetOrdersRep::unsafe_arena_set_allocated_oorders(
    ::fantasybit::AllOdersFname* oorders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oorders_);
  }
  oorders_ = oorders;
  if (oorders) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GetOrdersRep.oorders)
}
inline ::fantasybit::AllOdersFname* GetOrdersRep::release_oorders() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::AllOdersFname* temp = oorders_;
  oorders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::AllOdersFname* GetOrdersRep::unsafe_arena_release_oorders() {
  // @@protoc_insertion_point(field_release:fantasybit.GetOrdersRep.oorders)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::AllOdersFname* temp = oorders_;
  oorders_ = nullptr;
  return temp;
}
inline ::fantasybit::AllOdersFname* GetOrdersRep::_internal_mutable_oorders() {
  _has_bits_[0] |= 0x00000002u;
  if (oorders_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::AllOdersFname>(GetArena());
    oorders_ = p;
  }
  return oorders_;
}
inline ::fantasybit::AllOdersFname* GetOrdersRep::mutable_oorders() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetOrdersRep.oorders)
  return _internal_mutable_oorders();
}
inline void GetOrdersRep::set_allocated_oorders(::fantasybit::AllOdersFname* oorders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete oorders_;
  }
  if (oorders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oorders);
    if (message_arena != submessage_arena) {
      oorders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oorders, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  oorders_ = oorders;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetOrdersRep.oorders)
}

// -------------------------------------------------------------------

// GetOrdersReq

// optional string symbol = 10;
inline bool GetOrdersReq::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetOrdersReq::has_symbol() const {
  return _internal_has_symbol();
}
inline void GetOrdersReq::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetOrdersReq::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetOrdersReq.symbol)
  return _internal_symbol();
}
inline void GetOrdersReq::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:fantasybit.GetOrdersReq.symbol)
}
inline std::string* GetOrdersReq::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetOrdersReq.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& GetOrdersReq::_internal_symbol() const {
  return symbol_.Get();
}
inline void GetOrdersReq::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOrdersReq::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GetOrdersReq.symbol)
}
inline void GetOrdersReq::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GetOrdersReq.symbol)
}
inline void GetOrdersReq::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetOrdersReq.symbol)
}
inline std::string* GetOrdersReq::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000001u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOrdersReq::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.GetOrdersReq.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOrdersReq::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetOrdersReq.symbol)
}

// optional string fname = 20;
inline bool GetOrdersReq::_internal_has_fname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetOrdersReq::has_fname() const {
  return _internal_has_fname();
}
inline void GetOrdersReq::clear_fname() {
  fname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetOrdersReq::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetOrdersReq.fname)
  return _internal_fname();
}
inline void GetOrdersReq::set_fname(const std::string& value) {
  _internal_set_fname(value);
  // @@protoc_insertion_point(field_set:fantasybit.GetOrdersReq.fname)
}
inline std::string* GetOrdersReq::mutable_fname() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetOrdersReq.fname)
  return _internal_mutable_fname();
}
inline const std::string& GetOrdersReq::_internal_fname() const {
  return fname_.Get();
}
inline void GetOrdersReq::_internal_set_fname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOrdersReq::set_fname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  fname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GetOrdersReq.fname)
}
inline void GetOrdersReq::set_fname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GetOrdersReq.fname)
}
inline void GetOrdersReq::set_fname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetOrdersReq.fname)
}
inline std::string* GetOrdersReq::_internal_mutable_fname() {
  _has_bits_[0] |= 0x00000002u;
  return fname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOrdersReq::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.GetOrdersReq.fname)
  if (!_internal_has_fname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOrdersReq::set_allocated_fname(std::string* fname) {
  if (fname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetOrdersReq.fname)
}

// optional uint64 fchash = 30;
inline bool GetOrdersReq::_internal_has_fchash() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetOrdersReq::has_fchash() const {
  return _internal_has_fchash();
}
inline void GetOrdersReq::clear_fchash() {
  fchash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetOrdersReq::_internal_fchash() const {
  return fchash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetOrdersReq::fchash() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetOrdersReq.fchash)
  return _internal_fchash();
}
inline void GetOrdersReq::_internal_set_fchash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  fchash_ = value;
}
inline void GetOrdersReq::set_fchash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fchash(value);
  // @@protoc_insertion_point(field_set:fantasybit.GetOrdersReq.fchash)
}

// -------------------------------------------------------------------

// GetProjectionReq

// optional string fname = 20;
inline bool GetProjectionReq::_internal_has_fname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetProjectionReq::has_fname() const {
  return _internal_has_fname();
}
inline void GetProjectionReq::clear_fname() {
  fname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetProjectionReq::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetProjectionReq.fname)
  return _internal_fname();
}
inline void GetProjectionReq::set_fname(const std::string& value) {
  _internal_set_fname(value);
  // @@protoc_insertion_point(field_set:fantasybit.GetProjectionReq.fname)
}
inline std::string* GetProjectionReq::mutable_fname() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetProjectionReq.fname)
  return _internal_mutable_fname();
}
inline const std::string& GetProjectionReq::_internal_fname() const {
  return fname_.Get();
}
inline void GetProjectionReq::_internal_set_fname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProjectionReq::set_fname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GetProjectionReq.fname)
}
inline void GetProjectionReq::set_fname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GetProjectionReq.fname)
}
inline void GetProjectionReq::set_fname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetProjectionReq.fname)
}
inline std::string* GetProjectionReq::_internal_mutable_fname() {
  _has_bits_[0] |= 0x00000001u;
  return fname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProjectionReq::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.GetProjectionReq.fname)
  if (!_internal_has_fname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProjectionReq::set_allocated_fname(std::string* fname) {
  if (fname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetProjectionReq.fname)
}

// optional bool getavg = 30;
inline bool GetProjectionReq::_internal_has_getavg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetProjectionReq::has_getavg() const {
  return _internal_has_getavg();
}
inline void GetProjectionReq::clear_getavg() {
  getavg_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GetProjectionReq::_internal_getavg() const {
  return getavg_;
}
inline bool GetProjectionReq::getavg() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetProjectionReq.getavg)
  return _internal_getavg();
}
inline void GetProjectionReq::_internal_set_getavg(bool value) {
  _has_bits_[0] |= 0x00000002u;
  getavg_ = value;
}
inline void GetProjectionReq::set_getavg(bool value) {
  _internal_set_getavg(value);
  // @@protoc_insertion_point(field_set:fantasybit.GetProjectionReq.getavg)
}

// -------------------------------------------------------------------

// PlayerProj

// optional string playerid = 10;
inline bool PlayerProj::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerProj::has_playerid() const {
  return _internal_has_playerid();
}
inline void PlayerProj::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerProj::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerProj.playerid)
  return _internal_playerid();
}
inline void PlayerProj::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerProj.playerid)
}
inline std::string* PlayerProj::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerProj.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& PlayerProj::_internal_playerid() const {
  return playerid_.Get();
}
inline void PlayerProj::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerProj::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerProj.playerid)
}
inline void PlayerProj::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerProj.playerid)
}
inline void PlayerProj::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerProj.playerid)
}
inline std::string* PlayerProj::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000001u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerProj::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerProj.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerProj::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerProj.playerid)
}

// optional int32 proj = 20;
inline bool PlayerProj::_internal_has_proj() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerProj::has_proj() const {
  return _internal_has_proj();
}
inline void PlayerProj::clear_proj() {
  proj_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerProj::_internal_proj() const {
  return proj_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerProj::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerProj.proj)
  return _internal_proj();
}
inline void PlayerProj::_internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  proj_ = value;
}
inline void PlayerProj::set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proj(value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerProj.proj)
}

// -------------------------------------------------------------------

// ProjByName

// optional string name = 10;
inline bool ProjByName::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProjByName::has_name() const {
  return _internal_has_name();
}
inline void ProjByName::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProjByName::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjByName.name)
  return _internal_name();
}
inline void ProjByName::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjByName.name)
}
inline std::string* ProjByName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjByName.name)
  return _internal_mutable_name();
}
inline const std::string& ProjByName::_internal_name() const {
  return name_.Get();
}
inline void ProjByName::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProjByName::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ProjByName.name)
}
inline void ProjByName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjByName.name)
}
inline void ProjByName::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjByName.name)
}
inline std::string* ProjByName::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProjByName::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjByName.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProjByName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjByName.name)
}

// repeated .fantasybit.PlayerProj playerproj = 20;
inline int ProjByName::_internal_playerproj_size() const {
  return playerproj_.size();
}
inline int ProjByName::playerproj_size() const {
  return _internal_playerproj_size();
}
inline void ProjByName::clear_playerproj() {
  playerproj_.Clear();
}
inline ::fantasybit::PlayerProj* ProjByName::mutable_playerproj(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjByName.playerproj)
  return playerproj_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerProj >*
ProjByName::mutable_playerproj() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.ProjByName.playerproj)
  return &playerproj_;
}
inline const ::fantasybit::PlayerProj& ProjByName::_internal_playerproj(int index) const {
  return playerproj_.Get(index);
}
inline const ::fantasybit::PlayerProj& ProjByName::playerproj(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjByName.playerproj)
  return _internal_playerproj(index);
}
inline ::fantasybit::PlayerProj* ProjByName::_internal_add_playerproj() {
  return playerproj_.Add();
}
inline ::fantasybit::PlayerProj* ProjByName::add_playerproj() {
  // @@protoc_insertion_point(field_add:fantasybit.ProjByName.playerproj)
  return _internal_add_playerproj();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::PlayerProj >&
ProjByName::playerproj() const {
  // @@protoc_insertion_point(field_list:fantasybit.ProjByName.playerproj)
  return playerproj_;
}

// optional int32 count = 40;
inline bool ProjByName::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProjByName::has_count() const {
  return _internal_has_count();
}
inline void ProjByName::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjByName::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjByName::count() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjByName.count)
  return _internal_count();
}
inline void ProjByName::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void ProjByName::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjByName.count)
}

// optional int32 block = 50;
inline bool ProjByName::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProjByName::has_block() const {
  return _internal_has_block();
}
inline void ProjByName::clear_block() {
  block_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjByName::_internal_block() const {
  return block_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjByName::block() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjByName.block)
  return _internal_block();
}
inline void ProjByName::_internal_set_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  block_ = value;
}
inline void ProjByName::set_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjByName.block)
}

// -------------------------------------------------------------------

// GetProjectionRep

// optional .fantasybit.ProjByName projs = 20;
inline bool GetProjectionRep::_internal_has_projs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || projs_ != nullptr);
  return value;
}
inline bool GetProjectionRep::has_projs() const {
  return _internal_has_projs();
}
inline void GetProjectionRep::clear_projs() {
  if (projs_ != nullptr) projs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::ProjByName& GetProjectionRep::_internal_projs() const {
  const ::fantasybit::ProjByName* p = projs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ProjByName*>(
      &::fantasybit::_ProjByName_default_instance_);
}
inline const ::fantasybit::ProjByName& GetProjectionRep::projs() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetProjectionRep.projs)
  return _internal_projs();
}
inline void GetProjectionRep::unsafe_arena_set_allocated_projs(
    ::fantasybit::ProjByName* projs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projs_);
  }
  projs_ = projs;
  if (projs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GetProjectionRep.projs)
}
inline ::fantasybit::ProjByName* GetProjectionRep::release_projs() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::ProjByName* temp = projs_;
  projs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ProjByName* GetProjectionRep::unsafe_arena_release_projs() {
  // @@protoc_insertion_point(field_release:fantasybit.GetProjectionRep.projs)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::ProjByName* temp = projs_;
  projs_ = nullptr;
  return temp;
}
inline ::fantasybit::ProjByName* GetProjectionRep::_internal_mutable_projs() {
  _has_bits_[0] |= 0x00000001u;
  if (projs_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ProjByName>(GetArena());
    projs_ = p;
  }
  return projs_;
}
inline ::fantasybit::ProjByName* GetProjectionRep::mutable_projs() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetProjectionRep.projs)
  return _internal_mutable_projs();
}
inline void GetProjectionRep::set_allocated_projs(::fantasybit::ProjByName* projs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete projs_;
  }
  if (projs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(projs);
    if (message_arena != submessage_arena) {
      projs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  projs_ = projs;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetProjectionRep.projs)
}

// optional .fantasybit.ProjByName avg = 30;
inline bool GetProjectionRep::_internal_has_avg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || avg_ != nullptr);
  return value;
}
inline bool GetProjectionRep::has_avg() const {
  return _internal_has_avg();
}
inline void GetProjectionRep::clear_avg() {
  if (avg_ != nullptr) avg_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::ProjByName& GetProjectionRep::_internal_avg() const {
  const ::fantasybit::ProjByName* p = avg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ProjByName*>(
      &::fantasybit::_ProjByName_default_instance_);
}
inline const ::fantasybit::ProjByName& GetProjectionRep::avg() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetProjectionRep.avg)
  return _internal_avg();
}
inline void GetProjectionRep::unsafe_arena_set_allocated_avg(
    ::fantasybit::ProjByName* avg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avg_);
  }
  avg_ = avg;
  if (avg) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.GetProjectionRep.avg)
}
inline ::fantasybit::ProjByName* GetProjectionRep::release_avg() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::ProjByName* temp = avg_;
  avg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ProjByName* GetProjectionRep::unsafe_arena_release_avg() {
  // @@protoc_insertion_point(field_release:fantasybit.GetProjectionRep.avg)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::ProjByName* temp = avg_;
  avg_ = nullptr;
  return temp;
}
inline ::fantasybit::ProjByName* GetProjectionRep::_internal_mutable_avg() {
  _has_bits_[0] |= 0x00000002u;
  if (avg_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ProjByName>(GetArena());
    avg_ = p;
  }
  return avg_;
}
inline ::fantasybit::ProjByName* GetProjectionRep::mutable_avg() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetProjectionRep.avg)
  return _internal_mutable_avg();
}
inline void GetProjectionRep::set_allocated_avg(::fantasybit::ProjByName* avg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete avg_;
  }
  if (avg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(avg);
    if (message_arena != submessage_arena) {
      avg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  avg_ = avg;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetProjectionRep.avg)
}

// -------------------------------------------------------------------

// KeyValue

// optional bytes key = 10;
inline bool KeyValue::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeyValue::has_key() const {
  return _internal_has_key();
}
inline void KeyValue::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:fantasybit.KeyValue.key)
  return _internal_key();
}
inline void KeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:fantasybit.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:fantasybit.KeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValue::_internal_key() const {
  return key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.KeyValue.key)
}
inline void KeyValue::set_key(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.KeyValue.key)
}
inline std::string* KeyValue::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:fantasybit.KeyValue.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.KeyValue.key)
}

// optional bytes value = 20;
inline bool KeyValue::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeyValue::has_value() const {
  return _internal_has_value();
}
inline void KeyValue::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:fantasybit.KeyValue.value)
  return _internal_value();
}
inline void KeyValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:fantasybit.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:fantasybit.KeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValue::_internal_value() const {
  return value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.KeyValue.value)
}
inline void KeyValue::set_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.KeyValue.value)
}
inline std::string* KeyValue::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:fantasybit.KeyValue.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.KeyValue.value)
}

// -------------------------------------------------------------------

// Bootstrap

// optional string key = 1;
inline bool Bootstrap::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bootstrap::has_key() const {
  return _internal_has_key();
}
inline void Bootstrap::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Bootstrap::key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.key)
  return _internal_key();
}
inline void Bootstrap::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.key)
}
inline std::string* Bootstrap::mutable_key() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.key)
  return _internal_mutable_key();
}
inline const std::string& Bootstrap::_internal_key() const {
  return key_.Get();
}
inline void Bootstrap::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bootstrap::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.key)
}
inline void Bootstrap::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.key)
}
inline void Bootstrap::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.key)
}
inline std::string* Bootstrap::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bootstrap::release_key() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bootstrap::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.key)
}

// optional int32 blocknum = 2;
inline bool Bootstrap::_internal_has_blocknum() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Bootstrap::has_blocknum() const {
  return _internal_has_blocknum();
}
inline void Bootstrap::clear_blocknum() {
  blocknum_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bootstrap::_internal_blocknum() const {
  return blocknum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bootstrap::blocknum() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.blocknum)
  return _internal_blocknum();
}
inline void Bootstrap::_internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  blocknum_ = value;
}
inline void Bootstrap::set_blocknum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blocknum(value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.blocknum)
}

// optional int32 week = 3;
inline bool Bootstrap::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Bootstrap::has_week() const {
  return _internal_has_week();
}
inline void Bootstrap::clear_week() {
  week_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bootstrap::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bootstrap::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.week)
  return _internal_week();
}
inline void Bootstrap::_internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  week_ = value;
}
inline void Bootstrap::set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.week)
}

// optional int32 season = 4;
inline bool Bootstrap::_internal_has_season() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Bootstrap::has_season() const {
  return _internal_has_season();
}
inline void Bootstrap::clear_season() {
  season_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bootstrap::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bootstrap::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.season)
  return _internal_season();
}
inline void Bootstrap::_internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  season_ = value;
}
inline void Bootstrap::set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.season)
}

// optional bytes gamemetaroot = 10;
inline bool Bootstrap::_internal_has_gamemetaroot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Bootstrap::has_gamemetaroot() const {
  return _internal_has_gamemetaroot();
}
inline void Bootstrap::clear_gamemetaroot() {
  gamemetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Bootstrap::gamemetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.gamemetaroot)
  return _internal_gamemetaroot();
}
inline void Bootstrap::set_gamemetaroot(const std::string& value) {
  _internal_set_gamemetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.gamemetaroot)
}
inline std::string* Bootstrap::mutable_gamemetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.gamemetaroot)
  return _internal_mutable_gamemetaroot();
}
inline const std::string& Bootstrap::_internal_gamemetaroot() const {
  return gamemetaroot_.Get();
}
inline void Bootstrap::_internal_set_gamemetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bootstrap::set_gamemetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  gamemetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.gamemetaroot)
}
inline void Bootstrap::set_gamemetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  gamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.gamemetaroot)
}
inline void Bootstrap::set_gamemetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  gamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.gamemetaroot)
}
inline std::string* Bootstrap::_internal_mutable_gamemetaroot() {
  _has_bits_[0] |= 0x00000002u;
  return gamemetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bootstrap::release_gamemetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.gamemetaroot)
  if (!_internal_has_gamemetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return gamemetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bootstrap::set_allocated_gamemetaroot(std::string* gamemetaroot) {
  if (gamemetaroot != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gamemetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamemetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.gamemetaroot)
}

// optional bytes playermetaroot = 20;
inline bool Bootstrap::_internal_has_playermetaroot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bootstrap::has_playermetaroot() const {
  return _internal_has_playermetaroot();
}
inline void Bootstrap::clear_playermetaroot() {
  playermetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Bootstrap::playermetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.playermetaroot)
  return _internal_playermetaroot();
}
inline void Bootstrap::set_playermetaroot(const std::string& value) {
  _internal_set_playermetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.playermetaroot)
}
inline std::string* Bootstrap::mutable_playermetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.playermetaroot)
  return _internal_mutable_playermetaroot();
}
inline const std::string& Bootstrap::_internal_playermetaroot() const {
  return playermetaroot_.Get();
}
inline void Bootstrap::_internal_set_playermetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  playermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bootstrap::set_playermetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  playermetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.playermetaroot)
}
inline void Bootstrap::set_playermetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  playermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.playermetaroot)
}
inline void Bootstrap::set_playermetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  playermetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.playermetaroot)
}
inline std::string* Bootstrap::_internal_mutable_playermetaroot() {
  _has_bits_[0] |= 0x00000004u;
  return playermetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bootstrap::release_playermetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.playermetaroot)
  if (!_internal_has_playermetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return playermetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bootstrap::set_allocated_playermetaroot(std::string* playermetaroot) {
  if (playermetaroot != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  playermetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playermetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.playermetaroot)
}

// optional bytes fnamemetaroot = 30;
inline bool Bootstrap::_internal_has_fnamemetaroot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Bootstrap::has_fnamemetaroot() const {
  return _internal_has_fnamemetaroot();
}
inline void Bootstrap::clear_fnamemetaroot() {
  fnamemetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Bootstrap::fnamemetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.fnamemetaroot)
  return _internal_fnamemetaroot();
}
inline void Bootstrap::set_fnamemetaroot(const std::string& value) {
  _internal_set_fnamemetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.fnamemetaroot)
}
inline std::string* Bootstrap::mutable_fnamemetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.fnamemetaroot)
  return _internal_mutable_fnamemetaroot();
}
inline const std::string& Bootstrap::_internal_fnamemetaroot() const {
  return fnamemetaroot_.Get();
}
inline void Bootstrap::_internal_set_fnamemetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  fnamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bootstrap::set_fnamemetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  fnamemetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.fnamemetaroot)
}
inline void Bootstrap::set_fnamemetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  fnamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.fnamemetaroot)
}
inline void Bootstrap::set_fnamemetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  fnamemetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.fnamemetaroot)
}
inline std::string* Bootstrap::_internal_mutable_fnamemetaroot() {
  _has_bits_[0] |= 0x00000008u;
  return fnamemetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bootstrap::release_fnamemetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.fnamemetaroot)
  if (!_internal_has_fnamemetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return fnamemetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bootstrap::set_allocated_fnamemetaroot(std::string* fnamemetaroot) {
  if (fnamemetaroot != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  fnamemetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fnamemetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.fnamemetaroot)
}

// optional bytes previd = 40;
inline bool Bootstrap::_internal_has_previd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Bootstrap::has_previd() const {
  return _internal_has_previd();
}
inline void Bootstrap::clear_previd() {
  previd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Bootstrap::previd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.previd)
  return _internal_previd();
}
inline void Bootstrap::set_previd(const std::string& value) {
  _internal_set_previd(value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.previd)
}
inline std::string* Bootstrap::mutable_previd() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.previd)
  return _internal_mutable_previd();
}
inline const std::string& Bootstrap::_internal_previd() const {
  return previd_.Get();
}
inline void Bootstrap::_internal_set_previd(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  previd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bootstrap::set_previd(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  previd_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.previd)
}
inline void Bootstrap::set_previd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  previd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.previd)
}
inline void Bootstrap::set_previd(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  previd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.previd)
}
inline std::string* Bootstrap::_internal_mutable_previd() {
  _has_bits_[0] |= 0x00000010u;
  return previd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bootstrap::release_previd() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.previd)
  if (!_internal_has_previd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return previd_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bootstrap::set_allocated_previd(std::string* previd) {
  if (previd != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  previd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.previd)
}

// optional bytes gameresultroot = 50;
inline bool Bootstrap::_internal_has_gameresultroot() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Bootstrap::has_gameresultroot() const {
  return _internal_has_gameresultroot();
}
inline void Bootstrap::clear_gameresultroot() {
  gameresultroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Bootstrap::gameresultroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.gameresultroot)
  return _internal_gameresultroot();
}
inline void Bootstrap::set_gameresultroot(const std::string& value) {
  _internal_set_gameresultroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.gameresultroot)
}
inline std::string* Bootstrap::mutable_gameresultroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.gameresultroot)
  return _internal_mutable_gameresultroot();
}
inline const std::string& Bootstrap::_internal_gameresultroot() const {
  return gameresultroot_.Get();
}
inline void Bootstrap::_internal_set_gameresultroot(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  gameresultroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bootstrap::set_gameresultroot(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  gameresultroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.gameresultroot)
}
inline void Bootstrap::set_gameresultroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  gameresultroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.gameresultroot)
}
inline void Bootstrap::set_gameresultroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  gameresultroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.gameresultroot)
}
inline std::string* Bootstrap::_internal_mutable_gameresultroot() {
  _has_bits_[0] |= 0x00000020u;
  return gameresultroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bootstrap::release_gameresultroot() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.gameresultroot)
  if (!_internal_has_gameresultroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return gameresultroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bootstrap::set_allocated_gameresultroot(std::string* gameresultroot) {
  if (gameresultroot != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  gameresultroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameresultroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.gameresultroot)
}

// optional bytes posmetaroot = 60;
inline bool Bootstrap::_internal_has_posmetaroot() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Bootstrap::has_posmetaroot() const {
  return _internal_has_posmetaroot();
}
inline void Bootstrap::clear_posmetaroot() {
  posmetaroot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Bootstrap::posmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.posmetaroot)
  return _internal_posmetaroot();
}
inline void Bootstrap::set_posmetaroot(const std::string& value) {
  _internal_set_posmetaroot(value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.posmetaroot)
}
inline std::string* Bootstrap::mutable_posmetaroot() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.posmetaroot)
  return _internal_mutable_posmetaroot();
}
inline const std::string& Bootstrap::_internal_posmetaroot() const {
  return posmetaroot_.Get();
}
inline void Bootstrap::_internal_set_posmetaroot(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  posmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bootstrap::set_posmetaroot(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  posmetaroot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.posmetaroot)
}
inline void Bootstrap::set_posmetaroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  posmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.posmetaroot)
}
inline void Bootstrap::set_posmetaroot(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  posmetaroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.posmetaroot)
}
inline std::string* Bootstrap::_internal_mutable_posmetaroot() {
  _has_bits_[0] |= 0x00000040u;
  return posmetaroot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bootstrap::release_posmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.posmetaroot)
  if (!_internal_has_posmetaroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return posmetaroot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bootstrap::set_allocated_posmetaroot(std::string* posmetaroot) {
  if (posmetaroot != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  posmetaroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), posmetaroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.posmetaroot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fantasybit::CType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::CType>() {
  return ::fantasybit::CType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_StateData_2eproto
