// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StatusData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StatusData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* PlayerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GameStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TeamDepth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamDepth_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GlobalState_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerGameStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_StatusData_2eproto() {
  protobuf_AddDesc_StatusData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StatusData.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerStatus_descriptor_ = file->message_type(0);
  static const int PlayerStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, totals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, symbol_),
  };
  PlayerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerStatus_descriptor_,
      PlayerStatus::default_instance_,
      PlayerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerStatus));
  PlayerStatus_Status_descriptor_ = PlayerStatus_descriptor_->enum_type(0);
  GameStatus_descriptor_ = file->message_type(1);
  static const int GameStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, datetime_),
  };
  GameStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStatus_descriptor_,
      GameStatus::default_instance_,
      GameStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStatus));
  GameStatus_Status_descriptor_ = GameStatus_descriptor_->enum_type(0);
  TeamDepth_descriptor_ = file->message_type(2);
  static const int TeamDepth_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, qb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, rb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, wr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, te_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, k_),
  };
  TeamDepth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamDepth_descriptor_,
      TeamDepth::default_instance_,
      TeamDepth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamDepth));
  GlobalState_descriptor_ = file->message_type(3);
  static const int GlobalState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, week_),
  };
  GlobalState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalState_descriptor_,
      GlobalState::default_instance_,
      GlobalState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalState));
  GlobalState_State_descriptor_ = GlobalState_descriptor_->enum_type(0);
  PlayerGameStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StatusData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerStatus_descriptor_, &PlayerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStatus_descriptor_, &GameStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamDepth_descriptor_, &TeamDepth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalState_descriptor_, &GlobalState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StatusData_2eproto() {
  delete PlayerStatus::default_instance_;
  delete PlayerStatus_reflection_;
  delete GameStatus::default_instance_;
  delete GameStatus_reflection_;
  delete TeamDepth::default_instance_;
  delete TeamDepth_reflection_;
  delete GlobalState::default_instance_;
  delete GlobalState_reflection_;
}

void protobuf_AddDesc_StatusData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fantasybit::protobuf_AddDesc_StaticData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020StatusData.proto\022\nfantasybit\032\020StaticDa"
    "ta.proto\"\300\001\n\014PlayerStatus\022\016\n\006teamid\030\024 \001("
    "\t\022/\n\006status\030\036 \001(\0162\037.fantasybit.PlayerSta"
    "tus.Status\022(\n\006totals\030( \001(\0132\030.fantasybit."
    "PlayerResult\022\016\n\006symbol\0302 \001(\t\"5\n\006Status\022\n"
    "\n\006ACTIVE\020\000\022\014\n\010INACTIVE\020\001\022\t\n\005OTHER\020\003\022\006\n\002F"
    "A\020\004\"\231\001\n\nGameStatus\022-\n\006status\030\n \001(\0162\035.fan"
    "tasybit.GameStatus.Status\022\020\n\010datetime\030\024 "
    "\001(\r\"J\n\006Status\022\r\n\tSCHEDULED\020\000\022\013\n\007PREGAME\020"
    "\002\022\n\n\006INGAME\020\003\022\014\n\010POSTGAME\020\005\022\n\n\006CLOSED\020\004\""
    "F\n\tTeamDepth\022\n\n\002qb\030\n \003(\t\022\n\n\002rb\030\024 \003(\t\022\n\n\002"
    "wr\030\036 \003(\t\022\n\n\002te\030( \003(\t\022\t\n\001k\0302 \003(\t\"\215\001\n\013Glob"
    "alState\022,\n\005state\030\001 \001(\0162\035.fantasybit.Glob"
    "alState.State\022\016\n\006season\030\n \001(\r\022\014\n\004week\030\024 "
    "\001(\r\"2\n\005State\022\r\n\tOFFSEASON\020\n\022\014\n\010INSEASON\020"
    "\036\022\014\n\010PLAYOFFS\020(*+\n\020PlayerGameStatus\022\007\n\003O"
    "UT\020\000\022\006\n\002IN\020\001\022\006\n\002NA\020\002", 660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StatusData.proto", &protobuf_RegisterTypes);
  PlayerStatus::default_instance_ = new PlayerStatus();
  GameStatus::default_instance_ = new GameStatus();
  TeamDepth::default_instance_ = new TeamDepth();
  GlobalState::default_instance_ = new GlobalState();
  PlayerStatus::default_instance_->InitAsDefaultInstance();
  GameStatus::default_instance_->InitAsDefaultInstance();
  TeamDepth::default_instance_->InitAsDefaultInstance();
  GlobalState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StatusData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StatusData_2eproto {
  StaticDescriptorInitializer_StatusData_2eproto() {
    protobuf_AddDesc_StatusData_2eproto();
  }
} static_descriptor_initializer_StatusData_2eproto_;
const ::google::protobuf::EnumDescriptor* PlayerGameStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGameStatus_descriptor_;
}
bool PlayerGameStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlayerStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStatus_Status_descriptor_;
}
bool PlayerStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlayerStatus_Status PlayerStatus::ACTIVE;
const PlayerStatus_Status PlayerStatus::INACTIVE;
const PlayerStatus_Status PlayerStatus::OTHER;
const PlayerStatus_Status PlayerStatus::FA;
const PlayerStatus_Status PlayerStatus::Status_MIN;
const PlayerStatus_Status PlayerStatus::Status_MAX;
const int PlayerStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlayerStatus::kTeamidFieldNumber;
const int PlayerStatus::kStatusFieldNumber;
const int PlayerStatus::kTotalsFieldNumber;
const int PlayerStatus::kSymbolFieldNumber;
#endif  // !_MSC_VER

PlayerStatus::PlayerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerStatus::InitAsDefaultInstance() {
  totals_ = const_cast< ::fantasybit::PlayerResult*>(&::fantasybit::PlayerResult::default_instance());
}

PlayerStatus::PlayerStatus(const PlayerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerStatus::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  totals_ = NULL;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStatus::~PlayerStatus() {
  SharedDtor();
}

void PlayerStatus::SharedDtor() {
  if (teamid_ != &::google::protobuf::internal::kEmptyString) {
    delete teamid_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
    delete totals_;
  }
}

void PlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStatus_descriptor_;
}

const PlayerStatus& PlayerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatusData_2eproto();
  return *default_instance_;
}

PlayerStatus* PlayerStatus::default_instance_ = NULL;

PlayerStatus* PlayerStatus::New() const {
  return new PlayerStatus;
}

void PlayerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_teamid()) {
      if (teamid_ != &::google::protobuf::internal::kEmptyString) {
        teamid_->clear();
      }
    }
    status_ = 0;
    if (has_totals()) {
      if (totals_ != NULL) totals_->::fantasybit::PlayerResult::Clear();
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string teamid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamid().data(), this->teamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_status;
        break;
      }

      // optional .fantasybit.PlayerStatus.Status status = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::PlayerStatus_Status_IsValid(value)) {
            set_status(static_cast< ::fantasybit::PlayerStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_totals;
        break;
      }

      // optional .fantasybit.PlayerResult totals = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_totals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_symbol;
        break;
      }

      // optional string symbol = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->teamid(), output);
  }

  // optional .fantasybit.PlayerStatus.Status status = 30;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->status(), output);
  }

  // optional .fantasybit.PlayerResult totals = 40;
  if (has_totals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->totals(), output);
  }

  // optional string symbol = 50;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->symbol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->teamid(), target);
  }

  // optional .fantasybit.PlayerStatus.Status status = 30;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->status(), target);
  }

  // optional .fantasybit.PlayerResult totals = 40;
  if (has_totals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->totals(), target);
  }

  // optional string symbol = 50;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->symbol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string teamid = 20;
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

    // optional .fantasybit.PlayerStatus.Status status = 30;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .fantasybit.PlayerResult totals = 40;
    if (has_totals()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totals());
    }

    // optional string symbol = 50;
    if (has_symbol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerStatus::MergeFrom(const PlayerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_totals()) {
      mutable_totals()->::fantasybit::PlayerResult::MergeFrom(from.totals());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStatus::CopyFrom(const PlayerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatus::IsInitialized() const {

  return true;
}

void PlayerStatus::Swap(PlayerStatus* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(status_, other->status_);
    std::swap(totals_, other->totals_);
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerStatus_descriptor_;
  metadata.reflection = PlayerStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GameStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatus_Status_descriptor_;
}
bool GameStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameStatus_Status GameStatus::SCHEDULED;
const GameStatus_Status GameStatus::PREGAME;
const GameStatus_Status GameStatus::INGAME;
const GameStatus_Status GameStatus::POSTGAME;
const GameStatus_Status GameStatus::CLOSED;
const GameStatus_Status GameStatus::Status_MIN;
const GameStatus_Status GameStatus::Status_MAX;
const int GameStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameStatus::kStatusFieldNumber;
const int GameStatus::kDatetimeFieldNumber;
#endif  // !_MSC_VER

GameStatus::GameStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStatus::InitAsDefaultInstance() {
}

GameStatus::GameStatus(const GameStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  datetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStatus::~GameStatus() {
  SharedDtor();
}

void GameStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatus_descriptor_;
}

const GameStatus& GameStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatusData_2eproto();
  return *default_instance_;
}

GameStatus* GameStatus::default_instance_ = NULL;

GameStatus* GameStatus::New() const {
  return new GameStatus;
}

void GameStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    datetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GameStatus.Status status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::GameStatus_Status_IsValid(value)) {
            set_status(static_cast< ::fantasybit::GameStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_datetime;
        break;
      }

      // optional uint32 datetime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.GameStatus.Status status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->status(), output);
  }

  // optional uint32 datetime = 20;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->datetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.GameStatus.Status status = 10;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->status(), target);
  }

  // optional uint32 datetime = 20;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->datetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.GameStatus.Status status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 datetime = 20;
    if (has_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStatus::MergeFrom(const GameStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStatus::CopyFrom(const GameStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatus::IsInitialized() const {

  return true;
}

void GameStatus::Swap(GameStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(datetime_, other->datetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStatus_descriptor_;
  metadata.reflection = GameStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamDepth::kQbFieldNumber;
const int TeamDepth::kRbFieldNumber;
const int TeamDepth::kWrFieldNumber;
const int TeamDepth::kTeFieldNumber;
const int TeamDepth::kKFieldNumber;
#endif  // !_MSC_VER

TeamDepth::TeamDepth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamDepth::InitAsDefaultInstance() {
}

TeamDepth::TeamDepth(const TeamDepth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamDepth::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamDepth::~TeamDepth() {
  SharedDtor();
}

void TeamDepth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamDepth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamDepth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamDepth_descriptor_;
}

const TeamDepth& TeamDepth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatusData_2eproto();
  return *default_instance_;
}

TeamDepth* TeamDepth::default_instance_ = NULL;

TeamDepth* TeamDepth::New() const {
  return new TeamDepth;
}

void TeamDepth::Clear() {
  qb_.Clear();
  rb_.Clear();
  wr_.Clear();
  te_.Clear();
  k_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamDepth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string qb = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_qb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qb(this->qb_size() - 1).data(),
            this->qb(this->qb_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_qb;
        if (input->ExpectTag(162)) goto parse_rb;
        break;
      }

      // repeated string rb = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rb(this->rb_size() - 1).data(),
            this->rb(this->rb_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_rb;
        if (input->ExpectTag(242)) goto parse_wr;
        break;
      }

      // repeated string wr = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wr(this->wr_size() - 1).data(),
            this->wr(this->wr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_wr;
        if (input->ExpectTag(322)) goto parse_te;
        break;
      }

      // repeated string te = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_te:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_te()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->te(this->te_size() - 1).data(),
            this->te(this->te_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_te;
        if (input->ExpectTag(402)) goto parse_k;
        break;
      }

      // repeated string k = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_k:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->k(this->k_size() - 1).data(),
            this->k(this->k_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_k;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamDepth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string qb = 10;
  for (int i = 0; i < this->qb_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->qb(i).data(), this->qb(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->qb(i), output);
  }

  // repeated string rb = 20;
  for (int i = 0; i < this->rb_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->rb(i).data(), this->rb(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->rb(i), output);
  }

  // repeated string wr = 30;
  for (int i = 0; i < this->wr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->wr(i).data(), this->wr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->wr(i), output);
  }

  // repeated string te = 40;
  for (int i = 0; i < this->te_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->te(i).data(), this->te(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->te(i), output);
  }

  // repeated string k = 50;
  for (int i = 0; i < this->k_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->k(i).data(), this->k(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->k(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamDepth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string qb = 10;
  for (int i = 0; i < this->qb_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qb(i).data(), this->qb(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->qb(i), target);
  }

  // repeated string rb = 20;
  for (int i = 0; i < this->rb_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rb(i).data(), this->rb(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->rb(i), target);
  }

  // repeated string wr = 30;
  for (int i = 0; i < this->wr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wr(i).data(), this->wr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(30, this->wr(i), target);
  }

  // repeated string te = 40;
  for (int i = 0; i < this->te_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->te(i).data(), this->te(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(40, this->te(i), target);
  }

  // repeated string k = 50;
  for (int i = 0; i < this->k_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->k(i).data(), this->k(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(50, this->k(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamDepth::ByteSize() const {
  int total_size = 0;

  // repeated string qb = 10;
  total_size += 1 * this->qb_size();
  for (int i = 0; i < this->qb_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->qb(i));
  }

  // repeated string rb = 20;
  total_size += 2 * this->rb_size();
  for (int i = 0; i < this->rb_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rb(i));
  }

  // repeated string wr = 30;
  total_size += 2 * this->wr_size();
  for (int i = 0; i < this->wr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wr(i));
  }

  // repeated string te = 40;
  total_size += 2 * this->te_size();
  for (int i = 0; i < this->te_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->te(i));
  }

  // repeated string k = 50;
  total_size += 2 * this->k_size();
  for (int i = 0; i < this->k_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->k(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamDepth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamDepth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamDepth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamDepth::MergeFrom(const TeamDepth& from) {
  GOOGLE_CHECK_NE(&from, this);
  qb_.MergeFrom(from.qb_);
  rb_.MergeFrom(from.rb_);
  wr_.MergeFrom(from.wr_);
  te_.MergeFrom(from.te_);
  k_.MergeFrom(from.k_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamDepth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDepth::CopyFrom(const TeamDepth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDepth::IsInitialized() const {

  return true;
}

void TeamDepth::Swap(TeamDepth* other) {
  if (other != this) {
    qb_.Swap(&other->qb_);
    rb_.Swap(&other->rb_);
    wr_.Swap(&other->wr_);
    te_.Swap(&other->te_);
    k_.Swap(&other->k_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamDepth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamDepth_descriptor_;
  metadata.reflection = TeamDepth_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GlobalState_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalState_State_descriptor_;
}
bool GlobalState_State_IsValid(int value) {
  switch(value) {
    case 10:
    case 30:
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GlobalState_State GlobalState::OFFSEASON;
const GlobalState_State GlobalState::INSEASON;
const GlobalState_State GlobalState::PLAYOFFS;
const GlobalState_State GlobalState::State_MIN;
const GlobalState_State GlobalState::State_MAX;
const int GlobalState::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GlobalState::kStateFieldNumber;
const int GlobalState::kSeasonFieldNumber;
const int GlobalState::kWeekFieldNumber;
#endif  // !_MSC_VER

GlobalState::GlobalState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalState::InitAsDefaultInstance() {
}

GlobalState::GlobalState(const GlobalState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 10;
  season_ = 0u;
  week_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalState::~GlobalState() {
  SharedDtor();
}

void GlobalState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalState_descriptor_;
}

const GlobalState& GlobalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatusData_2eproto();
  return *default_instance_;
}

GlobalState* GlobalState::default_instance_ = NULL;

GlobalState* GlobalState::New() const {
  return new GlobalState;
}

void GlobalState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 10;
    season_ = 0u;
    week_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GlobalState.State state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::GlobalState_State_IsValid(value)) {
            set_state(static_cast< ::fantasybit::GlobalState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_season;
        break;
      }

      // optional uint32 season = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.GlobalState.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.GlobalState.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.GlobalState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalState::MergeFrom(const GlobalState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalState::CopyFrom(const GlobalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalState::IsInitialized() const {

  return true;
}

void GlobalState::Swap(GlobalState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(season_, other->season_);
    std::swap(week_, other->week_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalState_descriptor_;
  metadata.reflection = GlobalState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
