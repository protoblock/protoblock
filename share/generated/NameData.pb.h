// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NameData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NameData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NameData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ExData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NameData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NameData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NameData_2eproto;
namespace fantasybit {
class FantasyBitAward;
class FantasyBitAwardDefaultTypeInternal;
extern FantasyBitAwardDefaultTypeInternal _FantasyBitAward_default_instance_;
class FantasyBitPnl;
class FantasyBitPnlDefaultTypeInternal;
extern FantasyBitPnlDefaultTypeInternal _FantasyBitPnl_default_instance_;
class FantasyBitProj;
class FantasyBitProjDefaultTypeInternal;
extern FantasyBitProjDefaultTypeInternal _FantasyBitProj_default_instance_;
class FantasyNameBal;
class FantasyNameBalDefaultTypeInternal;
extern FantasyNameBalDefaultTypeInternal _FantasyNameBal_default_instance_;
class GameFantasyBitProj;
class GameFantasyBitProjDefaultTypeInternal;
extern GameFantasyBitProjDefaultTypeInternal _GameFantasyBitProj_default_instance_;
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> ::fantasybit::FantasyBitAward* Arena::CreateMaybeMessage<::fantasybit::FantasyBitAward>(Arena*);
template<> ::fantasybit::FantasyBitPnl* Arena::CreateMaybeMessage<::fantasybit::FantasyBitPnl>(Arena*);
template<> ::fantasybit::FantasyBitProj* Arena::CreateMaybeMessage<::fantasybit::FantasyBitProj>(Arena*);
template<> ::fantasybit::FantasyNameBal* Arena::CreateMaybeMessage<::fantasybit::FantasyNameBal>(Arena*);
template<> ::fantasybit::GameFantasyBitProj* Arena::CreateMaybeMessage<::fantasybit::GameFantasyBitProj>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fantasybit {

// ===================================================================

class FantasyNameBal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyNameBal) */ {
 public:
  inline FantasyNameBal() : FantasyNameBal(nullptr) {};
  virtual ~FantasyNameBal();

  FantasyNameBal(const FantasyNameBal& from);
  FantasyNameBal(FantasyNameBal&& from) noexcept
    : FantasyNameBal() {
    *this = ::std::move(from);
  }

  inline FantasyNameBal& operator=(const FantasyNameBal& from) {
    CopyFrom(from);
    return *this;
  }
  inline FantasyNameBal& operator=(FantasyNameBal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FantasyNameBal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyNameBal* internal_default_instance() {
    return reinterpret_cast<const FantasyNameBal*>(
               &_FantasyNameBal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FantasyNameBal& a, FantasyNameBal& b) {
    a.Swap(&b);
  }
  inline void Swap(FantasyNameBal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FantasyNameBal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FantasyNameBal* New() const final {
    return CreateMaybeMessage<FantasyNameBal>(nullptr);
  }

  FantasyNameBal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FantasyNameBal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FantasyNameBal& from);
  void MergeFrom(const FantasyNameBal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FantasyNameBal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.FantasyNameBal";
  }
  protected:
  explicit FantasyNameBal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NameData_2eproto);
    return ::descriptor_table_NameData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kPublicKeyFieldNumber = 20,
    kBitsFieldNumber = 30,
    kStakeFieldNumber = 40,
    kChashFieldNumber = 50,
    kBlockFieldNumber = 60,
    kCountFieldNumber = 70,
  };
  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string public_key = 20;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // optional uint64 bits = 30;
  bool has_bits() const;
  private:
  bool _internal_has_bits() const;
  public:
  void clear_bits();
  ::PROTOBUF_NAMESPACE_ID::uint64 bits() const;
  void set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bits() const;
  void _internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 stake = 40;
  bool has_stake() const;
  private:
  bool _internal_has_stake() const;
  public:
  void clear_stake();
  ::PROTOBUF_NAMESPACE_ID::int64 stake() const;
  void set_stake(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stake() const;
  void _internal_set_stake(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 chash = 50;
  bool has_chash() const;
  private:
  bool _internal_has_chash() const;
  public:
  void clear_chash();
  ::PROTOBUF_NAMESPACE_ID::uint64 chash() const;
  void set_chash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chash() const;
  void _internal_set_chash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 block = 60;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::int32 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block() const;
  void _internal_set_block(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 count = 70;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameBal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bits_;
  ::PROTOBUF_NAMESPACE_ID::int64 stake_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chash_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  friend struct ::TableStruct_NameData_2eproto;
};
// -------------------------------------------------------------------

class FantasyBitAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyBitAward) */ {
 public:
  inline FantasyBitAward() : FantasyBitAward(nullptr) {};
  virtual ~FantasyBitAward();

  FantasyBitAward(const FantasyBitAward& from);
  FantasyBitAward(FantasyBitAward&& from) noexcept
    : FantasyBitAward() {
    *this = ::std::move(from);
  }

  inline FantasyBitAward& operator=(const FantasyBitAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline FantasyBitAward& operator=(FantasyBitAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FantasyBitAward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyBitAward* internal_default_instance() {
    return reinterpret_cast<const FantasyBitAward*>(
               &_FantasyBitAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FantasyBitAward& a, FantasyBitAward& b) {
    a.Swap(&b);
  }
  inline void Swap(FantasyBitAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FantasyBitAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FantasyBitAward* New() const final {
    return CreateMaybeMessage<FantasyBitAward>(nullptr);
  }

  FantasyBitAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FantasyBitAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FantasyBitAward& from);
  void MergeFrom(const FantasyBitAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FantasyBitAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.FantasyBitAward";
  }
  protected:
  explicit FantasyBitAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NameData_2eproto);
    return ::descriptor_table_NameData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kProjFieldNumber = 20,
    kAwardFieldNumber = 30,
  };
  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 proj = 20;
  bool has_proj() const;
  private:
  bool _internal_has_proj() const;
  public:
  void clear_proj();
  ::PROTOBUF_NAMESPACE_ID::int32 proj() const;
  void set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proj() const;
  void _internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 award = 30;
  bool has_award() const;
  private:
  bool _internal_has_award() const;
  public:
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::uint64 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyBitAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 proj_;
  ::PROTOBUF_NAMESPACE_ID::uint64 award_;
  friend struct ::TableStruct_NameData_2eproto;
};
// -------------------------------------------------------------------

class FantasyBitPnl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyBitPnl) */ {
 public:
  inline FantasyBitPnl() : FantasyBitPnl(nullptr) {};
  virtual ~FantasyBitPnl();

  FantasyBitPnl(const FantasyBitPnl& from);
  FantasyBitPnl(FantasyBitPnl&& from) noexcept
    : FantasyBitPnl() {
    *this = ::std::move(from);
  }

  inline FantasyBitPnl& operator=(const FantasyBitPnl& from) {
    CopyFrom(from);
    return *this;
  }
  inline FantasyBitPnl& operator=(FantasyBitPnl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FantasyBitPnl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyBitPnl* internal_default_instance() {
    return reinterpret_cast<const FantasyBitPnl*>(
               &_FantasyBitPnl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FantasyBitPnl& a, FantasyBitPnl& b) {
    a.Swap(&b);
  }
  inline void Swap(FantasyBitPnl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FantasyBitPnl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FantasyBitPnl* New() const final {
    return CreateMaybeMessage<FantasyBitPnl>(nullptr);
  }

  FantasyBitPnl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FantasyBitPnl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FantasyBitPnl& from);
  void MergeFrom(const FantasyBitPnl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FantasyBitPnl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.FantasyBitPnl";
  }
  protected:
  explicit FantasyBitPnl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NameData_2eproto);
    return ::descriptor_table_NameData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kSposFieldNumber = 20,
    kPnlFieldNumber = 30,
  };
  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .fantasybit.SettlePos spos = 20;
  bool has_spos() const;
  private:
  bool _internal_has_spos() const;
  public:
  void clear_spos();
  const ::fantasybit::SettlePos& spos() const;
  ::fantasybit::SettlePos* release_spos();
  ::fantasybit::SettlePos* mutable_spos();
  void set_allocated_spos(::fantasybit::SettlePos* spos);
  private:
  const ::fantasybit::SettlePos& _internal_spos() const;
  ::fantasybit::SettlePos* _internal_mutable_spos();
  public:
  void unsafe_arena_set_allocated_spos(
      ::fantasybit::SettlePos* spos);
  ::fantasybit::SettlePos* unsafe_arena_release_spos();

  // optional int64 pnl = 30;
  bool has_pnl() const;
  private:
  bool _internal_has_pnl() const;
  public:
  void clear_pnl();
  ::PROTOBUF_NAMESPACE_ID::int64 pnl() const;
  void set_pnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pnl() const;
  void _internal_set_pnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyBitPnl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::fantasybit::SettlePos* spos_;
  ::PROTOBUF_NAMESPACE_ID::int64 pnl_;
  friend struct ::TableStruct_NameData_2eproto;
};
// -------------------------------------------------------------------

class FantasyBitProj PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyBitProj) */ {
 public:
  inline FantasyBitProj() : FantasyBitProj(nullptr) {};
  virtual ~FantasyBitProj();

  FantasyBitProj(const FantasyBitProj& from);
  FantasyBitProj(FantasyBitProj&& from) noexcept
    : FantasyBitProj() {
    *this = ::std::move(from);
  }

  inline FantasyBitProj& operator=(const FantasyBitProj& from) {
    CopyFrom(from);
    return *this;
  }
  inline FantasyBitProj& operator=(FantasyBitProj&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FantasyBitProj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyBitProj* internal_default_instance() {
    return reinterpret_cast<const FantasyBitProj*>(
               &_FantasyBitProj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FantasyBitProj& a, FantasyBitProj& b) {
    a.Swap(&b);
  }
  inline void Swap(FantasyBitProj* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FantasyBitProj* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FantasyBitProj* New() const final {
    return CreateMaybeMessage<FantasyBitProj>(nullptr);
  }

  FantasyBitProj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FantasyBitProj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FantasyBitProj& from);
  void MergeFrom(const FantasyBitProj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FantasyBitProj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.FantasyBitProj";
  }
  protected:
  explicit FantasyBitProj(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NameData_2eproto);
    return ::descriptor_table_NameData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kPlayeridFieldNumber = 30,
    kBlockFieldNumber = 50,
    kProjFieldNumber = 20,
    kCountFieldNumber = 40,
  };
  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string playerid = 30;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional int32 block = 50;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::int32 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block() const;
  void _internal_set_block(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 proj = 20;
  bool has_proj() const;
  private:
  bool _internal_has_proj() const;
  public:
  void clear_proj();
  ::PROTOBUF_NAMESPACE_ID::int32 proj() const;
  void set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proj() const;
  void _internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 count = 40;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyBitProj)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_;
  ::PROTOBUF_NAMESPACE_ID::int32 proj_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  friend struct ::TableStruct_NameData_2eproto;
};
// -------------------------------------------------------------------

class GameFantasyBitProj PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameFantasyBitProj) */ {
 public:
  inline GameFantasyBitProj() : GameFantasyBitProj(nullptr) {};
  virtual ~GameFantasyBitProj();

  GameFantasyBitProj(const GameFantasyBitProj& from);
  GameFantasyBitProj(GameFantasyBitProj&& from) noexcept
    : GameFantasyBitProj() {
    *this = ::std::move(from);
  }

  inline GameFantasyBitProj& operator=(const GameFantasyBitProj& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameFantasyBitProj& operator=(GameFantasyBitProj&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameFantasyBitProj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameFantasyBitProj* internal_default_instance() {
    return reinterpret_cast<const GameFantasyBitProj*>(
               &_GameFantasyBitProj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameFantasyBitProj& a, GameFantasyBitProj& b) {
    a.Swap(&b);
  }
  inline void Swap(GameFantasyBitProj* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameFantasyBitProj* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameFantasyBitProj* New() const final {
    return CreateMaybeMessage<GameFantasyBitProj>(nullptr);
  }

  GameFantasyBitProj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameFantasyBitProj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameFantasyBitProj& from);
  void MergeFrom(const GameFantasyBitProj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameFantasyBitProj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.GameFantasyBitProj";
  }
  protected:
  explicit GameFantasyBitProj(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NameData_2eproto);
    return ::descriptor_table_NameData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeFieldNumber = 20,
    kAwayFieldNumber = 30,
    kGameidFieldNumber = 10,
  };
  // repeated .fantasybit.FantasyBitProj home = 20;
  int home_size() const;
  private:
  int _internal_home_size() const;
  public:
  void clear_home();
  ::fantasybit::FantasyBitProj* mutable_home(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitProj >*
      mutable_home();
  private:
  const ::fantasybit::FantasyBitProj& _internal_home(int index) const;
  ::fantasybit::FantasyBitProj* _internal_add_home();
  public:
  const ::fantasybit::FantasyBitProj& home(int index) const;
  ::fantasybit::FantasyBitProj* add_home();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitProj >&
      home() const;

  // repeated .fantasybit.FantasyBitProj away = 30;
  int away_size() const;
  private:
  int _internal_away_size() const;
  public:
  void clear_away();
  ::fantasybit::FantasyBitProj* mutable_away(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitProj >*
      mutable_away();
  private:
  const ::fantasybit::FantasyBitProj& _internal_away(int index) const;
  ::fantasybit::FantasyBitProj* _internal_add_away();
  public:
  const ::fantasybit::FantasyBitProj& away(int index) const;
  ::fantasybit::FantasyBitProj* add_away();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitProj >&
      away() const;

  // optional string gameid = 10;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  const std::string& gameid() const;
  void set_gameid(const std::string& value);
  void set_gameid(std::string&& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  std::string* mutable_gameid();
  std::string* release_gameid();
  void set_allocated_gameid(std::string* gameid);
  private:
  const std::string& _internal_gameid() const;
  void _internal_set_gameid(const std::string& value);
  std::string* _internal_mutable_gameid();
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.GameFantasyBitProj)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitProj > home_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitProj > away_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameid_;
  friend struct ::TableStruct_NameData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FantasyNameBal

// optional string name = 10;
inline bool FantasyNameBal::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FantasyNameBal::has_name() const {
  return _internal_has_name();
}
inline void FantasyNameBal::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FantasyNameBal::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.name)
  return _internal_name();
}
inline void FantasyNameBal::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.name)
}
inline std::string* FantasyNameBal::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBal.name)
  return _internal_mutable_name();
}
inline const std::string& FantasyNameBal::_internal_name() const {
  return name_.Get();
}
inline void FantasyNameBal::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameBal::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBal.name)
}
inline void FantasyNameBal::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBal.name)
}
inline void FantasyNameBal::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBal.name)
}
inline std::string* FantasyNameBal::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameBal::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBal.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameBal::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBal.name)
}

// optional string public_key = 20;
inline bool FantasyNameBal::_internal_has_public_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FantasyNameBal::has_public_key() const {
  return _internal_has_public_key();
}
inline void FantasyNameBal::clear_public_key() {
  public_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FantasyNameBal::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.public_key)
  return _internal_public_key();
}
inline void FantasyNameBal::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.public_key)
}
inline std::string* FantasyNameBal::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBal.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& FantasyNameBal::_internal_public_key() const {
  return public_key_.Get();
}
inline void FantasyNameBal::_internal_set_public_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameBal::set_public_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBal.public_key)
}
inline void FantasyNameBal::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBal.public_key)
}
inline void FantasyNameBal::set_public_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBal.public_key)
}
inline std::string* FantasyNameBal::_internal_mutable_public_key() {
  _has_bits_[0] |= 0x00000002u;
  return public_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameBal::release_public_key() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBal.public_key)
  if (!_internal_has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return public_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameBal::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBal.public_key)
}

// optional uint64 bits = 30;
inline bool FantasyNameBal::_internal_has_bits() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FantasyNameBal::has_bits() const {
  return _internal_has_bits();
}
inline void FantasyNameBal::clear_bits() {
  bits_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyNameBal::_internal_bits() const {
  return bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyNameBal::bits() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.bits)
  return _internal_bits();
}
inline void FantasyNameBal::_internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  bits_ = value;
}
inline void FantasyNameBal::set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.bits)
}

// optional int64 stake = 40;
inline bool FantasyNameBal::_internal_has_stake() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FantasyNameBal::has_stake() const {
  return _internal_has_stake();
}
inline void FantasyNameBal::clear_stake() {
  stake_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FantasyNameBal::_internal_stake() const {
  return stake_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FantasyNameBal::stake() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.stake)
  return _internal_stake();
}
inline void FantasyNameBal::_internal_set_stake(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  stake_ = value;
}
inline void FantasyNameBal::set_stake(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stake(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.stake)
}

// optional uint64 chash = 50;
inline bool FantasyNameBal::_internal_has_chash() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FantasyNameBal::has_chash() const {
  return _internal_has_chash();
}
inline void FantasyNameBal::clear_chash() {
  chash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyNameBal::_internal_chash() const {
  return chash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyNameBal::chash() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.chash)
  return _internal_chash();
}
inline void FantasyNameBal::_internal_set_chash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  chash_ = value;
}
inline void FantasyNameBal::set_chash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chash(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.chash)
}

// optional int32 block = 60;
inline bool FantasyNameBal::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FantasyNameBal::has_block() const {
  return _internal_has_block();
}
inline void FantasyNameBal::clear_block() {
  block_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyNameBal::_internal_block() const {
  return block_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyNameBal::block() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.block)
  return _internal_block();
}
inline void FantasyNameBal::_internal_set_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  block_ = value;
}
inline void FantasyNameBal::set_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.block)
}

// optional int32 count = 70;
inline bool FantasyNameBal::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FantasyNameBal::has_count() const {
  return _internal_has_count();
}
inline void FantasyNameBal::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyNameBal::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyNameBal::count() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.count)
  return _internal_count();
}
inline void FantasyNameBal::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  count_ = value;
}
inline void FantasyNameBal::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.count)
}

// -------------------------------------------------------------------

// FantasyBitAward

// optional string name = 10;
inline bool FantasyBitAward::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FantasyBitAward::has_name() const {
  return _internal_has_name();
}
inline void FantasyBitAward::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FantasyBitAward::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitAward.name)
  return _internal_name();
}
inline void FantasyBitAward::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitAward.name)
}
inline std::string* FantasyBitAward::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitAward.name)
  return _internal_mutable_name();
}
inline const std::string& FantasyBitAward::_internal_name() const {
  return name_.Get();
}
inline void FantasyBitAward::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyBitAward::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyBitAward.name)
}
inline void FantasyBitAward::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyBitAward.name)
}
inline void FantasyBitAward::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyBitAward.name)
}
inline std::string* FantasyBitAward::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyBitAward::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyBitAward.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyBitAward::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitAward.name)
}

// optional int32 proj = 20;
inline bool FantasyBitAward::_internal_has_proj() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FantasyBitAward::has_proj() const {
  return _internal_has_proj();
}
inline void FantasyBitAward::clear_proj() {
  proj_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyBitAward::_internal_proj() const {
  return proj_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyBitAward::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitAward.proj)
  return _internal_proj();
}
inline void FantasyBitAward::_internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  proj_ = value;
}
inline void FantasyBitAward::set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proj(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitAward.proj)
}

// optional uint64 award = 30;
inline bool FantasyBitAward::_internal_has_award() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FantasyBitAward::has_award() const {
  return _internal_has_award();
}
inline void FantasyBitAward::clear_award() {
  award_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyBitAward::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyBitAward::award() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitAward.award)
  return _internal_award();
}
inline void FantasyBitAward::_internal_set_award(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  award_ = value;
}
inline void FantasyBitAward::set_award(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitAward.award)
}

// -------------------------------------------------------------------

// FantasyBitPnl

// optional string name = 10;
inline bool FantasyBitPnl::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FantasyBitPnl::has_name() const {
  return _internal_has_name();
}
inline void FantasyBitPnl::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FantasyBitPnl::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitPnl.name)
  return _internal_name();
}
inline void FantasyBitPnl::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitPnl.name)
}
inline std::string* FantasyBitPnl::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitPnl.name)
  return _internal_mutable_name();
}
inline const std::string& FantasyBitPnl::_internal_name() const {
  return name_.Get();
}
inline void FantasyBitPnl::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyBitPnl::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyBitPnl.name)
}
inline void FantasyBitPnl::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyBitPnl.name)
}
inline void FantasyBitPnl::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyBitPnl.name)
}
inline std::string* FantasyBitPnl::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyBitPnl::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyBitPnl.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyBitPnl::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitPnl.name)
}

// optional .fantasybit.SettlePos spos = 20;
inline bool FantasyBitPnl::_internal_has_spos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || spos_ != nullptr);
  return value;
}
inline bool FantasyBitPnl::has_spos() const {
  return _internal_has_spos();
}
inline const ::fantasybit::SettlePos& FantasyBitPnl::_internal_spos() const {
  const ::fantasybit::SettlePos* p = spos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::SettlePos*>(
      &::fantasybit::_SettlePos_default_instance_);
}
inline const ::fantasybit::SettlePos& FantasyBitPnl::spos() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitPnl.spos)
  return _internal_spos();
}
inline void FantasyBitPnl::unsafe_arena_set_allocated_spos(
    ::fantasybit::SettlePos* spos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spos_);
  }
  spos_ = spos;
  if (spos) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.FantasyBitPnl.spos)
}
inline ::fantasybit::SettlePos* FantasyBitPnl::release_spos() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::SettlePos* temp = spos_;
  spos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::SettlePos* FantasyBitPnl::unsafe_arena_release_spos() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyBitPnl.spos)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::SettlePos* temp = spos_;
  spos_ = nullptr;
  return temp;
}
inline ::fantasybit::SettlePos* FantasyBitPnl::_internal_mutable_spos() {
  _has_bits_[0] |= 0x00000002u;
  if (spos_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::SettlePos>(GetArena());
    spos_ = p;
  }
  return spos_;
}
inline ::fantasybit::SettlePos* FantasyBitPnl::mutable_spos() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitPnl.spos)
  return _internal_mutable_spos();
}
inline void FantasyBitPnl::set_allocated_spos(::fantasybit::SettlePos* spos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spos_);
  }
  if (spos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spos)->GetArena();
    if (message_arena != submessage_arena) {
      spos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  spos_ = spos;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitPnl.spos)
}

// optional int64 pnl = 30;
inline bool FantasyBitPnl::_internal_has_pnl() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FantasyBitPnl::has_pnl() const {
  return _internal_has_pnl();
}
inline void FantasyBitPnl::clear_pnl() {
  pnl_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FantasyBitPnl::_internal_pnl() const {
  return pnl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FantasyBitPnl::pnl() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitPnl.pnl)
  return _internal_pnl();
}
inline void FantasyBitPnl::_internal_set_pnl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  pnl_ = value;
}
inline void FantasyBitPnl::set_pnl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pnl(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitPnl.pnl)
}

// -------------------------------------------------------------------

// FantasyBitProj

// optional string name = 10;
inline bool FantasyBitProj::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FantasyBitProj::has_name() const {
  return _internal_has_name();
}
inline void FantasyBitProj::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FantasyBitProj::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.name)
  return _internal_name();
}
inline void FantasyBitProj::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.name)
}
inline std::string* FantasyBitProj::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitProj.name)
  return _internal_mutable_name();
}
inline const std::string& FantasyBitProj::_internal_name() const {
  return name_.Get();
}
inline void FantasyBitProj::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyBitProj::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyBitProj.name)
}
inline void FantasyBitProj::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyBitProj.name)
}
inline void FantasyBitProj::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyBitProj.name)
}
inline std::string* FantasyBitProj::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyBitProj::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyBitProj.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyBitProj::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitProj.name)
}

// optional int32 proj = 20;
inline bool FantasyBitProj::_internal_has_proj() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FantasyBitProj::has_proj() const {
  return _internal_has_proj();
}
inline void FantasyBitProj::clear_proj() {
  proj_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyBitProj::_internal_proj() const {
  return proj_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyBitProj::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.proj)
  return _internal_proj();
}
inline void FantasyBitProj::_internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  proj_ = value;
}
inline void FantasyBitProj::set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proj(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.proj)
}

// optional string playerid = 30;
inline bool FantasyBitProj::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FantasyBitProj::has_playerid() const {
  return _internal_has_playerid();
}
inline void FantasyBitProj::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FantasyBitProj::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.playerid)
  return _internal_playerid();
}
inline void FantasyBitProj::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.playerid)
}
inline std::string* FantasyBitProj::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitProj.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& FantasyBitProj::_internal_playerid() const {
  return playerid_.Get();
}
inline void FantasyBitProj::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyBitProj::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyBitProj.playerid)
}
inline void FantasyBitProj::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyBitProj.playerid)
}
inline void FantasyBitProj::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyBitProj.playerid)
}
inline std::string* FantasyBitProj::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000002u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyBitProj::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyBitProj.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyBitProj::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitProj.playerid)
}

// optional int32 count = 40;
inline bool FantasyBitProj::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FantasyBitProj::has_count() const {
  return _internal_has_count();
}
inline void FantasyBitProj::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyBitProj::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyBitProj::count() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.count)
  return _internal_count();
}
inline void FantasyBitProj::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  count_ = value;
}
inline void FantasyBitProj::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.count)
}

// optional int32 block = 50;
inline bool FantasyBitProj::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FantasyBitProj::has_block() const {
  return _internal_has_block();
}
inline void FantasyBitProj::clear_block() {
  block_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyBitProj::_internal_block() const {
  return block_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FantasyBitProj::block() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.block)
  return _internal_block();
}
inline void FantasyBitProj::_internal_set_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  block_ = value;
}
inline void FantasyBitProj::set_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.block)
}

// -------------------------------------------------------------------

// GameFantasyBitProj

// optional string gameid = 10;
inline bool GameFantasyBitProj::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameFantasyBitProj::has_gameid() const {
  return _internal_has_gameid();
}
inline void GameFantasyBitProj::clear_gameid() {
  gameid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameFantasyBitProj::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameFantasyBitProj.gameid)
  return _internal_gameid();
}
inline void GameFantasyBitProj::set_gameid(const std::string& value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.GameFantasyBitProj.gameid)
}
inline std::string* GameFantasyBitProj::mutable_gameid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameFantasyBitProj.gameid)
  return _internal_mutable_gameid();
}
inline const std::string& GameFantasyBitProj::_internal_gameid() const {
  return gameid_.Get();
}
inline void GameFantasyBitProj::_internal_set_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameFantasyBitProj::set_gameid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameFantasyBitProj.gameid)
}
inline void GameFantasyBitProj::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.GameFantasyBitProj.gameid)
}
inline void GameFantasyBitProj::set_gameid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameFantasyBitProj.gameid)
}
inline std::string* GameFantasyBitProj::_internal_mutable_gameid() {
  _has_bits_[0] |= 0x00000001u;
  return gameid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameFantasyBitProj::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameFantasyBitProj.gameid)
  if (!_internal_has_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameFantasyBitProj::set_allocated_gameid(std::string* gameid) {
  if (gameid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameFantasyBitProj.gameid)
}

// repeated .fantasybit.FantasyBitProj home = 20;
inline int GameFantasyBitProj::_internal_home_size() const {
  return home_.size();
}
inline int GameFantasyBitProj::home_size() const {
  return _internal_home_size();
}
inline void GameFantasyBitProj::clear_home() {
  home_.Clear();
}
inline ::fantasybit::FantasyBitProj* GameFantasyBitProj::mutable_home(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameFantasyBitProj.home)
  return home_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitProj >*
GameFantasyBitProj::mutable_home() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameFantasyBitProj.home)
  return &home_;
}
inline const ::fantasybit::FantasyBitProj& GameFantasyBitProj::_internal_home(int index) const {
  return home_.Get(index);
}
inline const ::fantasybit::FantasyBitProj& GameFantasyBitProj::home(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameFantasyBitProj.home)
  return _internal_home(index);
}
inline ::fantasybit::FantasyBitProj* GameFantasyBitProj::_internal_add_home() {
  return home_.Add();
}
inline ::fantasybit::FantasyBitProj* GameFantasyBitProj::add_home() {
  // @@protoc_insertion_point(field_add:fantasybit.GameFantasyBitProj.home)
  return _internal_add_home();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitProj >&
GameFantasyBitProj::home() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameFantasyBitProj.home)
  return home_;
}

// repeated .fantasybit.FantasyBitProj away = 30;
inline int GameFantasyBitProj::_internal_away_size() const {
  return away_.size();
}
inline int GameFantasyBitProj::away_size() const {
  return _internal_away_size();
}
inline void GameFantasyBitProj::clear_away() {
  away_.Clear();
}
inline ::fantasybit::FantasyBitProj* GameFantasyBitProj::mutable_away(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameFantasyBitProj.away)
  return away_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitProj >*
GameFantasyBitProj::mutable_away() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameFantasyBitProj.away)
  return &away_;
}
inline const ::fantasybit::FantasyBitProj& GameFantasyBitProj::_internal_away(int index) const {
  return away_.Get(index);
}
inline const ::fantasybit::FantasyBitProj& GameFantasyBitProj::away(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameFantasyBitProj.away)
  return _internal_away(index);
}
inline ::fantasybit::FantasyBitProj* GameFantasyBitProj::_internal_add_away() {
  return away_.Add();
}
inline ::fantasybit::FantasyBitProj* GameFantasyBitProj::add_away() {
  // @@protoc_insertion_point(field_add:fantasybit.GameFantasyBitProj.away)
  return _internal_add_away();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fantasybit::FantasyBitProj >&
GameFantasyBitProj::away() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameFantasyBitProj.away)
  return away_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NameData_2eproto
