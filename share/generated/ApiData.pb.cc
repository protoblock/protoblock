// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ApiData.proto

#include "ApiData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ApiData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjDstats_ApiData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ApiData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjKstats_ApiData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ApiData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjOstats_ApiData_2eproto;
namespace fantasybit {
class FantasyNameHashDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FantasyNameHash> _instance;
} _FantasyNameHash_default_instance_;
class DistributionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distribution> _instance;
} _Distribution_default_instance_;
class ProfitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Profits> _instance;
} _Profits_default_instance_;
class FillsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fills> _instance;
} _Fills_default_instance_;
class ProjKstatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjKstats> _instance;
} _ProjKstats_default_instance_;
class ProjDstatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjDstats> _instance;
} _ProjDstats_default_instance_;
class ProjOstatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjOstats> _instance;
} _ProjOstats_default_instance_;
class ProjStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjStats> _instance;
} _ProjStats_default_instance_;
}  // namespace fantasybit
static void InitDefaultsscc_info_Distribution_ApiData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Distribution_default_instance_;
    new (ptr) ::fantasybit::Distribution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Distribution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_ApiData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Distribution_ApiData_2eproto}, {}};

static void InitDefaultsscc_info_FantasyNameHash_ApiData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_FantasyNameHash_default_instance_;
    new (ptr) ::fantasybit::FantasyNameHash();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyNameHash::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyNameHash_ApiData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FantasyNameHash_ApiData_2eproto}, {}};

static void InitDefaultsscc_info_Fills_ApiData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Fills_default_instance_;
    new (ptr) ::fantasybit::Fills();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Fills::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fills_ApiData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fills_ApiData_2eproto}, {}};

static void InitDefaultsscc_info_Profits_ApiData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_Profits_default_instance_;
    new (ptr) ::fantasybit::Profits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Profits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Profits_ApiData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Profits_ApiData_2eproto}, {}};

static void InitDefaultsscc_info_ProjDstats_ApiData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ProjDstats_default_instance_;
    new (ptr) ::fantasybit::ProjDstats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjDstats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjDstats_ApiData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProjDstats_ApiData_2eproto}, {}};

static void InitDefaultsscc_info_ProjKstats_ApiData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ProjKstats_default_instance_;
    new (ptr) ::fantasybit::ProjKstats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjKstats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjKstats_ApiData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProjKstats_ApiData_2eproto}, {}};

static void InitDefaultsscc_info_ProjOstats_ApiData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ProjOstats_default_instance_;
    new (ptr) ::fantasybit::ProjOstats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjOstats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjOstats_ApiData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProjOstats_ApiData_2eproto}, {}};

static void InitDefaultsscc_info_ProjStats_ApiData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_ProjStats_default_instance_;
    new (ptr) ::fantasybit::ProjStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProjStats_ApiData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProjStats_ApiData_2eproto}, {
      &scc_info_ProjOstats_ApiData_2eproto.base,
      &scc_info_ProjDstats_ApiData_2eproto.base,
      &scc_info_ProjKstats_ApiData_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ApiData_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ApiData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ApiData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ApiData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameHash, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameHash, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameHash, hash_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Distribution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Distribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Distribution, gameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Distribution, teamid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Distribution, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Distribution, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Distribution, fantasy_nameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Distribution, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Distribution, proj_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Distribution, award_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Distribution, result_),
  0,
  2,
  4,
  5,
  3,
  1,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, gameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, teamid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, fantasy_nameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, qty_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, price_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, result_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Profits, pnl_),
  0,
  2,
  4,
  5,
  3,
  1,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::fantasybit::Fills, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Fills, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::Fills, passivebuy_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Fills, buyer_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Fills, seller_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Fills, teamid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Fills, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Fills, season_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Fills, week_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Fills, qty_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::Fills, price_),
  5,
  0,
  1,
  2,
  3,
  6,
  7,
  8,
  4,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjKstats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjKstats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjKstats, pa_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjKstats, fg30_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjKstats, fg40_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjKstats, fg50_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjKstats, fg60_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjDstats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjDstats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjDstats, twopt_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjDstats, onept_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjDstats, deftd_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjDstats, sfty_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjDstats, turnovers_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjDstats, sacks_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjDstats, ptsa_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, passyds_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, passtd_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, rushyds_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, rushtd_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, recyds_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, rectd_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, rec_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, pint_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, fumble_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, twopt_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjOstats, onept_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjStats, ostats_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjStats, dstats_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::ProjStats, kstats_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::fantasybit::FantasyNameHash)},
  { 9, 23, sizeof(::fantasybit::Distribution)},
  { 32, 47, sizeof(::fantasybit::Profits)},
  { 57, 71, sizeof(::fantasybit::Fills)},
  { 80, 90, sizeof(::fantasybit::ProjKstats)},
  { 95, 107, sizeof(::fantasybit::ProjDstats)},
  { 114, 130, sizeof(::fantasybit::ProjOstats)},
  { 141, 149, sizeof(::fantasybit::ProjStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_FantasyNameHash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Distribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Profits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_Fills_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ProjKstats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ProjDstats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ProjOstats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_ProjStats_default_instance_),
};

const char descriptor_table_protodef_ApiData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rApiData.proto\022\nfantasybit\"-\n\017FantasyNa"
  "meHash\022\014\n\004name\030\n \001(\t\022\014\n\004hash\030\036 \001(\004\"\243\001\n\014D"
  "istribution\022\016\n\006gameid\030\002 \001(\t\022\016\n\006teamid\030\004 "
  "\001(\t\022\016\n\006season\030\005 \001(\005\022\014\n\004week\030\006 \001(\005\022\026\n\016fan"
  "tasy_nameid\030\001 \001(\004\022\020\n\010playerid\030\003 \001(\t\022\014\n\004p"
  "roj\030\007 \001(\005\022\r\n\005award\030\010 \001(\002\022\016\n\006result\030\t \001(\002"
  "\"\252\001\n\007Profits\022\016\n\006gameid\030\002 \001(\t\022\016\n\006teamid\030\004"
  " \001(\t\022\016\n\006season\030\005 \001(\005\022\014\n\004week\030\006 \001(\005\022\026\n\016fa"
  "ntasy_nameid\030\001 \001(\004\022\020\n\010playerid\030\003 \001(\t\022\013\n\003"
  "qty\030\007 \001(\005\022\r\n\005price\030\010 \001(\002\022\016\n\006result\030\t \001(\002"
  "\022\013\n\003pnl\030\n \001(\002\"\226\001\n\005Fills\022\022\n\npassivebuy\030\001 "
  "\001(\010\022\r\n\005buyer\030\n \001(\t\022\016\n\006seller\030\024 \001(\t\022\016\n\006te"
  "amid\030( \001(\t\022\020\n\010playerid\030- \001(\t\022\016\n\006season\0302"
  " \001(\005\022\014\n\004week\030< \001(\005\022\013\n\003qty\030F \001(\005\022\r\n\005price"
  "\030P \001(\002\"P\n\nProjKstats\022\n\n\002pa\030\n \001(\002\022\014\n\004fg30"
  "\030\024 \001(\002\022\014\n\004fg40\030\036 \001(\002\022\014\n\004fg50\030( \001(\002\022\014\n\004fg"
  "60\0302 \001(\002\"{\n\nProjDstats\022\r\n\005twopt\030d \001(\002\022\r\n"
  "\005onept\030n \001(\002\022\r\n\005deftd\030x \001(\002\022\r\n\004sfty\030\202\001 \001"
  "(\002\022\022\n\tturnovers\030\214\001 \001(\002\022\016\n\005sacks\030\226\001 \001(\002\022\r"
  "\n\004ptsa\030\240\001 \001(\002\"\266\001\n\nProjOstats\022\017\n\007passyds\030"
  "\n \001(\002\022\016\n\006passtd\030\024 \001(\002\022\017\n\007rushyds\030\036 \001(\002\022\016"
  "\n\006rushtd\030( \001(\002\022\016\n\006recyds\0302 \001(\002\022\r\n\005rectd\030"
  "< \001(\002\022\013\n\003rec\030F \001(\002\022\014\n\004pint\030P \001(\002\022\016\n\006fumb"
  "le\030Z \001(\002\022\r\n\005twopt\030d \001(\002\022\r\n\005onept\030n \001(\002\"\203"
  "\001\n\tProjStats\022&\n\006ostats\030\n \001(\0132\026.fantasybi"
  "t.ProjOstats\022&\n\006dstats\030\024 \001(\0132\026.fantasybi"
  "t.ProjDstats\022&\n\006kstats\030\036 \001(\0132\026.fantasybi"
  "t.ProjKstats"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ApiData_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ApiData_2eproto_sccs[8] = {
  &scc_info_Distribution_ApiData_2eproto.base,
  &scc_info_FantasyNameHash_ApiData_2eproto.base,
  &scc_info_Fills_ApiData_2eproto.base,
  &scc_info_Profits_ApiData_2eproto.base,
  &scc_info_ProjDstats_ApiData_2eproto.base,
  &scc_info_ProjKstats_ApiData_2eproto.base,
  &scc_info_ProjOstats_ApiData_2eproto.base,
  &scc_info_ProjStats_ApiData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ApiData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ApiData_2eproto = {
  false, false, descriptor_table_protodef_ApiData_2eproto, "ApiData.proto", 1092,
  &descriptor_table_ApiData_2eproto_once, descriptor_table_ApiData_2eproto_sccs, descriptor_table_ApiData_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_ApiData_2eproto::offsets,
  file_level_metadata_ApiData_2eproto, 8, file_level_enum_descriptors_ApiData_2eproto, file_level_service_descriptors_ApiData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ApiData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ApiData_2eproto)), true);
namespace fantasybit {

// ===================================================================

void FantasyNameHash::InitAsDefaultInstance() {
}
class FantasyNameHash::_Internal {
 public:
  using HasBits = decltype(std::declval<FantasyNameHash>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FantasyNameHash::FantasyNameHash(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.FantasyNameHash)
}
FantasyNameHash::FantasyNameHash(const FantasyNameHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  hash_ = from.hash_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyNameHash)
}

void FantasyNameHash::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FantasyNameHash_ApiData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_ = PROTOBUF_ULONGLONG(0);
}

FantasyNameHash::~FantasyNameHash() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyNameHash)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FantasyNameHash::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FantasyNameHash::ArenaDtor(void* object) {
  FantasyNameHash* _this = reinterpret_cast< FantasyNameHash* >(object);
  (void)_this;
}
void FantasyNameHash::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FantasyNameHash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FantasyNameHash& FantasyNameHash::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FantasyNameHash_ApiData_2eproto.base);
  return *internal_default_instance();
}


void FantasyNameHash::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyNameHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  hash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FantasyNameHash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyNameHash.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 hash = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_hash(&has_bits);
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FantasyNameHash::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyNameHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameHash.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional uint64 hash = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyNameHash)
  return target;
}

size_t FantasyNameHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyNameHash)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 hash = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_hash());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FantasyNameHash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyNameHash)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyNameHash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FantasyNameHash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyNameHash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyNameHash)
    MergeFrom(*source);
  }
}

void FantasyNameHash::MergeFrom(const FantasyNameHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyNameHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      hash_ = from.hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyNameHash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyNameHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyNameHash::CopyFrom(const FantasyNameHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyNameHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyNameHash::IsInitialized() const {
  return true;
}

void FantasyNameHash::InternalSwap(FantasyNameHash* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(hash_, other->hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FantasyNameHash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Distribution::InitAsDefaultInstance() {
}
class Distribution::_Internal {
 public:
  using HasBits = decltype(std::declval<Distribution>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fantasy_nameid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proj(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_award(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

Distribution::Distribution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Distribution)
}
Distribution::Distribution(const Distribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameid()) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameid(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_teamid()) {
    teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_teamid(),
      GetArena());
  }
  ::memcpy(&fantasy_nameid_, &from.fantasy_nameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Distribution)
}

void Distribution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Distribution_ApiData_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fantasy_nameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(result_));
}

Distribution::~Distribution() {
  // @@protoc_insertion_point(destructor:fantasybit.Distribution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Distribution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Distribution::ArenaDtor(void* object) {
  Distribution* _this = reinterpret_cast< Distribution* >(object);
  (void)_this;
}
void Distribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distribution& Distribution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distribution_ApiData_2eproto.base);
  return *internal_default_instance();
}


void Distribution::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Distribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      teamid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&fantasy_nameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&award_) -
        reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(award_));
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 fantasy_nameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_nameid(&has_bits);
          fantasy_nameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gameid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Distribution.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Distribution.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string teamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_teamid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Distribution.teamid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 season = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 week = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 proj = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_proj(&has_bits);
          proj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float award = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_award(&has_bits);
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float result = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Distribution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Distribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 fantasy_nameid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_fantasy_nameid(), target);
  }

  // optional string gameid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Distribution.gameid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gameid(), target);
  }

  // optional string playerid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Distribution.playerid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_playerid(), target);
  }

  // optional string teamid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_teamid().data(), static_cast<int>(this->_internal_teamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Distribution.teamid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_teamid(), target);
  }

  // optional int32 season = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_season(), target);
  }

  // optional int32 week = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_week(), target);
  }

  // optional int32 proj = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_proj(), target);
  }

  // optional float award = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_award(), target);
  }

  // optional float result = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Distribution)
  return target;
}

size_t Distribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Distribution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string gameid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameid());
    }

    // optional string playerid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional string teamid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_teamid());
    }

    // optional uint64 fantasy_nameid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_fantasy_nameid());
    }

    // optional int32 season = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_season());
    }

    // optional int32 week = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_week());
    }

    // optional int32 proj = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_proj());
    }

    // optional float award = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float result = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Distribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Distribution)
    MergeFrom(*source);
  }
}

void Distribution::MergeFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameid(from._internal_gameid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_teamid(from._internal_teamid());
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_nameid_ = from.fantasy_nameid_;
    }
    if (cached_has_bits & 0x00000010u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000020u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000040u) {
      proj_ = from.proj_;
    }
    if (cached_has_bits & 0x00000080u) {
      award_ = from.award_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_result(from._internal_result());
  }
}

void Distribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution::CopyFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution::IsInitialized() const {
  return true;
}

void Distribution::InternalSwap(Distribution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  teamid_.Swap(&other->teamid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Distribution, result_)
      + sizeof(Distribution::result_)
      - PROTOBUF_FIELD_OFFSET(Distribution, fantasy_nameid_)>(
          reinterpret_cast<char*>(&fantasy_nameid_),
          reinterpret_cast<char*>(&other->fantasy_nameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Profits::InitAsDefaultInstance() {
}
class Profits::_Internal {
 public:
  using HasBits = decltype(std::declval<Profits>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fantasy_nameid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_qty(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pnl(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Profits::Profits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Profits)
}
Profits::Profits(const Profits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameid()) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameid(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_teamid()) {
    teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_teamid(),
      GetArena());
  }
  ::memcpy(&fantasy_nameid_, &from.fantasy_nameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pnl_) -
    reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(pnl_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Profits)
}

void Profits::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Profits_ApiData_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fantasy_nameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pnl_) -
      reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(pnl_));
}

Profits::~Profits() {
  // @@protoc_insertion_point(destructor:fantasybit.Profits)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Profits::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Profits::ArenaDtor(void* object) {
  Profits* _this = reinterpret_cast< Profits* >(object);
  (void)_this;
}
void Profits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Profits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Profits& Profits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Profits_ApiData_2eproto.base);
  return *internal_default_instance();
}


void Profits::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Profits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      teamid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&fantasy_nameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(price_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pnl_) -
        reinterpret_cast<char*>(&result_)) + sizeof(pnl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Profits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 fantasy_nameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fantasy_nameid(&has_bits);
          fantasy_nameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gameid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Profits.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Profits.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string teamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_teamid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Profits.teamid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 season = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 week = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 qty = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_qty(&has_bits);
          qty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float result = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pnl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_pnl(&has_bits);
          pnl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Profits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Profits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 fantasy_nameid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_fantasy_nameid(), target);
  }

  // optional string gameid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Profits.gameid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gameid(), target);
  }

  // optional string playerid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Profits.playerid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_playerid(), target);
  }

  // optional string teamid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_teamid().data(), static_cast<int>(this->_internal_teamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Profits.teamid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_teamid(), target);
  }

  // optional int32 season = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_season(), target);
  }

  // optional int32 week = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_week(), target);
  }

  // optional int32 qty = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_qty(), target);
  }

  // optional float price = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_price(), target);
  }

  // optional float result = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_result(), target);
  }

  // optional float pnl = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_pnl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Profits)
  return target;
}

size_t Profits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Profits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string gameid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameid());
    }

    // optional string playerid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional string teamid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_teamid());
    }

    // optional uint64 fantasy_nameid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_fantasy_nameid());
    }

    // optional int32 season = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_season());
    }

    // optional int32 week = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_week());
    }

    // optional int32 qty = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_qty());
    }

    // optional float price = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float result = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float pnl = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Profits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Profits)
  GOOGLE_DCHECK_NE(&from, this);
  const Profits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Profits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Profits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Profits)
    MergeFrom(*source);
  }
}

void Profits::MergeFrom(const Profits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Profits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameid(from._internal_gameid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_teamid(from._internal_teamid());
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_nameid_ = from.fantasy_nameid_;
    }
    if (cached_has_bits & 0x00000010u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000020u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000040u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000080u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000200u) {
      pnl_ = from.pnl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Profits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Profits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profits::CopyFrom(const Profits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Profits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profits::IsInitialized() const {
  return true;
}

void Profits::InternalSwap(Profits* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  teamid_.Swap(&other->teamid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Profits, pnl_)
      + sizeof(Profits::pnl_)
      - PROTOBUF_FIELD_OFFSET(Profits, fantasy_nameid_)>(
          reinterpret_cast<char*>(&fantasy_nameid_),
          reinterpret_cast<char*>(&other->fantasy_nameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Profits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fills::InitAsDefaultInstance() {
}
class Fills::_Internal {
 public:
  using HasBits = decltype(std::declval<Fills>()._has_bits_);
  static void set_has_passivebuy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_buyer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_week(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_qty(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Fills::Fills(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.Fills)
}
Fills::Fills(const Fills& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buyer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_buyer()) {
    buyer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_buyer(),
      GetArena());
  }
  seller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_seller()) {
    seller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_seller(),
      GetArena());
  }
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_teamid()) {
    teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_teamid(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&qty_) -
    reinterpret_cast<char*>(&price_)) + sizeof(qty_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Fills)
}

void Fills::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fills_ApiData_2eproto.base);
  buyer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qty_) -
      reinterpret_cast<char*>(&price_)) + sizeof(qty_));
}

Fills::~Fills() {
  // @@protoc_insertion_point(destructor:fantasybit.Fills)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fills::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  buyer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fills::ArenaDtor(void* object) {
  Fills* _this = reinterpret_cast< Fills* >(object);
  (void)_this;
}
void Fills::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fills::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fills& Fills::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fills_ApiData_2eproto.base);
  return *internal_default_instance();
}


void Fills::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Fills)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      buyer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      seller_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      teamid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      playerid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&price_)) + sizeof(week_));
  }
  qty_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fills::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool passivebuy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_passivebuy(&has_bits);
          passivebuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string buyer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_buyer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Fills.buyer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string seller = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_seller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Fills.seller");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string teamid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_teamid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Fills.teamid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.Fills.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 season = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 week = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_week(&has_bits);
          week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 qty = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_qty(&has_bits);
          qty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float price = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fills::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Fills)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool passivebuy = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_passivebuy(), target);
  }

  // optional string buyer = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buyer().data(), static_cast<int>(this->_internal_buyer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.buyer");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_buyer(), target);
  }

  // optional string seller = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_seller().data(), static_cast<int>(this->_internal_seller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.seller");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_seller(), target);
  }

  // optional string teamid = 40;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_teamid().data(), static_cast<int>(this->_internal_teamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.teamid");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_teamid(), target);
  }

  // optional string playerid = 45;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.playerid");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_playerid(), target);
  }

  // optional int32 season = 50;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_season(), target);
  }

  // optional int32 week = 60;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_week(), target);
  }

  // optional int32 qty = 70;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_qty(), target);
  }

  // optional float price = 80;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(80, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Fills)
  return target;
}

size_t Fills::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Fills)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string buyer = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buyer());
    }

    // optional string seller = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_seller());
    }

    // optional string teamid = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_teamid());
    }

    // optional string playerid = 45;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional float price = 80;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional bool passivebuy = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 season = 50;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_season());
    }

    // optional int32 week = 60;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_week());
    }

  }
  // optional int32 qty = 70;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_qty());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fills::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Fills)
  GOOGLE_DCHECK_NE(&from, this);
  const Fills* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fills>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Fills)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Fills)
    MergeFrom(*source);
  }
}

void Fills::MergeFrom(const Fills& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Fills)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_buyer(from._internal_buyer());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_seller(from._internal_seller());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_teamid(from._internal_teamid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000020u) {
      passivebuy_ = from.passivebuy_;
    }
    if (cached_has_bits & 0x00000040u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000080u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_qty(from._internal_qty());
  }
}

void Fills::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Fills)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fills::CopyFrom(const Fills& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Fills)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fills::IsInitialized() const {
  return true;
}

void Fills::InternalSwap(Fills* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buyer_.Swap(&other->buyer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  seller_.Swap(&other->seller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  teamid_.Swap(&other->teamid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fills, qty_)
      + sizeof(Fills::qty_)
      - PROTOBUF_FIELD_OFFSET(Fills, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fills::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjKstats::InitAsDefaultInstance() {
}
class ProjKstats::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjKstats>()._has_bits_);
  static void set_has_pa(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fg30(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fg40(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fg50(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fg60(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProjKstats::ProjKstats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ProjKstats)
}
ProjKstats::ProjKstats(const ProjKstats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fg60_, &from.fg60_,
    static_cast<size_t>(reinterpret_cast<char*>(&fg50_) -
    reinterpret_cast<char*>(&fg60_)) + sizeof(fg50_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjKstats)
}

void ProjKstats::SharedCtor() {
  ::memset(&fg60_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fg50_) -
      reinterpret_cast<char*>(&fg60_)) + sizeof(fg50_));
}

ProjKstats::~ProjKstats() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjKstats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjKstats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProjKstats::ArenaDtor(void* object) {
  ProjKstats* _this = reinterpret_cast< ProjKstats* >(object);
  (void)_this;
}
void ProjKstats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjKstats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjKstats& ProjKstats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjKstats_ApiData_2eproto.base);
  return *internal_default_instance();
}


void ProjKstats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjKstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&fg60_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fg50_) -
        reinterpret_cast<char*>(&fg60_)) + sizeof(fg50_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjKstats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float pa = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_pa(&has_bits);
          pa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg30 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_fg30(&has_bits);
          fg30_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg40 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_fg40(&has_bits);
          fg40_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg50 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_fg50(&has_bits);
          fg50_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg60 = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_fg60(&has_bits);
          fg60_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjKstats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjKstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pa = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_pa(), target);
  }

  // optional float fg30 = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_fg30(), target);
  }

  // optional float fg40 = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_fg40(), target);
  }

  // optional float fg50 = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(40, this->_internal_fg50(), target);
  }

  // optional float fg60 = 50;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(50, this->_internal_fg60(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjKstats)
  return target;
}

size_t ProjKstats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjKstats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float fg60 = 50;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float pa = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float fg30 = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float fg40 = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float fg50 = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjKstats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjKstats)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjKstats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjKstats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjKstats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjKstats)
    MergeFrom(*source);
  }
}

void ProjKstats::MergeFrom(const ProjKstats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjKstats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      fg60_ = from.fg60_;
    }
    if (cached_has_bits & 0x00000002u) {
      pa_ = from.pa_;
    }
    if (cached_has_bits & 0x00000004u) {
      fg30_ = from.fg30_;
    }
    if (cached_has_bits & 0x00000008u) {
      fg40_ = from.fg40_;
    }
    if (cached_has_bits & 0x00000010u) {
      fg50_ = from.fg50_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjKstats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjKstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjKstats::CopyFrom(const ProjKstats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjKstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjKstats::IsInitialized() const {
  return true;
}

void ProjKstats::InternalSwap(ProjKstats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjKstats, fg50_)
      + sizeof(ProjKstats::fg50_)
      - PROTOBUF_FIELD_OFFSET(ProjKstats, fg60_)>(
          reinterpret_cast<char*>(&fg60_),
          reinterpret_cast<char*>(&other->fg60_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjKstats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjDstats::InitAsDefaultInstance() {
}
class ProjDstats::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjDstats>()._has_bits_);
  static void set_has_twopt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_onept(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deftd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sfty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_turnovers(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sacks(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ptsa(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProjDstats::ProjDstats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ProjDstats)
}
ProjDstats::ProjDstats(const ProjDstats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ptsa_, &from.ptsa_,
    static_cast<size_t>(reinterpret_cast<char*>(&sacks_) -
    reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjDstats)
}

void ProjDstats::SharedCtor() {
  ::memset(&ptsa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sacks_) -
      reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
}

ProjDstats::~ProjDstats() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjDstats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjDstats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProjDstats::ArenaDtor(void* object) {
  ProjDstats* _this = reinterpret_cast< ProjDstats* >(object);
  (void)_this;
}
void ProjDstats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjDstats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjDstats& ProjDstats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjDstats_ApiData_2eproto.base);
  return *internal_default_instance();
}


void ProjDstats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjDstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&ptsa_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sacks_) -
        reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjDstats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float twopt = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_twopt(&has_bits);
          twopt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float onept = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_onept(&has_bits);
          onept_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float deftd = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_deftd(&has_bits);
          deftd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sfty = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_sfty(&has_bits);
          sfty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float turnovers = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_turnovers(&has_bits);
          turnovers_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sacks = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_sacks(&has_bits);
          sacks_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ptsa = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_ptsa(&has_bits);
          ptsa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjDstats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjDstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float twopt = 100;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(100, this->_internal_twopt(), target);
  }

  // optional float onept = 110;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(110, this->_internal_onept(), target);
  }

  // optional float deftd = 120;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(120, this->_internal_deftd(), target);
  }

  // optional float sfty = 130;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(130, this->_internal_sfty(), target);
  }

  // optional float turnovers = 140;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(140, this->_internal_turnovers(), target);
  }

  // optional float sacks = 150;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(150, this->_internal_sacks(), target);
  }

  // optional float ptsa = 160;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(160, this->_internal_ptsa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjDstats)
  return target;
}

size_t ProjDstats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjDstats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional float ptsa = 160;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float twopt = 100;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float onept = 110;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float deftd = 120;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float sfty = 130;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float turnovers = 140;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float sacks = 150;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjDstats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjDstats)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjDstats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjDstats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjDstats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjDstats)
    MergeFrom(*source);
  }
}

void ProjDstats::MergeFrom(const ProjDstats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjDstats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ptsa_ = from.ptsa_;
    }
    if (cached_has_bits & 0x00000002u) {
      twopt_ = from.twopt_;
    }
    if (cached_has_bits & 0x00000004u) {
      onept_ = from.onept_;
    }
    if (cached_has_bits & 0x00000008u) {
      deftd_ = from.deftd_;
    }
    if (cached_has_bits & 0x00000010u) {
      sfty_ = from.sfty_;
    }
    if (cached_has_bits & 0x00000020u) {
      turnovers_ = from.turnovers_;
    }
    if (cached_has_bits & 0x00000040u) {
      sacks_ = from.sacks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjDstats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjDstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjDstats::CopyFrom(const ProjDstats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjDstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjDstats::IsInitialized() const {
  return true;
}

void ProjDstats::InternalSwap(ProjDstats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjDstats, sacks_)
      + sizeof(ProjDstats::sacks_)
      - PROTOBUF_FIELD_OFFSET(ProjDstats, ptsa_)>(
          reinterpret_cast<char*>(&ptsa_),
          reinterpret_cast<char*>(&other->ptsa_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjDstats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjOstats::InitAsDefaultInstance() {
}
class ProjOstats::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjOstats>()._has_bits_);
  static void set_has_passyds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passtd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rushyds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rushtd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_recyds(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rectd(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rec(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pint(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fumble(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_twopt(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_onept(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProjOstats::ProjOstats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ProjOstats)
}
ProjOstats::ProjOstats(const ProjOstats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&onept_, &from.onept_,
    static_cast<size_t>(reinterpret_cast<char*>(&twopt_) -
    reinterpret_cast<char*>(&onept_)) + sizeof(twopt_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjOstats)
}

void ProjOstats::SharedCtor() {
  ::memset(&onept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&twopt_) -
      reinterpret_cast<char*>(&onept_)) + sizeof(twopt_));
}

ProjOstats::~ProjOstats() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjOstats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjOstats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProjOstats::ArenaDtor(void* object) {
  ProjOstats* _this = reinterpret_cast< ProjOstats* >(object);
  (void)_this;
}
void ProjOstats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjOstats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjOstats& ProjOstats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjOstats_ApiData_2eproto.base);
  return *internal_default_instance();
}


void ProjOstats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjOstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&onept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rec_) -
        reinterpret_cast<char*>(&onept_)) + sizeof(rec_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&pint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&twopt_) -
        reinterpret_cast<char*>(&pint_)) + sizeof(twopt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjOstats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float passyds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_passyds(&has_bits);
          passyds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float passtd = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_passtd(&has_bits);
          passtd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rushyds = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_rushyds(&has_bits);
          rushyds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rushtd = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_rushtd(&has_bits);
          rushtd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float recyds = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_recyds(&has_bits);
          recyds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rectd = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_rectd(&has_bits);
          rectd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rec = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_rec(&has_bits);
          rec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pint = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_pint(&has_bits);
          pint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fumble = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_fumble(&has_bits);
          fumble_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float twopt = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_twopt(&has_bits);
          twopt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float onept = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_onept(&has_bits);
          onept_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjOstats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjOstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float passyds = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_passyds(), target);
  }

  // optional float passtd = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_passtd(), target);
  }

  // optional float rushyds = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_rushyds(), target);
  }

  // optional float rushtd = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(40, this->_internal_rushtd(), target);
  }

  // optional float recyds = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(50, this->_internal_recyds(), target);
  }

  // optional float rectd = 60;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(60, this->_internal_rectd(), target);
  }

  // optional float rec = 70;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(70, this->_internal_rec(), target);
  }

  // optional float pint = 80;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(80, this->_internal_pint(), target);
  }

  // optional float fumble = 90;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(90, this->_internal_fumble(), target);
  }

  // optional float twopt = 100;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(100, this->_internal_twopt(), target);
  }

  // optional float onept = 110;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(110, this->_internal_onept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjOstats)
  return target;
}

size_t ProjOstats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjOstats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float onept = 110;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float passyds = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float passtd = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float rushyds = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float rushtd = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float recyds = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float rectd = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float rec = 70;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float pint = 80;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float fumble = 90;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float twopt = 100;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjOstats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjOstats)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjOstats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjOstats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjOstats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjOstats)
    MergeFrom(*source);
  }
}

void ProjOstats::MergeFrom(const ProjOstats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjOstats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      onept_ = from.onept_;
    }
    if (cached_has_bits & 0x00000002u) {
      passyds_ = from.passyds_;
    }
    if (cached_has_bits & 0x00000004u) {
      passtd_ = from.passtd_;
    }
    if (cached_has_bits & 0x00000008u) {
      rushyds_ = from.rushyds_;
    }
    if (cached_has_bits & 0x00000010u) {
      rushtd_ = from.rushtd_;
    }
    if (cached_has_bits & 0x00000020u) {
      recyds_ = from.recyds_;
    }
    if (cached_has_bits & 0x00000040u) {
      rectd_ = from.rectd_;
    }
    if (cached_has_bits & 0x00000080u) {
      rec_ = from.rec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      pint_ = from.pint_;
    }
    if (cached_has_bits & 0x00000200u) {
      fumble_ = from.fumble_;
    }
    if (cached_has_bits & 0x00000400u) {
      twopt_ = from.twopt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjOstats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjOstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjOstats::CopyFrom(const ProjOstats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjOstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjOstats::IsInitialized() const {
  return true;
}

void ProjOstats::InternalSwap(ProjOstats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjOstats, twopt_)
      + sizeof(ProjOstats::twopt_)
      - PROTOBUF_FIELD_OFFSET(ProjOstats, onept_)>(
          reinterpret_cast<char*>(&onept_),
          reinterpret_cast<char*>(&other->onept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjOstats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjStats::InitAsDefaultInstance() {
  ::fantasybit::_ProjStats_default_instance_._instance.get_mutable()->ostats_ = const_cast< ::fantasybit::ProjOstats*>(
      ::fantasybit::ProjOstats::internal_default_instance());
  ::fantasybit::_ProjStats_default_instance_._instance.get_mutable()->dstats_ = const_cast< ::fantasybit::ProjDstats*>(
      ::fantasybit::ProjDstats::internal_default_instance());
  ::fantasybit::_ProjStats_default_instance_._instance.get_mutable()->kstats_ = const_cast< ::fantasybit::ProjKstats*>(
      ::fantasybit::ProjKstats::internal_default_instance());
}
class ProjStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjStats>()._has_bits_);
  static const ::fantasybit::ProjOstats& ostats(const ProjStats* msg);
  static void set_has_ostats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::ProjDstats& dstats(const ProjStats* msg);
  static void set_has_dstats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::fantasybit::ProjKstats& kstats(const ProjStats* msg);
  static void set_has_kstats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::fantasybit::ProjOstats&
ProjStats::_Internal::ostats(const ProjStats* msg) {
  return *msg->ostats_;
}
const ::fantasybit::ProjDstats&
ProjStats::_Internal::dstats(const ProjStats* msg) {
  return *msg->dstats_;
}
const ::fantasybit::ProjKstats&
ProjStats::_Internal::kstats(const ProjStats* msg) {
  return *msg->kstats_;
}
ProjStats::ProjStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.ProjStats)
}
ProjStats::ProjStats(const ProjStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ostats()) {
    ostats_ = new ::fantasybit::ProjOstats(*from.ostats_);
  } else {
    ostats_ = nullptr;
  }
  if (from._internal_has_dstats()) {
    dstats_ = new ::fantasybit::ProjDstats(*from.dstats_);
  } else {
    dstats_ = nullptr;
  }
  if (from._internal_has_kstats()) {
    kstats_ = new ::fantasybit::ProjKstats(*from.kstats_);
  } else {
    kstats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjStats)
}

void ProjStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjStats_ApiData_2eproto.base);
  ::memset(&ostats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kstats_) -
      reinterpret_cast<char*>(&ostats_)) + sizeof(kstats_));
}

ProjStats::~ProjStats() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ostats_;
  if (this != internal_default_instance()) delete dstats_;
  if (this != internal_default_instance()) delete kstats_;
}

void ProjStats::ArenaDtor(void* object) {
  ProjStats* _this = reinterpret_cast< ProjStats* >(object);
  (void)_this;
}
void ProjStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjStats& ProjStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjStats_ApiData_2eproto.base);
  return *internal_default_instance();
}


void ProjStats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ostats_ != nullptr);
      ostats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dstats_ != nullptr);
      dstats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kstats_ != nullptr);
      kstats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .fantasybit.ProjOstats ostats = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ostats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.ProjDstats dstats = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_dstats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.ProjKstats kstats = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_kstats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.ProjOstats ostats = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ostats(this), target, stream);
  }

  // optional .fantasybit.ProjDstats dstats = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::dstats(this), target, stream);
  }

  // optional .fantasybit.ProjKstats kstats = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::kstats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjStats)
  return target;
}

size_t ProjStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .fantasybit.ProjOstats ostats = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ostats_);
    }

    // optional .fantasybit.ProjDstats dstats = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dstats_);
    }

    // optional .fantasybit.ProjKstats kstats = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kstats_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjStats)
    MergeFrom(*source);
  }
}

void ProjStats::MergeFrom(const ProjStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ostats()->::fantasybit::ProjOstats::MergeFrom(from._internal_ostats());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dstats()->::fantasybit::ProjDstats::MergeFrom(from._internal_dstats());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_kstats()->::fantasybit::ProjKstats::MergeFrom(from._internal_kstats());
    }
  }
}

void ProjStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjStats::CopyFrom(const ProjStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjStats::IsInitialized() const {
  return true;
}

void ProjStats::InternalSwap(ProjStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjStats, kstats_)
      + sizeof(ProjStats::kstats_)
      - PROTOBUF_FIELD_OFFSET(ProjStats, ostats_)>(
          reinterpret_cast<char*>(&ostats_),
          reinterpret_cast<char*>(&other->ostats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjStats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fantasybit::FantasyNameHash* Arena::CreateMaybeMessage< ::fantasybit::FantasyNameHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::FantasyNameHash >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Distribution* Arena::CreateMaybeMessage< ::fantasybit::Distribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Distribution >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Profits* Arena::CreateMaybeMessage< ::fantasybit::Profits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Profits >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::Fills* Arena::CreateMaybeMessage< ::fantasybit::Fills >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::Fills >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ProjKstats* Arena::CreateMaybeMessage< ::fantasybit::ProjKstats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ProjKstats >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ProjDstats* Arena::CreateMaybeMessage< ::fantasybit::ProjDstats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ProjDstats >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ProjOstats* Arena::CreateMaybeMessage< ::fantasybit::ProjOstats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ProjOstats >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::ProjStats* Arena::CreateMaybeMessage< ::fantasybit::ProjStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::ProjStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
