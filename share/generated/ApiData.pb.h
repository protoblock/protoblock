// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ApiData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ApiData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ApiData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ApiData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ApiData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ApiData_2eproto;
namespace fantasybit {
class Distribution;
class DistributionDefaultTypeInternal;
extern DistributionDefaultTypeInternal _Distribution_default_instance_;
class FantasyNameHash;
class FantasyNameHashDefaultTypeInternal;
extern FantasyNameHashDefaultTypeInternal _FantasyNameHash_default_instance_;
class Fills;
class FillsDefaultTypeInternal;
extern FillsDefaultTypeInternal _Fills_default_instance_;
class Profits;
class ProfitsDefaultTypeInternal;
extern ProfitsDefaultTypeInternal _Profits_default_instance_;
class ProjDstats;
class ProjDstatsDefaultTypeInternal;
extern ProjDstatsDefaultTypeInternal _ProjDstats_default_instance_;
class ProjKstats;
class ProjKstatsDefaultTypeInternal;
extern ProjKstatsDefaultTypeInternal _ProjKstats_default_instance_;
class ProjOstats;
class ProjOstatsDefaultTypeInternal;
extern ProjOstatsDefaultTypeInternal _ProjOstats_default_instance_;
class ProjStats;
class ProjStatsDefaultTypeInternal;
extern ProjStatsDefaultTypeInternal _ProjStats_default_instance_;
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> ::fantasybit::Distribution* Arena::CreateMaybeMessage<::fantasybit::Distribution>(Arena*);
template<> ::fantasybit::FantasyNameHash* Arena::CreateMaybeMessage<::fantasybit::FantasyNameHash>(Arena*);
template<> ::fantasybit::Fills* Arena::CreateMaybeMessage<::fantasybit::Fills>(Arena*);
template<> ::fantasybit::Profits* Arena::CreateMaybeMessage<::fantasybit::Profits>(Arena*);
template<> ::fantasybit::ProjDstats* Arena::CreateMaybeMessage<::fantasybit::ProjDstats>(Arena*);
template<> ::fantasybit::ProjKstats* Arena::CreateMaybeMessage<::fantasybit::ProjKstats>(Arena*);
template<> ::fantasybit::ProjOstats* Arena::CreateMaybeMessage<::fantasybit::ProjOstats>(Arena*);
template<> ::fantasybit::ProjStats* Arena::CreateMaybeMessage<::fantasybit::ProjStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fantasybit {

// ===================================================================

class FantasyNameHash PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyNameHash) */ {
 public:
  inline FantasyNameHash() : FantasyNameHash(nullptr) {};
  virtual ~FantasyNameHash();

  FantasyNameHash(const FantasyNameHash& from);
  FantasyNameHash(FantasyNameHash&& from) noexcept
    : FantasyNameHash() {
    *this = ::std::move(from);
  }

  inline FantasyNameHash& operator=(const FantasyNameHash& from) {
    CopyFrom(from);
    return *this;
  }
  inline FantasyNameHash& operator=(FantasyNameHash&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FantasyNameHash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyNameHash* internal_default_instance() {
    return reinterpret_cast<const FantasyNameHash*>(
               &_FantasyNameHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FantasyNameHash& a, FantasyNameHash& b) {
    a.Swap(&b);
  }
  inline void Swap(FantasyNameHash* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FantasyNameHash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FantasyNameHash* New() const final {
    return CreateMaybeMessage<FantasyNameHash>(nullptr);
  }

  FantasyNameHash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FantasyNameHash>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FantasyNameHash& from);
  void MergeFrom(const FantasyNameHash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FantasyNameHash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.FantasyNameHash";
  }
  protected:
  explicit FantasyNameHash(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ApiData_2eproto);
    return ::descriptor_table_ApiData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kHashFieldNumber = 30,
  };
  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 hash = 30;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint64 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameHash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hash_;
  friend struct ::TableStruct_ApiData_2eproto;
};
// -------------------------------------------------------------------

class Distribution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Distribution) */ {
 public:
  inline Distribution() : Distribution(nullptr) {};
  virtual ~Distribution();

  Distribution(const Distribution& from);
  Distribution(Distribution&& from) noexcept
    : Distribution() {
    *this = ::std::move(from);
  }

  inline Distribution& operator=(const Distribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distribution& operator=(Distribution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Distribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Distribution* internal_default_instance() {
    return reinterpret_cast<const Distribution*>(
               &_Distribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Distribution& a, Distribution& b) {
    a.Swap(&b);
  }
  inline void Swap(Distribution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Distribution* New() const final {
    return CreateMaybeMessage<Distribution>(nullptr);
  }

  Distribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Distribution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Distribution& from);
  void MergeFrom(const Distribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distribution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Distribution";
  }
  protected:
  explicit Distribution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ApiData_2eproto);
    return ::descriptor_table_ApiData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameidFieldNumber = 2,
    kPlayeridFieldNumber = 3,
    kTeamidFieldNumber = 4,
    kFantasyNameidFieldNumber = 1,
    kSeasonFieldNumber = 5,
    kWeekFieldNumber = 6,
    kProjFieldNumber = 7,
    kAwardFieldNumber = 8,
    kResultFieldNumber = 9,
  };
  // optional string gameid = 2;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  const std::string& gameid() const;
  void set_gameid(const std::string& value);
  void set_gameid(std::string&& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  std::string* mutable_gameid();
  std::string* release_gameid();
  void set_allocated_gameid(std::string* gameid);
  private:
  const std::string& _internal_gameid() const;
  void _internal_set_gameid(const std::string& value);
  std::string* _internal_mutable_gameid();
  public:

  // optional string playerid = 3;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional string teamid = 4;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  const std::string& teamid() const;
  void set_teamid(const std::string& value);
  void set_teamid(std::string&& value);
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  std::string* mutable_teamid();
  std::string* release_teamid();
  void set_allocated_teamid(std::string* teamid);
  private:
  const std::string& _internal_teamid() const;
  void _internal_set_teamid(const std::string& value);
  std::string* _internal_mutable_teamid();
  public:

  // optional uint64 fantasy_nameid = 1;
  bool has_fantasy_nameid() const;
  private:
  bool _internal_has_fantasy_nameid() const;
  public:
  void clear_fantasy_nameid();
  ::PROTOBUF_NAMESPACE_ID::uint64 fantasy_nameid() const;
  void set_fantasy_nameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fantasy_nameid() const;
  void _internal_set_fantasy_nameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 season = 5;
  bool has_season() const;
  private:
  bool _internal_has_season() const;
  public:
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::int32 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 week = 6;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::int32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 proj = 7;
  bool has_proj() const;
  private:
  bool _internal_has_proj() const;
  public:
  void clear_proj();
  ::PROTOBUF_NAMESPACE_ID::int32 proj() const;
  void set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proj() const;
  void _internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float award = 8;
  bool has_award() const;
  private:
  bool _internal_has_award() const;
  public:
  void clear_award();
  float award() const;
  void set_award(float value);
  private:
  float _internal_award() const;
  void _internal_set_award(float value);
  public:

  // optional float result = 9;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  float result() const;
  void set_result(float value);
  private:
  float _internal_result() const;
  void _internal_set_result(float value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.Distribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fantasy_nameid_;
  ::PROTOBUF_NAMESPACE_ID::int32 season_;
  ::PROTOBUF_NAMESPACE_ID::int32 week_;
  ::PROTOBUF_NAMESPACE_ID::int32 proj_;
  float award_;
  float result_;
  friend struct ::TableStruct_ApiData_2eproto;
};
// -------------------------------------------------------------------

class Profits PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Profits) */ {
 public:
  inline Profits() : Profits(nullptr) {};
  virtual ~Profits();

  Profits(const Profits& from);
  Profits(Profits&& from) noexcept
    : Profits() {
    *this = ::std::move(from);
  }

  inline Profits& operator=(const Profits& from) {
    CopyFrom(from);
    return *this;
  }
  inline Profits& operator=(Profits&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Profits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profits* internal_default_instance() {
    return reinterpret_cast<const Profits*>(
               &_Profits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Profits& a, Profits& b) {
    a.Swap(&b);
  }
  inline void Swap(Profits* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Profits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Profits* New() const final {
    return CreateMaybeMessage<Profits>(nullptr);
  }

  Profits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Profits>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Profits& from);
  void MergeFrom(const Profits& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profits* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Profits";
  }
  protected:
  explicit Profits(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ApiData_2eproto);
    return ::descriptor_table_ApiData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameidFieldNumber = 2,
    kPlayeridFieldNumber = 3,
    kTeamidFieldNumber = 4,
    kFantasyNameidFieldNumber = 1,
    kSeasonFieldNumber = 5,
    kWeekFieldNumber = 6,
    kQtyFieldNumber = 7,
    kPriceFieldNumber = 8,
    kResultFieldNumber = 9,
    kPnlFieldNumber = 10,
  };
  // optional string gameid = 2;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  const std::string& gameid() const;
  void set_gameid(const std::string& value);
  void set_gameid(std::string&& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  std::string* mutable_gameid();
  std::string* release_gameid();
  void set_allocated_gameid(std::string* gameid);
  private:
  const std::string& _internal_gameid() const;
  void _internal_set_gameid(const std::string& value);
  std::string* _internal_mutable_gameid();
  public:

  // optional string playerid = 3;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional string teamid = 4;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  const std::string& teamid() const;
  void set_teamid(const std::string& value);
  void set_teamid(std::string&& value);
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  std::string* mutable_teamid();
  std::string* release_teamid();
  void set_allocated_teamid(std::string* teamid);
  private:
  const std::string& _internal_teamid() const;
  void _internal_set_teamid(const std::string& value);
  std::string* _internal_mutable_teamid();
  public:

  // optional uint64 fantasy_nameid = 1;
  bool has_fantasy_nameid() const;
  private:
  bool _internal_has_fantasy_nameid() const;
  public:
  void clear_fantasy_nameid();
  ::PROTOBUF_NAMESPACE_ID::uint64 fantasy_nameid() const;
  void set_fantasy_nameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fantasy_nameid() const;
  void _internal_set_fantasy_nameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 season = 5;
  bool has_season() const;
  private:
  bool _internal_has_season() const;
  public:
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::int32 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 week = 6;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::int32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 qty = 7;
  bool has_qty() const;
  private:
  bool _internal_has_qty() const;
  public:
  void clear_qty();
  ::PROTOBUF_NAMESPACE_ID::int32 qty() const;
  void set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qty() const;
  void _internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float price = 8;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // optional float result = 9;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  float result() const;
  void set_result(float value);
  private:
  float _internal_result() const;
  void _internal_set_result(float value);
  public:

  // optional float pnl = 10;
  bool has_pnl() const;
  private:
  bool _internal_has_pnl() const;
  public:
  void clear_pnl();
  float pnl() const;
  void set_pnl(float value);
  private:
  float _internal_pnl() const;
  void _internal_set_pnl(float value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.Profits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fantasy_nameid_;
  ::PROTOBUF_NAMESPACE_ID::int32 season_;
  ::PROTOBUF_NAMESPACE_ID::int32 week_;
  ::PROTOBUF_NAMESPACE_ID::int32 qty_;
  float price_;
  float result_;
  float pnl_;
  friend struct ::TableStruct_ApiData_2eproto;
};
// -------------------------------------------------------------------

class Fills PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.Fills) */ {
 public:
  inline Fills() : Fills(nullptr) {};
  virtual ~Fills();

  Fills(const Fills& from);
  Fills(Fills&& from) noexcept
    : Fills() {
    *this = ::std::move(from);
  }

  inline Fills& operator=(const Fills& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fills& operator=(Fills&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fills& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fills* internal_default_instance() {
    return reinterpret_cast<const Fills*>(
               &_Fills_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Fills& a, Fills& b) {
    a.Swap(&b);
  }
  inline void Swap(Fills* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fills* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fills* New() const final {
    return CreateMaybeMessage<Fills>(nullptr);
  }

  Fills* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fills>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fills& from);
  void MergeFrom(const Fills& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fills* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.Fills";
  }
  protected:
  explicit Fills(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ApiData_2eproto);
    return ::descriptor_table_ApiData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyerFieldNumber = 10,
    kSellerFieldNumber = 20,
    kTeamidFieldNumber = 40,
    kPlayeridFieldNumber = 45,
    kPriceFieldNumber = 80,
    kPassivebuyFieldNumber = 1,
    kSeasonFieldNumber = 50,
    kWeekFieldNumber = 60,
    kQtyFieldNumber = 70,
  };
  // optional string buyer = 10;
  bool has_buyer() const;
  private:
  bool _internal_has_buyer() const;
  public:
  void clear_buyer();
  const std::string& buyer() const;
  void set_buyer(const std::string& value);
  void set_buyer(std::string&& value);
  void set_buyer(const char* value);
  void set_buyer(const char* value, size_t size);
  std::string* mutable_buyer();
  std::string* release_buyer();
  void set_allocated_buyer(std::string* buyer);
  private:
  const std::string& _internal_buyer() const;
  void _internal_set_buyer(const std::string& value);
  std::string* _internal_mutable_buyer();
  public:

  // optional string seller = 20;
  bool has_seller() const;
  private:
  bool _internal_has_seller() const;
  public:
  void clear_seller();
  const std::string& seller() const;
  void set_seller(const std::string& value);
  void set_seller(std::string&& value);
  void set_seller(const char* value);
  void set_seller(const char* value, size_t size);
  std::string* mutable_seller();
  std::string* release_seller();
  void set_allocated_seller(std::string* seller);
  private:
  const std::string& _internal_seller() const;
  void _internal_set_seller(const std::string& value);
  std::string* _internal_mutable_seller();
  public:

  // optional string teamid = 40;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  const std::string& teamid() const;
  void set_teamid(const std::string& value);
  void set_teamid(std::string&& value);
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  std::string* mutable_teamid();
  std::string* release_teamid();
  void set_allocated_teamid(std::string* teamid);
  private:
  const std::string& _internal_teamid() const;
  void _internal_set_teamid(const std::string& value);
  std::string* _internal_mutable_teamid();
  public:

  // optional string playerid = 45;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // optional float price = 80;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // optional bool passivebuy = 1;
  bool has_passivebuy() const;
  private:
  bool _internal_has_passivebuy() const;
  public:
  void clear_passivebuy();
  bool passivebuy() const;
  void set_passivebuy(bool value);
  private:
  bool _internal_passivebuy() const;
  void _internal_set_passivebuy(bool value);
  public:

  // optional int32 season = 50;
  bool has_season() const;
  private:
  bool _internal_has_season() const;
  public:
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::int32 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 week = 60;
  bool has_week() const;
  private:
  bool _internal_has_week() const;
  public:
  void clear_week();
  ::PROTOBUF_NAMESPACE_ID::int32 week() const;
  void set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_week() const;
  void _internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 qty = 70;
  bool has_qty() const;
  private:
  bool _internal_has_qty() const;
  public:
  void clear_qty();
  ::PROTOBUF_NAMESPACE_ID::int32 qty() const;
  void set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qty() const;
  void _internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.Fills)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seller_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  float price_;
  bool passivebuy_;
  ::PROTOBUF_NAMESPACE_ID::int32 season_;
  ::PROTOBUF_NAMESPACE_ID::int32 week_;
  ::PROTOBUF_NAMESPACE_ID::int32 qty_;
  friend struct ::TableStruct_ApiData_2eproto;
};
// -------------------------------------------------------------------

class ProjKstats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjKstats) */ {
 public:
  inline ProjKstats() : ProjKstats(nullptr) {};
  virtual ~ProjKstats();

  ProjKstats(const ProjKstats& from);
  ProjKstats(ProjKstats&& from) noexcept
    : ProjKstats() {
    *this = ::std::move(from);
  }

  inline ProjKstats& operator=(const ProjKstats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjKstats& operator=(ProjKstats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjKstats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjKstats* internal_default_instance() {
    return reinterpret_cast<const ProjKstats*>(
               &_ProjKstats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProjKstats& a, ProjKstats& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjKstats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjKstats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjKstats* New() const final {
    return CreateMaybeMessage<ProjKstats>(nullptr);
  }

  ProjKstats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjKstats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjKstats& from);
  void MergeFrom(const ProjKstats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjKstats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.ProjKstats";
  }
  protected:
  explicit ProjKstats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ApiData_2eproto);
    return ::descriptor_table_ApiData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFg60FieldNumber = 50,
    kPaFieldNumber = 10,
    kFg30FieldNumber = 20,
    kFg40FieldNumber = 30,
    kFg50FieldNumber = 40,
  };
  // optional float fg60 = 50;
  bool has_fg60() const;
  private:
  bool _internal_has_fg60() const;
  public:
  void clear_fg60();
  float fg60() const;
  void set_fg60(float value);
  private:
  float _internal_fg60() const;
  void _internal_set_fg60(float value);
  public:

  // optional float pa = 10;
  bool has_pa() const;
  private:
  bool _internal_has_pa() const;
  public:
  void clear_pa();
  float pa() const;
  void set_pa(float value);
  private:
  float _internal_pa() const;
  void _internal_set_pa(float value);
  public:

  // optional float fg30 = 20;
  bool has_fg30() const;
  private:
  bool _internal_has_fg30() const;
  public:
  void clear_fg30();
  float fg30() const;
  void set_fg30(float value);
  private:
  float _internal_fg30() const;
  void _internal_set_fg30(float value);
  public:

  // optional float fg40 = 30;
  bool has_fg40() const;
  private:
  bool _internal_has_fg40() const;
  public:
  void clear_fg40();
  float fg40() const;
  void set_fg40(float value);
  private:
  float _internal_fg40() const;
  void _internal_set_fg40(float value);
  public:

  // optional float fg50 = 40;
  bool has_fg50() const;
  private:
  bool _internal_has_fg50() const;
  public:
  void clear_fg50();
  float fg50() const;
  void set_fg50(float value);
  private:
  float _internal_fg50() const;
  void _internal_set_fg50(float value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.ProjKstats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float fg60_;
  float pa_;
  float fg30_;
  float fg40_;
  float fg50_;
  friend struct ::TableStruct_ApiData_2eproto;
};
// -------------------------------------------------------------------

class ProjDstats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjDstats) */ {
 public:
  inline ProjDstats() : ProjDstats(nullptr) {};
  virtual ~ProjDstats();

  ProjDstats(const ProjDstats& from);
  ProjDstats(ProjDstats&& from) noexcept
    : ProjDstats() {
    *this = ::std::move(from);
  }

  inline ProjDstats& operator=(const ProjDstats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjDstats& operator=(ProjDstats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjDstats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjDstats* internal_default_instance() {
    return reinterpret_cast<const ProjDstats*>(
               &_ProjDstats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProjDstats& a, ProjDstats& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjDstats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjDstats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjDstats* New() const final {
    return CreateMaybeMessage<ProjDstats>(nullptr);
  }

  ProjDstats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjDstats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjDstats& from);
  void MergeFrom(const ProjDstats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjDstats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.ProjDstats";
  }
  protected:
  explicit ProjDstats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ApiData_2eproto);
    return ::descriptor_table_ApiData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsaFieldNumber = 160,
    kTwoptFieldNumber = 100,
    kOneptFieldNumber = 110,
    kDeftdFieldNumber = 120,
    kSftyFieldNumber = 130,
    kTurnoversFieldNumber = 140,
    kSacksFieldNumber = 150,
  };
  // optional float ptsa = 160;
  bool has_ptsa() const;
  private:
  bool _internal_has_ptsa() const;
  public:
  void clear_ptsa();
  float ptsa() const;
  void set_ptsa(float value);
  private:
  float _internal_ptsa() const;
  void _internal_set_ptsa(float value);
  public:

  // optional float twopt = 100;
  bool has_twopt() const;
  private:
  bool _internal_has_twopt() const;
  public:
  void clear_twopt();
  float twopt() const;
  void set_twopt(float value);
  private:
  float _internal_twopt() const;
  void _internal_set_twopt(float value);
  public:

  // optional float onept = 110;
  bool has_onept() const;
  private:
  bool _internal_has_onept() const;
  public:
  void clear_onept();
  float onept() const;
  void set_onept(float value);
  private:
  float _internal_onept() const;
  void _internal_set_onept(float value);
  public:

  // optional float deftd = 120;
  bool has_deftd() const;
  private:
  bool _internal_has_deftd() const;
  public:
  void clear_deftd();
  float deftd() const;
  void set_deftd(float value);
  private:
  float _internal_deftd() const;
  void _internal_set_deftd(float value);
  public:

  // optional float sfty = 130;
  bool has_sfty() const;
  private:
  bool _internal_has_sfty() const;
  public:
  void clear_sfty();
  float sfty() const;
  void set_sfty(float value);
  private:
  float _internal_sfty() const;
  void _internal_set_sfty(float value);
  public:

  // optional float turnovers = 140;
  bool has_turnovers() const;
  private:
  bool _internal_has_turnovers() const;
  public:
  void clear_turnovers();
  float turnovers() const;
  void set_turnovers(float value);
  private:
  float _internal_turnovers() const;
  void _internal_set_turnovers(float value);
  public:

  // optional float sacks = 150;
  bool has_sacks() const;
  private:
  bool _internal_has_sacks() const;
  public:
  void clear_sacks();
  float sacks() const;
  void set_sacks(float value);
  private:
  float _internal_sacks() const;
  void _internal_set_sacks(float value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.ProjDstats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float ptsa_;
  float twopt_;
  float onept_;
  float deftd_;
  float sfty_;
  float turnovers_;
  float sacks_;
  friend struct ::TableStruct_ApiData_2eproto;
};
// -------------------------------------------------------------------

class ProjOstats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjOstats) */ {
 public:
  inline ProjOstats() : ProjOstats(nullptr) {};
  virtual ~ProjOstats();

  ProjOstats(const ProjOstats& from);
  ProjOstats(ProjOstats&& from) noexcept
    : ProjOstats() {
    *this = ::std::move(from);
  }

  inline ProjOstats& operator=(const ProjOstats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjOstats& operator=(ProjOstats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjOstats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjOstats* internal_default_instance() {
    return reinterpret_cast<const ProjOstats*>(
               &_ProjOstats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProjOstats& a, ProjOstats& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjOstats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjOstats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjOstats* New() const final {
    return CreateMaybeMessage<ProjOstats>(nullptr);
  }

  ProjOstats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjOstats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjOstats& from);
  void MergeFrom(const ProjOstats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjOstats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.ProjOstats";
  }
  protected:
  explicit ProjOstats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ApiData_2eproto);
    return ::descriptor_table_ApiData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneptFieldNumber = 110,
    kPassydsFieldNumber = 10,
    kPasstdFieldNumber = 20,
    kRushydsFieldNumber = 30,
    kRushtdFieldNumber = 40,
    kRecydsFieldNumber = 50,
    kRectdFieldNumber = 60,
    kRecFieldNumber = 70,
    kPintFieldNumber = 80,
    kFumbleFieldNumber = 90,
    kTwoptFieldNumber = 100,
  };
  // optional float onept = 110;
  bool has_onept() const;
  private:
  bool _internal_has_onept() const;
  public:
  void clear_onept();
  float onept() const;
  void set_onept(float value);
  private:
  float _internal_onept() const;
  void _internal_set_onept(float value);
  public:

  // optional float passyds = 10;
  bool has_passyds() const;
  private:
  bool _internal_has_passyds() const;
  public:
  void clear_passyds();
  float passyds() const;
  void set_passyds(float value);
  private:
  float _internal_passyds() const;
  void _internal_set_passyds(float value);
  public:

  // optional float passtd = 20;
  bool has_passtd() const;
  private:
  bool _internal_has_passtd() const;
  public:
  void clear_passtd();
  float passtd() const;
  void set_passtd(float value);
  private:
  float _internal_passtd() const;
  void _internal_set_passtd(float value);
  public:

  // optional float rushyds = 30;
  bool has_rushyds() const;
  private:
  bool _internal_has_rushyds() const;
  public:
  void clear_rushyds();
  float rushyds() const;
  void set_rushyds(float value);
  private:
  float _internal_rushyds() const;
  void _internal_set_rushyds(float value);
  public:

  // optional float rushtd = 40;
  bool has_rushtd() const;
  private:
  bool _internal_has_rushtd() const;
  public:
  void clear_rushtd();
  float rushtd() const;
  void set_rushtd(float value);
  private:
  float _internal_rushtd() const;
  void _internal_set_rushtd(float value);
  public:

  // optional float recyds = 50;
  bool has_recyds() const;
  private:
  bool _internal_has_recyds() const;
  public:
  void clear_recyds();
  float recyds() const;
  void set_recyds(float value);
  private:
  float _internal_recyds() const;
  void _internal_set_recyds(float value);
  public:

  // optional float rectd = 60;
  bool has_rectd() const;
  private:
  bool _internal_has_rectd() const;
  public:
  void clear_rectd();
  float rectd() const;
  void set_rectd(float value);
  private:
  float _internal_rectd() const;
  void _internal_set_rectd(float value);
  public:

  // optional float rec = 70;
  bool has_rec() const;
  private:
  bool _internal_has_rec() const;
  public:
  void clear_rec();
  float rec() const;
  void set_rec(float value);
  private:
  float _internal_rec() const;
  void _internal_set_rec(float value);
  public:

  // optional float pint = 80;
  bool has_pint() const;
  private:
  bool _internal_has_pint() const;
  public:
  void clear_pint();
  float pint() const;
  void set_pint(float value);
  private:
  float _internal_pint() const;
  void _internal_set_pint(float value);
  public:

  // optional float fumble = 90;
  bool has_fumble() const;
  private:
  bool _internal_has_fumble() const;
  public:
  void clear_fumble();
  float fumble() const;
  void set_fumble(float value);
  private:
  float _internal_fumble() const;
  void _internal_set_fumble(float value);
  public:

  // optional float twopt = 100;
  bool has_twopt() const;
  private:
  bool _internal_has_twopt() const;
  public:
  void clear_twopt();
  float twopt() const;
  void set_twopt(float value);
  private:
  float _internal_twopt() const;
  void _internal_set_twopt(float value);
  public:

  // @@protoc_insertion_point(class_scope:fantasybit.ProjOstats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float onept_;
  float passyds_;
  float passtd_;
  float rushyds_;
  float rushtd_;
  float recyds_;
  float rectd_;
  float rec_;
  float pint_;
  float fumble_;
  float twopt_;
  friend struct ::TableStruct_ApiData_2eproto;
};
// -------------------------------------------------------------------

class ProjStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjStats) */ {
 public:
  inline ProjStats() : ProjStats(nullptr) {};
  virtual ~ProjStats();

  ProjStats(const ProjStats& from);
  ProjStats(ProjStats&& from) noexcept
    : ProjStats() {
    *this = ::std::move(from);
  }

  inline ProjStats& operator=(const ProjStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjStats& operator=(ProjStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjStats* internal_default_instance() {
    return reinterpret_cast<const ProjStats*>(
               &_ProjStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProjStats& a, ProjStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjStats* New() const final {
    return CreateMaybeMessage<ProjStats>(nullptr);
  }

  ProjStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjStats& from);
  void MergeFrom(const ProjStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fantasybit.ProjStats";
  }
  protected:
  explicit ProjStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ApiData_2eproto);
    return ::descriptor_table_ApiData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOstatsFieldNumber = 10,
    kDstatsFieldNumber = 20,
    kKstatsFieldNumber = 30,
  };
  // optional .fantasybit.ProjOstats ostats = 10;
  bool has_ostats() const;
  private:
  bool _internal_has_ostats() const;
  public:
  void clear_ostats();
  const ::fantasybit::ProjOstats& ostats() const;
  ::fantasybit::ProjOstats* release_ostats();
  ::fantasybit::ProjOstats* mutable_ostats();
  void set_allocated_ostats(::fantasybit::ProjOstats* ostats);
  private:
  const ::fantasybit::ProjOstats& _internal_ostats() const;
  ::fantasybit::ProjOstats* _internal_mutable_ostats();
  public:
  void unsafe_arena_set_allocated_ostats(
      ::fantasybit::ProjOstats* ostats);
  ::fantasybit::ProjOstats* unsafe_arena_release_ostats();

  // optional .fantasybit.ProjDstats dstats = 20;
  bool has_dstats() const;
  private:
  bool _internal_has_dstats() const;
  public:
  void clear_dstats();
  const ::fantasybit::ProjDstats& dstats() const;
  ::fantasybit::ProjDstats* release_dstats();
  ::fantasybit::ProjDstats* mutable_dstats();
  void set_allocated_dstats(::fantasybit::ProjDstats* dstats);
  private:
  const ::fantasybit::ProjDstats& _internal_dstats() const;
  ::fantasybit::ProjDstats* _internal_mutable_dstats();
  public:
  void unsafe_arena_set_allocated_dstats(
      ::fantasybit::ProjDstats* dstats);
  ::fantasybit::ProjDstats* unsafe_arena_release_dstats();

  // optional .fantasybit.ProjKstats kstats = 30;
  bool has_kstats() const;
  private:
  bool _internal_has_kstats() const;
  public:
  void clear_kstats();
  const ::fantasybit::ProjKstats& kstats() const;
  ::fantasybit::ProjKstats* release_kstats();
  ::fantasybit::ProjKstats* mutable_kstats();
  void set_allocated_kstats(::fantasybit::ProjKstats* kstats);
  private:
  const ::fantasybit::ProjKstats& _internal_kstats() const;
  ::fantasybit::ProjKstats* _internal_mutable_kstats();
  public:
  void unsafe_arena_set_allocated_kstats(
      ::fantasybit::ProjKstats* kstats);
  ::fantasybit::ProjKstats* unsafe_arena_release_kstats();

  // @@protoc_insertion_point(class_scope:fantasybit.ProjStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::fantasybit::ProjOstats* ostats_;
  ::fantasybit::ProjDstats* dstats_;
  ::fantasybit::ProjKstats* kstats_;
  friend struct ::TableStruct_ApiData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FantasyNameHash

// optional string name = 10;
inline bool FantasyNameHash::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FantasyNameHash::has_name() const {
  return _internal_has_name();
}
inline void FantasyNameHash::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FantasyNameHash::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameHash.name)
  return _internal_name();
}
inline void FantasyNameHash::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameHash.name)
}
inline std::string* FantasyNameHash::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameHash.name)
  return _internal_mutable_name();
}
inline const std::string& FantasyNameHash::_internal_name() const {
  return name_.Get();
}
inline void FantasyNameHash::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FantasyNameHash::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameHash.name)
}
inline void FantasyNameHash::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameHash.name)
}
inline void FantasyNameHash::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameHash.name)
}
inline std::string* FantasyNameHash::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FantasyNameHash::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameHash.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FantasyNameHash::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameHash.name)
}

// optional uint64 hash = 30;
inline bool FantasyNameHash::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FantasyNameHash::has_hash() const {
  return _internal_has_hash();
}
inline void FantasyNameHash::clear_hash() {
  hash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyNameHash::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FantasyNameHash::hash() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameHash.hash)
  return _internal_hash();
}
inline void FantasyNameHash::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  hash_ = value;
}
inline void FantasyNameHash::set_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameHash.hash)
}

// -------------------------------------------------------------------

// Distribution

// optional string gameid = 2;
inline bool Distribution::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Distribution::has_gameid() const {
  return _internal_has_gameid();
}
inline void Distribution::clear_gameid() {
  gameid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Distribution::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.gameid)
  return _internal_gameid();
}
inline void Distribution::set_gameid(const std::string& value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.gameid)
}
inline std::string* Distribution::mutable_gameid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Distribution.gameid)
  return _internal_mutable_gameid();
}
inline const std::string& Distribution::_internal_gameid() const {
  return gameid_.Get();
}
inline void Distribution::_internal_set_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Distribution::set_gameid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Distribution.gameid)
}
inline void Distribution::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Distribution.gameid)
}
inline void Distribution::set_gameid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Distribution.gameid)
}
inline std::string* Distribution::_internal_mutable_gameid() {
  _has_bits_[0] |= 0x00000001u;
  return gameid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Distribution::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.Distribution.gameid)
  if (!_internal_has_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Distribution::set_allocated_gameid(std::string* gameid) {
  if (gameid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Distribution.gameid)
}

// optional string teamid = 4;
inline bool Distribution::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Distribution::has_teamid() const {
  return _internal_has_teamid();
}
inline void Distribution::clear_teamid() {
  teamid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Distribution::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.teamid)
  return _internal_teamid();
}
inline void Distribution::set_teamid(const std::string& value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.teamid)
}
inline std::string* Distribution::mutable_teamid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Distribution.teamid)
  return _internal_mutable_teamid();
}
inline const std::string& Distribution::_internal_teamid() const {
  return teamid_.Get();
}
inline void Distribution::_internal_set_teamid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Distribution::set_teamid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Distribution.teamid)
}
inline void Distribution::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Distribution.teamid)
}
inline void Distribution::set_teamid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Distribution.teamid)
}
inline std::string* Distribution::_internal_mutable_teamid() {
  _has_bits_[0] |= 0x00000004u;
  return teamid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Distribution::release_teamid() {
  // @@protoc_insertion_point(field_release:fantasybit.Distribution.teamid)
  if (!_internal_has_teamid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return teamid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Distribution::set_allocated_teamid(std::string* teamid) {
  if (teamid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  teamid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teamid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Distribution.teamid)
}

// optional int32 season = 5;
inline bool Distribution::_internal_has_season() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Distribution::has_season() const {
  return _internal_has_season();
}
inline void Distribution::clear_season() {
  season_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Distribution::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Distribution::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.season)
  return _internal_season();
}
inline void Distribution::_internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  season_ = value;
}
inline void Distribution::set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.season)
}

// optional int32 week = 6;
inline bool Distribution::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Distribution::has_week() const {
  return _internal_has_week();
}
inline void Distribution::clear_week() {
  week_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Distribution::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Distribution::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.week)
  return _internal_week();
}
inline void Distribution::_internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  week_ = value;
}
inline void Distribution::set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.week)
}

// optional uint64 fantasy_nameid = 1;
inline bool Distribution::_internal_has_fantasy_nameid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Distribution::has_fantasy_nameid() const {
  return _internal_has_fantasy_nameid();
}
inline void Distribution::clear_fantasy_nameid() {
  fantasy_nameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Distribution::_internal_fantasy_nameid() const {
  return fantasy_nameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Distribution::fantasy_nameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.fantasy_nameid)
  return _internal_fantasy_nameid();
}
inline void Distribution::_internal_set_fantasy_nameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  fantasy_nameid_ = value;
}
inline void Distribution::set_fantasy_nameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fantasy_nameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.fantasy_nameid)
}

// optional string playerid = 3;
inline bool Distribution::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Distribution::has_playerid() const {
  return _internal_has_playerid();
}
inline void Distribution::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Distribution::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.playerid)
  return _internal_playerid();
}
inline void Distribution::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.playerid)
}
inline std::string* Distribution::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Distribution.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& Distribution::_internal_playerid() const {
  return playerid_.Get();
}
inline void Distribution::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Distribution::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Distribution.playerid)
}
inline void Distribution::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Distribution.playerid)
}
inline void Distribution::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Distribution.playerid)
}
inline std::string* Distribution::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000002u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Distribution::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.Distribution.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Distribution::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Distribution.playerid)
}

// optional int32 proj = 7;
inline bool Distribution::_internal_has_proj() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Distribution::has_proj() const {
  return _internal_has_proj();
}
inline void Distribution::clear_proj() {
  proj_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Distribution::_internal_proj() const {
  return proj_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Distribution::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.proj)
  return _internal_proj();
}
inline void Distribution::_internal_set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  proj_ = value;
}
inline void Distribution::set_proj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proj(value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.proj)
}

// optional float award = 8;
inline bool Distribution::_internal_has_award() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Distribution::has_award() const {
  return _internal_has_award();
}
inline void Distribution::clear_award() {
  award_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Distribution::_internal_award() const {
  return award_;
}
inline float Distribution::award() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.award)
  return _internal_award();
}
inline void Distribution::_internal_set_award(float value) {
  _has_bits_[0] |= 0x00000080u;
  award_ = value;
}
inline void Distribution::set_award(float value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.award)
}

// optional float result = 9;
inline bool Distribution::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Distribution::has_result() const {
  return _internal_has_result();
}
inline void Distribution::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Distribution::_internal_result() const {
  return result_;
}
inline float Distribution::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.result)
  return _internal_result();
}
inline void Distribution::_internal_set_result(float value) {
  _has_bits_[0] |= 0x00000100u;
  result_ = value;
}
inline void Distribution::set_result(float value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.result)
}

// -------------------------------------------------------------------

// Profits

// optional string gameid = 2;
inline bool Profits::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Profits::has_gameid() const {
  return _internal_has_gameid();
}
inline void Profits::clear_gameid() {
  gameid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Profits::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.gameid)
  return _internal_gameid();
}
inline void Profits::set_gameid(const std::string& value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.gameid)
}
inline std::string* Profits::mutable_gameid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Profits.gameid)
  return _internal_mutable_gameid();
}
inline const std::string& Profits::_internal_gameid() const {
  return gameid_.Get();
}
inline void Profits::_internal_set_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Profits::set_gameid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Profits.gameid)
}
inline void Profits::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Profits.gameid)
}
inline void Profits::set_gameid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Profits.gameid)
}
inline std::string* Profits::_internal_mutable_gameid() {
  _has_bits_[0] |= 0x00000001u;
  return gameid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Profits::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.Profits.gameid)
  if (!_internal_has_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Profits::set_allocated_gameid(std::string* gameid) {
  if (gameid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Profits.gameid)
}

// optional string teamid = 4;
inline bool Profits::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Profits::has_teamid() const {
  return _internal_has_teamid();
}
inline void Profits::clear_teamid() {
  teamid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Profits::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.teamid)
  return _internal_teamid();
}
inline void Profits::set_teamid(const std::string& value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.teamid)
}
inline std::string* Profits::mutable_teamid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Profits.teamid)
  return _internal_mutable_teamid();
}
inline const std::string& Profits::_internal_teamid() const {
  return teamid_.Get();
}
inline void Profits::_internal_set_teamid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Profits::set_teamid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Profits.teamid)
}
inline void Profits::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Profits.teamid)
}
inline void Profits::set_teamid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Profits.teamid)
}
inline std::string* Profits::_internal_mutable_teamid() {
  _has_bits_[0] |= 0x00000004u;
  return teamid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Profits::release_teamid() {
  // @@protoc_insertion_point(field_release:fantasybit.Profits.teamid)
  if (!_internal_has_teamid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return teamid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Profits::set_allocated_teamid(std::string* teamid) {
  if (teamid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  teamid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teamid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Profits.teamid)
}

// optional int32 season = 5;
inline bool Profits::_internal_has_season() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Profits::has_season() const {
  return _internal_has_season();
}
inline void Profits::clear_season() {
  season_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profits::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profits::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.season)
  return _internal_season();
}
inline void Profits::_internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  season_ = value;
}
inline void Profits::set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.season)
}

// optional int32 week = 6;
inline bool Profits::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Profits::has_week() const {
  return _internal_has_week();
}
inline void Profits::clear_week() {
  week_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profits::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profits::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.week)
  return _internal_week();
}
inline void Profits::_internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  week_ = value;
}
inline void Profits::set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.week)
}

// optional uint64 fantasy_nameid = 1;
inline bool Profits::_internal_has_fantasy_nameid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Profits::has_fantasy_nameid() const {
  return _internal_has_fantasy_nameid();
}
inline void Profits::clear_fantasy_nameid() {
  fantasy_nameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Profits::_internal_fantasy_nameid() const {
  return fantasy_nameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Profits::fantasy_nameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.fantasy_nameid)
  return _internal_fantasy_nameid();
}
inline void Profits::_internal_set_fantasy_nameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  fantasy_nameid_ = value;
}
inline void Profits::set_fantasy_nameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fantasy_nameid(value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.fantasy_nameid)
}

// optional string playerid = 3;
inline bool Profits::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Profits::has_playerid() const {
  return _internal_has_playerid();
}
inline void Profits::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Profits::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.playerid)
  return _internal_playerid();
}
inline void Profits::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.playerid)
}
inline std::string* Profits::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Profits.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& Profits::_internal_playerid() const {
  return playerid_.Get();
}
inline void Profits::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Profits::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Profits.playerid)
}
inline void Profits::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Profits.playerid)
}
inline void Profits::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Profits.playerid)
}
inline std::string* Profits::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000002u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Profits::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.Profits.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Profits::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Profits.playerid)
}

// optional int32 qty = 7;
inline bool Profits::_internal_has_qty() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Profits::has_qty() const {
  return _internal_has_qty();
}
inline void Profits::clear_qty() {
  qty_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profits::_internal_qty() const {
  return qty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profits::qty() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.qty)
  return _internal_qty();
}
inline void Profits::_internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  qty_ = value;
}
inline void Profits::set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.qty)
}

// optional float price = 8;
inline bool Profits::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Profits::has_price() const {
  return _internal_has_price();
}
inline void Profits::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Profits::_internal_price() const {
  return price_;
}
inline float Profits::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.price)
  return _internal_price();
}
inline void Profits::_internal_set_price(float value) {
  _has_bits_[0] |= 0x00000080u;
  price_ = value;
}
inline void Profits::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.price)
}

// optional float result = 9;
inline bool Profits::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Profits::has_result() const {
  return _internal_has_result();
}
inline void Profits::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Profits::_internal_result() const {
  return result_;
}
inline float Profits::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.result)
  return _internal_result();
}
inline void Profits::_internal_set_result(float value) {
  _has_bits_[0] |= 0x00000100u;
  result_ = value;
}
inline void Profits::set_result(float value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.result)
}

// optional float pnl = 10;
inline bool Profits::_internal_has_pnl() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Profits::has_pnl() const {
  return _internal_has_pnl();
}
inline void Profits::clear_pnl() {
  pnl_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float Profits::_internal_pnl() const {
  return pnl_;
}
inline float Profits::pnl() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.pnl)
  return _internal_pnl();
}
inline void Profits::_internal_set_pnl(float value) {
  _has_bits_[0] |= 0x00000200u;
  pnl_ = value;
}
inline void Profits::set_pnl(float value) {
  _internal_set_pnl(value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.pnl)
}

// -------------------------------------------------------------------

// Fills

// optional bool passivebuy = 1;
inline bool Fills::_internal_has_passivebuy() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Fills::has_passivebuy() const {
  return _internal_has_passivebuy();
}
inline void Fills::clear_passivebuy() {
  passivebuy_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Fills::_internal_passivebuy() const {
  return passivebuy_;
}
inline bool Fills::passivebuy() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.passivebuy)
  return _internal_passivebuy();
}
inline void Fills::_internal_set_passivebuy(bool value) {
  _has_bits_[0] |= 0x00000020u;
  passivebuy_ = value;
}
inline void Fills::set_passivebuy(bool value) {
  _internal_set_passivebuy(value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.passivebuy)
}

// optional string buyer = 10;
inline bool Fills::_internal_has_buyer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Fills::has_buyer() const {
  return _internal_has_buyer();
}
inline void Fills::clear_buyer() {
  buyer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Fills::buyer() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.buyer)
  return _internal_buyer();
}
inline void Fills::set_buyer(const std::string& value) {
  _internal_set_buyer(value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.buyer)
}
inline std::string* Fills::mutable_buyer() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Fills.buyer)
  return _internal_mutable_buyer();
}
inline const std::string& Fills::_internal_buyer() const {
  return buyer_.Get();
}
inline void Fills::_internal_set_buyer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buyer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Fills::set_buyer(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buyer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Fills.buyer)
}
inline void Fills::set_buyer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buyer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Fills.buyer)
}
inline void Fills::set_buyer(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buyer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Fills.buyer)
}
inline std::string* Fills::_internal_mutable_buyer() {
  _has_bits_[0] |= 0x00000001u;
  return buyer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Fills::release_buyer() {
  // @@protoc_insertion_point(field_release:fantasybit.Fills.buyer)
  if (!_internal_has_buyer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buyer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fills::set_allocated_buyer(std::string* buyer) {
  if (buyer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buyer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Fills.buyer)
}

// optional string seller = 20;
inline bool Fills::_internal_has_seller() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Fills::has_seller() const {
  return _internal_has_seller();
}
inline void Fills::clear_seller() {
  seller_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Fills::seller() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.seller)
  return _internal_seller();
}
inline void Fills::set_seller(const std::string& value) {
  _internal_set_seller(value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.seller)
}
inline std::string* Fills::mutable_seller() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Fills.seller)
  return _internal_mutable_seller();
}
inline const std::string& Fills::_internal_seller() const {
  return seller_.Get();
}
inline void Fills::_internal_set_seller(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  seller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Fills::set_seller(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  seller_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Fills.seller)
}
inline void Fills::set_seller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  seller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Fills.seller)
}
inline void Fills::set_seller(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  seller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Fills.seller)
}
inline std::string* Fills::_internal_mutable_seller() {
  _has_bits_[0] |= 0x00000002u;
  return seller_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Fills::release_seller() {
  // @@protoc_insertion_point(field_release:fantasybit.Fills.seller)
  if (!_internal_has_seller()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return seller_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fills::set_allocated_seller(std::string* seller) {
  if (seller != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  seller_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seller,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Fills.seller)
}

// optional string teamid = 40;
inline bool Fills::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Fills::has_teamid() const {
  return _internal_has_teamid();
}
inline void Fills::clear_teamid() {
  teamid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Fills::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.teamid)
  return _internal_teamid();
}
inline void Fills::set_teamid(const std::string& value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.teamid)
}
inline std::string* Fills::mutable_teamid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Fills.teamid)
  return _internal_mutable_teamid();
}
inline const std::string& Fills::_internal_teamid() const {
  return teamid_.Get();
}
inline void Fills::_internal_set_teamid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Fills::set_teamid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Fills.teamid)
}
inline void Fills::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Fills.teamid)
}
inline void Fills::set_teamid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  teamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Fills.teamid)
}
inline std::string* Fills::_internal_mutable_teamid() {
  _has_bits_[0] |= 0x00000004u;
  return teamid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Fills::release_teamid() {
  // @@protoc_insertion_point(field_release:fantasybit.Fills.teamid)
  if (!_internal_has_teamid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return teamid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fills::set_allocated_teamid(std::string* teamid) {
  if (teamid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  teamid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teamid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Fills.teamid)
}

// optional string playerid = 45;
inline bool Fills::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Fills::has_playerid() const {
  return _internal_has_playerid();
}
inline void Fills::clear_playerid() {
  playerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Fills::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.playerid)
  return _internal_playerid();
}
inline void Fills::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.playerid)
}
inline std::string* Fills::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:fantasybit.Fills.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& Fills::_internal_playerid() const {
  return playerid_.Get();
}
inline void Fills::_internal_set_playerid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Fills::set_playerid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  playerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Fills.playerid)
}
inline void Fills::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fantasybit.Fills.playerid)
}
inline void Fills::set_playerid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Fills.playerid)
}
inline std::string* Fills::_internal_mutable_playerid() {
  _has_bits_[0] |= 0x00000008u;
  return playerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Fills::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.Fills.playerid)
  if (!_internal_has_playerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return playerid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fills::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Fills.playerid)
}

// optional int32 season = 50;
inline bool Fills::_internal_has_season() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Fills::has_season() const {
  return _internal_has_season();
}
inline void Fills::clear_season() {
  season_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fills::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fills::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.season)
  return _internal_season();
}
inline void Fills::_internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  season_ = value;
}
inline void Fills::set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.season)
}

// optional int32 week = 60;
inline bool Fills::_internal_has_week() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Fills::has_week() const {
  return _internal_has_week();
}
inline void Fills::clear_week() {
  week_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fills::_internal_week() const {
  return week_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fills::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.week)
  return _internal_week();
}
inline void Fills::_internal_set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  week_ = value;
}
inline void Fills::set_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.week)
}

// optional int32 qty = 70;
inline bool Fills::_internal_has_qty() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Fills::has_qty() const {
  return _internal_has_qty();
}
inline void Fills::clear_qty() {
  qty_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fills::_internal_qty() const {
  return qty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fills::qty() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.qty)
  return _internal_qty();
}
inline void Fills::_internal_set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  qty_ = value;
}
inline void Fills::set_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.qty)
}

// optional float price = 80;
inline bool Fills::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Fills::has_price() const {
  return _internal_has_price();
}
inline void Fills::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Fills::_internal_price() const {
  return price_;
}
inline float Fills::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.price)
  return _internal_price();
}
inline void Fills::_internal_set_price(float value) {
  _has_bits_[0] |= 0x00000010u;
  price_ = value;
}
inline void Fills::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.price)
}

// -------------------------------------------------------------------

// ProjKstats

// optional float pa = 10;
inline bool ProjKstats::_internal_has_pa() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProjKstats::has_pa() const {
  return _internal_has_pa();
}
inline void ProjKstats::clear_pa() {
  pa_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ProjKstats::_internal_pa() const {
  return pa_;
}
inline float ProjKstats::pa() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjKstats.pa)
  return _internal_pa();
}
inline void ProjKstats::_internal_set_pa(float value) {
  _has_bits_[0] |= 0x00000002u;
  pa_ = value;
}
inline void ProjKstats::set_pa(float value) {
  _internal_set_pa(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjKstats.pa)
}

// optional float fg30 = 20;
inline bool ProjKstats::_internal_has_fg30() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProjKstats::has_fg30() const {
  return _internal_has_fg30();
}
inline void ProjKstats::clear_fg30() {
  fg30_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ProjKstats::_internal_fg30() const {
  return fg30_;
}
inline float ProjKstats::fg30() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjKstats.fg30)
  return _internal_fg30();
}
inline void ProjKstats::_internal_set_fg30(float value) {
  _has_bits_[0] |= 0x00000004u;
  fg30_ = value;
}
inline void ProjKstats::set_fg30(float value) {
  _internal_set_fg30(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjKstats.fg30)
}

// optional float fg40 = 30;
inline bool ProjKstats::_internal_has_fg40() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProjKstats::has_fg40() const {
  return _internal_has_fg40();
}
inline void ProjKstats::clear_fg40() {
  fg40_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ProjKstats::_internal_fg40() const {
  return fg40_;
}
inline float ProjKstats::fg40() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjKstats.fg40)
  return _internal_fg40();
}
inline void ProjKstats::_internal_set_fg40(float value) {
  _has_bits_[0] |= 0x00000008u;
  fg40_ = value;
}
inline void ProjKstats::set_fg40(float value) {
  _internal_set_fg40(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjKstats.fg40)
}

// optional float fg50 = 40;
inline bool ProjKstats::_internal_has_fg50() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProjKstats::has_fg50() const {
  return _internal_has_fg50();
}
inline void ProjKstats::clear_fg50() {
  fg50_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ProjKstats::_internal_fg50() const {
  return fg50_;
}
inline float ProjKstats::fg50() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjKstats.fg50)
  return _internal_fg50();
}
inline void ProjKstats::_internal_set_fg50(float value) {
  _has_bits_[0] |= 0x00000010u;
  fg50_ = value;
}
inline void ProjKstats::set_fg50(float value) {
  _internal_set_fg50(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjKstats.fg50)
}

// optional float fg60 = 50;
inline bool ProjKstats::_internal_has_fg60() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProjKstats::has_fg60() const {
  return _internal_has_fg60();
}
inline void ProjKstats::clear_fg60() {
  fg60_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ProjKstats::_internal_fg60() const {
  return fg60_;
}
inline float ProjKstats::fg60() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjKstats.fg60)
  return _internal_fg60();
}
inline void ProjKstats::_internal_set_fg60(float value) {
  _has_bits_[0] |= 0x00000001u;
  fg60_ = value;
}
inline void ProjKstats::set_fg60(float value) {
  _internal_set_fg60(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjKstats.fg60)
}

// -------------------------------------------------------------------

// ProjDstats

// optional float twopt = 100;
inline bool ProjDstats::_internal_has_twopt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProjDstats::has_twopt() const {
  return _internal_has_twopt();
}
inline void ProjDstats::clear_twopt() {
  twopt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ProjDstats::_internal_twopt() const {
  return twopt_;
}
inline float ProjDstats::twopt() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.twopt)
  return _internal_twopt();
}
inline void ProjDstats::_internal_set_twopt(float value) {
  _has_bits_[0] |= 0x00000002u;
  twopt_ = value;
}
inline void ProjDstats::set_twopt(float value) {
  _internal_set_twopt(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.twopt)
}

// optional float onept = 110;
inline bool ProjDstats::_internal_has_onept() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProjDstats::has_onept() const {
  return _internal_has_onept();
}
inline void ProjDstats::clear_onept() {
  onept_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ProjDstats::_internal_onept() const {
  return onept_;
}
inline float ProjDstats::onept() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.onept)
  return _internal_onept();
}
inline void ProjDstats::_internal_set_onept(float value) {
  _has_bits_[0] |= 0x00000004u;
  onept_ = value;
}
inline void ProjDstats::set_onept(float value) {
  _internal_set_onept(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.onept)
}

// optional float deftd = 120;
inline bool ProjDstats::_internal_has_deftd() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProjDstats::has_deftd() const {
  return _internal_has_deftd();
}
inline void ProjDstats::clear_deftd() {
  deftd_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ProjDstats::_internal_deftd() const {
  return deftd_;
}
inline float ProjDstats::deftd() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.deftd)
  return _internal_deftd();
}
inline void ProjDstats::_internal_set_deftd(float value) {
  _has_bits_[0] |= 0x00000008u;
  deftd_ = value;
}
inline void ProjDstats::set_deftd(float value) {
  _internal_set_deftd(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.deftd)
}

// optional float sfty = 130;
inline bool ProjDstats::_internal_has_sfty() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProjDstats::has_sfty() const {
  return _internal_has_sfty();
}
inline void ProjDstats::clear_sfty() {
  sfty_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ProjDstats::_internal_sfty() const {
  return sfty_;
}
inline float ProjDstats::sfty() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.sfty)
  return _internal_sfty();
}
inline void ProjDstats::_internal_set_sfty(float value) {
  _has_bits_[0] |= 0x00000010u;
  sfty_ = value;
}
inline void ProjDstats::set_sfty(float value) {
  _internal_set_sfty(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.sfty)
}

// optional float turnovers = 140;
inline bool ProjDstats::_internal_has_turnovers() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProjDstats::has_turnovers() const {
  return _internal_has_turnovers();
}
inline void ProjDstats::clear_turnovers() {
  turnovers_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ProjDstats::_internal_turnovers() const {
  return turnovers_;
}
inline float ProjDstats::turnovers() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.turnovers)
  return _internal_turnovers();
}
inline void ProjDstats::_internal_set_turnovers(float value) {
  _has_bits_[0] |= 0x00000020u;
  turnovers_ = value;
}
inline void ProjDstats::set_turnovers(float value) {
  _internal_set_turnovers(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.turnovers)
}

// optional float sacks = 150;
inline bool ProjDstats::_internal_has_sacks() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProjDstats::has_sacks() const {
  return _internal_has_sacks();
}
inline void ProjDstats::clear_sacks() {
  sacks_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ProjDstats::_internal_sacks() const {
  return sacks_;
}
inline float ProjDstats::sacks() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.sacks)
  return _internal_sacks();
}
inline void ProjDstats::_internal_set_sacks(float value) {
  _has_bits_[0] |= 0x00000040u;
  sacks_ = value;
}
inline void ProjDstats::set_sacks(float value) {
  _internal_set_sacks(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.sacks)
}

// optional float ptsa = 160;
inline bool ProjDstats::_internal_has_ptsa() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProjDstats::has_ptsa() const {
  return _internal_has_ptsa();
}
inline void ProjDstats::clear_ptsa() {
  ptsa_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ProjDstats::_internal_ptsa() const {
  return ptsa_;
}
inline float ProjDstats::ptsa() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.ptsa)
  return _internal_ptsa();
}
inline void ProjDstats::_internal_set_ptsa(float value) {
  _has_bits_[0] |= 0x00000001u;
  ptsa_ = value;
}
inline void ProjDstats::set_ptsa(float value) {
  _internal_set_ptsa(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.ptsa)
}

// -------------------------------------------------------------------

// ProjOstats

// optional float passyds = 10;
inline bool ProjOstats::_internal_has_passyds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProjOstats::has_passyds() const {
  return _internal_has_passyds();
}
inline void ProjOstats::clear_passyds() {
  passyds_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ProjOstats::_internal_passyds() const {
  return passyds_;
}
inline float ProjOstats::passyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.passyds)
  return _internal_passyds();
}
inline void ProjOstats::_internal_set_passyds(float value) {
  _has_bits_[0] |= 0x00000002u;
  passyds_ = value;
}
inline void ProjOstats::set_passyds(float value) {
  _internal_set_passyds(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.passyds)
}

// optional float passtd = 20;
inline bool ProjOstats::_internal_has_passtd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProjOstats::has_passtd() const {
  return _internal_has_passtd();
}
inline void ProjOstats::clear_passtd() {
  passtd_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ProjOstats::_internal_passtd() const {
  return passtd_;
}
inline float ProjOstats::passtd() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.passtd)
  return _internal_passtd();
}
inline void ProjOstats::_internal_set_passtd(float value) {
  _has_bits_[0] |= 0x00000004u;
  passtd_ = value;
}
inline void ProjOstats::set_passtd(float value) {
  _internal_set_passtd(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.passtd)
}

// optional float rushyds = 30;
inline bool ProjOstats::_internal_has_rushyds() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProjOstats::has_rushyds() const {
  return _internal_has_rushyds();
}
inline void ProjOstats::clear_rushyds() {
  rushyds_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ProjOstats::_internal_rushyds() const {
  return rushyds_;
}
inline float ProjOstats::rushyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.rushyds)
  return _internal_rushyds();
}
inline void ProjOstats::_internal_set_rushyds(float value) {
  _has_bits_[0] |= 0x00000008u;
  rushyds_ = value;
}
inline void ProjOstats::set_rushyds(float value) {
  _internal_set_rushyds(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.rushyds)
}

// optional float rushtd = 40;
inline bool ProjOstats::_internal_has_rushtd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProjOstats::has_rushtd() const {
  return _internal_has_rushtd();
}
inline void ProjOstats::clear_rushtd() {
  rushtd_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ProjOstats::_internal_rushtd() const {
  return rushtd_;
}
inline float ProjOstats::rushtd() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.rushtd)
  return _internal_rushtd();
}
inline void ProjOstats::_internal_set_rushtd(float value) {
  _has_bits_[0] |= 0x00000010u;
  rushtd_ = value;
}
inline void ProjOstats::set_rushtd(float value) {
  _internal_set_rushtd(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.rushtd)
}

// optional float recyds = 50;
inline bool ProjOstats::_internal_has_recyds() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProjOstats::has_recyds() const {
  return _internal_has_recyds();
}
inline void ProjOstats::clear_recyds() {
  recyds_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ProjOstats::_internal_recyds() const {
  return recyds_;
}
inline float ProjOstats::recyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.recyds)
  return _internal_recyds();
}
inline void ProjOstats::_internal_set_recyds(float value) {
  _has_bits_[0] |= 0x00000020u;
  recyds_ = value;
}
inline void ProjOstats::set_recyds(float value) {
  _internal_set_recyds(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.recyds)
}

// optional float rectd = 60;
inline bool ProjOstats::_internal_has_rectd() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProjOstats::has_rectd() const {
  return _internal_has_rectd();
}
inline void ProjOstats::clear_rectd() {
  rectd_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ProjOstats::_internal_rectd() const {
  return rectd_;
}
inline float ProjOstats::rectd() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.rectd)
  return _internal_rectd();
}
inline void ProjOstats::_internal_set_rectd(float value) {
  _has_bits_[0] |= 0x00000040u;
  rectd_ = value;
}
inline void ProjOstats::set_rectd(float value) {
  _internal_set_rectd(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.rectd)
}

// optional float rec = 70;
inline bool ProjOstats::_internal_has_rec() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProjOstats::has_rec() const {
  return _internal_has_rec();
}
inline void ProjOstats::clear_rec() {
  rec_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ProjOstats::_internal_rec() const {
  return rec_;
}
inline float ProjOstats::rec() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.rec)
  return _internal_rec();
}
inline void ProjOstats::_internal_set_rec(float value) {
  _has_bits_[0] |= 0x00000080u;
  rec_ = value;
}
inline void ProjOstats::set_rec(float value) {
  _internal_set_rec(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.rec)
}

// optional float pint = 80;
inline bool ProjOstats::_internal_has_pint() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProjOstats::has_pint() const {
  return _internal_has_pint();
}
inline void ProjOstats::clear_pint() {
  pint_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ProjOstats::_internal_pint() const {
  return pint_;
}
inline float ProjOstats::pint() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.pint)
  return _internal_pint();
}
inline void ProjOstats::_internal_set_pint(float value) {
  _has_bits_[0] |= 0x00000100u;
  pint_ = value;
}
inline void ProjOstats::set_pint(float value) {
  _internal_set_pint(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.pint)
}

// optional float fumble = 90;
inline bool ProjOstats::_internal_has_fumble() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ProjOstats::has_fumble() const {
  return _internal_has_fumble();
}
inline void ProjOstats::clear_fumble() {
  fumble_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ProjOstats::_internal_fumble() const {
  return fumble_;
}
inline float ProjOstats::fumble() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.fumble)
  return _internal_fumble();
}
inline void ProjOstats::_internal_set_fumble(float value) {
  _has_bits_[0] |= 0x00000200u;
  fumble_ = value;
}
inline void ProjOstats::set_fumble(float value) {
  _internal_set_fumble(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.fumble)
}

// optional float twopt = 100;
inline bool ProjOstats::_internal_has_twopt() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ProjOstats::has_twopt() const {
  return _internal_has_twopt();
}
inline void ProjOstats::clear_twopt() {
  twopt_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ProjOstats::_internal_twopt() const {
  return twopt_;
}
inline float ProjOstats::twopt() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.twopt)
  return _internal_twopt();
}
inline void ProjOstats::_internal_set_twopt(float value) {
  _has_bits_[0] |= 0x00000400u;
  twopt_ = value;
}
inline void ProjOstats::set_twopt(float value) {
  _internal_set_twopt(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.twopt)
}

// optional float onept = 110;
inline bool ProjOstats::_internal_has_onept() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProjOstats::has_onept() const {
  return _internal_has_onept();
}
inline void ProjOstats::clear_onept() {
  onept_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ProjOstats::_internal_onept() const {
  return onept_;
}
inline float ProjOstats::onept() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.onept)
  return _internal_onept();
}
inline void ProjOstats::_internal_set_onept(float value) {
  _has_bits_[0] |= 0x00000001u;
  onept_ = value;
}
inline void ProjOstats::set_onept(float value) {
  _internal_set_onept(value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.onept)
}

// -------------------------------------------------------------------

// ProjStats

// optional .fantasybit.ProjOstats ostats = 10;
inline bool ProjStats::_internal_has_ostats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ostats_ != nullptr);
  return value;
}
inline bool ProjStats::has_ostats() const {
  return _internal_has_ostats();
}
inline void ProjStats::clear_ostats() {
  if (ostats_ != nullptr) ostats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::ProjOstats& ProjStats::_internal_ostats() const {
  const ::fantasybit::ProjOstats* p = ostats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ProjOstats*>(
      &::fantasybit::_ProjOstats_default_instance_);
}
inline const ::fantasybit::ProjOstats& ProjStats::ostats() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjStats.ostats)
  return _internal_ostats();
}
inline void ProjStats::unsafe_arena_set_allocated_ostats(
    ::fantasybit::ProjOstats* ostats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ostats_);
  }
  ostats_ = ostats;
  if (ostats) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.ProjStats.ostats)
}
inline ::fantasybit::ProjOstats* ProjStats::release_ostats() {
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::ProjOstats* temp = ostats_;
  ostats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ProjOstats* ProjStats::unsafe_arena_release_ostats() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjStats.ostats)
  _has_bits_[0] &= ~0x00000001u;
  ::fantasybit::ProjOstats* temp = ostats_;
  ostats_ = nullptr;
  return temp;
}
inline ::fantasybit::ProjOstats* ProjStats::_internal_mutable_ostats() {
  _has_bits_[0] |= 0x00000001u;
  if (ostats_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ProjOstats>(GetArena());
    ostats_ = p;
  }
  return ostats_;
}
inline ::fantasybit::ProjOstats* ProjStats::mutable_ostats() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjStats.ostats)
  return _internal_mutable_ostats();
}
inline void ProjStats::set_allocated_ostats(::fantasybit::ProjOstats* ostats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ostats_;
  }
  if (ostats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ostats);
    if (message_arena != submessage_arena) {
      ostats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ostats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ostats_ = ostats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjStats.ostats)
}

// optional .fantasybit.ProjDstats dstats = 20;
inline bool ProjStats::_internal_has_dstats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || dstats_ != nullptr);
  return value;
}
inline bool ProjStats::has_dstats() const {
  return _internal_has_dstats();
}
inline void ProjStats::clear_dstats() {
  if (dstats_ != nullptr) dstats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::ProjDstats& ProjStats::_internal_dstats() const {
  const ::fantasybit::ProjDstats* p = dstats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ProjDstats*>(
      &::fantasybit::_ProjDstats_default_instance_);
}
inline const ::fantasybit::ProjDstats& ProjStats::dstats() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjStats.dstats)
  return _internal_dstats();
}
inline void ProjStats::unsafe_arena_set_allocated_dstats(
    ::fantasybit::ProjDstats* dstats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dstats_);
  }
  dstats_ = dstats;
  if (dstats) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.ProjStats.dstats)
}
inline ::fantasybit::ProjDstats* ProjStats::release_dstats() {
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::ProjDstats* temp = dstats_;
  dstats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ProjDstats* ProjStats::unsafe_arena_release_dstats() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjStats.dstats)
  _has_bits_[0] &= ~0x00000002u;
  ::fantasybit::ProjDstats* temp = dstats_;
  dstats_ = nullptr;
  return temp;
}
inline ::fantasybit::ProjDstats* ProjStats::_internal_mutable_dstats() {
  _has_bits_[0] |= 0x00000002u;
  if (dstats_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ProjDstats>(GetArena());
    dstats_ = p;
  }
  return dstats_;
}
inline ::fantasybit::ProjDstats* ProjStats::mutable_dstats() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjStats.dstats)
  return _internal_mutable_dstats();
}
inline void ProjStats::set_allocated_dstats(::fantasybit::ProjDstats* dstats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dstats_;
  }
  if (dstats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dstats);
    if (message_arena != submessage_arena) {
      dstats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dstats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dstats_ = dstats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjStats.dstats)
}

// optional .fantasybit.ProjKstats kstats = 30;
inline bool ProjStats::_internal_has_kstats() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || kstats_ != nullptr);
  return value;
}
inline bool ProjStats::has_kstats() const {
  return _internal_has_kstats();
}
inline void ProjStats::clear_kstats() {
  if (kstats_ != nullptr) kstats_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::ProjKstats& ProjStats::_internal_kstats() const {
  const ::fantasybit::ProjKstats* p = kstats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fantasybit::ProjKstats*>(
      &::fantasybit::_ProjKstats_default_instance_);
}
inline const ::fantasybit::ProjKstats& ProjStats::kstats() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjStats.kstats)
  return _internal_kstats();
}
inline void ProjStats::unsafe_arena_set_allocated_kstats(
    ::fantasybit::ProjKstats* kstats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kstats_);
  }
  kstats_ = kstats;
  if (kstats) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fantasybit.ProjStats.kstats)
}
inline ::fantasybit::ProjKstats* ProjStats::release_kstats() {
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::ProjKstats* temp = kstats_;
  kstats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fantasybit::ProjKstats* ProjStats::unsafe_arena_release_kstats() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjStats.kstats)
  _has_bits_[0] &= ~0x00000004u;
  ::fantasybit::ProjKstats* temp = kstats_;
  kstats_ = nullptr;
  return temp;
}
inline ::fantasybit::ProjKstats* ProjStats::_internal_mutable_kstats() {
  _has_bits_[0] |= 0x00000004u;
  if (kstats_ == nullptr) {
    auto* p = CreateMaybeMessage<::fantasybit::ProjKstats>(GetArena());
    kstats_ = p;
  }
  return kstats_;
}
inline ::fantasybit::ProjKstats* ProjStats::mutable_kstats() {
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjStats.kstats)
  return _internal_mutable_kstats();
}
inline void ProjStats::set_allocated_kstats(::fantasybit::ProjKstats* kstats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kstats_;
  }
  if (kstats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kstats);
    if (message_arena != submessage_arena) {
      kstats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kstats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  kstats_ = kstats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjStats.kstats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ApiData_2eproto
