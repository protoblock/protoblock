// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NameData.proto

#include "NameData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_NameData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyBitProj_NameData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ExData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettlePos_ExData_2eproto;
namespace fantasybit {
class FantasyNameBalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FantasyNameBal> _instance;
} _FantasyNameBal_default_instance_;
class FantasyBitAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FantasyBitAward> _instance;
} _FantasyBitAward_default_instance_;
class FantasyBitPnlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FantasyBitPnl> _instance;
} _FantasyBitPnl_default_instance_;
class FantasyBitProjDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FantasyBitProj> _instance;
} _FantasyBitProj_default_instance_;
class GameFantasyBitProjDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameFantasyBitProj> _instance;
} _GameFantasyBitProj_default_instance_;
}  // namespace fantasybit
static void InitDefaultsscc_info_FantasyBitAward_NameData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_FantasyBitAward_default_instance_;
    new (ptr) ::fantasybit::FantasyBitAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyBitAward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyBitAward_NameData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FantasyBitAward_NameData_2eproto}, {}};

static void InitDefaultsscc_info_FantasyBitPnl_NameData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_FantasyBitPnl_default_instance_;
    new (ptr) ::fantasybit::FantasyBitPnl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyBitPnl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FantasyBitPnl_NameData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FantasyBitPnl_NameData_2eproto}, {
      &scc_info_SettlePos_ExData_2eproto.base,}};

static void InitDefaultsscc_info_FantasyBitProj_NameData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_FantasyBitProj_default_instance_;
    new (ptr) ::fantasybit::FantasyBitProj();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyBitProj::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyBitProj_NameData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FantasyBitProj_NameData_2eproto}, {}};

static void InitDefaultsscc_info_FantasyNameBal_NameData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_FantasyNameBal_default_instance_;
    new (ptr) ::fantasybit::FantasyNameBal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyNameBal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FantasyNameBal_NameData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FantasyNameBal_NameData_2eproto}, {}};

static void InitDefaultsscc_info_GameFantasyBitProj_NameData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fantasybit::_GameFantasyBitProj_default_instance_;
    new (ptr) ::fantasybit::GameFantasyBitProj();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameFantasyBitProj::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameFantasyBitProj_NameData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameFantasyBitProj_NameData_2eproto}, {
      &scc_info_FantasyBitProj_NameData_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NameData_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NameData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NameData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NameData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBal, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBal, public_key_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBal, bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBal, stake_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBal, chash_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBal, block_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyNameBal, count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitAward, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitAward, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitAward, proj_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitAward, award_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitPnl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitPnl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitPnl, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitPnl, spos_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitPnl, pnl_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitProj, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitProj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitProj, name_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitProj, proj_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitProj, playerid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitProj, count_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::FantasyBitProj, block_),
  0,
  3,
  1,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameFantasyBitProj, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameFantasyBitProj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameFantasyBitProj, gameid_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameFantasyBitProj, home_),
  PROTOBUF_FIELD_OFFSET(::fantasybit::GameFantasyBitProj, away_),
  0,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::fantasybit::FantasyNameBal)},
  { 19, 27, sizeof(::fantasybit::FantasyBitAward)},
  { 30, 38, sizeof(::fantasybit::FantasyBitPnl)},
  { 41, 51, sizeof(::fantasybit::FantasyBitProj)},
  { 56, 64, sizeof(::fantasybit::GameFantasyBitProj)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_FantasyNameBal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_FantasyBitAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_FantasyBitPnl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_FantasyBitProj_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fantasybit::_GameFantasyBitProj_default_instance_),
};

const char descriptor_table_protodef_NameData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016NameData.proto\022\nfantasybit\032\014ExData.pro"
  "to\"|\n\016FantasyNameBal\022\014\n\004name\030\n \001(\t\022\022\n\npu"
  "blic_key\030\024 \001(\t\022\014\n\004bits\030\036 \001(\004\022\r\n\005stake\030( "
  "\001(\003\022\r\n\005chash\0302 \001(\004\022\r\n\005block\030< \001(\005\022\r\n\005cou"
  "nt\030F \001(\005\"<\n\017FantasyBitAward\022\014\n\004name\030\n \001("
  "\t\022\014\n\004proj\030\024 \001(\005\022\r\n\005award\030\036 \001(\004\"O\n\rFantas"
  "yBitPnl\022\014\n\004name\030\n \001(\t\022#\n\004spos\030\024 \001(\0132\025.fa"
  "ntasybit.SettlePos\022\013\n\003pnl\030\036 \001(\003\"\\\n\016Fanta"
  "syBitProj\022\014\n\004name\030\n \001(\t\022\014\n\004proj\030\024 \001(\005\022\020\n"
  "\010playerid\030\036 \001(\t\022\r\n\005count\030( \001(\005\022\r\n\005block\030"
  "2 \001(\005\"x\n\022GameFantasyBitProj\022\016\n\006gameid\030\n "
  "\001(\t\022(\n\004home\030\024 \003(\0132\032.fantasybit.FantasyBi"
  "tProj\022(\n\004away\030\036 \003(\0132\032.fantasybit.Fantasy"
  "BitProj"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NameData_2eproto_deps[1] = {
  &::descriptor_table_ExData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NameData_2eproto_sccs[5] = {
  &scc_info_FantasyBitAward_NameData_2eproto.base,
  &scc_info_FantasyBitPnl_NameData_2eproto.base,
  &scc_info_FantasyBitProj_NameData_2eproto.base,
  &scc_info_FantasyNameBal_NameData_2eproto.base,
  &scc_info_GameFantasyBitProj_NameData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NameData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NameData_2eproto = {
  false, false, descriptor_table_protodef_NameData_2eproto, "NameData.proto", 527,
  &descriptor_table_NameData_2eproto_once, descriptor_table_NameData_2eproto_sccs, descriptor_table_NameData_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_NameData_2eproto::offsets,
  file_level_metadata_NameData_2eproto, 5, file_level_enum_descriptors_NameData_2eproto, file_level_service_descriptors_NameData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NameData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NameData_2eproto)), true);
namespace fantasybit {

// ===================================================================

void FantasyNameBal::InitAsDefaultInstance() {
}
class FantasyNameBal::_Internal {
 public:
  using HasBits = decltype(std::declval<FantasyNameBal>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stake(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chash(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

FantasyNameBal::FantasyNameBal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.FantasyNameBal)
}
FantasyNameBal::FantasyNameBal(const FantasyNameBal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_key()) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_key(),
      GetArena());
  }
  ::memcpy(&bits_, &from.bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&bits_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyNameBal)
}

void FantasyNameBal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FantasyNameBal_NameData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&bits_)) + sizeof(count_));
}

FantasyNameBal::~FantasyNameBal() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyNameBal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FantasyNameBal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FantasyNameBal::ArenaDtor(void* object) {
  FantasyNameBal* _this = reinterpret_cast< FantasyNameBal* >(object);
  (void)_this;
}
void FantasyNameBal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FantasyNameBal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FantasyNameBal& FantasyNameBal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FantasyNameBal_NameData_2eproto.base);
  return *internal_default_instance();
}


void FantasyNameBal::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyNameBal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      public_key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&bits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&bits_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FantasyNameBal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyNameBal.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string public_key = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyNameBal.public_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bits = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_bits(&has_bits);
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 stake = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_stake(&has_bits);
          stake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chash = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_chash(&has_bits);
          chash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 block = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_block(&has_bits);
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FantasyNameBal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyNameBal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameBal.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional string public_key = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameBal.public_key");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_public_key(), target);
  }

  // optional uint64 bits = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_bits(), target);
  }

  // optional int64 stake = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(40, this->_internal_stake(), target);
  }

  // optional uint64 chash = 50;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(50, this->_internal_chash(), target);
  }

  // optional int32 block = 60;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_block(), target);
  }

  // optional int32 count = 70;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyNameBal)
  return target;
}

size_t FantasyNameBal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyNameBal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string public_key = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_public_key());
    }

    // optional uint64 bits = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bits());
    }

    // optional int64 stake = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_stake());
    }

    // optional uint64 chash = 50;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_chash());
    }

    // optional int32 block = 60;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_block());
    }

    // optional int32 count = 70;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FantasyNameBal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyNameBal)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyNameBal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FantasyNameBal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyNameBal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyNameBal)
    MergeFrom(*source);
  }
}

void FantasyNameBal::MergeFrom(const FantasyNameBal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyNameBal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_public_key(from._internal_public_key());
    }
    if (cached_has_bits & 0x00000004u) {
      bits_ = from.bits_;
    }
    if (cached_has_bits & 0x00000008u) {
      stake_ = from.stake_;
    }
    if (cached_has_bits & 0x00000010u) {
      chash_ = from.chash_;
    }
    if (cached_has_bits & 0x00000020u) {
      block_ = from.block_;
    }
    if (cached_has_bits & 0x00000040u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyNameBal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyNameBal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyNameBal::CopyFrom(const FantasyNameBal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyNameBal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyNameBal::IsInitialized() const {
  return true;
}

void FantasyNameBal::InternalSwap(FantasyNameBal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FantasyNameBal, count_)
      + sizeof(FantasyNameBal::count_)
      - PROTOBUF_FIELD_OFFSET(FantasyNameBal, bits_)>(
          reinterpret_cast<char*>(&bits_),
          reinterpret_cast<char*>(&other->bits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FantasyNameBal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FantasyBitAward::InitAsDefaultInstance() {
}
class FantasyBitAward::_Internal {
 public:
  using HasBits = decltype(std::declval<FantasyBitAward>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proj(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_award(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FantasyBitAward::FantasyBitAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.FantasyBitAward)
}
FantasyBitAward::FantasyBitAward(const FantasyBitAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&proj_, &from.proj_,
    static_cast<size_t>(reinterpret_cast<char*>(&award_) -
    reinterpret_cast<char*>(&proj_)) + sizeof(award_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyBitAward)
}

void FantasyBitAward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FantasyBitAward_NameData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proj_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&award_) -
      reinterpret_cast<char*>(&proj_)) + sizeof(award_));
}

FantasyBitAward::~FantasyBitAward() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyBitAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FantasyBitAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FantasyBitAward::ArenaDtor(void* object) {
  FantasyBitAward* _this = reinterpret_cast< FantasyBitAward* >(object);
  (void)_this;
}
void FantasyBitAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FantasyBitAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FantasyBitAward& FantasyBitAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FantasyBitAward_NameData_2eproto.base);
  return *internal_default_instance();
}


void FantasyBitAward::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyBitAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&proj_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&award_) -
        reinterpret_cast<char*>(&proj_)) + sizeof(award_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FantasyBitAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyBitAward.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 proj = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_proj(&has_bits);
          proj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 award = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_award(&has_bits);
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FantasyBitAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyBitAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitAward.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional int32 proj = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_proj(), target);
  }

  // optional uint64 award = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_award(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyBitAward)
  return target;
}

size_t FantasyBitAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyBitAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 proj = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_proj());
    }

    // optional uint64 award = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_award());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FantasyBitAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyBitAward)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyBitAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FantasyBitAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyBitAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyBitAward)
    MergeFrom(*source);
  }
}

void FantasyBitAward::MergeFrom(const FantasyBitAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyBitAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      proj_ = from.proj_;
    }
    if (cached_has_bits & 0x00000004u) {
      award_ = from.award_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyBitAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyBitAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyBitAward::CopyFrom(const FantasyBitAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyBitAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyBitAward::IsInitialized() const {
  return true;
}

void FantasyBitAward::InternalSwap(FantasyBitAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FantasyBitAward, award_)
      + sizeof(FantasyBitAward::award_)
      - PROTOBUF_FIELD_OFFSET(FantasyBitAward, proj_)>(
          reinterpret_cast<char*>(&proj_),
          reinterpret_cast<char*>(&other->proj_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FantasyBitAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FantasyBitPnl::InitAsDefaultInstance() {
  ::fantasybit::_FantasyBitPnl_default_instance_._instance.get_mutable()->spos_ = const_cast< ::fantasybit::SettlePos*>(
      ::fantasybit::SettlePos::internal_default_instance());
}
class FantasyBitPnl::_Internal {
 public:
  using HasBits = decltype(std::declval<FantasyBitPnl>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::fantasybit::SettlePos& spos(const FantasyBitPnl* msg);
  static void set_has_spos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pnl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::fantasybit::SettlePos&
FantasyBitPnl::_Internal::spos(const FantasyBitPnl* msg) {
  return *msg->spos_;
}
void FantasyBitPnl::clear_spos() {
  if (spos_ != nullptr) spos_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
FantasyBitPnl::FantasyBitPnl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.FantasyBitPnl)
}
FantasyBitPnl::FantasyBitPnl(const FantasyBitPnl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_spos()) {
    spos_ = new ::fantasybit::SettlePos(*from.spos_);
  } else {
    spos_ = nullptr;
  }
  pnl_ = from.pnl_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyBitPnl)
}

void FantasyBitPnl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FantasyBitPnl_NameData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pnl_) -
      reinterpret_cast<char*>(&spos_)) + sizeof(pnl_));
}

FantasyBitPnl::~FantasyBitPnl() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyBitPnl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FantasyBitPnl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spos_;
}

void FantasyBitPnl::ArenaDtor(void* object) {
  FantasyBitPnl* _this = reinterpret_cast< FantasyBitPnl* >(object);
  (void)_this;
}
void FantasyBitPnl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FantasyBitPnl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FantasyBitPnl& FantasyBitPnl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FantasyBitPnl_NameData_2eproto.base);
  return *internal_default_instance();
}


void FantasyBitPnl::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyBitPnl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spos_ != nullptr);
      spos_->Clear();
    }
  }
  pnl_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FantasyBitPnl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyBitPnl.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .fantasybit.SettlePos spos = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_spos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 pnl = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_pnl(&has_bits);
          pnl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FantasyBitPnl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyBitPnl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitPnl.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional .fantasybit.SettlePos spos = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::spos(this), target, stream);
  }

  // optional int64 pnl = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(30, this->_internal_pnl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyBitPnl)
  return target;
}

size_t FantasyBitPnl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyBitPnl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .fantasybit.SettlePos spos = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spos_);
    }

    // optional int64 pnl = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_pnl());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FantasyBitPnl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyBitPnl)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyBitPnl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FantasyBitPnl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyBitPnl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyBitPnl)
    MergeFrom(*source);
  }
}

void FantasyBitPnl::MergeFrom(const FantasyBitPnl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyBitPnl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spos()->::fantasybit::SettlePos::MergeFrom(from._internal_spos());
    }
    if (cached_has_bits & 0x00000004u) {
      pnl_ = from.pnl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyBitPnl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyBitPnl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyBitPnl::CopyFrom(const FantasyBitPnl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyBitPnl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyBitPnl::IsInitialized() const {
  return true;
}

void FantasyBitPnl::InternalSwap(FantasyBitPnl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FantasyBitPnl, pnl_)
      + sizeof(FantasyBitPnl::pnl_)
      - PROTOBUF_FIELD_OFFSET(FantasyBitPnl, spos_)>(
          reinterpret_cast<char*>(&spos_),
          reinterpret_cast<char*>(&other->spos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FantasyBitPnl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FantasyBitProj::InitAsDefaultInstance() {
}
class FantasyBitProj::_Internal {
 public:
  using HasBits = decltype(std::declval<FantasyBitProj>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proj(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FantasyBitProj::FantasyBitProj(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.FantasyBitProj)
}
FantasyBitProj::FantasyBitProj(const FantasyBitProj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playerid(),
      GetArena());
  }
  ::memcpy(&block_, &from.block_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&block_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyBitProj)
}

void FantasyBitProj::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FantasyBitProj_NameData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&block_)) + sizeof(count_));
}

FantasyBitProj::~FantasyBitProj() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyBitProj)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FantasyBitProj::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FantasyBitProj::ArenaDtor(void* object) {
  FantasyBitProj* _this = reinterpret_cast< FantasyBitProj* >(object);
  (void)_this;
}
void FantasyBitProj::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FantasyBitProj::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FantasyBitProj& FantasyBitProj::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FantasyBitProj_NameData_2eproto.base);
  return *internal_default_instance();
}


void FantasyBitProj::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyBitProj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&block_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&block_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FantasyBitProj::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyBitProj.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 proj = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_proj(&has_bits);
          proj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.FantasyBitProj.playerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 block = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_block(&has_bits);
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FantasyBitProj::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyBitProj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitProj.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional int32 proj = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_proj(), target);
  }

  // optional string playerid = 30;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitProj.playerid");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_playerid(), target);
  }

  // optional int32 count = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_count(), target);
  }

  // optional int32 block = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyBitProj)
  return target;
}

size_t FantasyBitProj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyBitProj)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string playerid = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional int32 block = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_block());
    }

    // optional int32 proj = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_proj());
    }

    // optional int32 count = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FantasyBitProj::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyBitProj)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyBitProj* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FantasyBitProj>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyBitProj)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyBitProj)
    MergeFrom(*source);
  }
}

void FantasyBitProj::MergeFrom(const FantasyBitProj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyBitProj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      block_ = from.block_;
    }
    if (cached_has_bits & 0x00000008u) {
      proj_ = from.proj_;
    }
    if (cached_has_bits & 0x00000010u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyBitProj::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyBitProj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyBitProj::CopyFrom(const FantasyBitProj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyBitProj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyBitProj::IsInitialized() const {
  return true;
}

void FantasyBitProj::InternalSwap(FantasyBitProj* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FantasyBitProj, count_)
      + sizeof(FantasyBitProj::count_)
      - PROTOBUF_FIELD_OFFSET(FantasyBitProj, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FantasyBitProj::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameFantasyBitProj::InitAsDefaultInstance() {
}
class GameFantasyBitProj::_Internal {
 public:
  using HasBits = decltype(std::declval<GameFantasyBitProj>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GameFantasyBitProj::GameFantasyBitProj(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  home_(arena),
  away_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fantasybit.GameFantasyBitProj)
}
GameFantasyBitProj::GameFantasyBitProj(const GameFantasyBitProj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      home_(from.home_),
      away_(from.away_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameid()) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameFantasyBitProj)
}

void GameFantasyBitProj::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameFantasyBitProj_NameData_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameFantasyBitProj::~GameFantasyBitProj() {
  // @@protoc_insertion_point(destructor:fantasybit.GameFantasyBitProj)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameFantasyBitProj::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameFantasyBitProj::ArenaDtor(void* object) {
  GameFantasyBitProj* _this = reinterpret_cast< GameFantasyBitProj* >(object);
  (void)_this;
}
void GameFantasyBitProj::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameFantasyBitProj::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameFantasyBitProj& GameFantasyBitProj::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameFantasyBitProj_NameData_2eproto.base);
  return *internal_default_instance();
}


void GameFantasyBitProj::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameFantasyBitProj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  home_.Clear();
  away_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gameid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameFantasyBitProj::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fantasybit.GameFantasyBitProj.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.FantasyBitProj home = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_home(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fantasybit.FantasyBitProj away = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_away(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameFantasyBitProj::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameFantasyBitProj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fantasybit.GameFantasyBitProj.gameid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gameid(), target);
  }

  // repeated .fantasybit.FantasyBitProj home = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_home_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_home(i), target, stream);
  }

  // repeated .fantasybit.FantasyBitProj away = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_away_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_away(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameFantasyBitProj)
  return target;
}

size_t GameFantasyBitProj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameFantasyBitProj)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fantasybit.FantasyBitProj home = 20;
  total_size += 2UL * this->_internal_home_size();
  for (const auto& msg : this->home_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fantasybit.FantasyBitProj away = 30;
  total_size += 2UL * this->_internal_away_size();
  for (const auto& msg : this->away_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string gameid = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameFantasyBitProj::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameFantasyBitProj)
  GOOGLE_DCHECK_NE(&from, this);
  const GameFantasyBitProj* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameFantasyBitProj>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameFantasyBitProj)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameFantasyBitProj)
    MergeFrom(*source);
  }
}

void GameFantasyBitProj::MergeFrom(const GameFantasyBitProj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameFantasyBitProj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  home_.MergeFrom(from.home_);
  away_.MergeFrom(from.away_);
  if (from._internal_has_gameid()) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void GameFantasyBitProj::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameFantasyBitProj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFantasyBitProj::CopyFrom(const GameFantasyBitProj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameFantasyBitProj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFantasyBitProj::IsInitialized() const {
  return true;
}

void GameFantasyBitProj::InternalSwap(GameFantasyBitProj* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  home_.InternalSwap(&other->home_);
  away_.InternalSwap(&other->away_);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GameFantasyBitProj::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fantasybit::FantasyNameBal* Arena::CreateMaybeMessage< ::fantasybit::FantasyNameBal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::FantasyNameBal >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::FantasyBitAward* Arena::CreateMaybeMessage< ::fantasybit::FantasyBitAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::FantasyBitAward >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::FantasyBitPnl* Arena::CreateMaybeMessage< ::fantasybit::FantasyBitPnl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::FantasyBitPnl >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::FantasyBitProj* Arena::CreateMaybeMessage< ::fantasybit::FantasyBitProj >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::FantasyBitProj >(arena);
}
template<> PROTOBUF_NOINLINE ::fantasybit::GameFantasyBitProj* Arena::CreateMaybeMessage< ::fantasybit::GameFantasyBitProj >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fantasybit::GameFantasyBitProj >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
