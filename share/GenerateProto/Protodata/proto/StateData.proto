syntax = "proto2";
package fantasybit;
import "ProtoData.proto";
import "NameData.proto";
import "StaticData.proto";
import "StatusData.proto";
import "ExData.proto";





//"blockhead"->blockmetaid
//blockmetaid->BlockMeta
//txmetaroot->MerkleTree<TxMetaId>
//txmetaid->TxMeta
//trmetaid->TrMeta
message BlockMeta {
    optional int32 blocknum = 40;
    optional bytes trmetaid = 50;
    optional bytes txmetaroot = 10;
    optional bytes pbstateid = 60;
    optional bytes prev = 20;
    optional bytes next = 30;
}


message TxMeta {
    optional int32 blocknum = 10;
    optional int32 txnum = 20;
    optional TransType txtype = 40;
    optional Transaction tx = 50;
    optional string fantasy_name = 60;
    optional bytes id = 70;
    //optional SignedTransaction st = 30;
}


//gamemetaroot->MerkleTree<gamemetaid>
//datametaroot->MerkleTree<datametaid>
message TrMeta {
    optional int32 blocknum = 10;
    optional TrType type = 40;
    optional uint32 season = 50;
    optional uint32 week = 60;
    optional bytes gamemetaroot = 70;
    optional bytes datametaroot = 80;
    optional bytes txmetaid = 100;
}

message GameMeta {
    optional bytes txmetaid = 10;
    optional GameData gamedata = 20;
}

message DataMeta {
    optional bytes txmetaid = 10;
    optional Data data = 20;
}

//LeaderBoardMeta - State of all players and balances
//LeaderBoardMetaId -> LeaderBoardMeta
//fnbalmetaroot -> MerkleTree<fnbalmetaid>
message LeaderBoardMeta {
    //optional GlobalState global = 10;
    optional uint32 week = 10;
    optional bytes fnbalmetaroot = 20;
    optional bytes prev = 30;
    optional bytes next = 40;
}

// FantasyNameBalMeta -> current balance as of trmetaid
//      list of all awards and pnl from this trmetaid / txmetaid
//awardmetaroot ->  MerkleTree<awardmetaid> - many players 1 fname
//pnlmetaroot -> MerkleTree<pnlmetaroot> - many players 1 fname
message FantasyNameBalMeta {
    optional bytes txmetaid = 10;
    optional bytes trmetaid = 20;
    //optional FantasyNameBal fnamebal = 30;
    optional string name = 25;
    optional string public_key = 30;
    optional uint64 bits = 35;
    optional int64 stake = 40;
    optional int32 block = 41;
    optional int32 count = 42;
    optional uint64 nonce = 45;
    optional bytes awardmetaroot = 50;
    optional bytes pnlmetaroot = 60;
    optional bytes prev = 70;
    optional bytes next = 80;
}

//FantasyNameState - state of Fname
//  positions - open positions
//  orders - openorders
//  proj - ope projections
message FantasyNameState {
    optional string name = 1;
    optional bytes fantasynamebalmetaid = 10;
    optional bytes posmetaroot = 20;
    optional bytes ordersmetaroot = 30;
    optional bytes projmetaroot = 40;
    optional bytes prev = 70;
    optional bytes next = 80;
    optional bytes txmetaid = 50;
}


 //   optional bytes projmetaroot = 31;
 //   optional bytes ingame = 32;



//gameresultmetaroot -> MerkleTree<gameresultmetaid>
//gameresultmetaid -> GameResultsMeta
//ingameprojmetaroot -> MerkleTree<InGameProjMetaroot>
//gameprojmetaid -> GameProjMeta
//opengamestatusroot -> MerkleTree<GameStatusMeta>
//
message WeekGameStatusMeta {
    optional uint32 week = 10;
    optional bytes gameresultmetaroot = 20;
    optional bytes ingameprojmetaroot = 30;
    optional bytes opengamestatusroot = 40;
    optional bytes prev = 50;
    optional bytes next = 60;
}

//gamestatusmetaid -> gamestatusmeta
//homeresultmeta -> teamresultmetaid
//awayresultmeta -> teamresultmetaid
message InGameProjMeta {
    //optional uint32 week = 10;
    optional string gameid = 20;
    optional bytes gamestatusmetaid = 40;
    optional bytes homeprojmeta = 60;
    optional bytes awayprojmeta = 70;
    optional bytes gamedatametaid = 50; //GateData (INGAME)
}


//gamestatusmetaid -> gamestatusmeta
//homeresultmeta -> teamresultmetaid
//awayresultmeta -> teamresultmetaid
message GameResultsMeta {
    //optional uint32 week = 10;
    optional string gameid = 20;
    optional bytes gamestatusmetaid = 40;
    optional bytes homeresultmeta = 60;
    optional bytes awayresultmeta = 70;
    optional bytes resultdatametaid = 50; //DataMeta (ResultData)
}

//gamemetaid->GameMeta
//datametaid->DataMeta
message GameStatusMeta {
    optional string id = 1;
    optional int32 week = 2;
    optional GameInfo gameinfo = 10;
    optional GameStatus gamesatus = 20;
    optional bytes gamemetaid = 30;
    optional bytes datametaid = 40;
    optional bytes prev = 50;
    optional bytes next = 60;
    optional int32 season = 70;
}

//playerprojmetaroot -> MerkleTree<GamePlayerProjMeta>
message TeamProjMeta {
    optional string gameid = 20;
    optional string team = 30;
    optional uint32 kickofftime = 40;
    optional uint32 week = 50;
    optional bytes gameplayerprojmetaroot = 60;
    optional bytes gamedatametaid = 70;
}

//playerresultmetaroot -> MerkleTree<PlayerResultMetaId>
message TeamResultMeta {
    optional string gameid = 20;
    optional string team = 30;
    optional uint32 kickofftime = 40;
    optional uint32 week = 50;
    optional bytes playerresultmetaroot = 60;
    optional bytes resultdatametaid = 70;
}

//gamestatusmetaid -> gamestatusmeta
//projmetaplayerroot -> MerkleTree<projmetaplayer> - 1 player many fnames
//posmetaplayerroot -> MerkleTree<posmetaplayer> - 1 player many fnames
message GamePlayerProjMeta {
    optional string playerid = 20;
    optional bytes gamestatusmetaid = 30;
    optional bytes projmetaplayerroot = 60;
    optional bytes posmetaplayerroot = 70;
    optional bytes gamedatametaid = 80;
}

//projmetaid -> ProjMeta
message ProjMeta {
    optional string name = 10;
    optional int32 proj = 20;
    optional string playerid = 30;
    optional bytes txmetaid = 40;
    optional bytes prev = 50;
}

//fantasybitposmetaid -> FantasyBitPosMeta
message PosMeta {
    optional string name = 10;
    optional int32 qty = 20;
    optional int32 price = 30;
    optional string playerid = 40;
    optional bytes txmetaid = 50;
    optional bytes prev = 60;
}

//gamestatusmetaid -> gamestatusmeta
//awardmetaplayerroot -> MerkleTree<AwardMetaId> - 1 player many fnames
//pnlmetaplayerroot -> MerkleTree<PnlMetaId> - 1 player many fnames
message PlayerResultMeta {
    optional bytes playergamestatsid = 10;
    optional bytes gamestatusmetaid = 30;
    optional bytes awardmetaplayerroot = 60;
    optional bytes pnlmetaplayerroot = 70;
    optional bytes resultdatametaid = 80;
}

message PlayerGameStats {
    optional string playerid = 20;
    optional float result = 40;
    optional Stats stats = 50;
    optional string gameid = 60;
}

//projmetaid -> FantasyBitProjMeta
message AwardMeta {
    optional string name = 10;
    optional int32 proj = 20;
    optional uint64 award = 30;
    optional bytes projmetaid = 40;
    optional bytes playergamestatsid = 50;
}

message PnlMeta {
    optional string name = 10;
    optional int32 qty = 20;
    optional int32 price = 30;
    optional int64 pnl = 40;
    optional bytes posmetaid = 50;
    optional bytes playergamestatsid = 60;
}

message PlayerMarketState {
    optional bytes limitbookmetaid = 10;
    optional string playerid = 20;
    optional bytes marketticmetaid = 30;
    optional bool  locked = 31;
    optional bytes prev = 40;
    optional bytes next = 50;
}

message LimitBookMeta {
    optional int32 bid = 10;
    optional int32 bidsize = 20;
    optional int32 asksize = 30;
    optional int32 ask = 40;
    optional bytes bidordermetaroot = 50;
    optional bytes askordermetaroot = 60;
}

//message InsideBookMeta {
//    optional int32 totsize = 10;
//    optional bytes orderidroot = 20;
//}

message MarketTicMeta {
    optional int32 price = 20;
    optional int32 size  = 30;
    optional bytes orderfillhead = 40;
    optional bytes prev = 50;
}

message OrderMeta {
    optional int32 refnum = 1;
    optional string fname = 10;
    optional string playerid = 20;
    optional bool buyside = 30;
    optional int32 size = 40;
    optional int32 price = 50;
    optional bytes txmetaid = 60;
    optional bytes orderfillmetaid = 70;
    optional int32 timestamp = 75;
    optional bytes prev = 80;
}

message OrderFillMeta {
    optional int32 refnum = 1;
    optional string fname = 10;
    optional string playerid = 15;
    optional int32 fillprice = 20;
    optional int32 fillsize = 30;
    optional bool buyside = 35;
    optional uint64 timestamp = 40;
    optional bytes txmetaid = 60;
    optional bytes prev = 70;
}

//======================================
message GlobalStateMeta {
    optional GlobalState globalstate = 10;
    optional bytes trmetaid = 20;
    optional bytes prev = 30;
    optional bytes next = 40;
}

//message ScheduleStateId {
//    optional bytes weekgamestatusmetaroot = 10;
//}

//playermetaid -> playermeta
//playermetaidroot -> MerkleTree<playermetaid>
message PlayerMeta {
    optional string playerid = 10;
    optional PlayerBase player_base = 20;
    optional PlayerStatus player_status = 30;
    optional bytes datametaid = 40;
    optional bytes prev = 50;
}

//teammetaid -> teammeta
//teammetaidroot -> MerkleTree<teammetaid>
//playermetaidroot -> MerkleTree<playermetaid>
message TeamMeta {
    optional string teamid = 10;
    optional bytes playermetaidroot = 20;
    optional bytes prev = 30;
}

//WeekGameStatusMeta
message pbstate {
    optional bytes schedulestateid = 10; //WeekGameStatusMetaRoot
    optional bytes leaderboardstateid = 20; //LeaderBoardMetaId
    optional bytes projstateid = 30; //ProjMetaroot
    optional bytes posstateid = 35; //ProjMetaroot
    optional bytes orderstateid = 40; //OrderMetaRoot
    optional bytes marketstateid = 50; //PlayerMarketStateRoot
    optional bytes globalstateid = 60; //GlobalStateMetaId
    optional bytes teamstatemid = 70; //teammetaroot
    optional bytes fantasynamestateid = 80; //FantasyNameState
}

//======================================

/*
message PlayerFnameMeta {
    optional string playerid = 10;
    optional bytes fnameid = 20;
    optional uint32 week = 30;
}

message PlayerWeek {
    optional string playerid = 10;
    optional uint32 week = 30;
}

message FnameWeek {
    optional bytes fnameid = 10;
    optional uint32 week = 30;
}


//txmetaid -> TxMeta
message FantasyBitProjMeta {
    optional FantasyBitProj fantasybitproj = 10;
    optional bytes txmetaid = 20;
    optional uint32 week = 30;
    optional bytes prev = 40;
    optional bytes next = 50;
}

//gamestatusmetaid -> gamestatusmeta
message GameProjMeta {
    //optional uint32 week = 10;
    optional string gameid = 20;
    optional bytes gamestatusmetaid = 40;
    optional GameFantasyBitProj gameproj = 30;
}



//message BlockTxId {} -> MerkleTree { leaves -> txids }

message TxTree {
        //repeated Tx tx = 20;
}

message BlockState {
    //optional bytes txroot = 10;
    optional bytes txstateid = 20;
    optional bytes trstateid = 30;
}

message tstate {
    repeated bytes schedulestateid = 10;
    repeated bytes playerstateid = 20;
    repeated bytes fnamestateid = 30;
    optional bytes globalstateid = 40;
}

message PlayerDataState {
    optional PlayerData playerdata = 10;
    optional bytes playertxhead = 20;
}

message PlayerDataId {
    optional bytes prev = 10;
}

//message FantasyNameState {
//	optional FantasyNameBal fname_bal = 10;
//	optional bytes fnamehead = 20;
//}

message FantasyNameChain {
    optional bytes prev = 10;
}

message EndState {
        optional bytes statedataid = 10;
        repeated bytes stateroot = 20;
}

message StateRoot {
    optional bytes left = 10;
    optional bytes right = 20;
}

*/


message MerkleTree {
        optional bytes root = 10;
        repeated bytes leaves = 20;
}

message NewPlayerModel {
    repeated PlayerMeta players = 10;
}


enum CType {
    NONE = 0;
    CHECKNAME = 1;
    NEWTX = 2;
    PK2FNAME = 3;
    GETSTATUS = 4;
    GETALLNAMES = 5;
    GETROWMARKET = 6;
    GETDEPTH = 7;
    GETORDERS = 8;
    GETPOSITIONS = 9;
    SUBSCRIBEFNAME = 10;
    GETGLOBALSTATE = 11;
    GETSCHEDULE = 12;
    GETGAMEROSTER = 13;
//    GETAVGPROJECTION = 14;
    GETPROJECTIONS = 15;
    GETGAMESTART = 16;

//    GETORDERS = 11;
}

//message WsReq {
//    optional CType ctype = 1;
//    repeated string data = 10;
//}

//message WSReply {
//    optional CType ctype = 1;
//    repeated string data = 10;
//    optional WsReq req = 20;
//}

message WsReq {
    optional int32 version = 1;
    optional CType ctype = 2;

    extensions 100 to max;
}

message WSReply {
    optional int32 version = 1;
    optional CType ctype = 2;
    optional WsReq req = 20;
    optional string data = 30;

    extensions 100 to max;
}

message GetGlobalStateRep {
    extend WSReply {
        optional GetGlobalStateRep rep = 900;
    }

    optional GlobalState globalstate = 10;
}

message GetScheduleRep {
    extend WSReply {
        optional GetScheduleRep rep = 910;
    }

    optional ScheduleData scheduledata = 10;
}


message CheckNameReq {
    extend WsReq {
        optional CheckNameReq req = 200;
    }

    optional string fantasy_name = 10;
}

message CheckNameRep {
    extend WSReply {
        optional CheckNameRep rep = 200;
    }

    optional string isavail = 10;
    optional CheckNameReq req = 20;
}

message Pk2FnameReq {
    extend WsReq {
        optional Pk2FnameReq req = 300;
    }

    optional string pk = 10;
}

message Pk2FnameRep {
    extend WSReply {
        optional Pk2FnameRep rep = 300;
    }

    optional string fname = 10;
    optional Pk2FnameReq req = 20;
    optional FantasyNameBal fnb = 30;
}

message SubscribeReq {
    extend WsReq {
        optional SubscribeReq req = 350;
    }

    optional string name = 10;
    optional uint64 fchash = 30;
}

message NameStatusReq {
    extend WsReq {
        optional NameStatusReq req = 400;
    }

    optional string name = 10;
    optional string pk = 20;
}

message NameStatusRep {
    extend WSReply {
        optional NameStatusRep rep = 400;
    }

    optional MyNameStatus status = 10;
    optional NameStatusReq req = 20;
}

message GetAllNamesRep {
    extend WSReply {
        optional GetAllNamesRep rep = 500;
    }

    repeated string names = 10;
    repeated FantasyNameBal fnb = 20;
}


message TeamRoster {
    optional string teamid = 10;
    repeated PlayerData players = 20;
}

message GameDataRoster {
    optional GameData game_data = 10;
    optional TeamRoster homeroster = 20;
    optional TeamRoster awayroster = 30;
}

message GetCurrRostersRep {
    extend WSReply {
        optional GetCurrRostersRep rep = 920;
    }

    optional int32 week = 10;
    repeated GameDataRoster gamerosters = 20;
}

message ROWMarket {
    optional string pid = 10;
    optional MarketQuote quote = 30;
    optional PlayerData playerdata = 40;
    optional ContractOHLC ohlc = 50;
}

message GetROWMarketRep {
    extend WSReply {
        optional GetROWMarketRep rep = 600;
    }

    repeated ROWMarket rowmarket = 10;
}

message GetDepthReq {
    extend WsReq {
        optional GetDepthReq req = 700;
    }

    optional string pid = 10;
}

message GetDepthRep {
    extend WSReply {
        optional GetDepthRep rep = 700;
    }

    optional string pid = 10;
    repeated DepthItem depthitems = 20;
    optional ROWMarket rowmarket = 30;
}

message AllOdersSymbol {
    optional string symbol = 10;
    optional int32 netqty = 30;
    optional int32 netprice = 40;
    optional double avg = 50;
    optional double pnl = 60;
    repeated Order orders = 20;
}

message AllOdersFname {
    optional string fname = 10;
    repeated AllOdersSymbol pidorders = 20;
}

message GetOrdersRep {
    extend WSReply {
        optional GetOrdersRep rep = 800;
    }

    optional GetOrdersReq req = 10;
    optional AllOdersFname oorders = 20;
}

message GetOrdersReq {
    extend WsReq {
        optional GetOrdersReq req = 800;
    }

    optional string symbol = 10;
    optional string fname = 20;
    optional uint64 fchash = 30;
}


message GetProjectionReq {
    extend WsReq {
        optional GetProjectionReq req = 900;
    }

    optional string fname = 20;
    optional bool getavg = 30;
}

message PlayerProj {
    optional string playerid = 10;
    optional int32 proj = 20;
}
message ProjByName {
    optional string name = 10;
    repeated PlayerProj playerproj = 20;
    optional int32 count = 40;
    optional int32 block = 50;
}

message GetProjectionRep {
    extend WSReply {
        optional GetProjectionRep rep = 940;
    }

    optional ProjByName projs = 20;
    optional ProjByName avg = 30;
}


message KeyValue {
    optional bytes key = 10;
    optional bytes value = 20;
}

message Bootstrap {
    optional string key = 1;
    optional int32 blocknum = 2;
    optional int32 week = 3;
    optional int32 season = 4;
    optional bytes gamemetaroot = 10;
    optional bytes playermetaroot = 20;
    optional bytes fnamemetaroot = 30;
    optional bytes previd = 40;
    optional bytes gameresultroot = 50;
    optional bytes posmetaroot = 60;
}
